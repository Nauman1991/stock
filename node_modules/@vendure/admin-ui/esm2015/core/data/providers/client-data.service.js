import { GET_NEWTORK_STATUS, GET_UI_STATE, GET_USER_STATUS, REQUEST_COMPLETED, REQUEST_STARTED, SET_ACTIVE_CHANNEL, SET_AS_LOGGED_IN, SET_AS_LOGGED_OUT, SET_CONTENT_LANGUAGE, SET_UI_LANGUAGE, SET_UI_THEME, UPDATE_USER_CHANNELS, } from '../definitions/client-definitions';
/**
 * Note: local queries all have a fetch-policy of "cache-first" explicitly specified due to:
 * https://github.com/apollographql/apollo-link-state/issues/236
 */
export class ClientDataService {
    constructor(baseDataService) {
        this.baseDataService = baseDataService;
    }
    startRequest() {
        return this.baseDataService.mutate(REQUEST_STARTED);
    }
    completeRequest() {
        return this.baseDataService.mutate(REQUEST_COMPLETED);
    }
    getNetworkStatus() {
        return this.baseDataService.query(GET_NEWTORK_STATUS, {}, 'cache-first');
    }
    loginSuccess(username, activeChannelId, channels) {
        return this.baseDataService.mutate(SET_AS_LOGGED_IN, {
            input: {
                username,
                loginTime: Date.now().toString(),
                activeChannelId,
                channels,
            },
        });
    }
    logOut() {
        return this.baseDataService.mutate(SET_AS_LOGGED_OUT);
    }
    userStatus() {
        return this.baseDataService.query(GET_USER_STATUS, {}, 'cache-first');
    }
    uiState() {
        return this.baseDataService.query(GET_UI_STATE, {}, 'cache-first');
    }
    setUiLanguage(languageCode) {
        return this.baseDataService.mutate(SET_UI_LANGUAGE, {
            languageCode,
        });
    }
    setContentLanguage(languageCode) {
        return this.baseDataService.mutate(SET_CONTENT_LANGUAGE, {
            languageCode,
        });
    }
    setUiTheme(theme) {
        return this.baseDataService.mutate(SET_UI_THEME, {
            theme,
        });
    }
    setActiveChannel(channelId) {
        return this.baseDataService.mutate(SET_ACTIVE_CHANNEL, {
            channelId,
        });
    }
    updateUserChannels(channels) {
        return this.baseDataService.mutate(UPDATE_USER_CHANNELS, {
            channels,
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpZW50LWRhdGEuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9saWIvY29yZS9zcmMvZGF0YS9wcm92aWRlcnMvY2xpZW50LWRhdGEuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFnQkEsT0FBTyxFQUNILGtCQUFrQixFQUNsQixZQUFZLEVBQ1osZUFBZSxFQUNmLGlCQUFpQixFQUNqQixlQUFlLEVBQ2Ysa0JBQWtCLEVBQ2xCLGdCQUFnQixFQUNoQixpQkFBaUIsRUFDakIsb0JBQW9CLEVBQ3BCLGVBQWUsRUFDZixZQUFZLEVBQ1osb0JBQW9CLEdBQ3ZCLE1BQU0sbUNBQW1DLENBQUM7QUFJM0M7OztHQUdHO0FBQ0gsTUFBTSxPQUFPLGlCQUFpQjtJQUMxQixZQUFvQixlQUFnQztRQUFoQyxvQkFBZSxHQUFmLGVBQWUsQ0FBaUI7SUFBRyxDQUFDO0lBRXhELFlBQVk7UUFDUixPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUEwQixlQUFlLENBQUMsQ0FBQztJQUNqRixDQUFDO0lBRUQsZUFBZTtRQUNYLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQTRCLGlCQUFpQixDQUFDLENBQUM7SUFDckYsQ0FBQztJQUVELGdCQUFnQjtRQUNaLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQXlCLGtCQUFrQixFQUFFLEVBQUUsRUFBRSxhQUFhLENBQUMsQ0FBQztJQUNyRyxDQUFDO0lBRUQsWUFBWSxDQUFDLFFBQWdCLEVBQUUsZUFBdUIsRUFBRSxRQUE4QjtRQUNsRixPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUM5QixnQkFBZ0IsRUFDaEI7WUFDSSxLQUFLLEVBQUU7Z0JBQ0gsUUFBUTtnQkFDUixTQUFTLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLFFBQVEsRUFBRTtnQkFDaEMsZUFBZTtnQkFDZixRQUFRO2FBQ1g7U0FDSixDQUNKLENBQUM7SUFDTixDQUFDO0lBRUQsTUFBTTtRQUNGLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsQ0FBQztJQUMxRCxDQUFDO0lBRUQsVUFBVTtRQUNOLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQXNCLGVBQWUsRUFBRSxFQUFFLEVBQUUsYUFBYSxDQUFDLENBQUM7SUFDL0YsQ0FBQztJQUVELE9BQU87UUFDSCxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFtQixZQUFZLEVBQUUsRUFBRSxFQUFFLGFBQWEsQ0FBQyxDQUFDO0lBQ3pGLENBQUM7SUFFRCxhQUFhLENBQUMsWUFBMEI7UUFDcEMsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBa0QsZUFBZSxFQUFFO1lBQ2pHLFlBQVk7U0FDZixDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQsa0JBQWtCLENBQUMsWUFBMEI7UUFDekMsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FDOUIsb0JBQW9CLEVBQ3BCO1lBQ0ksWUFBWTtTQUNmLENBQ0osQ0FBQztJQUNOLENBQUM7SUFFRCxVQUFVLENBQUMsS0FBYTtRQUNwQixPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUE0QyxZQUFZLEVBQUU7WUFDeEYsS0FBSztTQUNSLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRCxnQkFBZ0IsQ0FBQyxTQUFpQjtRQUM5QixPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUM5QixrQkFBa0IsRUFDbEI7WUFDSSxTQUFTO1NBQ1osQ0FDSixDQUFDO0lBQ04sQ0FBQztJQUVELGtCQUFrQixDQUFDLFFBQW1DO1FBQ2xELE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQzlCLG9CQUFvQixFQUNwQjtZQUNJLFFBQVE7U0FDWCxDQUNKLENBQUM7SUFDTixDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gICAgQ3VycmVudFVzZXJDaGFubmVsLFxyXG4gICAgQ3VycmVudFVzZXJDaGFubmVsSW5wdXQsXHJcbiAgICBHZXROZXR3b3JrU3RhdHVzLFxyXG4gICAgR2V0VWlTdGF0ZSxcclxuICAgIEdldFVzZXJTdGF0dXMsXHJcbiAgICBMYW5ndWFnZUNvZGUsXHJcbiAgICBSZXF1ZXN0Q29tcGxldGVkLFxyXG4gICAgUmVxdWVzdFN0YXJ0ZWQsXHJcbiAgICBTZXRBY3RpdmVDaGFubmVsLFxyXG4gICAgU2V0QXNMb2dnZWRJbixcclxuICAgIFNldENvbnRlbnRMYW5ndWFnZSxcclxuICAgIFNldFVpTGFuZ3VhZ2UsXHJcbiAgICBTZXRVaVRoZW1lLFxyXG4gICAgVXBkYXRlVXNlckNoYW5uZWxzLFxyXG59IGZyb20gJy4uLy4uL2NvbW1vbi9nZW5lcmF0ZWQtdHlwZXMnO1xyXG5pbXBvcnQge1xyXG4gICAgR0VUX05FV1RPUktfU1RBVFVTLFxyXG4gICAgR0VUX1VJX1NUQVRFLFxyXG4gICAgR0VUX1VTRVJfU1RBVFVTLFxyXG4gICAgUkVRVUVTVF9DT01QTEVURUQsXHJcbiAgICBSRVFVRVNUX1NUQVJURUQsXHJcbiAgICBTRVRfQUNUSVZFX0NIQU5ORUwsXHJcbiAgICBTRVRfQVNfTE9HR0VEX0lOLFxyXG4gICAgU0VUX0FTX0xPR0dFRF9PVVQsXHJcbiAgICBTRVRfQ09OVEVOVF9MQU5HVUFHRSxcclxuICAgIFNFVF9VSV9MQU5HVUFHRSxcclxuICAgIFNFVF9VSV9USEVNRSxcclxuICAgIFVQREFURV9VU0VSX0NIQU5ORUxTLFxyXG59IGZyb20gJy4uL2RlZmluaXRpb25zL2NsaWVudC1kZWZpbml0aW9ucyc7XHJcblxyXG5pbXBvcnQgeyBCYXNlRGF0YVNlcnZpY2UgfSBmcm9tICcuL2Jhc2UtZGF0YS5zZXJ2aWNlJztcclxuXHJcbi8qKlxyXG4gKiBOb3RlOiBsb2NhbCBxdWVyaWVzIGFsbCBoYXZlIGEgZmV0Y2gtcG9saWN5IG9mIFwiY2FjaGUtZmlyc3RcIiBleHBsaWNpdGx5IHNwZWNpZmllZCBkdWUgdG86XHJcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9hcG9sbG9ncmFwaHFsL2Fwb2xsby1saW5rLXN0YXRlL2lzc3Vlcy8yMzZcclxuICovXHJcbmV4cG9ydCBjbGFzcyBDbGllbnREYXRhU2VydmljZSB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGJhc2VEYXRhU2VydmljZTogQmFzZURhdGFTZXJ2aWNlKSB7fVxyXG5cclxuICAgIHN0YXJ0UmVxdWVzdCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5iYXNlRGF0YVNlcnZpY2UubXV0YXRlPFJlcXVlc3RTdGFydGVkLk11dGF0aW9uPihSRVFVRVNUX1NUQVJURUQpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbXBsZXRlUmVxdWVzdCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5iYXNlRGF0YVNlcnZpY2UubXV0YXRlPFJlcXVlc3RDb21wbGV0ZWQuTXV0YXRpb24+KFJFUVVFU1RfQ09NUExFVEVEKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXROZXR3b3JrU3RhdHVzKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmJhc2VEYXRhU2VydmljZS5xdWVyeTxHZXROZXR3b3JrU3RhdHVzLlF1ZXJ5PihHRVRfTkVXVE9SS19TVEFUVVMsIHt9LCAnY2FjaGUtZmlyc3QnKTtcclxuICAgIH1cclxuXHJcbiAgICBsb2dpblN1Y2Nlc3ModXNlcm5hbWU6IHN0cmluZywgYWN0aXZlQ2hhbm5lbElkOiBzdHJpbmcsIGNoYW5uZWxzOiBDdXJyZW50VXNlckNoYW5uZWxbXSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmJhc2VEYXRhU2VydmljZS5tdXRhdGU8U2V0QXNMb2dnZWRJbi5NdXRhdGlvbiwgU2V0QXNMb2dnZWRJbi5WYXJpYWJsZXM+KFxyXG4gICAgICAgICAgICBTRVRfQVNfTE9HR0VEX0lOLFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpbnB1dDoge1xyXG4gICAgICAgICAgICAgICAgICAgIHVzZXJuYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgIGxvZ2luVGltZTogRGF0ZS5ub3coKS50b1N0cmluZygpLFxyXG4gICAgICAgICAgICAgICAgICAgIGFjdGl2ZUNoYW5uZWxJZCxcclxuICAgICAgICAgICAgICAgICAgICBjaGFubmVscyxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBsb2dPdXQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYmFzZURhdGFTZXJ2aWNlLm11dGF0ZShTRVRfQVNfTE9HR0VEX09VVCk7XHJcbiAgICB9XHJcblxyXG4gICAgdXNlclN0YXR1cygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5iYXNlRGF0YVNlcnZpY2UucXVlcnk8R2V0VXNlclN0YXR1cy5RdWVyeT4oR0VUX1VTRVJfU1RBVFVTLCB7fSwgJ2NhY2hlLWZpcnN0Jyk7XHJcbiAgICB9XHJcblxyXG4gICAgdWlTdGF0ZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5iYXNlRGF0YVNlcnZpY2UucXVlcnk8R2V0VWlTdGF0ZS5RdWVyeT4oR0VUX1VJX1NUQVRFLCB7fSwgJ2NhY2hlLWZpcnN0Jyk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0VWlMYW5ndWFnZShsYW5ndWFnZUNvZGU6IExhbmd1YWdlQ29kZSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmJhc2VEYXRhU2VydmljZS5tdXRhdGU8U2V0VWlMYW5ndWFnZS5NdXRhdGlvbiwgU2V0VWlMYW5ndWFnZS5WYXJpYWJsZXM+KFNFVF9VSV9MQU5HVUFHRSwge1xyXG4gICAgICAgICAgICBsYW5ndWFnZUNvZGUsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0Q29udGVudExhbmd1YWdlKGxhbmd1YWdlQ29kZTogTGFuZ3VhZ2VDb2RlKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYmFzZURhdGFTZXJ2aWNlLm11dGF0ZTxTZXRDb250ZW50TGFuZ3VhZ2UuTXV0YXRpb24sIFNldENvbnRlbnRMYW5ndWFnZS5WYXJpYWJsZXM+KFxyXG4gICAgICAgICAgICBTRVRfQ09OVEVOVF9MQU5HVUFHRSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbGFuZ3VhZ2VDb2RlLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0VWlUaGVtZSh0aGVtZTogc3RyaW5nKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYmFzZURhdGFTZXJ2aWNlLm11dGF0ZTxTZXRVaVRoZW1lLk11dGF0aW9uLCBTZXRVaVRoZW1lLlZhcmlhYmxlcz4oU0VUX1VJX1RIRU1FLCB7XHJcbiAgICAgICAgICAgIHRoZW1lLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHNldEFjdGl2ZUNoYW5uZWwoY2hhbm5lbElkOiBzdHJpbmcpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5iYXNlRGF0YVNlcnZpY2UubXV0YXRlPFNldEFjdGl2ZUNoYW5uZWwuTXV0YXRpb24sIFNldEFjdGl2ZUNoYW5uZWwuVmFyaWFibGVzPihcclxuICAgICAgICAgICAgU0VUX0FDVElWRV9DSEFOTkVMLFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBjaGFubmVsSWQsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVVc2VyQ2hhbm5lbHMoY2hhbm5lbHM6IEN1cnJlbnRVc2VyQ2hhbm5lbElucHV0W10pIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5iYXNlRGF0YVNlcnZpY2UubXV0YXRlPFVwZGF0ZVVzZXJDaGFubmVscy5NdXRhdGlvbiwgVXBkYXRlVXNlckNoYW5uZWxzLlZhcmlhYmxlcz4oXHJcbiAgICAgICAgICAgIFVQREFURV9VU0VSX0NIQU5ORUxTLFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBjaGFubmVscyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICApO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==