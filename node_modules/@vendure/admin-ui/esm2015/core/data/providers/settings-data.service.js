import { pick } from '@vendure/common/lib/pick';
import { JobState, } from '../../common/generated-types';
import { ADD_MEMBERS_TO_ZONE, CANCEL_JOB, CREATE_CHANNEL, CREATE_COUNTRY, CREATE_PAYMENT_METHOD, CREATE_TAX_CATEGORY, CREATE_TAX_RATE, CREATE_ZONE, DELETE_CHANNEL, DELETE_COUNTRY, DELETE_PAYMENT_METHOD, DELETE_TAX_CATEGORY, DELETE_TAX_RATE, DELETE_ZONE, GET_ACTIVE_CHANNEL, GET_AVAILABLE_COUNTRIES, GET_CHANNEL, GET_CHANNELS, GET_COUNTRY, GET_COUNTRY_LIST, GET_GLOBAL_SETTINGS, GET_JOBS_BY_ID, GET_JOBS_LIST, GET_JOB_INFO, GET_JOB_QUEUE_LIST, GET_PAYMENT_METHOD, GET_PAYMENT_METHOD_LIST, GET_PAYMENT_METHOD_OPERATIONS, GET_TAX_CATEGORIES, GET_TAX_CATEGORY, GET_TAX_RATE, GET_TAX_RATE_LIST, GET_ZONES, REMOVE_MEMBERS_FROM_ZONE, UPDATE_CHANNEL, UPDATE_COUNTRY, UPDATE_GLOBAL_SETTINGS, UPDATE_PAYMENT_METHOD, UPDATE_TAX_CATEGORY, UPDATE_TAX_RATE, UPDATE_ZONE, } from '../definitions/settings-definitions';
export class SettingsDataService {
    constructor(baseDataService) {
        this.baseDataService = baseDataService;
    }
    getCountries(take = 10, skip = 0, filterTerm) {
        return this.baseDataService.query(GET_COUNTRY_LIST, {
            options: {
                take,
                skip,
                filter: {
                    name: filterTerm ? { contains: filterTerm } : null,
                },
            },
        });
    }
    getAvailableCountries() {
        return this.baseDataService.query(GET_AVAILABLE_COUNTRIES);
    }
    getCountry(id) {
        return this.baseDataService.query(GET_COUNTRY, { id });
    }
    createCountry(input) {
        return this.baseDataService.mutate(CREATE_COUNTRY, {
            input: pick(input, ['code', 'enabled', 'translations']),
        });
    }
    updateCountry(input) {
        return this.baseDataService.mutate(UPDATE_COUNTRY, {
            input: pick(input, ['id', 'code', 'enabled', 'translations']),
        });
    }
    deleteCountry(id) {
        return this.baseDataService.mutate(DELETE_COUNTRY, {
            id,
        });
    }
    getZones() {
        return this.baseDataService.query(GET_ZONES);
    }
    getZone(id) {
        return this.baseDataService.query(GET_ZONES, { id });
    }
    createZone(input) {
        return this.baseDataService.mutate(CREATE_ZONE, {
            input,
        });
    }
    updateZone(input) {
        return this.baseDataService.mutate(UPDATE_ZONE, {
            input,
        });
    }
    deleteZone(id) {
        return this.baseDataService.mutate(DELETE_ZONE, {
            id,
        });
    }
    addMembersToZone(zoneId, memberIds) {
        return this.baseDataService.mutate(ADD_MEMBERS_TO_ZONE, {
            zoneId,
            memberIds,
        });
    }
    removeMembersFromZone(zoneId, memberIds) {
        return this.baseDataService.mutate(REMOVE_MEMBERS_FROM_ZONE, {
            zoneId,
            memberIds,
        });
    }
    getTaxCategories() {
        return this.baseDataService.query(GET_TAX_CATEGORIES);
    }
    getTaxCategory(id) {
        return this.baseDataService.query(GET_TAX_CATEGORY, {
            id,
        });
    }
    createTaxCategory(input) {
        return this.baseDataService.mutate(CREATE_TAX_CATEGORY, {
            input,
        });
    }
    updateTaxCategory(input) {
        return this.baseDataService.mutate(UPDATE_TAX_CATEGORY, {
            input,
        });
    }
    deleteTaxCategory(id) {
        return this.baseDataService.mutate(DELETE_TAX_CATEGORY, {
            id,
        });
    }
    getTaxRates(take = 10, skip = 0, fetchPolicy) {
        return this.baseDataService.query(GET_TAX_RATE_LIST, {
            options: {
                take,
                skip,
            },
        }, fetchPolicy);
    }
    getTaxRate(id) {
        return this.baseDataService.query(GET_TAX_RATE, {
            id,
        });
    }
    createTaxRate(input) {
        return this.baseDataService.mutate(CREATE_TAX_RATE, {
            input,
        });
    }
    updateTaxRate(input) {
        return this.baseDataService.mutate(UPDATE_TAX_RATE, {
            input,
        });
    }
    deleteTaxRate(id) {
        return this.baseDataService.mutate(DELETE_TAX_RATE, {
            id,
        });
    }
    getChannels() {
        return this.baseDataService.query(GET_CHANNELS);
    }
    getChannel(id) {
        return this.baseDataService.query(GET_CHANNEL, {
            id,
        });
    }
    getActiveChannel(fetchPolicy) {
        return this.baseDataService.query(GET_ACTIVE_CHANNEL, {}, fetchPolicy);
    }
    createChannel(input) {
        return this.baseDataService.mutate(CREATE_CHANNEL, {
            input,
        });
    }
    updateChannel(input) {
        return this.baseDataService.mutate(UPDATE_CHANNEL, {
            input,
        });
    }
    deleteChannel(id) {
        return this.baseDataService.mutate(DELETE_CHANNEL, {
            id,
        });
    }
    getPaymentMethods(take = 10, skip = 0) {
        return this.baseDataService.query(GET_PAYMENT_METHOD_LIST, {
            options: {
                skip,
                take,
            },
        });
    }
    getPaymentMethod(id) {
        return this.baseDataService.query(GET_PAYMENT_METHOD, {
            id,
        });
    }
    createPaymentMethod(input) {
        return this.baseDataService.mutate(CREATE_PAYMENT_METHOD, {
            input,
        });
    }
    updatePaymentMethod(input) {
        return this.baseDataService.mutate(UPDATE_PAYMENT_METHOD, {
            input,
        });
    }
    deletePaymentMethod(id, force) {
        return this.baseDataService.mutate(DELETE_PAYMENT_METHOD, {
            id,
            force,
        });
    }
    getPaymentMethodOperations() {
        return this.baseDataService.query(GET_PAYMENT_METHOD_OPERATIONS);
    }
    getGlobalSettings(fetchPolicy) {
        return this.baseDataService.query(GET_GLOBAL_SETTINGS, undefined, fetchPolicy);
    }
    updateGlobalSettings(input) {
        return this.baseDataService.mutate(UPDATE_GLOBAL_SETTINGS, {
            input,
        });
    }
    getJob(id) {
        return this.baseDataService.query(GET_JOB_INFO, { id });
    }
    pollJobs(ids) {
        return this.baseDataService.query(GET_JOBS_BY_ID, {
            ids,
        });
    }
    getAllJobs(options) {
        return this.baseDataService.query(GET_JOBS_LIST, {
            options,
        });
    }
    getJobQueues() {
        return this.baseDataService.query(GET_JOB_QUEUE_LIST);
    }
    getRunningJobs() {
        return this.baseDataService.query(GET_JOBS_LIST, {
            options: {
                filter: {
                    state: {
                        eq: JobState.RUNNING,
                    },
                },
            },
        });
    }
    cancelJob(id) {
        return this.baseDataService.mutate(CANCEL_JOB, {
            id,
        });
    }
}
//# sourceMappingURL=data:application/json;base64,