import { Injectable } from '@angular/core';
import { AdministratorDataService } from './administrator-data.service';
import { AuthDataService } from './auth-data.service';
import { BaseDataService } from './base-data.service';
import { ClientDataService } from './client-data.service';
import { CollectionDataService } from './collection-data.service';
import { CustomerDataService } from './customer-data.service';
import { FacetDataService } from './facet-data.service';
import { OrderDataService } from './order-data.service';
import { ProductDataService } from './product-data.service';
import { PromotionDataService } from './promotion-data.service';
import { SettingsDataService } from './settings-data.service';
import { ShippingMethodDataService } from './shipping-method-data.service';
export class DataService {
    constructor(baseDataService) {
        this.baseDataService = baseDataService;
        this.promotion = new PromotionDataService(baseDataService);
        this.administrator = new AdministratorDataService(baseDataService);
        this.auth = new AuthDataService(baseDataService);
        this.collection = new CollectionDataService(baseDataService);
        this.product = new ProductDataService(baseDataService);
        this.client = new ClientDataService(baseDataService);
        this.facet = new FacetDataService(baseDataService);
        this.order = new OrderDataService(baseDataService);
        this.settings = new SettingsDataService(baseDataService);
        this.customer = new CustomerDataService(baseDataService);
        this.shippingMethod = new ShippingMethodDataService(baseDataService);
    }
    /**
     * Perform a GraphQL query.
     */
    query(query, variables, fetchPolicy = 'cache-and-network') {
        return this.baseDataService.query(query, variables, fetchPolicy);
    }
    /**
     * Perform a GraphQL mutation.
     */
    mutate(mutation, variables, update) {
        return this.baseDataService.mutate(mutation, variables, update);
    }
}
DataService.decorators = [
    { type: Injectable }
];
DataService.ctorParameters = () => [
    { type: BaseDataService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi9jb3JlL3NyYy9kYXRhL3Byb3ZpZGVycy9kYXRhLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQU8zQyxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUN4RSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDdEQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzFELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ2xFLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQzlELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3hELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3hELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzVELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ2hFLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQzlELE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBRzNFLE1BQU0sT0FBTyxXQUFXO0lBYXBCLFlBQW9CLGVBQWdDO1FBQWhDLG9CQUFlLEdBQWYsZUFBZSxDQUFpQjtRQUNoRCxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksb0JBQW9CLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDM0QsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLHdCQUF3QixDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQ25FLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxlQUFlLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDakQsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLHFCQUFxQixDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQzdELElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxrQkFBa0IsQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUN2RCxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksaUJBQWlCLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDckQsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLGdCQUFnQixDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQ25ELElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxnQkFBZ0IsQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUNuRCxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksbUJBQW1CLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDekQsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLG1CQUFtQixDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQ3pELElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSx5QkFBeUIsQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUN6RSxDQUFDO0lBRUQ7O09BRUc7SUFDSCxLQUFLLENBQ0QsS0FBbUIsRUFDbkIsU0FBYSxFQUNiLGNBQXFDLG1CQUFtQjtRQUV4RCxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxTQUFTLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFDckUsQ0FBQztJQUVEOztPQUVHO0lBQ0gsTUFBTSxDQUNGLFFBQXNCLEVBQ3RCLFNBQWEsRUFDYixNQUE2QjtRQUU3QixPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDcEUsQ0FBQzs7O1lBaERKLFVBQVU7OztZQVhGLGVBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE11dGF0aW9uVXBkYXRlckZuLCBXYXRjaFF1ZXJ5RmV0Y2hQb2xpY3kgfSBmcm9tICdAYXBvbGxvL2NsaWVudC9jb3JlJztcclxuaW1wb3J0IHsgRG9jdW1lbnROb2RlIH0gZnJvbSAnZ3JhcGhxbCc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuXHJcbmltcG9ydCB7IFF1ZXJ5UmVzdWx0IH0gZnJvbSAnLi4vcXVlcnktcmVzdWx0JztcclxuXHJcbmltcG9ydCB7IEFkbWluaXN0cmF0b3JEYXRhU2VydmljZSB9IGZyb20gJy4vYWRtaW5pc3RyYXRvci1kYXRhLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBBdXRoRGF0YVNlcnZpY2UgfSBmcm9tICcuL2F1dGgtZGF0YS5zZXJ2aWNlJztcclxuaW1wb3J0IHsgQmFzZURhdGFTZXJ2aWNlIH0gZnJvbSAnLi9iYXNlLWRhdGEuc2VydmljZSc7XHJcbmltcG9ydCB7IENsaWVudERhdGFTZXJ2aWNlIH0gZnJvbSAnLi9jbGllbnQtZGF0YS5zZXJ2aWNlJztcclxuaW1wb3J0IHsgQ29sbGVjdGlvbkRhdGFTZXJ2aWNlIH0gZnJvbSAnLi9jb2xsZWN0aW9uLWRhdGEuc2VydmljZSc7XHJcbmltcG9ydCB7IEN1c3RvbWVyRGF0YVNlcnZpY2UgfSBmcm9tICcuL2N1c3RvbWVyLWRhdGEuc2VydmljZSc7XHJcbmltcG9ydCB7IEZhY2V0RGF0YVNlcnZpY2UgfSBmcm9tICcuL2ZhY2V0LWRhdGEuc2VydmljZSc7XHJcbmltcG9ydCB7IE9yZGVyRGF0YVNlcnZpY2UgfSBmcm9tICcuL29yZGVyLWRhdGEuc2VydmljZSc7XHJcbmltcG9ydCB7IFByb2R1Y3REYXRhU2VydmljZSB9IGZyb20gJy4vcHJvZHVjdC1kYXRhLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBQcm9tb3Rpb25EYXRhU2VydmljZSB9IGZyb20gJy4vcHJvbW90aW9uLWRhdGEuc2VydmljZSc7XHJcbmltcG9ydCB7IFNldHRpbmdzRGF0YVNlcnZpY2UgfSBmcm9tICcuL3NldHRpbmdzLWRhdGEuc2VydmljZSc7XHJcbmltcG9ydCB7IFNoaXBwaW5nTWV0aG9kRGF0YVNlcnZpY2UgfSBmcm9tICcuL3NoaXBwaW5nLW1ldGhvZC1kYXRhLnNlcnZpY2UnO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgRGF0YVNlcnZpY2Uge1xyXG4gICAgcHJvbW90aW9uOiBQcm9tb3Rpb25EYXRhU2VydmljZTtcclxuICAgIGFkbWluaXN0cmF0b3I6IEFkbWluaXN0cmF0b3JEYXRhU2VydmljZTtcclxuICAgIGF1dGg6IEF1dGhEYXRhU2VydmljZTtcclxuICAgIGNvbGxlY3Rpb246IENvbGxlY3Rpb25EYXRhU2VydmljZTtcclxuICAgIHByb2R1Y3Q6IFByb2R1Y3REYXRhU2VydmljZTtcclxuICAgIGNsaWVudDogQ2xpZW50RGF0YVNlcnZpY2U7XHJcbiAgICBmYWNldDogRmFjZXREYXRhU2VydmljZTtcclxuICAgIG9yZGVyOiBPcmRlckRhdGFTZXJ2aWNlO1xyXG4gICAgc2V0dGluZ3M6IFNldHRpbmdzRGF0YVNlcnZpY2U7XHJcbiAgICBjdXN0b21lcjogQ3VzdG9tZXJEYXRhU2VydmljZTtcclxuICAgIHNoaXBwaW5nTWV0aG9kOiBTaGlwcGluZ01ldGhvZERhdGFTZXJ2aWNlO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgYmFzZURhdGFTZXJ2aWNlOiBCYXNlRGF0YVNlcnZpY2UpIHtcclxuICAgICAgICB0aGlzLnByb21vdGlvbiA9IG5ldyBQcm9tb3Rpb25EYXRhU2VydmljZShiYXNlRGF0YVNlcnZpY2UpO1xyXG4gICAgICAgIHRoaXMuYWRtaW5pc3RyYXRvciA9IG5ldyBBZG1pbmlzdHJhdG9yRGF0YVNlcnZpY2UoYmFzZURhdGFTZXJ2aWNlKTtcclxuICAgICAgICB0aGlzLmF1dGggPSBuZXcgQXV0aERhdGFTZXJ2aWNlKGJhc2VEYXRhU2VydmljZSk7XHJcbiAgICAgICAgdGhpcy5jb2xsZWN0aW9uID0gbmV3IENvbGxlY3Rpb25EYXRhU2VydmljZShiYXNlRGF0YVNlcnZpY2UpO1xyXG4gICAgICAgIHRoaXMucHJvZHVjdCA9IG5ldyBQcm9kdWN0RGF0YVNlcnZpY2UoYmFzZURhdGFTZXJ2aWNlKTtcclxuICAgICAgICB0aGlzLmNsaWVudCA9IG5ldyBDbGllbnREYXRhU2VydmljZShiYXNlRGF0YVNlcnZpY2UpO1xyXG4gICAgICAgIHRoaXMuZmFjZXQgPSBuZXcgRmFjZXREYXRhU2VydmljZShiYXNlRGF0YVNlcnZpY2UpO1xyXG4gICAgICAgIHRoaXMub3JkZXIgPSBuZXcgT3JkZXJEYXRhU2VydmljZShiYXNlRGF0YVNlcnZpY2UpO1xyXG4gICAgICAgIHRoaXMuc2V0dGluZ3MgPSBuZXcgU2V0dGluZ3NEYXRhU2VydmljZShiYXNlRGF0YVNlcnZpY2UpO1xyXG4gICAgICAgIHRoaXMuY3VzdG9tZXIgPSBuZXcgQ3VzdG9tZXJEYXRhU2VydmljZShiYXNlRGF0YVNlcnZpY2UpO1xyXG4gICAgICAgIHRoaXMuc2hpcHBpbmdNZXRob2QgPSBuZXcgU2hpcHBpbmdNZXRob2REYXRhU2VydmljZShiYXNlRGF0YVNlcnZpY2UpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUGVyZm9ybSBhIEdyYXBoUUwgcXVlcnkuXHJcbiAgICAgKi9cclxuICAgIHF1ZXJ5PFQsIFYgPSBSZWNvcmQ8c3RyaW5nLCBhbnk+PihcclxuICAgICAgICBxdWVyeTogRG9jdW1lbnROb2RlLFxyXG4gICAgICAgIHZhcmlhYmxlcz86IFYsXHJcbiAgICAgICAgZmV0Y2hQb2xpY3k6IFdhdGNoUXVlcnlGZXRjaFBvbGljeSA9ICdjYWNoZS1hbmQtbmV0d29yaycsXHJcbiAgICApOiBRdWVyeVJlc3VsdDxULCBWPiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYmFzZURhdGFTZXJ2aWNlLnF1ZXJ5KHF1ZXJ5LCB2YXJpYWJsZXMsIGZldGNoUG9saWN5KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFBlcmZvcm0gYSBHcmFwaFFMIG11dGF0aW9uLlxyXG4gICAgICovXHJcbiAgICBtdXRhdGU8VCwgViA9IFJlY29yZDxzdHJpbmcsIGFueT4+KFxyXG4gICAgICAgIG11dGF0aW9uOiBEb2N1bWVudE5vZGUsXHJcbiAgICAgICAgdmFyaWFibGVzPzogVixcclxuICAgICAgICB1cGRhdGU/OiBNdXRhdGlvblVwZGF0ZXJGbjxUPixcclxuICAgICk6IE9ic2VydmFibGU8VD4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmJhc2VEYXRhU2VydmljZS5tdXRhdGUobXV0YXRpb24sIHZhcmlhYmxlcywgdXBkYXRlKTtcclxuICAgIH1cclxufVxyXG4iXX0=