import { GET_NEWTORK_STATUS, GET_UI_STATE, GET_USER_STATUS } from '../definitions/client-definitions';
const ɵ0 = (_, args, { cache }) => {
    return updateRequestsInFlight(cache, 1);
}, ɵ1 = (_, args, { cache }) => {
    return updateRequestsInFlight(cache, -1);
}, ɵ2 = (_, args, { cache }) => {
    const { input: { username, loginTime, channels, activeChannelId }, } = args;
    // tslint:disable-next-line:no-non-null-assertion
    const permissions = channels.find(c => c.id === activeChannelId).permissions;
    const data = {
        userStatus: {
            __typename: 'UserStatus',
            username,
            loginTime,
            isLoggedIn: true,
            permissions,
            channels,
            activeChannelId,
        },
    };
    cache.writeQuery({ query: GET_USER_STATUS, data });
    return data.userStatus;
}, ɵ3 = (_, args, { cache }) => {
    const data = {
        userStatus: {
            __typename: 'UserStatus',
            username: '',
            loginTime: '',
            isLoggedIn: false,
            permissions: [],
            channels: [],
            activeChannelId: null,
        },
    };
    cache.writeQuery({ query: GET_USER_STATUS, data });
    return data.userStatus;
}, ɵ4 = (_, args, { cache }) => {
    // tslint:disable-next-line:no-non-null-assertion
    const previous = cache.readQuery({ query: GET_UI_STATE });
    const data = {
        uiState: {
            __typename: 'UiState',
            language: args.languageCode,
            contentLanguage: previous.uiState.contentLanguage,
            theme: previous.uiState.theme,
        },
    };
    cache.writeQuery({ query: GET_UI_STATE, data });
    return args.languageCode;
}, ɵ5 = (_, args, { cache }) => {
    // tslint:disable-next-line:no-non-null-assertion
    const previous = cache.readQuery({ query: GET_UI_STATE });
    const data = {
        uiState: {
            __typename: 'UiState',
            language: previous.uiState.language,
            contentLanguage: args.languageCode,
            theme: previous.uiState.theme,
        },
    };
    cache.writeQuery({ query: GET_UI_STATE, data });
    return args.languageCode;
}, ɵ6 = (_, args, { cache }) => {
    // tslint:disable-next-line:no-non-null-assertion
    const previous = cache.readQuery({ query: GET_UI_STATE });
    const data = {
        uiState: {
            __typename: 'UiState',
            language: previous.uiState.language,
            contentLanguage: previous.uiState.contentLanguage,
            theme: args.theme,
        },
    };
    cache.writeQuery({ query: GET_UI_STATE, data });
    return args.theme;
}, ɵ7 = (_, args, { cache }) => {
    // tslint:disable-next-line:no-non-null-assertion
    const previous = cache.readQuery({ query: GET_USER_STATUS });
    const activeChannel = previous.userStatus.channels.find(c => c.id === args.channelId);
    if (!activeChannel) {
        throw new Error('setActiveChannel: Could not find Channel with ID ' + args.channelId);
    }
    const permissions = activeChannel.permissions;
    const data = {
        userStatus: Object.assign(Object.assign({}, previous.userStatus), { permissions, activeChannelId: activeChannel.id }),
    };
    cache.writeQuery({ query: GET_USER_STATUS, data });
    return data.userStatus;
}, ɵ8 = (_, args, { cache }) => {
    // tslint:disable-next-line:no-non-null-assertion
    const previous = cache.readQuery({ query: GET_USER_STATUS });
    const data = {
        userStatus: Object.assign(Object.assign({}, previous.userStatus), { channels: Array.isArray(args.channels) ? args.channels : [args.channels] }),
    };
    cache.writeQuery({ query: GET_USER_STATUS, data });
    return data.userStatus;
};
export const clientResolvers = {
    Mutation: {
        requestStarted: ɵ0,
        requestCompleted: ɵ1,
        setAsLoggedIn: ɵ2,
        setAsLoggedOut: ɵ3,
        setUiLanguage: ɵ4,
        setContentLanguage: ɵ5,
        setUiTheme: ɵ6,
        setActiveChannel: ɵ7,
        updateUserChannels: ɵ8,
    },
};
function updateRequestsInFlight(cache, increment) {
    const previous = cache.readQuery({ query: GET_NEWTORK_STATUS });
    const inFlightRequests = previous ? previous.networkStatus.inFlightRequests + increment : increment;
    const data = {
        networkStatus: {
            __typename: 'NetworkStatus',
            inFlightRequests,
        },
    };
    cache.writeQuery({ query: GET_NEWTORK_STATUS, data });
    return inFlightRequests;
}
export { ɵ0, ɵ1, ɵ2, ɵ3, ɵ4, ɵ5, ɵ6, ɵ7, ɵ8 };
//# sourceMappingURL=data:application/json;base64,