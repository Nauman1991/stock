import { getOperationAST } from 'graphql';
const CREATE_ENTITY_REGEX = /Create([A-Za-z]+)Input/;
const UPDATE_ENTITY_REGEX = /Update([A-Za-z]+)Input/;
/**
 * Checks the current documentNode for an operation with a variable named "Create<Entity>Input" or "Update<Entity>Input"
 * and if a match is found, returns the <Entity> name.
 */
export function isEntityCreateOrUpdateMutation(documentNode) {
    const operationDef = getOperationAST(documentNode, null);
    if (operationDef && operationDef.variableDefinitions) {
        for (const variableDef of operationDef.variableDefinitions) {
            const namedType = extractInputType(variableDef.type);
            const inputTypeName = namedType.name.value;
            // special cases which don't follow the usual pattern
            if (inputTypeName === 'UpdateActiveAdministratorInput') {
                return 'Administrator';
            }
            const createMatch = inputTypeName.match(CREATE_ENTITY_REGEX);
            if (createMatch) {
                return createMatch[1];
            }
            const updateMatch = inputTypeName.match(UPDATE_ENTITY_REGEX);
            if (updateMatch) {
                return updateMatch[1];
            }
        }
    }
}
function extractInputType(type) {
    if (type.kind === 'NonNullType') {
        return extractInputType(type.type);
    }
    if (type.kind === 'ListType') {
        return extractInputType(type.type);
    }
    return type;
}
/**
 * Removes any `readonly` custom fields from an entity (including its translations).
 * To be used before submitting the entity for a create or update request.
 */
export function removeReadonlyCustomFields(variables, customFieldConfig) {
    if (variables.input) {
        removeReadonly(variables.input, customFieldConfig);
    }
    return removeReadonly(variables, customFieldConfig);
}
function removeReadonly(input, customFieldConfig) {
    for (const field of customFieldConfig) {
        if (field.readonly) {
            if (field.type === 'localeString') {
                if (hasTranslations(input)) {
                    for (const translation of input.translations) {
                        if (hasCustomFields(translation) &&
                            translation.customFields[field.name] !== undefined) {
                            delete translation.customFields[field.name];
                        }
                    }
                }
            }
            else {
                if (hasCustomFields(input) && input.customFields[field.name] !== undefined) {
                    delete input.customFields[field.name];
                }
            }
        }
    }
    return input;
}
function hasCustomFields(input) {
    return input != null && input.hasOwnProperty('customFields');
}
function hasTranslations(input) {
    return input != null && input.hasOwnProperty('translations');
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVtb3ZlLXJlYWRvbmx5LWN1c3RvbS1maWVsZHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvbGliL2NvcmUvc3JjL2RhdGEvdXRpbHMvcmVtb3ZlLXJlYWRvbmx5LWN1c3RvbS1maWVsZHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFnQixlQUFlLEVBQTJCLE1BQU0sU0FBUyxDQUFDO0FBSWpGLE1BQU0sbUJBQW1CLEdBQUcsd0JBQXdCLENBQUM7QUFDckQsTUFBTSxtQkFBbUIsR0FBRyx3QkFBd0IsQ0FBQztBQUVyRDs7O0dBR0c7QUFDSCxNQUFNLFVBQVUsOEJBQThCLENBQUMsWUFBMEI7SUFDckUsTUFBTSxZQUFZLEdBQUcsZUFBZSxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN6RCxJQUFJLFlBQVksSUFBSSxZQUFZLENBQUMsbUJBQW1CLEVBQUU7UUFDbEQsS0FBSyxNQUFNLFdBQVcsSUFBSSxZQUFZLENBQUMsbUJBQW1CLEVBQUU7WUFDeEQsTUFBTSxTQUFTLEdBQUcsZ0JBQWdCLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3JELE1BQU0sYUFBYSxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO1lBRTNDLHFEQUFxRDtZQUNyRCxJQUFJLGFBQWEsS0FBSyxnQ0FBZ0MsRUFBRTtnQkFDcEQsT0FBTyxlQUFlLENBQUM7YUFDMUI7WUFFRCxNQUFNLFdBQVcsR0FBRyxhQUFhLENBQUMsS0FBSyxDQUFDLG1CQUFtQixDQUFDLENBQUM7WUFDN0QsSUFBSSxXQUFXLEVBQUU7Z0JBQ2IsT0FBTyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDekI7WUFDRCxNQUFNLFdBQVcsR0FBRyxhQUFhLENBQUMsS0FBSyxDQUFDLG1CQUFtQixDQUFDLENBQUM7WUFDN0QsSUFBSSxXQUFXLEVBQUU7Z0JBQ2IsT0FBTyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDekI7U0FDSjtLQUNKO0FBQ0wsQ0FBQztBQUVELFNBQVMsZ0JBQWdCLENBQUMsSUFBYztJQUNwQyxJQUFJLElBQUksQ0FBQyxJQUFJLEtBQUssYUFBYSxFQUFFO1FBQzdCLE9BQU8sZ0JBQWdCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQ3RDO0lBQ0QsSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLFVBQVUsRUFBRTtRQUMxQixPQUFPLGdCQUFnQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUN0QztJQUNELE9BQU8sSUFBSSxDQUFDO0FBQ2hCLENBQUM7QUFFRDs7O0dBR0c7QUFDSCxNQUFNLFVBQVUsMEJBQTBCLENBQ3RDLFNBQVksRUFDWixpQkFBc0M7SUFFdEMsSUFBSSxTQUFTLENBQUMsS0FBSyxFQUFFO1FBQ2pCLGNBQWMsQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLGlCQUFpQixDQUFDLENBQUM7S0FDdEQ7SUFDRCxPQUFPLGNBQWMsQ0FBQyxTQUFTLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztBQUN4RCxDQUFDO0FBRUQsU0FBUyxjQUFjLENBQUMsS0FBVSxFQUFFLGlCQUFzQztJQUN0RSxLQUFLLE1BQU0sS0FBSyxJQUFJLGlCQUFpQixFQUFFO1FBQ25DLElBQUksS0FBSyxDQUFDLFFBQVEsRUFBRTtZQUNoQixJQUFJLEtBQUssQ0FBQyxJQUFJLEtBQUssY0FBYyxFQUFFO2dCQUMvQixJQUFJLGVBQWUsQ0FBQyxLQUFLLENBQUMsRUFBRTtvQkFDeEIsS0FBSyxNQUFNLFdBQVcsSUFBSSxLQUFLLENBQUMsWUFBWSxFQUFFO3dCQUMxQyxJQUNJLGVBQWUsQ0FBQyxXQUFXLENBQUM7NEJBQzVCLFdBQVcsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLFNBQVMsRUFDcEQ7NEJBQ0UsT0FBTyxXQUFXLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQzt5QkFDL0M7cUJBQ0o7aUJBQ0o7YUFDSjtpQkFBTTtnQkFDSCxJQUFJLGVBQWUsQ0FBQyxLQUFLLENBQUMsSUFBSSxLQUFLLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxTQUFTLEVBQUU7b0JBQ3hFLE9BQU8sS0FBSyxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7aUJBQ3pDO2FBQ0o7U0FDSjtLQUNKO0lBQ0QsT0FBTyxLQUFLLENBQUM7QUFDakIsQ0FBQztBQUVELFNBQVMsZUFBZSxDQUFDLEtBQVU7SUFDL0IsT0FBTyxLQUFLLElBQUksSUFBSSxJQUFJLEtBQUssQ0FBQyxjQUFjLENBQUMsY0FBYyxDQUFDLENBQUM7QUFDakUsQ0FBQztBQUVELFNBQVMsZUFBZSxDQUFDLEtBQVU7SUFDL0IsT0FBTyxLQUFLLElBQUksSUFBSSxJQUFJLEtBQUssQ0FBQyxjQUFjLENBQUMsY0FBYyxDQUFDLENBQUM7QUFDakUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHNpbXBsZURlZXBDbG9uZSB9IGZyb20gJ0B2ZW5kdXJlL2NvbW1vbi9saWIvc2ltcGxlLWRlZXAtY2xvbmUnO1xyXG5pbXBvcnQgeyBEb2N1bWVudE5vZGUsIGdldE9wZXJhdGlvbkFTVCwgTmFtZWRUeXBlTm9kZSwgVHlwZU5vZGUgfSBmcm9tICdncmFwaHFsJztcclxuXHJcbmltcG9ydCB7IEN1c3RvbUZpZWxkQ29uZmlnIH0gZnJvbSAnLi4vLi4vY29tbW9uL2dlbmVyYXRlZC10eXBlcyc7XHJcblxyXG5jb25zdCBDUkVBVEVfRU5USVRZX1JFR0VYID0gL0NyZWF0ZShbQS1aYS16XSspSW5wdXQvO1xyXG5jb25zdCBVUERBVEVfRU5USVRZX1JFR0VYID0gL1VwZGF0ZShbQS1aYS16XSspSW5wdXQvO1xyXG5cclxuLyoqXHJcbiAqIENoZWNrcyB0aGUgY3VycmVudCBkb2N1bWVudE5vZGUgZm9yIGFuIG9wZXJhdGlvbiB3aXRoIGEgdmFyaWFibGUgbmFtZWQgXCJDcmVhdGU8RW50aXR5PklucHV0XCIgb3IgXCJVcGRhdGU8RW50aXR5PklucHV0XCJcclxuICogYW5kIGlmIGEgbWF0Y2ggaXMgZm91bmQsIHJldHVybnMgdGhlIDxFbnRpdHk+IG5hbWUuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gaXNFbnRpdHlDcmVhdGVPclVwZGF0ZU11dGF0aW9uKGRvY3VtZW50Tm9kZTogRG9jdW1lbnROb2RlKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcclxuICAgIGNvbnN0IG9wZXJhdGlvbkRlZiA9IGdldE9wZXJhdGlvbkFTVChkb2N1bWVudE5vZGUsIG51bGwpO1xyXG4gICAgaWYgKG9wZXJhdGlvbkRlZiAmJiBvcGVyYXRpb25EZWYudmFyaWFibGVEZWZpbml0aW9ucykge1xyXG4gICAgICAgIGZvciAoY29uc3QgdmFyaWFibGVEZWYgb2Ygb3BlcmF0aW9uRGVmLnZhcmlhYmxlRGVmaW5pdGlvbnMpIHtcclxuICAgICAgICAgICAgY29uc3QgbmFtZWRUeXBlID0gZXh0cmFjdElucHV0VHlwZSh2YXJpYWJsZURlZi50eXBlKTtcclxuICAgICAgICAgICAgY29uc3QgaW5wdXRUeXBlTmFtZSA9IG5hbWVkVHlwZS5uYW1lLnZhbHVlO1xyXG5cclxuICAgICAgICAgICAgLy8gc3BlY2lhbCBjYXNlcyB3aGljaCBkb24ndCBmb2xsb3cgdGhlIHVzdWFsIHBhdHRlcm5cclxuICAgICAgICAgICAgaWYgKGlucHV0VHlwZU5hbWUgPT09ICdVcGRhdGVBY3RpdmVBZG1pbmlzdHJhdG9ySW5wdXQnKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJ0FkbWluaXN0cmF0b3InO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCBjcmVhdGVNYXRjaCA9IGlucHV0VHlwZU5hbWUubWF0Y2goQ1JFQVRFX0VOVElUWV9SRUdFWCk7XHJcbiAgICAgICAgICAgIGlmIChjcmVhdGVNYXRjaCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZU1hdGNoWzFdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IHVwZGF0ZU1hdGNoID0gaW5wdXRUeXBlTmFtZS5tYXRjaChVUERBVEVfRU5USVRZX1JFR0VYKTtcclxuICAgICAgICAgICAgaWYgKHVwZGF0ZU1hdGNoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdXBkYXRlTWF0Y2hbMV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGV4dHJhY3RJbnB1dFR5cGUodHlwZTogVHlwZU5vZGUpOiBOYW1lZFR5cGVOb2RlIHtcclxuICAgIGlmICh0eXBlLmtpbmQgPT09ICdOb25OdWxsVHlwZScpIHtcclxuICAgICAgICByZXR1cm4gZXh0cmFjdElucHV0VHlwZSh0eXBlLnR5cGUpO1xyXG4gICAgfVxyXG4gICAgaWYgKHR5cGUua2luZCA9PT0gJ0xpc3RUeXBlJykge1xyXG4gICAgICAgIHJldHVybiBleHRyYWN0SW5wdXRUeXBlKHR5cGUudHlwZSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdHlwZTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJlbW92ZXMgYW55IGByZWFkb25seWAgY3VzdG9tIGZpZWxkcyBmcm9tIGFuIGVudGl0eSAoaW5jbHVkaW5nIGl0cyB0cmFuc2xhdGlvbnMpLlxyXG4gKiBUbyBiZSB1c2VkIGJlZm9yZSBzdWJtaXR0aW5nIHRoZSBlbnRpdHkgZm9yIGEgY3JlYXRlIG9yIHVwZGF0ZSByZXF1ZXN0LlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZVJlYWRvbmx5Q3VzdG9tRmllbGRzPFQgZXh0ZW5kcyB7IGlucHV0PzogYW55IH0gJiBSZWNvcmQ8c3RyaW5nLCBhbnk+ID0gYW55PihcclxuICAgIHZhcmlhYmxlczogVCxcclxuICAgIGN1c3RvbUZpZWxkQ29uZmlnOiBDdXN0b21GaWVsZENvbmZpZ1tdLFxyXG4pOiBUIHtcclxuICAgIGlmICh2YXJpYWJsZXMuaW5wdXQpIHtcclxuICAgICAgICByZW1vdmVSZWFkb25seSh2YXJpYWJsZXMuaW5wdXQsIGN1c3RvbUZpZWxkQ29uZmlnKTtcclxuICAgIH1cclxuICAgIHJldHVybiByZW1vdmVSZWFkb25seSh2YXJpYWJsZXMsIGN1c3RvbUZpZWxkQ29uZmlnKTtcclxufVxyXG5cclxuZnVuY3Rpb24gcmVtb3ZlUmVhZG9ubHkoaW5wdXQ6IGFueSwgY3VzdG9tRmllbGRDb25maWc6IEN1c3RvbUZpZWxkQ29uZmlnW10pIHtcclxuICAgIGZvciAoY29uc3QgZmllbGQgb2YgY3VzdG9tRmllbGRDb25maWcpIHtcclxuICAgICAgICBpZiAoZmllbGQucmVhZG9ubHkpIHtcclxuICAgICAgICAgICAgaWYgKGZpZWxkLnR5cGUgPT09ICdsb2NhbGVTdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaGFzVHJhbnNsYXRpb25zKGlucHV0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdHJhbnNsYXRpb24gb2YgaW5wdXQudHJhbnNsYXRpb25zKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhc0N1c3RvbUZpZWxkcyh0cmFuc2xhdGlvbikgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zbGF0aW9uLmN1c3RvbUZpZWxkc1tmaWVsZC5uYW1lXSAhPT0gdW5kZWZpbmVkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHRyYW5zbGF0aW9uLmN1c3RvbUZpZWxkc1tmaWVsZC5uYW1lXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmIChoYXNDdXN0b21GaWVsZHMoaW5wdXQpICYmIGlucHV0LmN1c3RvbUZpZWxkc1tmaWVsZC5uYW1lXSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGlucHV0LmN1c3RvbUZpZWxkc1tmaWVsZC5uYW1lXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBpbnB1dDtcclxufVxyXG5cclxuZnVuY3Rpb24gaGFzQ3VzdG9tRmllbGRzKGlucHV0OiBhbnkpOiBpbnB1dCBpcyB7IGN1c3RvbUZpZWxkczogeyBba2V5OiBzdHJpbmddOiBhbnkgfSB9IHtcclxuICAgIHJldHVybiBpbnB1dCAhPSBudWxsICYmIGlucHV0Lmhhc093blByb3BlcnR5KCdjdXN0b21GaWVsZHMnKTtcclxufVxyXG5cclxuZnVuY3Rpb24gaGFzVHJhbnNsYXRpb25zKGlucHV0OiBhbnkpOiBpbnB1dCBpcyB7IHRyYW5zbGF0aW9uczogYW55W10gfSB7XHJcbiAgICByZXR1cm4gaW5wdXQgIT0gbnVsbCAmJiBpbnB1dC5oYXNPd25Qcm9wZXJ0eSgndHJhbnNsYXRpb25zJyk7XHJcbn1cclxuIl19