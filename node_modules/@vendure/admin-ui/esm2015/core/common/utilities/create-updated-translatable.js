import { assertNever } from '@vendure/common/lib/shared-utils';
import { findTranslation } from './find-translation';
/**
 * When updating an entity which has translations, the value from the form will pertain to the current
 * languageCode. This function ensures that the "translations" array is correctly set based on the
 * existing languages and the updated values in the specified language.
 */
export function createUpdatedTranslatable(options) {
    const { translatable, updatedFields, languageCode, customFieldConfig, defaultTranslation } = options;
    const currentTranslation = findTranslation(translatable, languageCode) || defaultTranslation || {};
    const index = translatable.translations.indexOf(currentTranslation);
    const newTranslation = patchObject(currentTranslation, updatedFields);
    const newCustomFields = {};
    const newTranslatedCustomFields = {};
    if (customFieldConfig && updatedFields.hasOwnProperty('customFields')) {
        for (const field of customFieldConfig) {
            const value = updatedFields.customFields[field.name];
            if (field.type === 'localeString') {
                newTranslatedCustomFields[field.name] = value;
            }
            else {
                newCustomFields[field.name] =
                    value === '' ? getDefaultValue(field.type) : value;
            }
        }
        newTranslation.customFields = newTranslatedCustomFields;
    }
    const newTranslatable = Object.assign(Object.assign({}, patchObject(translatable, updatedFields)), { translations: translatable.translations.slice() });
    if (customFieldConfig) {
        newTranslatable.customFields = newCustomFields;
    }
    if (index !== -1) {
        newTranslatable.translations.splice(index, 1, newTranslation);
    }
    else {
        newTranslatable.translations.push(newTranslation);
    }
    return newTranslatable;
}
function getDefaultValue(type) {
    switch (type) {
        case 'localeString':
        case 'string':
        case 'text':
            return '';
        case 'boolean':
            return false;
        case 'float':
        case 'int':
            return 0;
        case 'datetime':
            return new Date();
        case 'relation':
            return null;
        default:
            assertNever(type);
    }
}
/**
 * Returns a shallow clone of `obj` with any properties contained in `patch` overwriting
 * those of `obj`.
 */
function patchObject(obj, patch) {
    const clone = Object.assign({}, obj);
    Object.keys(clone).forEach(key => {
        if (patch.hasOwnProperty(key)) {
            clone[key] = patch[key];
        }
    });
    return clone;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLXVwZGF0ZWQtdHJhbnNsYXRhYmxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi9jb3JlL3NyYy9jb21tb24vdXRpbGl0aWVzL2NyZWF0ZS11cGRhdGVkLXRyYW5zbGF0YWJsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFJL0QsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBY3JEOzs7O0dBSUc7QUFDSCxNQUFNLFVBQVUseUJBQXlCLENBQ3JDLE9BQXFDO0lBRXJDLE1BQU0sRUFBRSxZQUFZLEVBQUUsYUFBYSxFQUFFLFlBQVksRUFBRSxpQkFBaUIsRUFBRSxrQkFBa0IsRUFBRSxHQUFHLE9BQU8sQ0FBQztJQUNyRyxNQUFNLGtCQUFrQixHQUNwQixlQUFlLENBQUMsWUFBWSxFQUFFLFlBQVksQ0FBQyxJQUFJLGtCQUFrQixJQUFLLEVBQVUsQ0FBQztJQUNyRixNQUFNLEtBQUssR0FBRyxZQUFZLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0lBQ3BFLE1BQU0sY0FBYyxHQUFHLFdBQVcsQ0FBQyxrQkFBa0IsRUFBRSxhQUFhLENBQUMsQ0FBQztJQUN0RSxNQUFNLGVBQWUsR0FBdUIsRUFBRSxDQUFDO0lBQy9DLE1BQU0seUJBQXlCLEdBQXVCLEVBQUUsQ0FBQztJQUN6RCxJQUFJLGlCQUFpQixJQUFJLGFBQWEsQ0FBQyxjQUFjLENBQUMsY0FBYyxDQUFDLEVBQUU7UUFDbkUsS0FBSyxNQUFNLEtBQUssSUFBSSxpQkFBaUIsRUFBRTtZQUNuQyxNQUFNLEtBQUssR0FBRyxhQUFhLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNyRCxJQUFJLEtBQUssQ0FBQyxJQUFJLEtBQUssY0FBYyxFQUFFO2dCQUMvQix5QkFBeUIsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDO2FBQ2pEO2lCQUFNO2dCQUNILGVBQWUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDO29CQUN2QixLQUFLLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLElBQXVCLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO2FBQzdFO1NBQ0o7UUFDRCxjQUFjLENBQUMsWUFBWSxHQUFHLHlCQUF5QixDQUFDO0tBQzNEO0lBQ0QsTUFBTSxlQUFlLG1DQUNiLFdBQVcsQ0FBQyxZQUFZLEVBQUUsYUFBYSxDQUFTLEdBQ2pELEVBQUUsWUFBWSxFQUFFLFlBQVksQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FDekQsQ0FBQztJQUNGLElBQUksaUJBQWlCLEVBQUU7UUFDbkIsZUFBZSxDQUFDLFlBQVksR0FBRyxlQUFlLENBQUM7S0FDbEQ7SUFDRCxJQUFJLEtBQUssS0FBSyxDQUFDLENBQUMsRUFBRTtRQUNkLGVBQWUsQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLEVBQUUsY0FBYyxDQUFDLENBQUM7S0FDakU7U0FBTTtRQUNILGVBQWUsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0tBQ3JEO0lBQ0QsT0FBTyxlQUFlLENBQUM7QUFDM0IsQ0FBQztBQUVELFNBQVMsZUFBZSxDQUFDLElBQXFCO0lBQzFDLFFBQVEsSUFBSSxFQUFFO1FBQ1YsS0FBSyxjQUFjLENBQUM7UUFDcEIsS0FBSyxRQUFRLENBQUM7UUFDZCxLQUFLLE1BQU07WUFDUCxPQUFPLEVBQUUsQ0FBQztRQUNkLEtBQUssU0FBUztZQUNWLE9BQU8sS0FBSyxDQUFDO1FBQ2pCLEtBQUssT0FBTyxDQUFDO1FBQ2IsS0FBSyxLQUFLO1lBQ04sT0FBTyxDQUFDLENBQUM7UUFDYixLQUFLLFVBQVU7WUFDWCxPQUFPLElBQUksSUFBSSxFQUFFLENBQUM7UUFDdEIsS0FBSyxVQUFVO1lBQ1gsT0FBTyxJQUFJLENBQUM7UUFDaEI7WUFDSSxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDekI7QUFDTCxDQUFDO0FBRUQ7OztHQUdHO0FBQ0gsU0FBUyxXQUFXLENBQW1DLEdBQU0sRUFBRSxLQUE2QjtJQUN4RixNQUFNLEtBQUssR0FBUSxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUMxQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRTtRQUM3QixJQUFJLEtBQUssQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDM0IsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUMzQjtJQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ0gsT0FBTyxLQUFLLENBQUM7QUFDakIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEN1c3RvbUZpZWxkc09iamVjdCwgQ3VzdG9tRmllbGRUeXBlIH0gZnJvbSAnQHZlbmR1cmUvY29tbW9uL2xpYi9zaGFyZWQtdHlwZXMnO1xyXG5pbXBvcnQgeyBhc3NlcnROZXZlciB9IGZyb20gJ0B2ZW5kdXJlL2NvbW1vbi9saWIvc2hhcmVkLXV0aWxzJztcclxuXHJcbmltcG9ydCB7IEN1c3RvbUZpZWxkQ29uZmlnLCBMYW5ndWFnZUNvZGUgfSBmcm9tICcuLi9nZW5lcmF0ZWQtdHlwZXMnO1xyXG5cclxuaW1wb3J0IHsgZmluZFRyYW5zbGF0aW9uIH0gZnJvbSAnLi9maW5kLXRyYW5zbGF0aW9uJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgVHJhbnNsYXRhYmxlVXBkYXRlT3B0aW9uczxUIGV4dGVuZHMgeyB0cmFuc2xhdGlvbnM6IGFueVtdIH0gJiBNYXlIYXZlQ3VzdG9tRmllbGRzPiB7XHJcbiAgICB0cmFuc2xhdGFibGU6IFQ7XHJcbiAgICB1cGRhdGVkRmllbGRzOiB7IFtrZXk6IHN0cmluZ106IGFueSB9O1xyXG4gICAgbGFuZ3VhZ2VDb2RlOiBMYW5ndWFnZUNvZGU7XHJcbiAgICBjdXN0b21GaWVsZENvbmZpZz86IEN1c3RvbUZpZWxkQ29uZmlnW107XHJcbiAgICBkZWZhdWx0VHJhbnNsYXRpb24/OiBQYXJ0aWFsPFRbJ3RyYW5zbGF0aW9ucyddW251bWJlcl0+O1xyXG59XHJcblxyXG5leHBvcnQgdHlwZSBNYXlIYXZlQ3VzdG9tRmllbGRzID0ge1xyXG4gICAgY3VzdG9tRmllbGRzPzogeyBba2V5OiBzdHJpbmddOiBhbnkgfTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBXaGVuIHVwZGF0aW5nIGFuIGVudGl0eSB3aGljaCBoYXMgdHJhbnNsYXRpb25zLCB0aGUgdmFsdWUgZnJvbSB0aGUgZm9ybSB3aWxsIHBlcnRhaW4gdG8gdGhlIGN1cnJlbnRcclxuICogbGFuZ3VhZ2VDb2RlLiBUaGlzIGZ1bmN0aW9uIGVuc3VyZXMgdGhhdCB0aGUgXCJ0cmFuc2xhdGlvbnNcIiBhcnJheSBpcyBjb3JyZWN0bHkgc2V0IGJhc2VkIG9uIHRoZVxyXG4gKiBleGlzdGluZyBsYW5ndWFnZXMgYW5kIHRoZSB1cGRhdGVkIHZhbHVlcyBpbiB0aGUgc3BlY2lmaWVkIGxhbmd1YWdlLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVVwZGF0ZWRUcmFuc2xhdGFibGU8VCBleHRlbmRzIHsgdHJhbnNsYXRpb25zOiBhbnlbXSB9ICYgTWF5SGF2ZUN1c3RvbUZpZWxkcz4oXHJcbiAgICBvcHRpb25zOiBUcmFuc2xhdGFibGVVcGRhdGVPcHRpb25zPFQ+LFxyXG4pOiBUIHtcclxuICAgIGNvbnN0IHsgdHJhbnNsYXRhYmxlLCB1cGRhdGVkRmllbGRzLCBsYW5ndWFnZUNvZGUsIGN1c3RvbUZpZWxkQ29uZmlnLCBkZWZhdWx0VHJhbnNsYXRpb24gfSA9IG9wdGlvbnM7XHJcbiAgICBjb25zdCBjdXJyZW50VHJhbnNsYXRpb24gPVxyXG4gICAgICAgIGZpbmRUcmFuc2xhdGlvbih0cmFuc2xhdGFibGUsIGxhbmd1YWdlQ29kZSkgfHwgZGVmYXVsdFRyYW5zbGF0aW9uIHx8ICh7fSBhcyBhbnkpO1xyXG4gICAgY29uc3QgaW5kZXggPSB0cmFuc2xhdGFibGUudHJhbnNsYXRpb25zLmluZGV4T2YoY3VycmVudFRyYW5zbGF0aW9uKTtcclxuICAgIGNvbnN0IG5ld1RyYW5zbGF0aW9uID0gcGF0Y2hPYmplY3QoY3VycmVudFRyYW5zbGF0aW9uLCB1cGRhdGVkRmllbGRzKTtcclxuICAgIGNvbnN0IG5ld0N1c3RvbUZpZWxkczogQ3VzdG9tRmllbGRzT2JqZWN0ID0ge307XHJcbiAgICBjb25zdCBuZXdUcmFuc2xhdGVkQ3VzdG9tRmllbGRzOiBDdXN0b21GaWVsZHNPYmplY3QgPSB7fTtcclxuICAgIGlmIChjdXN0b21GaWVsZENvbmZpZyAmJiB1cGRhdGVkRmllbGRzLmhhc093blByb3BlcnR5KCdjdXN0b21GaWVsZHMnKSkge1xyXG4gICAgICAgIGZvciAoY29uc3QgZmllbGQgb2YgY3VzdG9tRmllbGRDb25maWcpIHtcclxuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSB1cGRhdGVkRmllbGRzLmN1c3RvbUZpZWxkc1tmaWVsZC5uYW1lXTtcclxuICAgICAgICAgICAgaWYgKGZpZWxkLnR5cGUgPT09ICdsb2NhbGVTdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICBuZXdUcmFuc2xhdGVkQ3VzdG9tRmllbGRzW2ZpZWxkLm5hbWVdID0gdmFsdWU7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBuZXdDdXN0b21GaWVsZHNbZmllbGQubmFtZV0gPVxyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID09PSAnJyA/IGdldERlZmF1bHRWYWx1ZShmaWVsZC50eXBlIGFzIEN1c3RvbUZpZWxkVHlwZSkgOiB2YWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBuZXdUcmFuc2xhdGlvbi5jdXN0b21GaWVsZHMgPSBuZXdUcmFuc2xhdGVkQ3VzdG9tRmllbGRzO1xyXG4gICAgfVxyXG4gICAgY29uc3QgbmV3VHJhbnNsYXRhYmxlID0ge1xyXG4gICAgICAgIC4uLihwYXRjaE9iamVjdCh0cmFuc2xhdGFibGUsIHVwZGF0ZWRGaWVsZHMpIGFzIGFueSksXHJcbiAgICAgICAgLi4ueyB0cmFuc2xhdGlvbnM6IHRyYW5zbGF0YWJsZS50cmFuc2xhdGlvbnMuc2xpY2UoKSB9LFxyXG4gICAgfTtcclxuICAgIGlmIChjdXN0b21GaWVsZENvbmZpZykge1xyXG4gICAgICAgIG5ld1RyYW5zbGF0YWJsZS5jdXN0b21GaWVsZHMgPSBuZXdDdXN0b21GaWVsZHM7XHJcbiAgICB9XHJcbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XHJcbiAgICAgICAgbmV3VHJhbnNsYXRhYmxlLnRyYW5zbGF0aW9ucy5zcGxpY2UoaW5kZXgsIDEsIG5ld1RyYW5zbGF0aW9uKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgbmV3VHJhbnNsYXRhYmxlLnRyYW5zbGF0aW9ucy5wdXNoKG5ld1RyYW5zbGF0aW9uKTtcclxuICAgIH1cclxuICAgIHJldHVybiBuZXdUcmFuc2xhdGFibGU7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldERlZmF1bHRWYWx1ZSh0eXBlOiBDdXN0b21GaWVsZFR5cGUpOiBhbnkge1xyXG4gICAgc3dpdGNoICh0eXBlKSB7XHJcbiAgICAgICAgY2FzZSAnbG9jYWxlU3RyaW5nJzpcclxuICAgICAgICBjYXNlICdzdHJpbmcnOlxyXG4gICAgICAgIGNhc2UgJ3RleHQnOlxyXG4gICAgICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgICAgY2FzZSAnYm9vbGVhbic6XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICBjYXNlICdmbG9hdCc6XHJcbiAgICAgICAgY2FzZSAnaW50JzpcclxuICAgICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgICAgY2FzZSAnZGF0ZXRpbWUnOlxyXG4gICAgICAgICAgICByZXR1cm4gbmV3IERhdGUoKTtcclxuICAgICAgICBjYXNlICdyZWxhdGlvbic6XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIGFzc2VydE5ldmVyKHR5cGUpO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICogUmV0dXJucyBhIHNoYWxsb3cgY2xvbmUgb2YgYG9iamAgd2l0aCBhbnkgcHJvcGVydGllcyBjb250YWluZWQgaW4gYHBhdGNoYCBvdmVyd3JpdGluZ1xyXG4gKiB0aG9zZSBvZiBgb2JqYC5cclxuICovXHJcbmZ1bmN0aW9uIHBhdGNoT2JqZWN0PFQgZXh0ZW5kcyB7IFtrZXk6IHN0cmluZ106IGFueSB9PihvYmo6IFQsIHBhdGNoOiB7IFtrZXk6IHN0cmluZ106IGFueSB9KTogVCB7XHJcbiAgICBjb25zdCBjbG9uZTogYW55ID0gT2JqZWN0LmFzc2lnbih7fSwgb2JqKTtcclxuICAgIE9iamVjdC5rZXlzKGNsb25lKS5mb3JFYWNoKGtleSA9PiB7XHJcbiAgICAgICAgaWYgKHBhdGNoLmhhc093blByb3BlcnR5KGtleSkpIHtcclxuICAgICAgICAgICAgY2xvbmVba2V5XSA9IHBhdGNoW2tleV07XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gY2xvbmU7XHJcbn1cclxuIl19