import { combineLatest, of, Subject } from 'rxjs';
import { distinctUntilChanged, map, shareReplay, switchMap, takeUntil, tap } from 'rxjs/operators';
export class BaseDetailComponent {
    constructor(route, router, serverConfigService, dataService) {
        this.route = route;
        this.router = router;
        this.serverConfigService = serverConfigService;
        this.dataService = dataService;
        this.destroy$ = new Subject();
    }
    init() {
        this.entity$ = this.route.data.pipe(switchMap(data => data.entity.pipe(takeUntil(this.destroy$))), tap(entity => (this.id = entity.id)), shareReplay(1));
        this.isNew$ = this.entity$.pipe(map(entity => entity.id === ''), shareReplay(1));
        this.languageCode$ = this.route.paramMap.pipe(map(paramMap => paramMap.get('lang')), switchMap(lang => {
            if (lang) {
                return of(lang);
            }
            else {
                return this.dataService.client.uiState().mapSingle(data => data.uiState.contentLanguage);
            }
        }), distinctUntilChanged(), shareReplay(1));
        this.availableLanguages$ = this.serverConfigService.getAvailableLanguages();
        combineLatest(this.entity$, this.languageCode$)
            .pipe(takeUntil(this.destroy$))
            .subscribe(([entity, languageCode]) => {
            this.setFormValues(entity, languageCode);
            this.detailForm.markAsPristine();
        });
    }
    destroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    setLanguage(code) {
        this.setQueryParam('lang', code);
        this.dataService.client.setContentLanguage(code).subscribe();
    }
    canDeactivate() {
        return this.detailForm && this.detailForm.pristine;
    }
    getCustomFieldConfig(key) {
        return this.serverConfigService.getCustomFieldsFor(key);
    }
    setQueryParam(key, value) {
        this.router.navigate([
            './',
            Object.assign(Object.assign({}, this.route.snapshot.params), { [key]: value }),
        ], {
            relativeTo: this.route,
            queryParamsHandling: 'merge',
        });
    }
}
//# sourceMappingURL=data:application/json;base64,