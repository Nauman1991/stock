import { Component, } from '@angular/core';
import { Subject } from 'rxjs';
/**
 * This component should only be instatiated dynamically by the ModalService. It should not be used
 * directly in templates. See {@link ModalService.fromComponent} method for more detail.
 */
export class ModalDialogComponent {
    constructor() {
        this.titleTemplateRef$ = new Subject();
        this.buttonsTemplateRef$ = new Subject();
    }
    /**
     * This callback is invoked when the childComponentType is instantiated in the
     * template by the {@link DialogComponentOutletComponent}.
     * Once we have the instance, we can set the resolveWith function and any
     * locals which were specified in the config.
     */
    onCreate(componentInstance) {
        componentInstance.resolveWith = (result) => {
            this.closeModal(result);
        };
        if (this.options && this.options.locals) {
            // tslint:disable-next-line
            for (const key in this.options.locals) {
                componentInstance[key] = this.options.locals[key];
            }
        }
    }
    /**
     * This should be called by the {@link DialogTitleDirective} only
     */
    registerTitleTemplate(titleTemplateRef) {
        this.titleTemplateRef$.next(titleTemplateRef);
    }
    /**
     * This should be called by the {@link DialogButtonsDirective} only
     */
    registerButtonsTemplate(buttonsTemplateRef) {
        this.buttonsTemplateRef$.next(buttonsTemplateRef);
    }
    /**
     * Called when the modal is closed by clicking the X or the mask.
     */
    modalOpenChange(status) {
        if (status === false) {
            this.closeModal();
        }
    }
}
ModalDialogComponent.decorators = [
    { type: Component, args: [{
                selector: 'vdr-modal-dialog',
                template: "<clr-modal\r\n    [clrModalOpen]=\"true\"\r\n    (clrModalOpenChange)=\"modalOpenChange($event)\"\r\n    [clrModalClosable]=\"options?.closable\"\r\n    [clrModalSize]=\"options?.size\"\r\n    [ngClass]=\"'modal-valign-' + (options?.verticalAlign || 'center')\"\r\n>\r\n    <h3 class=\"modal-title\"><ng-container *ngTemplateOutlet=\"(titleTemplateRef$ | async)\"></ng-container></h3>\r\n    <div class=\"modal-body\">\r\n        <vdr-dialog-component-outlet\r\n            [component]=\"childComponentType\"\r\n            (create)=\"onCreate($event)\"\r\n        ></vdr-dialog-component-outlet>\r\n    </div>\r\n    <div class=\"modal-footer\">\r\n        <ng-container *ngTemplateOutlet=\"(buttonsTemplateRef$ | async)\"></ng-container>\r\n    </div>\r\n</clr-modal>\r\n",
                styles: ["::ng-deep clr-modal.modal-valign-top .modal{justify-content:flex-start}::ng-deep clr-modal.modal-valign-bottom .modal{justify-content:flex-end}.modal-body{display:flex;flex-direction:column}"]
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kYWwtZGlhbG9nLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9saWIvY29yZS9zcmMvc2hhcmVkL2NvbXBvbmVudHMvbW9kYWwtZGlhbG9nL21vZGFsLWRpYWxvZy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNILFNBQVMsR0FRWixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQWMsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBTTNDOzs7R0FHRztBQU1ILE1BQU0sT0FBTyxvQkFBb0I7SUFMakM7UUFRSSxzQkFBaUIsR0FBRyxJQUFJLE9BQU8sRUFBb0IsQ0FBQztRQUNwRCx3QkFBbUIsR0FBRyxJQUFJLE9BQU8sRUFBb0IsQ0FBQztJQTJDMUQsQ0FBQztJQXhDRzs7Ozs7T0FLRztJQUNILFFBQVEsQ0FBQyxpQkFBb0I7UUFDekIsaUJBQWlCLENBQUMsV0FBVyxHQUFHLENBQUMsTUFBWSxFQUFFLEVBQUU7WUFDN0MsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM1QixDQUFDLENBQUM7UUFDRixJQUFJLElBQUksQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUU7WUFDckMsMkJBQTJCO1lBQzNCLEtBQUssTUFBTSxHQUFHLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUU7Z0JBQ25DLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBZ0MsQ0FBQzthQUNwRjtTQUNKO0lBQ0wsQ0FBQztJQUVEOztPQUVHO0lBQ0gscUJBQXFCLENBQUMsZ0JBQWtDO1FBQ3BELElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztJQUNsRCxDQUFDO0lBRUQ7O09BRUc7SUFDSCx1QkFBdUIsQ0FBQyxrQkFBb0M7UUFDeEQsSUFBSSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0lBQ3RELENBQUM7SUFFRDs7T0FFRztJQUNILGVBQWUsQ0FBQyxNQUFXO1FBQ3ZCLElBQUksTUFBTSxLQUFLLEtBQUssRUFBRTtZQUNsQixJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7U0FDckI7SUFDTCxDQUFDOzs7WUFuREosU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxrQkFBa0I7Z0JBQzVCLGl4QkFBNEM7O2FBRS9DIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICAgIENvbXBvbmVudCxcclxuICAgIENvbnRlbnRDaGlsZCxcclxuICAgIENvbnRlbnRDaGlsZHJlbixcclxuICAgIFF1ZXJ5TGlzdCxcclxuICAgIFRlbXBsYXRlUmVmLFxyXG4gICAgVHlwZSxcclxuICAgIFZpZXdDaGlsZCxcclxuICAgIFZpZXdDaGlsZHJlbixcclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xyXG5cclxuaW1wb3J0IHsgRGlhbG9nLCBNb2RhbE9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi9wcm92aWRlcnMvbW9kYWwvbW9kYWwuc2VydmljZSc7XHJcblxyXG5pbXBvcnQgeyBEaWFsb2dCdXR0b25zRGlyZWN0aXZlIH0gZnJvbSAnLi9kaWFsb2ctYnV0dG9ucy5kaXJlY3RpdmUnO1xyXG5cclxuLyoqXHJcbiAqIFRoaXMgY29tcG9uZW50IHNob3VsZCBvbmx5IGJlIGluc3RhdGlhdGVkIGR5bmFtaWNhbGx5IGJ5IHRoZSBNb2RhbFNlcnZpY2UuIEl0IHNob3VsZCBub3QgYmUgdXNlZFxyXG4gKiBkaXJlY3RseSBpbiB0ZW1wbGF0ZXMuIFNlZSB7QGxpbmsgTW9kYWxTZXJ2aWNlLmZyb21Db21wb25lbnR9IG1ldGhvZCBmb3IgbW9yZSBkZXRhaWwuXHJcbiAqL1xyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiAndmRyLW1vZGFsLWRpYWxvZycsXHJcbiAgICB0ZW1wbGF0ZVVybDogJy4vbW9kYWwtZGlhbG9nLmNvbXBvbmVudC5odG1sJyxcclxuICAgIHN0eWxlVXJsczogWycuL21vZGFsLWRpYWxvZy5jb21wb25lbnQuc2NzcyddLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgTW9kYWxEaWFsb2dDb21wb25lbnQ8VCBleHRlbmRzIERpYWxvZzxhbnk+PiB7XHJcbiAgICBjaGlsZENvbXBvbmVudFR5cGU6IFR5cGU8VD47XHJcbiAgICBjbG9zZU1vZGFsOiAocmVzdWx0PzogYW55KSA9PiB2b2lkO1xyXG4gICAgdGl0bGVUZW1wbGF0ZVJlZiQgPSBuZXcgU3ViamVjdDxUZW1wbGF0ZVJlZjxhbnk+PigpO1xyXG4gICAgYnV0dG9uc1RlbXBsYXRlUmVmJCA9IG5ldyBTdWJqZWN0PFRlbXBsYXRlUmVmPGFueT4+KCk7XHJcbiAgICBvcHRpb25zPzogTW9kYWxPcHRpb25zPFQ+O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhpcyBjYWxsYmFjayBpcyBpbnZva2VkIHdoZW4gdGhlIGNoaWxkQ29tcG9uZW50VHlwZSBpcyBpbnN0YW50aWF0ZWQgaW4gdGhlXHJcbiAgICAgKiB0ZW1wbGF0ZSBieSB0aGUge0BsaW5rIERpYWxvZ0NvbXBvbmVudE91dGxldENvbXBvbmVudH0uXHJcbiAgICAgKiBPbmNlIHdlIGhhdmUgdGhlIGluc3RhbmNlLCB3ZSBjYW4gc2V0IHRoZSByZXNvbHZlV2l0aCBmdW5jdGlvbiBhbmQgYW55XHJcbiAgICAgKiBsb2NhbHMgd2hpY2ggd2VyZSBzcGVjaWZpZWQgaW4gdGhlIGNvbmZpZy5cclxuICAgICAqL1xyXG4gICAgb25DcmVhdGUoY29tcG9uZW50SW5zdGFuY2U6IFQpIHtcclxuICAgICAgICBjb21wb25lbnRJbnN0YW5jZS5yZXNvbHZlV2l0aCA9IChyZXN1bHQ/OiBhbnkpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5jbG9zZU1vZGFsKHJlc3VsdCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBpZiAodGhpcy5vcHRpb25zICYmIHRoaXMub3B0aW9ucy5sb2NhbHMpIHtcclxuICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lXHJcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIHRoaXMub3B0aW9ucy5sb2NhbHMpIHtcclxuICAgICAgICAgICAgICAgIGNvbXBvbmVudEluc3RhbmNlW2tleV0gPSB0aGlzLm9wdGlvbnMubG9jYWxzW2tleV0gYXMgVFtFeHRyYWN0PGtleW9mIFQsIHN0cmluZz5dO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhpcyBzaG91bGQgYmUgY2FsbGVkIGJ5IHRoZSB7QGxpbmsgRGlhbG9nVGl0bGVEaXJlY3RpdmV9IG9ubHlcclxuICAgICAqL1xyXG4gICAgcmVnaXN0ZXJUaXRsZVRlbXBsYXRlKHRpdGxlVGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPGFueT4pIHtcclxuICAgICAgICB0aGlzLnRpdGxlVGVtcGxhdGVSZWYkLm5leHQodGl0bGVUZW1wbGF0ZVJlZik7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGlzIHNob3VsZCBiZSBjYWxsZWQgYnkgdGhlIHtAbGluayBEaWFsb2dCdXR0b25zRGlyZWN0aXZlfSBvbmx5XHJcbiAgICAgKi9cclxuICAgIHJlZ2lzdGVyQnV0dG9uc1RlbXBsYXRlKGJ1dHRvbnNUZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8YW55Pikge1xyXG4gICAgICAgIHRoaXMuYnV0dG9uc1RlbXBsYXRlUmVmJC5uZXh0KGJ1dHRvbnNUZW1wbGF0ZVJlZik7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDYWxsZWQgd2hlbiB0aGUgbW9kYWwgaXMgY2xvc2VkIGJ5IGNsaWNraW5nIHRoZSBYIG9yIHRoZSBtYXNrLlxyXG4gICAgICovXHJcbiAgICBtb2RhbE9wZW5DaGFuZ2Uoc3RhdHVzOiBhbnkpIHtcclxuICAgICAgICBpZiAoc3RhdHVzID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICB0aGlzLmNsb3NlTW9kYWwoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIl19