import { Component, Input, ViewChild, ViewContainerRef, } from '@angular/core';
import { FormGroup } from '@angular/forms';
import { DataService } from '../../../data/providers/data.service';
import { CustomFieldComponentService, } from '../../../providers/custom-field-component/custom-field-component.service';
/**
 * This component renders the appropriate type of form input control based
 * on the "type" property of the provided CustomFieldConfig.
 */
export class CustomFieldControlComponent {
    constructor(dataService, customFieldComponentService) {
        this.dataService = dataService;
        this.customFieldComponentService = customFieldComponentService;
        this.compact = false;
        this.showLabel = true;
        this.readonly = false;
        this.hasCustomControl = false;
    }
    getFieldDefinition() {
        const config = Object.assign({}, this.customField);
        const id = this.customFieldComponentService.customFieldComponentExists(this.entityName, this.customField.name);
        if (id) {
            config.ui = { component: id };
        }
        switch (config.__typename) {
            case 'IntCustomFieldConfig':
                return Object.assign(Object.assign({}, config), { min: config.intMin, max: config.intMax, step: config.intStep });
            case 'FloatCustomFieldConfig':
                return Object.assign(Object.assign({}, config), { min: config.floatMin, max: config.floatMax, step: config.floatStep });
            case 'DateTimeCustomFieldConfig':
                return Object.assign(Object.assign({}, config), { min: config.datetimeMin, max: config.datetimeMax, step: config.datetimeStep });
            default:
                return Object.assign({}, config);
        }
    }
}
CustomFieldControlComponent.decorators = [
    { type: Component, args: [{
                selector: 'vdr-custom-field-control',
                template: "<div class=\"clr-form-control\" *ngIf=\"compact\">\r\n    <label for=\"basic\" class=\"clr-control-label\">{{ customField | customFieldLabel }}</label>\r\n    <div class=\"clr-control-container\">\r\n        <div class=\"clr-input-wrapper\">\r\n            <ng-container *ngTemplateOutlet=\"inputs\"></ng-container>\r\n        </div>\r\n    </div>\r\n</div>\r\n<vdr-form-field [label]=\"customField | customFieldLabel\" [for]=\"customField.name\" *ngIf=\"!compact\">\r\n    <ng-container *ngTemplateOutlet=\"inputs\"></ng-container>\r\n</vdr-form-field>\r\n\r\n<ng-template #inputs>\r\n    <ng-container [formGroup]=\"formGroup\">\r\n        <vdr-dynamic-form-input\r\n            [formControlName]=\"customField.name\"\r\n            [readonly]=\"readonly || customField.readonly\"\r\n            [control]=\"formGroup.get(customField.name)\"\r\n            [def]=\"getFieldDefinition()\"\r\n        >\r\n        </vdr-dynamic-form-input>\r\n    </ng-container>\r\n</ng-template>\r\n",
                styles: [":host .toggle-switch{margin-top:0;margin-bottom:0}"]
            },] }
];
CustomFieldControlComponent.ctorParameters = () => [
    { type: DataService },
    { type: CustomFieldComponentService }
];
CustomFieldControlComponent.propDecorators = {
    entityName: [{ type: Input }],
    formGroup: [{ type: Input, args: ['customFieldsFormGroup',] }],
    customField: [{ type: Input }],
    compact: [{ type: Input }],
    showLabel: [{ type: Input }],
    readonly: [{ type: Input }],
    customComponentPlaceholder: [{ type: ViewChild, args: ['customComponentPlaceholder', { read: ViewContainerRef },] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VzdG9tLWZpZWxkLWNvbnRyb2wuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi9jb3JlL3NyYy9zaGFyZWQvY29tcG9uZW50cy9jdXN0b20tZmllbGQtY29udHJvbC9jdXN0b20tZmllbGQtY29udHJvbC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUVILFNBQVMsRUFFVCxLQUFLLEVBRUwsU0FBUyxFQUNULGdCQUFnQixHQUNuQixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQWUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFJeEQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBQ25FLE9BQU8sRUFDSCwyQkFBMkIsR0FHOUIsTUFBTSwwRUFBMEUsQ0FBQztBQUVsRjs7O0dBR0c7QUFNSCxNQUFNLE9BQU8sMkJBQTJCO0lBWXBDLFlBQ1ksV0FBd0IsRUFDeEIsMkJBQXdEO1FBRHhELGdCQUFXLEdBQVgsV0FBVyxDQUFhO1FBQ3hCLGdDQUEyQixHQUEzQiwyQkFBMkIsQ0FBNkI7UUFWM0QsWUFBTyxHQUFHLEtBQUssQ0FBQztRQUNoQixjQUFTLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLGFBQVEsR0FBRyxLQUFLLENBQUM7UUFDMUIscUJBQWdCLEdBQUcsS0FBSyxDQUFDO0lBUXRCLENBQUM7SUFFSixrQkFBa0I7UUFDZCxNQUFNLE1BQU0scUJBQ0wsSUFBSSxDQUFDLFdBQVcsQ0FDdEIsQ0FBQztRQUNGLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQywyQkFBMkIsQ0FBQywwQkFBMEIsQ0FDbEUsSUFBSSxDQUFDLFVBQVUsRUFDZixJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FDeEIsQ0FBQztRQUNGLElBQUksRUFBRSxFQUFFO1lBQ0osTUFBTSxDQUFDLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxFQUFFLEVBQUUsQ0FBQztTQUNqQztRQUNELFFBQVEsTUFBTSxDQUFDLFVBQVUsRUFBRTtZQUN2QixLQUFLLHNCQUFzQjtnQkFDdkIsdUNBQ08sTUFBTSxLQUNULEdBQUcsRUFBRSxNQUFNLENBQUMsTUFBTSxFQUNsQixHQUFHLEVBQUUsTUFBTSxDQUFDLE1BQU0sRUFDbEIsSUFBSSxFQUFFLE1BQU0sQ0FBQyxPQUFPLElBQ3RCO1lBQ04sS0FBSyx3QkFBd0I7Z0JBQ3pCLHVDQUNPLE1BQU0sS0FDVCxHQUFHLEVBQUUsTUFBTSxDQUFDLFFBQVEsRUFDcEIsR0FBRyxFQUFFLE1BQU0sQ0FBQyxRQUFRLEVBQ3BCLElBQUksRUFBRSxNQUFNLENBQUMsU0FBUyxJQUN4QjtZQUNOLEtBQUssMkJBQTJCO2dCQUM1Qix1Q0FDTyxNQUFNLEtBQ1QsR0FBRyxFQUFFLE1BQU0sQ0FBQyxXQUFXLEVBQ3ZCLEdBQUcsRUFBRSxNQUFNLENBQUMsV0FBVyxFQUN2QixJQUFJLEVBQUUsTUFBTSxDQUFDLFlBQVksSUFDM0I7WUFDTjtnQkFDSSx5QkFDTyxNQUFNLEVBQ1g7U0FDVDtJQUNMLENBQUM7OztZQTVESixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLDBCQUEwQjtnQkFDcEMsbytCQUFvRDs7YUFFdkQ7OztZQWZRLFdBQVc7WUFFaEIsMkJBQTJCOzs7eUJBZTFCLEtBQUs7d0JBQ0wsS0FBSyxTQUFDLHVCQUF1QjswQkFDN0IsS0FBSztzQkFDTCxLQUFLO3dCQUNMLEtBQUs7dUJBQ0wsS0FBSzt5Q0FFTCxTQUFTLFNBQUMsNEJBQTRCLEVBQUUsRUFBRSxJQUFJLEVBQUUsZ0JBQWdCLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gICAgQWZ0ZXJWaWV3SW5pdCxcclxuICAgIENvbXBvbmVudCxcclxuICAgIENvbXBvbmVudEZhY3RvcnksXHJcbiAgICBJbnB1dCxcclxuICAgIE9uSW5pdCxcclxuICAgIFZpZXdDaGlsZCxcclxuICAgIFZpZXdDb250YWluZXJSZWYsXHJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEZvcm1Db250cm9sLCBGb3JtR3JvdXAgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XHJcblxyXG5pbXBvcnQgeyBJbnB1dENvbXBvbmVudENvbmZpZyB9IGZyb20gJy4uLy4uLy4uL2NvbW1vbi9jb21wb25lbnQtcmVnaXN0cnktdHlwZXMnO1xyXG5pbXBvcnQgeyBDdXN0b21GaWVsZENvbmZpZywgQ3VzdG9tRmllbGRzRnJhZ21lbnQgfSBmcm9tICcuLi8uLi8uLi9jb21tb24vZ2VuZXJhdGVkLXR5cGVzJztcclxuaW1wb3J0IHsgRGF0YVNlcnZpY2UgfSBmcm9tICcuLi8uLi8uLi9kYXRhL3Byb3ZpZGVycy9kYXRhLnNlcnZpY2UnO1xyXG5pbXBvcnQge1xyXG4gICAgQ3VzdG9tRmllbGRDb21wb25lbnRTZXJ2aWNlLFxyXG4gICAgQ3VzdG9tRmllbGRDb250cm9sLFxyXG4gICAgQ3VzdG9tRmllbGRFbnRpdHlOYW1lLFxyXG59IGZyb20gJy4uLy4uLy4uL3Byb3ZpZGVycy9jdXN0b20tZmllbGQtY29tcG9uZW50L2N1c3RvbS1maWVsZC1jb21wb25lbnQuc2VydmljZSc7XHJcblxyXG4vKipcclxuICogVGhpcyBjb21wb25lbnQgcmVuZGVycyB0aGUgYXBwcm9wcmlhdGUgdHlwZSBvZiBmb3JtIGlucHV0IGNvbnRyb2wgYmFzZWRcclxuICogb24gdGhlIFwidHlwZVwiIHByb3BlcnR5IG9mIHRoZSBwcm92aWRlZCBDdXN0b21GaWVsZENvbmZpZy5cclxuICovXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICd2ZHItY3VzdG9tLWZpZWxkLWNvbnRyb2wnLFxyXG4gICAgdGVtcGxhdGVVcmw6ICcuL2N1c3RvbS1maWVsZC1jb250cm9sLmNvbXBvbmVudC5odG1sJyxcclxuICAgIHN0eWxlVXJsczogWycuL2N1c3RvbS1maWVsZC1jb250cm9sLmNvbXBvbmVudC5zY3NzJ10sXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBDdXN0b21GaWVsZENvbnRyb2xDb21wb25lbnQge1xyXG4gICAgQElucHV0KCkgZW50aXR5TmFtZTogQ3VzdG9tRmllbGRFbnRpdHlOYW1lO1xyXG4gICAgQElucHV0KCdjdXN0b21GaWVsZHNGb3JtR3JvdXAnKSBmb3JtR3JvdXA6IEZvcm1Hcm91cDtcclxuICAgIEBJbnB1dCgpIGN1c3RvbUZpZWxkOiBDdXN0b21GaWVsZHNGcmFnbWVudDtcclxuICAgIEBJbnB1dCgpIGNvbXBhY3QgPSBmYWxzZTtcclxuICAgIEBJbnB1dCgpIHNob3dMYWJlbCA9IHRydWU7XHJcbiAgICBASW5wdXQoKSByZWFkb25seSA9IGZhbHNlO1xyXG4gICAgaGFzQ3VzdG9tQ29udHJvbCA9IGZhbHNlO1xyXG4gICAgQFZpZXdDaGlsZCgnY3VzdG9tQ29tcG9uZW50UGxhY2Vob2xkZXInLCB7IHJlYWQ6IFZpZXdDb250YWluZXJSZWYgfSlcclxuICAgIHByaXZhdGUgY3VzdG9tQ29tcG9uZW50UGxhY2Vob2xkZXI6IFZpZXdDb250YWluZXJSZWY7XHJcbiAgICBwcml2YXRlIGN1c3RvbUNvbXBvbmVudEZhY3Rvcnk6IENvbXBvbmVudEZhY3Rvcnk8Q3VzdG9tRmllbGRDb250cm9sPiB8IHVuZGVmaW5lZDtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBwcml2YXRlIGRhdGFTZXJ2aWNlOiBEYXRhU2VydmljZSxcclxuICAgICAgICBwcml2YXRlIGN1c3RvbUZpZWxkQ29tcG9uZW50U2VydmljZTogQ3VzdG9tRmllbGRDb21wb25lbnRTZXJ2aWNlLFxyXG4gICAgKSB7fVxyXG5cclxuICAgIGdldEZpZWxkRGVmaW5pdGlvbigpOiBDdXN0b21GaWVsZENvbmZpZyAmIHsgdWk/OiBJbnB1dENvbXBvbmVudENvbmZpZyB9IHtcclxuICAgICAgICBjb25zdCBjb25maWc6IEN1c3RvbUZpZWxkc0ZyYWdtZW50ICYgeyB1aT86IElucHV0Q29tcG9uZW50Q29uZmlnIH0gPSB7XHJcbiAgICAgICAgICAgIC4uLnRoaXMuY3VzdG9tRmllbGQsXHJcbiAgICAgICAgfTtcclxuICAgICAgICBjb25zdCBpZCA9IHRoaXMuY3VzdG9tRmllbGRDb21wb25lbnRTZXJ2aWNlLmN1c3RvbUZpZWxkQ29tcG9uZW50RXhpc3RzKFxyXG4gICAgICAgICAgICB0aGlzLmVudGl0eU5hbWUsXHJcbiAgICAgICAgICAgIHRoaXMuY3VzdG9tRmllbGQubmFtZSxcclxuICAgICAgICApO1xyXG4gICAgICAgIGlmIChpZCkge1xyXG4gICAgICAgICAgICBjb25maWcudWkgPSB7IGNvbXBvbmVudDogaWQgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc3dpdGNoIChjb25maWcuX190eXBlbmFtZSkge1xyXG4gICAgICAgICAgICBjYXNlICdJbnRDdXN0b21GaWVsZENvbmZpZyc6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgIC4uLmNvbmZpZyxcclxuICAgICAgICAgICAgICAgICAgICBtaW46IGNvbmZpZy5pbnRNaW4sXHJcbiAgICAgICAgICAgICAgICAgICAgbWF4OiBjb25maWcuaW50TWF4LFxyXG4gICAgICAgICAgICAgICAgICAgIHN0ZXA6IGNvbmZpZy5pbnRTdGVwLFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgY2FzZSAnRmxvYXRDdXN0b21GaWVsZENvbmZpZyc6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgIC4uLmNvbmZpZyxcclxuICAgICAgICAgICAgICAgICAgICBtaW46IGNvbmZpZy5mbG9hdE1pbixcclxuICAgICAgICAgICAgICAgICAgICBtYXg6IGNvbmZpZy5mbG9hdE1heCxcclxuICAgICAgICAgICAgICAgICAgICBzdGVwOiBjb25maWcuZmxvYXRTdGVwLFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgY2FzZSAnRGF0ZVRpbWVDdXN0b21GaWVsZENvbmZpZyc6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgIC4uLmNvbmZpZyxcclxuICAgICAgICAgICAgICAgICAgICBtaW46IGNvbmZpZy5kYXRldGltZU1pbixcclxuICAgICAgICAgICAgICAgICAgICBtYXg6IGNvbmZpZy5kYXRldGltZU1heCxcclxuICAgICAgICAgICAgICAgICAgICBzdGVwOiBjb25maWcuZGF0ZXRpbWVTdGVwLFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgLi4uY29uZmlnLFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIl19