import { __awaiter } from "tslib";
import { ComponentFactoryResolver, Injectable } from '@angular/core';
import { NotificationComponent } from '../../components/notification/notification.component';
import { I18nService } from '../i18n/i18n.service';
import { OverlayHostService } from '../overlay-host/overlay-host.service';
import * as i0 from "@angular/core";
import * as i1 from "../i18n/i18n.service";
import * as i2 from "../overlay-host/overlay-host.service";
// How many ms before the toast is dismissed.
const TOAST_DURATION = 3000;
/**
 * Provides toast notification functionality.
 */
export class NotificationService {
    constructor(i18nService, resolver, overlayHostService) {
        this.i18nService = i18nService;
        this.resolver = resolver;
        this.overlayHostService = overlayHostService;
        this.openToastRefs = [];
    }
    get hostView() {
        return this.overlayHostService.getHostView();
    }
    /**
     * Display a success toast notification
     */
    success(message, translationVars) {
        this.notify({
            message,
            translationVars,
            type: 'success',
        });
    }
    /**
     * Display an info toast notification
     */
    info(message, translationVars) {
        this.notify({
            message,
            translationVars,
            type: 'info',
        });
    }
    /**
     * Display a warning toast notification
     */
    warning(message, translationVars) {
        this.notify({
            message,
            translationVars,
            type: 'warning',
        });
    }
    /**
     * Display an error toast notification
     */
    error(message, translationVars) {
        this.notify({
            message,
            translationVars,
            type: 'error',
            duration: 20000,
        });
    }
    /**
     * Display a toast notification.
     */
    notify(config) {
        this.createToast(config);
    }
    /**
     * Load a ToastComponent into the DOM host location.
     */
    createToast(config) {
        return __awaiter(this, void 0, void 0, function* () {
            const toastFactory = this.resolver.resolveComponentFactory(NotificationComponent);
            const hostView = yield this.hostView;
            const ref = hostView.createComponent(toastFactory);
            const toast = ref.instance;
            const dismissFn = this.createDismissFunction(ref);
            toast.type = config.type || 'info';
            toast.message = config.message;
            toast.translationVars = this.translateTranslationVars(config.translationVars || {});
            toast.registerOnClickFn(dismissFn);
            let timerId;
            if (!config.duration || 0 < config.duration) {
                timerId = setTimeout(dismissFn, config.duration || TOAST_DURATION);
            }
            this.openToastRefs.unshift({ ref, timerId });
            setTimeout(() => this.calculatePositions());
        });
    }
    /**
     * Returns a function which will destroy the toast component and
     * remove it from the openToastRefs array.
     */
    createDismissFunction(ref) {
        return () => {
            const toast = ref.instance;
            const index = this.openToastRefs.map(o => o.ref).indexOf(ref);
            if (this.openToastRefs[index]) {
                clearTimeout(this.openToastRefs[index].timerId);
            }
            toast.fadeOut().then(() => {
                ref.destroy();
                this.openToastRefs.splice(index, 1);
                this.calculatePositions();
            });
        };
    }
    /**
     * Calculate and set the top offsets for each of the open toasts.
     */
    calculatePositions() {
        let cumulativeHeight = 10;
        this.openToastRefs.forEach(obj => {
            const toast = obj.ref.instance;
            toast.offsetTop = cumulativeHeight;
            cumulativeHeight += toast.getHeight() + 6;
        });
    }
    translateTranslationVars(translationVars) {
        for (const [key, val] of Object.entries(translationVars)) {
            if (typeof val === 'string') {
                translationVars[key] = this.i18nService.translate(val);
            }
        }
        return translationVars;
    }
}
NotificationService.ɵprov = i0.ɵɵdefineInjectable({ factory: function NotificationService_Factory() { return new NotificationService(i0.ɵɵinject(i1.I18nService), i0.ɵɵinject(i0.ComponentFactoryResolver), i0.ɵɵinject(i2.OverlayHostService)); }, token: NotificationService, providedIn: "root" });
NotificationService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
NotificationService.ctorParameters = () => [
    { type: I18nService },
    { type: ComponentFactoryResolver },
    { type: OverlayHostService }
];
//# sourceMappingURL=data:application/json;base64,