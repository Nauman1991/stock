import { ComponentFactoryResolver, Injectable } from '@angular/core';
import { from, Observable } from 'rxjs';
import { mergeMap } from 'rxjs/operators';
import { ModalDialogComponent } from '../../shared/components/modal-dialog/modal-dialog.component';
import { SimpleDialogComponent } from '../../shared/components/simple-dialog/simple-dialog.component';
import { OverlayHostService } from '../overlay-host/overlay-host.service';
import * as i0 from "@angular/core";
import * as i1 from "../overlay-host/overlay-host.service";
/**
 * This service is responsible for instantiating a ModalDialog component and
 * embedding the specified component within.
 */
export class ModalService {
    constructor(componentFactoryResolver, overlayHostService) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.overlayHostService = overlayHostService;
    }
    /**
     * Create a modal from a component. The component must implement the {@link Dialog} interface.
     * Additionally, the component should include templates for the title and the buttons to be
     * displayed in the modal dialog. See example:
     *
     * @example
     * ```
     * class MyDialog implements Dialog {
     *  resolveWith: (result?: any) => void;
     *
     *  okay() {
     *    doSomeWork().subscribe(result => {
     *      this.resolveWith(result);
     *    })
     *  }
     *
     *  cancel() {
     *    this.resolveWith(false);
     *  }
     * }
     * ```
     *
     * ```
     * <ng-template vdrDialogTitle>Title of the modal</ng-template>
     *
     * <p>
     *     My Content
     * </p>
     *
     * <ng-template vdrDialogButtons>
     *     <button type="button"
     *             class="btn"
     *             (click)="cancel()">Cancel</button>
     *     <button type="button"
     *             class="btn btn-primary"
     *             (click)="okay()">Okay</button>
     * </ng-template>
     * ```
     */
    fromComponent(component, options) {
        const modalFactory = this.componentFactoryResolver.resolveComponentFactory(ModalDialogComponent);
        return from(this.overlayHostService.getHostView()).pipe(mergeMap((hostView) => {
            const modalComponentRef = hostView.createComponent(modalFactory);
            const modalInstance = modalComponentRef.instance;
            modalInstance.childComponentType = component;
            modalInstance.options = options;
            return new Observable((subscriber) => {
                modalInstance.closeModal = (result) => {
                    modalComponentRef.destroy();
                    subscriber.next(result);
                    subscriber.complete();
                };
            });
        }));
    }
    /**
     * Displays a modal dialog with the provided title, body and buttons.
     */
    dialog(config) {
        return this.fromComponent(SimpleDialogComponent, {
            locals: config,
        });
    }
}
ModalService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ModalService_Factory() { return new ModalService(i0.ɵɵinject(i0.ComponentFactoryResolver), i0.ɵɵinject(i1.OverlayHostService)); }, token: ModalService, providedIn: "root" });
ModalService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
ModalService.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: OverlayHostService }
];
//# sourceMappingURL=data:application/json;base64,