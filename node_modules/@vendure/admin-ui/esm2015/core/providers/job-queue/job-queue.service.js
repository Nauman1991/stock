import { Injectable } from '@angular/core';
import { EMPTY, interval, of, Subject, timer } from 'rxjs';
import { debounceTime, map, mapTo, scan, shareReplay, switchMap } from 'rxjs/operators';
import { JobState, Permission } from '../../common/generated-types';
import { DataService } from '../../data/providers/data.service';
import * as i0 from "@angular/core";
import * as i1 from "../../data/providers/data.service";
export class JobQueueService {
    constructor(dataService) {
        this.dataService = dataService;
        this.updateJob$ = new Subject();
        this.onCompleteHandlers = new Map();
        this.checkForJobs();
        this.activeJobs$ = this.updateJob$.pipe(scan((jobMap, job) => this.handleJob(jobMap, job), new Map()), map(jobMap => Array.from(jobMap.values())), debounceTime(500), shareReplay(1));
        this.subscription = this.activeJobs$
            .pipe(switchMap(jobs => {
            if (jobs.length) {
                return interval(2500).pipe(mapTo(jobs));
            }
            else {
                return of([]);
            }
        }))
            .subscribe(jobs => {
            if (jobs.length) {
                this.dataService.settings.pollJobs(jobs.map(j => j.id)).single$.subscribe(data => {
                    data.jobsById.forEach(job => {
                        this.updateJob$.next(job);
                    });
                });
            }
        });
    }
    ngOnDestroy() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    }
    /**
     * After a given delay, checks the server for any active jobs.
     */
    checkForJobs(delay = 1000) {
        timer(delay)
            .pipe(switchMap(() => this.dataService.client.userStatus().mapSingle(data => data.userStatus)), switchMap(userStatus => {
            if (userStatus.permissions.includes(Permission.ReadSettings) && userStatus.isLoggedIn) {
                return this.dataService.settings.getRunningJobs().single$;
            }
            else {
                return EMPTY;
            }
        }))
            .subscribe(data => data.jobs.items.forEach(job => this.updateJob$.next(job)));
    }
    addJob(jobId, onComplete) {
        this.dataService.settings.getJob(jobId).single$.subscribe(({ job }) => {
            if (job) {
                this.updateJob$.next(job);
                if (onComplete) {
                    this.onCompleteHandlers.set(jobId, onComplete);
                }
            }
        });
    }
    handleJob(jobMap, job) {
        switch (job.state) {
            case JobState.RUNNING:
            case JobState.PENDING:
                jobMap.set(job.id, job);
                break;
            case JobState.COMPLETED:
            case JobState.FAILED:
            case JobState.CANCELLED:
                jobMap.delete(job.id);
                const handler = this.onCompleteHandlers.get(job.id);
                if (handler) {
                    handler(job);
                    this.onCompleteHandlers.delete(job.id);
                }
                break;
        }
        return jobMap;
    }
}
JobQueueService.ɵprov = i0.ɵɵdefineInjectable({ factory: function JobQueueService_Factory() { return new JobQueueService(i0.ɵɵinject(i1.DataService)); }, token: JobQueueService, providedIn: "root" });
JobQueueService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
JobQueueService.ctorParameters = () => [
    { type: DataService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiam9iLXF1ZXVlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvbGliL2NvcmUvc3JjL3Byb3ZpZGVycy9qb2ItcXVldWUvam9iLXF1ZXVlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBYSxNQUFNLGVBQWUsQ0FBQztBQUN0RCxPQUFPLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBYyxFQUFFLEVBQUUsT0FBTyxFQUFnQixLQUFLLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDckYsT0FBTyxFQUFFLFlBQVksRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxXQUFXLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFeEYsT0FBTyxFQUFtQixRQUFRLEVBQUUsVUFBVSxFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDckYsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLG1DQUFtQyxDQUFDOzs7QUFLaEUsTUFBTSxPQUFPLGVBQWU7SUFPeEIsWUFBb0IsV0FBd0I7UUFBeEIsZ0JBQVcsR0FBWCxXQUFXLENBQWE7UUFKcEMsZUFBVSxHQUFHLElBQUksT0FBTyxFQUFtQixDQUFDO1FBQzVDLHVCQUFrQixHQUFHLElBQUksR0FBRyxFQUEwQyxDQUFDO1FBSTNFLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUVwQixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUNuQyxJQUFJLENBQ0EsQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsRUFDNUMsSUFBSSxHQUFHLEVBQTJCLENBQ3JDLEVBQ0QsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFF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QUFvQjtRQUN4RSxRQUFRLEdBQUcsQ0FBQyxLQUFLLEVBQUU7WUFDZixLQUFLLFFBQVEsQ0FBQyxPQUFPLENBQUM7WUFDdEIsS0FBSyxRQUFRLENBQUMsT0FBTztnQkFDakIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxDQUFDO2dCQUN4QixNQUFNO1lBQ1YsS0FBSyxRQUFRLENBQUMsU0FBUyxDQUFDO1lBQ3hCLEtBQUssUUFBUSxDQUFDLE1BQU0sQ0FBQztZQUNyQixLQUFLLFFBQVEsQ0FBQyxTQUFTO2dCQUNuQixNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQztnQkFDdEIsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUM7Z0JBQ3BELElBQUksT0FBTyxFQUFFO29CQUNULE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztvQkFDYixJQUFJLENBQUMsa0JBQWtCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQztpQkFDMUM7Z0JBQ0QsTUFBTTtTQUNiO1FBQ0QsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQzs7OztZQWpHSixVQUFVLFNBQUM7Z0JBQ1IsVUFBVSxFQUFFLE1BQU07YUFDckI7OztZQUpRLFdBQVciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRU1QVFksIGludGVydmFsLCBPYnNlcnZhYmxlLCBvZiwgU3ViamVjdCwgU3Vic2NyaXB0aW9uLCB0aW1lciB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBkZWJvdW5jZVRpbWUsIG1hcCwgbWFwVG8sIHNjYW4sIHNoYXJlUmVwbGF5LCBzd2l0Y2hNYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcblxyXG5pbXBvcnQgeyBKb2JJbmZvRnJhZ21lbnQsIEpvYlN0YXRlLCBQZXJtaXNzaW9uIH0gZnJvbSAnLi4vLi4vY29tbW9uL2dlbmVyYXRlZC10eXBlcyc7XHJcbmltcG9ydCB7IERhdGFTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vZGF0YS9wcm92aWRlcnMvZGF0YS5zZXJ2aWNlJztcclxuXHJcbkBJbmplY3RhYmxlKHtcclxuICAgIHByb3ZpZGVkSW46ICdyb290JyxcclxufSlcclxuZXhwb3J0IGNsYXNzIEpvYlF1ZXVlU2VydmljZSBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XHJcbiAgICBhY3RpdmVKb2JzJDogT2JzZXJ2YWJsZTxKb2JJbmZvRnJhZ21lbnRbXT47XHJcblxyXG4gICAgcHJpdmF0ZSB1cGRhdGVKb2IkID0gbmV3IFN1YmplY3Q8Sm9iSW5mb0ZyYWdtZW50PigpO1xyXG4gICAgcHJpdmF0ZSBvbkNvbXBsZXRlSGFuZGxlcnMgPSBuZXcgTWFwPHN0cmluZywgKGpvYjogSm9iSW5mb0ZyYWdtZW50KSA9PiB2b2lkPigpO1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBzdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbjtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGRhdGFTZXJ2aWNlOiBEYXRhU2VydmljZSkge1xyXG4gICAgICAgIHRoaXMuY2hlY2tGb3JKb2JzKCk7XHJcblxyXG4gICAgICAgIHRoaXMuYWN0aXZlSm9icyQgPSB0aGlzLnVwZGF0ZUpvYiQucGlwZShcclxuICAgICAgICAgICAgc2NhbjxKb2JJbmZvRnJhZ21lbnQsIE1hcDxzdHJpbmcsIEpvYkluZm9GcmFnbWVudD4+KFxyXG4gICAgICAgICAgICAgICAgKGpvYk1hcCwgam9iKSA9PiB0aGlzLmhhbmRsZUpvYihqb2JNYXAsIGpvYiksXHJcbiAgICAgICAgICAgICAgICBuZXcgTWFwPHN0cmluZywgSm9iSW5mb0ZyYWdtZW50PigpLFxyXG4gICAgICAgICAgICApLFxyXG4gICAgICAgICAgICBtYXAoam9iTWFwID0+IEFycmF5LmZyb20oam9iTWFwLnZhbHVlcygpKSksXHJcbiAgICAgICAgICAgIGRlYm91bmNlVGltZSg1MDApLFxyXG4gICAgICAgICAgICBzaGFyZVJlcGxheSgxKSxcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbiA9IHRoaXMuYWN0aXZlSm9icyRcclxuICAgICAgICAgICAgLnBpcGUoXHJcbiAgICAgICAgICAgICAgICBzd2l0Y2hNYXAoam9icyA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGpvYnMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpbnRlcnZhbCgyNTAwKS5waXBlKG1hcFRvKGpvYnMpKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2YoW10pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgICAgIC5zdWJzY3JpYmUoam9icyA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoam9icy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGFTZXJ2aWNlLnNldHRpbmdzLnBvbGxKb2JzKGpvYnMubWFwKGogPT4gai5pZCkpLnNpbmdsZSQuc3Vic2NyaWJlKGRhdGEgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmpvYnNCeUlkLmZvckVhY2goam9iID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlSm9iJC5uZXh0KGpvYik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5zdWJzY3JpcHRpb24pIHtcclxuICAgICAgICAgICAgdGhpcy5zdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBZnRlciBhIGdpdmVuIGRlbGF5LCBjaGVja3MgdGhlIHNlcnZlciBmb3IgYW55IGFjdGl2ZSBqb2JzLlxyXG4gICAgICovXHJcbiAgICBjaGVja0ZvckpvYnMoZGVsYXk6IG51bWJlciA9IDEwMDApIHtcclxuICAgICAgICB0aW1lcihkZWxheSlcclxuICAgICAgICAgICAgLnBpcGUoXHJcbiAgICAgICAgICAgICAgICBzd2l0Y2hNYXAoKCkgPT4gdGhpcy5kYXRhU2VydmljZS5jbGllbnQudXNlclN0YXR1cygpLm1hcFNpbmdsZShkYXRhID0+IGRhdGEudXNlclN0YXR1cykpLFxyXG4gICAgICAgICAgICAgICAgc3dpdGNoTWFwKHVzZXJTdGF0dXMgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh1c2VyU3RhdHVzLnBlcm1pc3Npb25zLmluY2x1ZGVzKFBlcm1pc3Npb24uUmVhZFNldHRpbmdzKSAmJiB1c2VyU3RhdHVzLmlzTG9nZ2VkSW4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGF0YVNlcnZpY2Uuc2V0dGluZ3MuZ2V0UnVubmluZ0pvYnMoKS5zaW5nbGUkO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBFTVBUWTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAuc3Vic2NyaWJlKGRhdGEgPT4gZGF0YS5qb2JzLml0ZW1zLmZvckVhY2goam9iID0+IHRoaXMudXBkYXRlSm9iJC5uZXh0KGpvYikpKTtcclxuICAgIH1cclxuXHJcbiAgICBhZGRKb2Ioam9iSWQ6IHN0cmluZywgb25Db21wbGV0ZT86IChqb2I6IEpvYkluZm9GcmFnbWVudCkgPT4gdm9pZCkge1xyXG4gICAgICAgIHRoaXMuZGF0YVNlcnZpY2Uuc2V0dGluZ3MuZ2V0Sm9iKGpvYklkKS5zaW5nbGUkLnN1YnNjcmliZSgoeyBqb2IgfSkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoam9iKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUpvYiQubmV4dChqb2IpO1xyXG4gICAgICAgICAgICAgICAgaWYgKG9uQ29tcGxldGUpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm9uQ29tcGxldGVIYW5kbGVycy5zZXQoam9iSWQsIG9uQ29tcGxldGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBoYW5kbGVKb2Ioam9iTWFwOiBNYXA8c3RyaW5nLCBKb2JJbmZvRnJhZ21lbnQ+LCBqb2I6IEpvYkluZm9GcmFnbWVudCkge1xyXG4gICAgICAgIHN3aXRjaCAoam9iLnN0YXRlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgSm9iU3RhdGUuUlVOTklORzpcclxuICAgICAgICAgICAgY2FzZSBKb2JTdGF0ZS5QRU5ESU5HOlxyXG4gICAgICAgICAgICAgICAgam9iTWFwLnNldChqb2IuaWQsIGpvYik7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBKb2JTdGF0ZS5DT01QTEVURUQ6XHJcbiAgICAgICAgICAgIGNhc2UgSm9iU3RhdGUuRkFJTEVEOlxyXG4gICAgICAgICAgICBjYXNlIEpvYlN0YXRlLkNBTkNFTExFRDpcclxuICAgICAgICAgICAgICAgIGpvYk1hcC5kZWxldGUoam9iLmlkKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGhhbmRsZXIgPSB0aGlzLm9uQ29tcGxldGVIYW5kbGVycy5nZXQoam9iLmlkKTtcclxuICAgICAgICAgICAgICAgIGlmIChoYW5kbGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlcihqb2IpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMub25Db21wbGV0ZUhhbmRsZXJzLmRlbGV0ZShqb2IuaWQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBqb2JNYXA7XHJcbiAgICB9XHJcbn1cclxuIl19