import { Location } from '@angular/common';
import { ChangeDetectionStrategy, ChangeDetectorRef, Component } from '@angular/core';
import { FormBuilder, FormControl, Validators } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';
import { BaseDetailComponent, createUpdatedTranslatable, DataService, findTranslation, flattenFacetValues, ModalService, NotificationService, ServerConfigService, } from '@vendure/admin-ui/core';
import { normalizeString } from '@vendure/common/lib/normalize-string';
import { DEFAULT_CHANNEL_CODE } from '@vendure/common/lib/shared-constants';
import { notNullOrUndefined } from '@vendure/common/lib/shared-utils';
import { unique } from '@vendure/common/lib/unique';
import { combineLatest, EMPTY, merge } from 'rxjs';
import { debounceTime, distinctUntilChanged, map, mergeMap, shareReplay, startWith, switchMap, take, takeUntil, withLatestFrom, } from 'rxjs/operators';
import { ProductDetailService } from '../../providers/product-detail/product-detail.service';
import { ApplyFacetDialogComponent } from '../apply-facet-dialog/apply-facet-dialog.component';
import { AssignProductsToChannelDialogComponent } from '../assign-products-to-channel-dialog/assign-products-to-channel-dialog.component';
export class ProductDetailComponent extends BaseDetailComponent {
    constructor(route, router, serverConfigService, productDetailService, formBuilder, modalService, notificationService, dataService, location, changeDetector) {
        super(route, router, serverConfigService, dataService);
        this.productDetailService = productDetailService;
        this.formBuilder = formBuilder;
        this.modalService = modalService;
        this.notificationService = notificationService;
        this.dataService = dataService;
        this.location = location;
        this.changeDetector = changeDetector;
        this.filterInput = new FormControl('');
        this.assetChanges = {};
        this.variantAssetChanges = {};
        this.selectedVariantIds = [];
        this.variantDisplayMode = 'card';
        this.createVariantsConfig = { groups: [], variants: [] };
        this.customFields = this.getCustomFieldConfig('Product');
        this.customVariantFields = this.getCustomFieldConfig('ProductVariant');
        this.customOptionGroupFields = this.getCustomFieldConfig('ProductOptionGroup');
        this.customOptionFields = this.getCustomFieldConfig('ProductOption');
        this.detailForm = this.formBuilder.group({
            product: this.formBuilder.group({
                enabled: true,
                name: ['', Validators.required],
                autoUpdateVariantNames: true,
                slug: '',
                description: '',
                facetValueIds: [[]],
                customFields: this.formBuilder.group(this.customFields.reduce((hash, field) => (Object.assign(Object.assign({}, hash), { [field.name]: '' })), {})),
            }),
            variants: this.formBuilder.array([]),
        });
    }
    ngOnInit() {
        this.init();
        this.product$ = this.entity$;
        const variants$ = this.product$.pipe(map(product => product.variants));
        const filterTerm$ = this.filterInput.valueChanges.pipe(startWith(''), debounceTime(50), shareReplay());
        this.variants$ = combineLatest(variants$, filterTerm$).pipe(map(([variants, term]) => {
            return term
                ? variants.filter(v => {
                    const lcTerm = term.toLocaleLowerCase();
                    return (v.name.toLocaleLowerCase().includes(lcTerm) ||
                        v.sku.toLocaleLowerCase().includes(lcTerm));
                })
                : variants;
        }));
        this.taxCategories$ = this.productDetailService.getTaxCategories().pipe(takeUntil(this.destroy$));
        this.activeTab$ = this.route.paramMap.pipe(map(qpm => qpm.get('tab')));
        // FacetValues are provided initially by the nested array of the
        // Product entity, but once a fetch to get all Facets is made (as when
        // opening the FacetValue selector modal), then these additional values
        // are concatenated onto the initial array.
        this.facets$ = this.productDetailService.getFacets();
        const productFacetValues$ = this.product$.pipe(map(product => product.facetValues));
        const allFacetValues$ = this.facets$.pipe(map(flattenFacetValues));
        const productGroup = this.getProductFormGroup();
        const formFacetValueIdChanges$ = productGroup.valueChanges.pipe(map(val => val.facetValueIds), distinctUntilChanged());
        const formChangeFacetValues$ = combineLatest(formFacetValueIdChanges$, productFacetValues$, allFacetValues$).pipe(map(([ids, productFacetValues, allFacetValues]) => {
            const combined = [...productFacetValues, ...allFacetValues];
            return ids.map(id => combined.find(fv => fv.id === id)).filter(notNullOrUndefined);
        }));
        this.facetValues$ = merge(productFacetValues$, formChangeFacetValues$);
        this.productChannels$ = this.product$.pipe(map(p => p.channels));
        this.channelPriceIncludesTax$ = this.dataService.settings
            .getActiveChannel('cache-first')
            .refetchOnChannelChange()
            .mapStream(data => data.activeChannel.pricesIncludeTax)
            .pipe(shareReplay(1));
    }
    ngOnDestroy() {
        this.destroy();
    }
    navigateToTab(tabName) {
        this.location.replaceState(this.router
            .createUrlTree(['./', Object.assign(Object.assign({}, this.route.snapshot.params), { tab: tabName })], {
            queryParamsHandling: 'merge',
            relativeTo: this.route,
        })
            .toString());
    }
    isDefaultChannel(channelCode) {
        return channelCode === DEFAULT_CHANNEL_CODE;
    }
    assignToChannel() {
        this.productChannels$
            .pipe(take(1), switchMap(channels => {
            return this.modalService.fromComponent(AssignProductsToChannelDialogComponent, {
                size: 'lg',
                locals: {
                    productIds: [this.id],
                    currentChannelIds: channels.map(c => c.id),
                },
            });
        }))
            .subscribe();
    }
    removeFromChannel(channelId) {
        this.modalService
            .dialog({
            title: _('catalog.remove-product-from-channel'),
            buttons: [
                { type: 'secondary', label: _('common.cancel') },
                { type: 'danger', label: _('catalog.remove-from-channel'), returnValue: true },
            ],
        })
            .pipe(switchMap(response => response
            ? this.dataService.product.removeProductsFromChannel({
                channelId,
                productIds: [this.id],
            })
            : EMPTY))
            .subscribe(() => {
            this.notificationService.success(_('catalog.notify-remove-product-from-channel-success'));
        }, err => {
            this.notificationService.error(_('catalog.notify-remove-product-from-channel-error'));
        });
    }
    assignVariantToChannel(variant) {
        return this.modalService
            .fromComponent(AssignProductsToChannelDialogComponent, {
            size: 'lg',
            locals: {
                productIds: [this.id],
                productVariantIds: [variant.id],
                currentChannelIds: variant.channels.map(c => c.id),
            },
        })
            .subscribe();
    }
    removeVariantFromChannel({ channelId, variant, }) {
        this.modalService
            .dialog({
            title: _('catalog.remove-product-variant-from-channel'),
            buttons: [
                { type: 'secondary', label: _('common.cancel') },
                { type: 'danger', label: _('catalog.remove-from-channel'), returnValue: true },
            ],
        })
            .pipe(switchMap(response => response
            ? this.dataService.product.removeVariantsFromChannel({
                channelId,
                productVariantIds: [variant.id],
            })
            : EMPTY))
            .subscribe(() => {
            this.notificationService.success(_('catalog.notify-remove-variant-from-channel-success'));
        }, err => {
            this.notificationService.error(_('catalog.notify-remove-variant-from-channel-error'));
        });
    }
    customFieldIsSet(name) {
        return !!this.detailForm.get(['product', 'customFields', name]);
    }
    assetsChanged() {
        return !!Object.values(this.assetChanges).length;
    }
    variantAssetsChanged() {
        return !!Object.keys(this.variantAssetChanges).length;
    }
    variantAssetChange(event) {
        this.variantAssetChanges[event.variantId] = event;
    }
    /**
     * If creating a new product, automatically generate the slug based on the product name.
     */
    updateSlug(nameValue) {
        combineLatest(this.entity$, this.languageCode$)
            .pipe(take(1))
            .subscribe(([entity, languageCode]) => {
            const slugControl = this.detailForm.get(['product', 'slug']);
            const currentTranslation = findTranslation(entity, languageCode);
            const currentSlugIsEmpty = !currentTranslation || !currentTranslation.slug;
            if (slugControl && slugControl.pristine && currentSlugIsEmpty) {
                slugControl.setValue(normalizeString(`${nameValue}`, '-'));
            }
        });
    }
    selectProductFacetValue() {
        this.displayFacetValueModal().subscribe(facetValueIds => {
            if (facetValueIds) {
                const productGroup = this.getProductFormGroup();
                const currentFacetValueIds = productGroup.value.facetValueIds;
                productGroup.patchValue({
                    facetValueIds: unique([...currentFacetValueIds, ...facetValueIds]),
                });
                productGroup.markAsDirty();
            }
        });
    }
    updateProductOption(input) {
        combineLatest(this.product$, this.languageCode$)
            .pipe(take(1), mergeMap(([product, languageCode]) => this.productDetailService.updateProductOption(input, product, languageCode)))
            .subscribe(() => {
            this.notificationService.success(_('common.notify-update-success'), {
                entity: 'ProductOption',
            });
        }, err => {
            this.notificationService.error(_('common.notify-update-error'), {
                entity: 'ProductOption',
            });
        });
    }
    removeProductFacetValue(facetValueId) {
        const productGroup = this.getProductFormGroup();
        const currentFacetValueIds = productGroup.value.facetValueIds;
        productGroup.patchValue({
            facetValueIds: currentFacetValueIds.filter(id => id !== facetValueId),
        });
        productGroup.markAsDirty();
    }
    /**
     * Opens a dialog to select FacetValues to apply to the select ProductVariants.
     */
    selectVariantFacetValue(selectedVariantIds) {
        this.displayFacetValueModal()
            .pipe(withLatestFrom(this.variants$))
            .subscribe(([facetValueIds, variants]) => {
            if (facetValueIds) {
                for (const variantId of selectedVariantIds) {
                    const index = variants.findIndex(v => v.id === variantId);
                    const variant = variants[index];
                    const existingFacetValueIds = variant ? variant.facetValues.map(fv => fv.id) : [];
                    const variantFormGroup = this.detailForm.get(['variants', index]);
                    if (variantFormGroup) {
                        variantFormGroup.patchValue({
                            facetValueIds: unique([...existingFacetValueIds, ...facetValueIds]),
                        });
                        variantFormGroup.markAsDirty();
                    }
                }
                this.changeDetector.markForCheck();
            }
        });
    }
    variantsToCreateAreValid() {
        return (0 < this.createVariantsConfig.variants.length &&
            this.createVariantsConfig.variants.every(v => {
                return v.sku !== '';
            }));
    }
    displayFacetValueModal() {
        return this.productDetailService.getFacets().pipe(mergeMap(facets => this.modalService.fromComponent(ApplyFacetDialogComponent, {
            size: 'md',
            closable: true,
            locals: { facets },
        })), map(facetValues => facetValues && facetValues.map(v => v.id)));
    }
    create() {
        const productGroup = this.getProductFormGroup();
        if (!productGroup.dirty) {
            return;
        }
        combineLatest(this.product$, this.languageCode$)
            .pipe(take(1), mergeMap(([product, languageCode]) => {
            const newProduct = this.getUpdatedProduct(product, productGroup, languageCode);
            return this.productDetailService.createProductWithVariants(newProduct, this.createVariantsConfig, languageCode);
        }))
            .subscribe(({ createProductVariants, productId }) => {
            this.notificationService.success(_('common.notify-create-success'), {
                entity: 'Product',
            });
            this.assetChanges = {};
            this.variantAssetChanges = {};
            this.detailForm.markAsPristine();
            this.router.navigate(['../', productId], { relativeTo: this.route });
        }, err => {
            // tslint:disable-next-line:no-console
            console.error(err);
            this.notificationService.error(_('common.notify-create-error'), {
                entity: 'Product',
            });
        });
    }
    save() {
        combineLatest(this.product$, this.languageCode$, this.channelPriceIncludesTax$)
            .pipe(take(1), mergeMap(([product, languageCode, priceIncludesTax]) => {
            var _a, _b;
            const productGroup = this.getProductFormGroup();
            let productInput;
            let variantsInput;
            if (productGroup.dirty || this.assetsChanged()) {
                productInput = this.getUpdatedProduct(product, productGroup, languageCode);
            }
            const variantsArray = this.detailForm.get('variants');
            if ((variantsArray && variantsArray.dirty) || this.variantAssetsChanged()) {
                variantsInput = this.getUpdatedProductVariants(product, variantsArray, languageCode, priceIncludesTax);
            }
            return this.productDetailService.updateProduct({
                product,
                languageCode,
                autoUpdate: (_b = (_a = this.detailForm.get(['product', 'autoUpdateVariantNames'])) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : false,
                productInput,
                variantsInput,
            });
        }))
            .subscribe(result => {
            this.updateSlugAfterSave(result);
            this.detailForm.markAsPristine();
            this.assetChanges = {};
            this.variantAssetChanges = {};
            this.notificationService.success(_('common.notify-update-success'), {
                entity: 'Product',
            });
            this.changeDetector.markForCheck();
        }, err => {
            this.notificationService.error(_('common.notify-update-error'), {
                entity: 'Product',
            });
        });
    }
    canDeactivate() {
        return super.canDeactivate() && !this.assetChanges.assets && !this.assetChanges.featuredAsset;
    }
    /**
     * Sets the values of the form on changes to the product or current language.
     */
    setFormValues(product, languageCode) {
        const currentTranslation = findTranslation(product, languageCode);
        this.detailForm.patchValue({
            product: {
                enabled: product.enabled,
                name: currentTranslation ? currentTranslation.name : '',
                slug: currentTranslation ? currentTranslation.slug : '',
                description: currentTranslation ? currentTranslation.description : '',
                facetValueIds: product.facetValues.map(fv => fv.id),
            },
        });
        if (this.customFields.length) {
            const customFieldsGroup = this.detailForm.get(['product', 'customFields']);
            const cfCurrentTranslation = (currentTranslation && currentTranslation.customFields) || {};
            const cfProduct = product.customFields || {};
            for (const fieldDef of this.customFields) {
                const key = fieldDef.name;
                const value = fieldDef.type === 'localeString' ? cfCurrentTranslation[key] : cfProduct[key];
                const control = customFieldsGroup.get(key);
                if (control) {
                    control.patchValue(value);
                }
            }
        }
        const variantsFormArray = this.detailForm.get('variants');
        product.variants.forEach((variant, i) => {
            const variantTranslation = findTranslation(variant, languageCode);
            const facetValueIds = variant.facetValues.map(fv => fv.id);
            const group = {
                id: variant.id,
                enabled: variant.enabled,
                sku: variant.sku,
                name: variantTranslation ? variantTranslation.name : '',
                price: variant.price,
                priceWithTax: variant.priceWithTax,
                taxCategoryId: variant.taxCategory.id,
                stockOnHand: variant.stockOnHand,
                useGlobalOutOfStockThreshold: variant.useGlobalOutOfStockThreshold,
                outOfStockThreshold: variant.outOfStockThreshold,
                trackInventory: variant.trackInventory,
                facetValueIds,
            };
            let variantFormGroup = variantsFormArray.at(i);
            if (variantFormGroup) {
                variantFormGroup.patchValue(group);
            }
            else {
                variantFormGroup = this.formBuilder.group(Object.assign(Object.assign({}, group), { facetValueIds: this.formBuilder.control(facetValueIds) }));
                variantsFormArray.insert(i, variantFormGroup);
            }
            if (this.customVariantFields.length) {
                let customFieldsGroup = variantFormGroup.get(['customFields']);
                if (!customFieldsGroup) {
                    customFieldsGroup = this.formBuilder.group(this.customVariantFields.reduce((hash, field) => (Object.assign(Object.assign({}, hash), { [field.name]: '' })), {}));
                    variantFormGroup.addControl('customFields', customFieldsGroup);
                }
                for (const fieldDef of this.customVariantFields) {
                    const key = fieldDef.name;
                    const value = fieldDef.type === 'localeString'
                        ? variantTranslation.customFields[key]
                        : variant.customFields[key];
                    const control = customFieldsGroup.get(key);
                    if (control) {
                        control.patchValue(value);
                    }
                }
            }
        });
    }
    /**
     * Given a product and the value of the detailForm, this method creates an updated copy of the product which
     * can then be persisted to the API.
     */
    getUpdatedProduct(product, productFormGroup, languageCode) {
        var _a, _b;
        const updatedProduct = createUpdatedTranslatable({
            translatable: product,
            updatedFields: productFormGroup.value,
            customFieldConfig: this.customFields,
            languageCode,
            defaultTranslation: {
                languageCode,
                name: product.name || '',
                slug: product.slug || '',
                description: product.description || '',
            },
        });
        return Object.assign(Object.assign({}, updatedProduct), { assetIds: (_a = this.assetChanges.assets) === null || _a === void 0 ? void 0 : _a.map(a => a.id), featuredAssetId: (_b = this.assetChanges.featuredAsset) === null || _b === void 0 ? void 0 : _b.id, facetValueIds: productFormGroup.value.facetValueIds });
    }
    /**
     * Given an array of product variants and the values from the detailForm, this method creates an new array
     * which can be persisted to the API.
     */
    getUpdatedProductVariants(product, variantsFormArray, languageCode, priceIncludesTax) {
        const dirtyVariants = product.variants.filter((v, i) => {
            const formRow = variantsFormArray.get(i.toString());
            return formRow && formRow.dirty;
        });
        const dirtyVariantValues = variantsFormArray.controls.filter(c => c.dirty).map(c => c.value);
        if (dirtyVariants.length !== dirtyVariantValues.length) {
            throw new Error(_(`error.product-variant-form-values-do-not-match`));
        }
        return dirtyVariants
            .map((variant, i) => {
            var _a, _b;
            const formValue = dirtyVariantValues[i];
            const result = createUpdatedTranslatable({
                translatable: variant,
                updatedFields: formValue,
                customFieldConfig: this.customVariantFields,
                languageCode,
                defaultTranslation: {
                    languageCode,
                    name: '',
                },
            });
            result.taxCategoryId = formValue.taxCategoryId;
            result.facetValueIds = formValue.facetValueIds;
            result.price = priceIncludesTax ? formValue.priceWithTax : formValue.price;
            const assetChanges = this.variantAssetChanges[variant.id];
            if (assetChanges) {
                result.featuredAssetId = (_a = assetChanges.featuredAsset) === null || _a === void 0 ? void 0 : _a.id;
                result.assetIds = (_b = assetChanges.assets) === null || _b === void 0 ? void 0 : _b.map(a => a.id);
            }
            return result;
        })
            .filter(notNullOrUndefined);
    }
    getProductFormGroup() {
        return this.detailForm.get('product');
    }
    /**
     * The server may alter the slug value in order to normalize and ensure uniqueness upon saving.
     */
    updateSlugAfterSave(results) {
        const firstResult = results[0];
        const slugControl = this.detailForm.get(['product', 'slug']);
        function isUpdateMutation(input) {
            return input.hasOwnProperty('updateProduct');
        }
        if (slugControl && isUpdateMutation(firstResult)) {
            slugControl.setValue(firstResult.updateProduct.slug, { emitEvent: false });
        }
    }
}
ProductDetailComponent.decorators = [
    { type: Component, args: [{
                selector: 'vdr-product-detail',
                template: "<vdr-action-bar>\r\n    <vdr-ab-left>\r\n        <div class=\"flex clr-flex-row\">\r\n            <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\r\n            <clr-toggle-wrapper *vdrIfPermissions=\"['UpdateCatalog', 'UpdateProduct']\">\r\n                <input\r\n                    type=\"checkbox\"\r\n                    clrToggle\r\n                    name=\"enabled\"\r\n                    [formControl]=\"detailForm.get(['product', 'enabled'])\"\r\n                />\r\n                <label>{{ 'common.enabled' | translate }}</label>\r\n            </clr-toggle-wrapper>\r\n        </div>\r\n        <vdr-language-selector\r\n            [disabled]=\"isNew$ | async\"\r\n            [availableLanguageCodes]=\"availableLanguages$ | async\"\r\n            [currentLanguageCode]=\"languageCode$ | async\"\r\n            (languageCodeChange)=\"setLanguage($event)\"\r\n        ></vdr-language-selector>\r\n    </vdr-ab-left>\r\n\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"product-detail\"></vdr-action-bar-items>\r\n        <button\r\n            class=\"btn btn-primary\"\r\n            *ngIf=\"isNew$ | async; else updateButton\"\r\n            (click)=\"create()\"\r\n            [disabled]=\"detailForm.invalid || detailForm.pristine || !variantsToCreateAreValid()\"\r\n        >\r\n            {{ 'common.create' | translate }}\r\n        </button>\r\n        <ng-template #updateButton>\r\n            <button\r\n                *vdrIfPermissions=\"['UpdateCatalog', 'UpdateProduct']\"\r\n                class=\"btn btn-primary\"\r\n                (click)=\"save()\"\r\n                [disabled]=\"\r\n                    (detailForm.invalid || detailForm.pristine) && !assetsChanged() && !variantAssetsChanged()\r\n                \"\r\n            >\r\n                {{ 'common.update' | translate }}\r\n            </button>\r\n        </ng-template>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<form\r\n    class=\"form\"\r\n    [formGroup]=\"detailForm\"\r\n    *ngIf=\"product$ | async as product\"\r\n>\r\n    <button type=\"submit\" hidden x-data=\"prevents enter key from triggering other buttons\"></button>\r\n    <clr-tabs>\r\n        <clr-tab>\r\n            <button clrTabLink (click)=\"navigateToTab('details')\">\r\n                {{ 'catalog.product-details' | translate }}\r\n            </button>\r\n            <clr-tab-content *clrIfActive=\"(activeTab$ | async) === 'details'\">\r\n                <div class=\"clr-row\">\r\n                    <div class=\"clr-col\">\r\n                        <section class=\"form-block\" formGroupName=\"product\">\r\n                            <ng-container *vdrIfMultichannel>\r\n                                <vdr-form-item\r\n                                    [label]=\"'common.channels' | translate\"\r\n                                    *vdrIfDefaultChannelActive\r\n                                >\r\n                                    <div class=\"flex channel-assignment\">\r\n                                        <ng-container *ngFor=\"let channel of productChannels$ | async\">\r\n                                            <vdr-chip\r\n                                                *ngIf=\"!isDefaultChannel(channel.code)\"\r\n                                                icon=\"times-circle\"\r\n                                                (iconClick)=\"removeFromChannel(channel.id)\"\r\n                                            >\r\n                                                <vdr-channel-badge\r\n                                                    [channelCode]=\"channel.code\"\r\n                                                ></vdr-channel-badge>\r\n                                                {{ channel.code | channelCodeToLabel }}\r\n                                            </vdr-chip>\r\n                                        </ng-container>\r\n                                        <button class=\"btn btn-sm\" (click)=\"assignToChannel()\">\r\n                                            <clr-icon shape=\"layers\"></clr-icon>\r\n                                            {{ 'catalog.assign-to-channel' | translate }}\r\n                                        </button>\r\n                                    </div>\r\n                                </vdr-form-item>\r\n                            </ng-container>\r\n                            <vdr-form-field [label]=\"'catalog.product-name' | translate\" for=\"name\">\r\n                                <input\r\n                                    id=\"name\"\r\n                                    type=\"text\"\r\n                                    formControlName=\"name\"\r\n                                    [readonly]=\"!(['UpdateCatalog', 'UpdateProduct'] | hasPermission)\"\r\n                                    (input)=\"updateSlug($event.target.value)\"\r\n                                />\r\n                            </vdr-form-field>\r\n                            <div\r\n                                class=\"auto-rename-wrapper\"\r\n                                [class.visible]=\"\r\n                                    (isNew$ | async) === false && detailForm.get(['product', 'name'])?.dirty\r\n                                \"\r\n                            >\r\n                                <clr-checkbox-wrapper>\r\n                                    <input\r\n                                        clrCheckbox\r\n                                        type=\"checkbox\"\r\n                                        id=\"auto-update\"\r\n                                        formControlName=\"autoUpdateVariantNames\"\r\n                                    />\r\n                                    <label>{{\r\n                                        'catalog.auto-update-product-variant-name' | translate\r\n                                    }}</label>\r\n                                </clr-checkbox-wrapper>\r\n                            </div>\r\n                            <vdr-form-field\r\n                                [label]=\"'catalog.slug' | translate\"\r\n                                for=\"slug\"\r\n                                [errors]=\"{ pattern: 'catalog.slug-pattern-error' | translate }\"\r\n                            >\r\n                                <input\r\n                                    id=\"slug\"\r\n                                    type=\"text\"\r\n                                    formControlName=\"slug\"\r\n                                    [readonly]=\"!(['UpdateCatalog', 'UpdateProduct'] | hasPermission)\"\r\n                                    pattern=\"[a-z0-9_-]+\"\r\n                                />\r\n                            </vdr-form-field>\r\n                            <vdr-rich-text-editor\r\n                                formControlName=\"description\"\r\n                                [readonly]=\"!(['UpdateCatalog', 'UpdateProduct'] | hasPermission)\"\r\n                                [label]=\"'common.description' | translate\"\r\n                            ></vdr-rich-text-editor>\r\n\r\n                            <section formGroupName=\"customFields\" *ngIf=\"customFields.length\">\r\n                                <label>{{ 'common.custom-fields' | translate }}</label>\r\n                                <ng-container *ngFor=\"let customField of customFields\">\r\n                                    <vdr-custom-field-control\r\n                                        *ngIf=\"customFieldIsSet(customField.name)\"\r\n                                        entityName=\"Product\"\r\n                                        [customFieldsFormGroup]=\"detailForm.get(['product', 'customFields'])\"\r\n                                        [customField]=\"customField\"\r\n                                        [readonly]=\"!(['UpdateCatalog', 'UpdateProduct'] | hasPermission)\"\r\n                                    ></vdr-custom-field-control>\r\n                                </ng-container>\r\n                            </section>\r\n\r\n                            <div class=\"facets\">\r\n                                <vdr-facet-value-chip\r\n                                    *ngFor=\"let facetValue of facetValues$ | async\"\r\n                                    [facetValue]=\"facetValue\"\r\n                                    [removable]=\"['UpdateCatalog', 'UpdateProduct'] | hasPermission\"\r\n                                    (remove)=\"removeProductFacetValue(facetValue.id)\"\r\n                                ></vdr-facet-value-chip>\r\n                                <button\r\n                                    class=\"btn btn-sm btn-secondary\"\r\n                                    *vdrIfPermissions=\"['UpdateCatalog', 'UpdateProduct']\"\r\n                                    (click)=\"selectProductFacetValue()\"\r\n                                >\r\n                                    <clr-icon shape=\"plus\"></clr-icon>\r\n                                    {{ 'catalog.add-facets' | translate }}\r\n                                </button>\r\n                            </div>\r\n                        </section>\r\n                    </div>\r\n                    <div class=\"clr-col-md-auto\">\r\n                        <vdr-product-assets\r\n                            [assets]=\"assetChanges.assets || product.assets\"\r\n                            [featuredAsset]=\"assetChanges.featuredAsset || product.featuredAsset\"\r\n                            (change)=\"assetChanges = $event\"\r\n                        ></vdr-product-assets>\r\n                    </div>\r\n                </div>\r\n\r\n                <div *ngIf=\"isNew$ | async\">\r\n                    <h4>{{ 'catalog.product-variants' | translate }}</h4>\r\n                    <vdr-generate-product-variants\r\n                        (variantsChange)=\"createVariantsConfig = $event\"\r\n                    ></vdr-generate-product-variants>\r\n                </div>\r\n            </clr-tab-content>\r\n        </clr-tab>\r\n        <clr-tab *ngIf=\"!(isNew$ | async)\">\r\n            <button clrTabLink (click)=\"navigateToTab('variants')\">\r\n                {{ 'catalog.product-variants' | translate }}\r\n            </button>\r\n            <clr-tab-content *clrIfActive=\"(activeTab$ | async) === 'variants'\">\r\n                <section class=\"form-block\">\r\n                    <div class=\"view-mode\">\r\n                        <div class=\"btn-group\">\r\n                            <button\r\n                                class=\"btn btn-secondary-outline\"\r\n                                (click)=\"variantDisplayMode = 'card'\"\r\n                                [class.btn-primary]=\"variantDisplayMode === 'card'\"\r\n                            >\r\n                                <clr-icon shape=\"list\"></clr-icon>\r\n                                {{ 'catalog.display-variant-cards' | translate }}\r\n                            </button>\r\n                            <button\r\n                                class=\"btn\"\r\n                                (click)=\"variantDisplayMode = 'table'\"\r\n                                [class.btn-primary]=\"variantDisplayMode === 'table'\"\r\n                            >\r\n                                <clr-icon shape=\"table\"></clr-icon>\r\n                                {{ 'catalog.display-variant-table' | translate }}\r\n                            </button>\r\n                        </div>\r\n                        <div class=\"variant-filter\">\r\n                            <input\r\n                                [formControl]=\"filterInput\"\r\n                                [placeholder]=\"'catalog.filter-by-name-or-sku' | translate\"\r\n                            />\r\n                            <button class=\"icon-button\" (click)=\"filterInput.setValue('')\">\r\n                                <clr-icon shape=\"times\"></clr-icon>\r\n                            </button>\r\n                        </div>\r\n                        <div class=\"flex-spacer\"></div>\r\n                        <a\r\n                            *vdrIfPermissions=\"['UpdateCatalog', 'UpdateProduct']\"\r\n                            [routerLink]=\"['./', 'manage-variants']\"\r\n                            class=\"btn btn-secondary edit-variants-btn\"\r\n                        >\r\n                            <clr-icon shape=\"add-text\"></clr-icon>\r\n                            {{ 'catalog.manage-variants' | translate }}\r\n                        </a>\r\n                    </div>\r\n\r\n                    <vdr-product-variants-table\r\n                        *ngIf=\"variantDisplayMode === 'table'\"\r\n                        [variants]=\"variants$ | async\"\r\n                        [optionGroups]=\"product.optionGroups\"\r\n                        [channelPriceIncludesTax]=\"channelPriceIncludesTax$ | async\"\r\n                        [productVariantsFormArray]=\"detailForm.get('variants')\"\r\n                        [pendingAssetChanges]=\"variantAssetChanges\"\r\n                    ></vdr-product-variants-table>\r\n                    <vdr-product-variants-list\r\n                        *ngIf=\"variantDisplayMode === 'card'\"\r\n                        [variants]=\"variants$ | async\"\r\n                        [channelPriceIncludesTax]=\"channelPriceIncludesTax$ | async\"\r\n                        [facets]=\"facets$ | async\"\r\n                        [optionGroups]=\"product.optionGroups\"\r\n                        [productVariantsFormArray]=\"detailForm.get('variants')\"\r\n                        [taxCategories]=\"taxCategories$ | async\"\r\n                        [customFields]=\"customVariantFields\"\r\n                        [customOptionFields]=\"customOptionFields\"\r\n                        [activeLanguage]=\"languageCode$ | async\"\r\n                        [pendingAssetChanges]=\"variantAssetChanges\"\r\n                        (assignToChannel)=\"assignVariantToChannel($event)\"\r\n                        (removeFromChannel)=\"removeVariantFromChannel($event)\"\r\n                        (assetChange)=\"variantAssetChange($event)\"\r\n                        (updateProductOption)=\"updateProductOption($event)\"\r\n                        (selectionChange)=\"selectedVariantIds = $event\"\r\n                        (selectFacetValueClick)=\"selectVariantFacetValue($event)\"\r\n                    ></vdr-product-variants-list>\r\n                </section>\r\n            </clr-tab-content>\r\n        </clr-tab>\r\n    </clr-tabs>\r\n</form>\r\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [":host ::ng-deep trix-toolbar{top:24px}vdr-action-bar clr-toggle-wrapper{margin-top:12px}.variant-filter{flex:1;display:flex}.variant-filter input{flex:1;max-width:none;border-radius:3px 0 0 3px!important}.variant-filter .icon-button{border:1px solid var(--color-component-border-300);background-color:var(--color-component-bg-100);border-radius:0 3px 3px 0;border-left:none}.group-name{padding-right:6px}.view-mode{display:flex;justify-content:flex-end;align-items:center}.edit-variants-btn{margin-top:0}.channel-assignment{flex-wrap:wrap}.auto-rename-wrapper{overflow:hidden;max-height:0;padding-left:9.5rem;margin-bottom:0;transition:max-height .2s,margin-bottom .2s}.auto-rename-wrapper.visible{max-height:24px;margin-bottom:12px}"]
            },] }
];
ProductDetailComponent.ctorParameters = () => [
    { type: ActivatedRoute },
    { type: Router },
    { type: ServerConfigService },
    { type: ProductDetailService },
    { type: FormBuilder },
    { type: ModalService },
    { type: NotificationService },
    { type: DataService },
    { type: Location },
    { type: ChangeDetectorRef }
];
//# sourceMappingURL=data:application/json;base64,