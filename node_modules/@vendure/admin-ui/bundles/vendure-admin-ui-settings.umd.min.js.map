{"version":3,"sources":["../../src/lib/settings/src/components/add-country-to-zone-dialog/add-country-to-zone-dialog.component.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/settings/src/components/admin-detail/admin-detail.component.ts","../../src/lib/settings/src/components/administrator-list/administrator-list.component.ts","../../src/lib/settings/src/components/channel-detail/channel-detail.component.ts","../../src/lib/settings/src/components/channel-list/channel-list.component.ts","../../src/lib/settings/src/components/country-detail/country-detail.component.ts","../../src/lib/settings/src/components/country-list/country-list.component.ts","../../src/lib/settings/src/components/global-settings/global-settings.component.ts","../../src/lib/settings/src/components/payment-method-detail/payment-method-detail.component.ts","../../src/lib/settings/src/components/payment-method-list/payment-method-list.component.ts","../../src/lib/settings/src/components/permission-grid/permission-grid.component.ts","../../src/lib/settings/src/components/profile/profile.component.ts","../../src/lib/settings/src/components/role-detail/role-detail.component.ts","../../src/lib/settings/src/components/role-list/role-list.component.ts","../../src/lib/settings/src/components/shipping-eligibility-test-result/shipping-eligibility-test-result.component.ts","../../src/lib/settings/src/components/shipping-method-detail/shipping-method-detail.component.ts","../../src/lib/settings/src/components/shipping-method-list/shipping-method-list.component.ts","../../src/lib/settings/src/components/shipping-method-test-result/shipping-method-test-result.component.ts","../../src/lib/settings/src/components/tax-category-detail/tax-category-detail.component.ts","../../src/lib/settings/src/components/tax-category-list/tax-category-list.component.ts","../../src/lib/settings/src/components/tax-rate-detail/tax-rate-detail.component.ts","../../src/lib/settings/src/components/tax-rate-list/tax-rate-list.component.ts","../../src/lib/settings/src/components/test-address-form/test-address-form.component.ts","../../src/lib/settings/src/components/test-order-builder/test-order-builder.component.ts","../../src/lib/settings/src/components/zone-detail-dialog/zone-detail-dialog.component.ts","../../src/lib/settings/src/components/zone-list/zone-list.component.ts","../../src/lib/settings/src/components/zone-member-list/zone-member-controls.directive.ts","../../src/lib/settings/src/components/zone-member-list/zone-member-list-header.directive.ts","../../src/lib/settings/src/components/zone-member-list/zone-member-list.component.ts","../../src/lib/settings/src/providers/routing/administrator-resolver.ts","../../src/lib/settings/src/providers/routing/channel-resolver.ts","../../src/lib/settings/src/providers/routing/country-resolver.ts","../../src/lib/settings/src/providers/routing/global-settings-resolver.ts","../../src/lib/settings/src/providers/routing/payment-method-resolver.ts","../../src/lib/settings/src/providers/routing/profile-resolver.ts","../../src/lib/settings/src/providers/routing/role-resolver.ts","../../src/lib/settings/src/providers/routing/shipping-method-resolver.ts","../../src/lib/settings/src/providers/routing/tax-category-resolver.ts","../../src/lib/settings/src/providers/routing/tax-rate-resolver.ts","../../src/lib/settings/src/settings.routes.ts","../../src/lib/settings/src/settings.module.ts"],"names":["AddCountryToZoneDialogComponent","dataService","this","currentMembers","selectedMemberIds","prototype","ngOnInit","currentMemberIds","map","m","id","availableCountries$","settings","getCountries","mapStream","data","countries","items","pipe","filter","c","includes","cancel","resolveWith","add","Component","args","selector","template","changeDetection","ChangeDetectionStrategy","OnPush","DataService","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","call","__extends","TypeError","String","__","constructor","create","__values","o","s","Symbol","iterator","i","length","next","value","done","__read","n","r","e","ar","push","error","__spread","arguments","concat","AdminDetailComponent","router","route","serverConfigService","changeDetector","formBuilder","notificationService","_this","_super","selectedRoles","selectedRolePermissions","selectedChannelId","customFields","getCustomFieldConfig","detailForm","group","emailAddress","Validators","required","firstName","lastName","password","roles","reduce","hash","field","assign","_a","name","getAvailableChannels","values","init","administrator$","entity$","allRoles$","administrator","getRoles","item","code","CUSTOMER_ROLE_CODE","client","userStatus","single$","subscribe","permissions","Permission","UpdateAdministrator","rolesSelect","get","disable","permissionDefinitions","getPermissionDefinitions","ngOnDestroy","destroy","customFieldIsSet","rolesChanged","buildPermissionsMap","getPermissionsForSelectedChannel","getActivePermissions","input","entries","_b","permission","channels","channelId","formValue","roleIds","role","createAdministrator","success","_","entity","markAsPristine","markForCheck","navigate","relativeTo","err","save","take","mergeMap","updateAdministrator","setFormValues","languageCode","patchValue","user","customFieldsGroup","_c","key","control","passwordControl","setValidators","permissionsControl","channelIdPermissionsMap","Map","channelIdCodeMap","roles_1","roles_1_1","channel","permissionSet","Set","forEach","set","_e","e_3","_f","_g","from","keys","_h","permissionsHash","_j","e_5","_k","def","has","channelCode","BaseDetailComponent","Router","ActivatedRoute","ServerConfigService","ChangeDetectorRef","FormBuilder","NotificationService","AdministratorListComponent","modalService","setQueryFn","_i","getAdministrators","apply","administrators","deleteAdministrator","dialog","title","body","buttons","type","label","returnValue","switchMap","res","EMPTY","refresh","BaseListComponent","ModalService","ChannelDetailComponent","currencyCodes","CurrencyCode","updatePermission","SuperAdmin","UpdateChannel","CreateChannel","token","pricesIncludeTax","currencyCode","defaultShippingZoneId","defaultLanguageCode","defaultTaxZoneId","zones$","getZones","mapSingle","zones","availableLanguageCodes$","getAvailableLanguages","saveButtonEnabled","dirty","valid","createChannel","auth","currentUser","me","updateUserChannels","__typename","message","updateChannel","generateToken","defaultShippingZone","defaultTaxZone","DEFAULT_CHANNEL_CODE","codeControl","randomString","Math","random","toString","substr","ChannelListComponent","refresh$","Subject","channels$","startWith","getChannels","isDefaultChannel","deleteChannel","response","CountryDetailComponent","UpdateSettings","UpdateCountry","enabled","country$","combineLatest","languageCode$","country","createUpdatedTranslatable","translatable","updatedFields","defaultTranslation","createCountry","updateCountry","currentTranslation","findTranslation","CountryListComponent","searchTerm","FormControl","destroy$","countries$","valueChanges","term","stream$","tap","countriesWithZones$","z","members","find","complete","deleteCountry","countryId","result","DeletionResult","DELETED","isZone","GlobalSettingsComponent","languageCodes","LanguageCode","UpdateGlobalSettings","availableLanguages","trackInventory","outOfStockThreshold","languagesSelect","updateGlobalSettings","refreshGlobalSettings","withLatestFrom","uiState","globalSettings","availableLangs","contentLanguage","setContentLanguage","PaymentMethodDetailComponent","checkers","handlers","UpdatePaymentMethod","description","checker","handler","getPaymentMethodOperations","paymentMethodEligibilityCheckers","paymentMethodHandlers","selectedCheckerDefinition","selectedHandlerDefinition","updateCode","currentCode","nameValue","pristine","setValue","normalizeString","configArgsIsPopulated","configArgsGroup","controls","selectChecker","selectedChecker","configurableDefinitionToInstance","formControl","clearValidators","updateValueAndValidity","onlySelf","markAsDirty","selectHandler","selectedHandler","removeChecker","removeHandler","toConfigurableOperationInput","createPaymentMethod","updatePaymentMethod","paymentMethod","a","getConfigArgValue","PaymentMethodListComponent","getPaymentMethods","refetchOnChannelChange","paymentMethods","deletePaymentMethod","paymentMethodId","showModalAndDelete","PermissionGridComponent","readonly","permissionChange","EventEmitter","buildGrid","setPermission","emit","toggleAll","defs","some","activePermissions","defs_1","defs_1_1","crudGroups","nonCrud","crudRe","_d","test","groupName","match","existing","assignable","gridData","extractCrudDescription","replace","Input","Output","ProfileComponent","updateActiveAdministrator","RoleDetailComponent","channelIds","role$","change","currentPermissions","newValue","unique","createRole","updateRole","detectChanges","RoleListComponent","initialLimit","displayLimit","visibleRoles$","items$","toggleDisplayLimit","isDefaultRole","SUPER_ADMIN_ROLE_CODE","deleteRole","okToRun","testDataUpdated","runTest","ShippingMethodDetailComponent","calculators","fulfillmentHandlers","UpdateShippingMethod","fetchTestResult$","fulfillmentHandler","calculator","shippingMethod","getShippingMethodOperations","shippingEligibilityCheckers","shippingCalculators","selectedCalculatorDefinition","activeChannel$","getActiveChannel","activeChannel","testResult$","address","lines","selectedCalculator","of","undefined","shippingAddress","streetLine1","l","productVariantId","quantity","testShippingMethod","merge","takeUntil","selectCalculator","getUpdatedShippingMethod","createShippingMethod","updateShippingMethod","setTestOrderLines","event","testOrderLines","setTestAddress","testAddress","allTestDataPresent","formGroup","customFieldConfig","fulfillmentHandlerCode","fieldDef","ShippingMethodListComponent","getShippingMethods","shippingMethods","testEligibleShippingMethods","availableLanguages$","contentLanguage$","deleteShippingMethod","setLanguage","TaxCategoryDetailComponent","UpdateTaxCategory","isDefault","taxCategory$","createTaxCategory","taxCategory","updateTaxCategory","TaxCategoryListComponent","queryResult","getTaxCategories","taxCategories$","taxCategories","deleteTaxCategory","ref","refetch","TaxRateDetailComponent","UpdateTaxRate","taxCategoryId","zoneId","customerGroupId","categoryId","createTaxRate","taxRate","updateTaxRate","category","zone","customerGroup","TaxRateListComponent","getTaxRates","taxRates","deleteTaxRate","TestAddressFormComponent","localStorageService","addressChange","getAvailableCountries","storedValue","getForCurrentLocation","initialValue","city","countryCode","postalCode","province","form","subscription","setForCurrentLocation","unsubscribe","LocalStorageService","TestOrderBuilderComponent","orderLinesChange","defineProperty","sum","unitPriceWithTax","loadFromLocalStorage","selectResult","addToLines","productVariantName","preview","productAsset","sku","priceWithTax","persistToLocalStorage","updateQuantity","removeLine","line","ZoneDetailDialogComponent","ZoneListComponent","activeZoneId$","paramMap","pm","distinctUntilChanged","activeZone$","activeZoneId","fromComponent","locals","createZone","memberIds","delete","deleteZone","errorMessage","update","updateZone","closeMembers","params","snapshot","contents","queryParamsHandling","addToZone","zoneName","size","addMembersToZone","mapTo","countryCount","removeFromZone","removeMembersFromZone","templateRef","Directive","TemplateRef","ZoneMemberListComponent","selectionChange","filterTerm","isMemberSelected","member","indexOf","filteredMembers","term_1","toLocaleLowerCase","areAllSelected","toggleSelectAll","v","toggleSelectMember","ContentChild","ZoneMemberListHeaderDirective","ZoneMemberControlsDirective","AdministratorResolver","createdAt","updatedAt","getAdministrator","BaseEntityResolver","Injectable","providedIn","ChannelResolver","USD","getDefaultUiLanguage","getChannel","CountryResolver","translations","getCountry","GlobalSettingsResolver","getGlobalSettings","PaymentMethodResolver","getPaymentMethod","ProfileResolver","getActiveAdministrator","activeAdministrator","RoleResolver","getRole","ShippingMethodResolver","getShippingMethod","TaxCategoryResolver","getTaxCategory","TaxRateResolver","getTaxRate","breadcrumb","ɵ1","ɵ2","administratorBreadcrumb","ɵ3","ɵ4","channelBreadcrumb","ɵ5","ɵ6","roleBreadcrumb","ɵ7","ɵ8","taxCategoryBreadcrumb","ɵ9","ɵ10","taxRateBreadcrumb","ɵ11","ɵ12","countryBreadcrumb","ɵ13","ɵ14","ɵ15","shippingMethodBreadcrumb","ɵ16","ɵ17","paymentMethodBreadcrumb","ɵ18","settingsRoutes","path","component","resolve","createResolveData","canDeactivate","CanDeactivateDetailGuard","ɵ0","detailBreadcrumb","breadcrumbKey","getName","admin","promotion","method","NgModule","imports","SharedModule","RouterModule","forChild","declarations","ShippingMethodTestResultComponent","ShippingEligibilityTestResultComponent"],"mappings":"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","sourcesContent":["import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { DataService, Dialog, GetCountryList, GetZones } from '@vendure/admin-ui/core';\r\nimport { Observable } from 'rxjs';\r\nimport { filter, map } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'vdr-add-country-to-zone-dialog',\r\n    templateUrl: './add-country-to-zone-dialog.component.html',\r\n    styleUrls: ['./add-country-to-zone-dialog.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class AddCountryToZoneDialogComponent implements Dialog<string[]>, OnInit {\r\n    resolveWith: (result?: string[]) => void;\r\n    zoneName: string;\r\n    currentMembers: GetZones.Members[] = [];\r\n    availableCountries$: Observable<GetCountryList.Items[]>;\r\n    selectedMemberIds: string[] = [];\r\n\r\n    constructor(private dataService: DataService) {}\r\n\r\n    ngOnInit(): void {\r\n        const currentMemberIds = this.currentMembers.map(m => m.id);\r\n        this.availableCountries$ = this.dataService.settings\r\n            .getCountries(999)\r\n            .mapStream(data => data.countries.items)\r\n            .pipe(map(countries => countries.filter(c => !currentMemberIds.includes(c.id))));\r\n    }\r\n\r\n    cancel() {\r\n        this.resolveWith();\r\n    }\r\n\r\n    add() {\r\n        this.resolveWith(this.selectedMemberIds);\r\n    }\r\n}\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from) {\r\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\r\n        to[j] = from[i];\r\n    return to;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport { BaseDetailComponent, CustomFieldConfig, PermissionDefinition } from '@vendure/admin-ui/core';\nimport {\n    Administrator,\n    CreateAdministratorInput,\n    GetAdministrator,\n    LanguageCode,\n    Permission,\n    Role,\n    RoleFragment,\n    UpdateAdministratorInput,\n} from '@vendure/admin-ui/core';\nimport { NotificationService } from '@vendure/admin-ui/core';\nimport { DataService } from '@vendure/admin-ui/core';\nimport { ServerConfigService } from '@vendure/admin-ui/core';\nimport { CUSTOMER_ROLE_CODE } from '@vendure/common/lib/shared-constants';\nimport { Observable } from 'rxjs';\nimport { mergeMap, take } from 'rxjs/operators';\n\nexport interface PermissionsByChannel {\n    channelId: string;\n    channelCode: string;\n    permissions: { [K in Permission]: boolean };\n}\n\n@Component({\n    selector: 'vdr-admin-detail',\n    templateUrl: './admin-detail.component.html',\n    styleUrls: ['./admin-detail.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AdminDetailComponent\n    extends BaseDetailComponent<GetAdministrator.Administrator>\n    implements OnInit, OnDestroy {\n    customFields: CustomFieldConfig[];\n    administrator$: Observable<GetAdministrator.Administrator>;\n    permissionDefinitions: PermissionDefinition[];\n    allRoles$: Observable<Role.Fragment[]>;\n    selectedRoles: Role.Fragment[] = [];\n    detailForm: FormGroup;\n    selectedRolePermissions: { [channelId: string]: PermissionsByChannel } = {} as any;\n    selectedChannelId: string | null = null;\n\n    getAvailableChannels(): PermissionsByChannel[] {\n        return Object.values(this.selectedRolePermissions);\n    }\n\n    constructor(\n        router: Router,\n        route: ActivatedRoute,\n        serverConfigService: ServerConfigService,\n        private changeDetector: ChangeDetectorRef,\n        protected dataService: DataService,\n        private formBuilder: FormBuilder,\n        private notificationService: NotificationService,\n    ) {\n        super(route, router, serverConfigService, dataService);\n        this.customFields = this.getCustomFieldConfig('Administrator');\n        this.detailForm = this.formBuilder.group({\n            emailAddress: ['', Validators.required],\n            firstName: ['', Validators.required],\n            lastName: ['', Validators.required],\n            password: [''],\n            roles: [[]],\n            customFields: this.formBuilder.group(\n                this.customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\n            ),\n        });\n    }\n\n    ngOnInit() {\n        this.init();\n        this.administrator$ = this.entity$;\n        this.allRoles$ = this.dataService.administrator\n            .getRoles(999)\n            .mapStream(item => item.roles.items.filter(i => i.code !== CUSTOMER_ROLE_CODE));\n        this.dataService.client.userStatus().single$.subscribe(({ userStatus }) => {\n            if (!userStatus.permissions.includes(Permission.UpdateAdministrator)) {\n                const rolesSelect = this.detailForm.get('roles');\n                if (rolesSelect) {\n                    rolesSelect.disable();\n                }\n            }\n        });\n        this.permissionDefinitions = this.serverConfigService.getPermissionDefinitions();\n    }\n\n    ngOnDestroy(): void {\n        this.destroy();\n    }\n\n    customFieldIsSet(name: string): boolean {\n        return !!this.detailForm.get(['customFields', name]);\n    }\n\n    rolesChanged(roles: Role[]) {\n        this.buildPermissionsMap();\n    }\n\n    getPermissionsForSelectedChannel(): string[] {\n        function getActivePermissions(input: PermissionsByChannel['permissions']): string[] {\n            return Object.entries(input)\n                .filter(([permission, active]) => active)\n                .map(([permission, active]) => permission);\n        }\n        if (this.selectedChannelId) {\n            const selectedChannel = this.selectedRolePermissions[this.selectedChannelId];\n            if (selectedChannel) {\n                const permissionMap = this.selectedRolePermissions[this.selectedChannelId].permissions;\n                return getActivePermissions(permissionMap);\n            }\n        }\n        const channels = Object.values(this.selectedRolePermissions);\n        if (0 < channels.length) {\n            this.selectedChannelId = channels[0].channelId;\n            return getActivePermissions(channels[0].permissions);\n        }\n        return [];\n    }\n\n    create() {\n        const formValue = this.detailForm.value;\n        const administrator: CreateAdministratorInput = {\n            emailAddress: formValue.emailAddress,\n            firstName: formValue.firstName,\n            lastName: formValue.lastName,\n            password: formValue.password,\n            customFields: formValue.customFields,\n            roleIds: formValue.roles.map(role => role.id),\n        };\n        this.dataService.administrator.createAdministrator(administrator).subscribe(\n            data => {\n                this.notificationService.success(_('common.notify-create-success'), {\n                    entity: 'Administrator',\n                });\n                this.detailForm.markAsPristine();\n                this.changeDetector.markForCheck();\n                this.router.navigate(['../', data.createAdministrator.id], { relativeTo: this.route });\n            },\n            err => {\n                this.notificationService.error(_('common.notify-create-error'), {\n                    entity: 'Administrator',\n                });\n            },\n        );\n    }\n\n    save() {\n        this.administrator$\n            .pipe(\n                take(1),\n                mergeMap(({ id }) => {\n                    const formValue = this.detailForm.value;\n                    const administrator: UpdateAdministratorInput = {\n                        id,\n                        emailAddress: formValue.emailAddress,\n                        firstName: formValue.firstName,\n                        lastName: formValue.lastName,\n                        password: formValue.password,\n                        customFields: formValue.customFields,\n                        roleIds: formValue.roles.map(role => role.id),\n                    };\n                    return this.dataService.administrator.updateAdministrator(administrator);\n                }),\n            )\n            .subscribe(\n                data => {\n                    this.notificationService.success(_('common.notify-update-success'), {\n                        entity: 'Administrator',\n                    });\n                    this.detailForm.markAsPristine();\n                    this.changeDetector.markForCheck();\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-update-error'), {\n                        entity: 'Administrator',\n                    });\n                },\n            );\n    }\n\n    protected setFormValues(administrator: Administrator, languageCode: LanguageCode): void {\n        this.detailForm.patchValue({\n            emailAddress: administrator.emailAddress,\n            firstName: administrator.firstName,\n            lastName: administrator.lastName,\n            roles: administrator.user.roles,\n        });\n        if (this.customFields.length) {\n            const customFieldsGroup = this.detailForm.get('customFields') as FormGroup;\n\n            for (const fieldDef of this.customFields) {\n                const key = fieldDef.name;\n                const value = (administrator as any).customFields[key];\n                const control = customFieldsGroup.get(key);\n                if (control) {\n                    control.patchValue(value);\n                }\n            }\n        }\n        const passwordControl = this.detailForm.get('password');\n        if (passwordControl) {\n            if (!administrator.id) {\n                passwordControl.setValidators([Validators.required]);\n            } else {\n                passwordControl.setValidators([]);\n            }\n        }\n        this.buildPermissionsMap();\n    }\n\n    private buildPermissionsMap() {\n        const permissionsControl = this.detailForm.get('roles');\n        if (permissionsControl) {\n            const roles: RoleFragment[] = permissionsControl.value;\n            const channelIdPermissionsMap = new Map<string, Set<Permission>>();\n            const channelIdCodeMap = new Map<string, string>();\n\n            for (const role of roles) {\n                for (const channel of role.channels) {\n                    const channelPermissions = channelIdPermissionsMap.get(channel.id);\n                    const permissionSet = channelPermissions || new Set<Permission>();\n\n                    role.permissions.forEach(p => permissionSet.add(p));\n                    channelIdPermissionsMap.set(channel.id, permissionSet);\n                    channelIdCodeMap.set(channel.id, channel.code);\n                }\n            }\n\n            this.selectedRolePermissions = {} as any;\n            for (const channelId of Array.from(channelIdPermissionsMap.keys())) {\n                // tslint:disable-next-line:no-non-null-assertion\n                const permissionSet = channelIdPermissionsMap.get(channelId)!;\n                const permissionsHash: { [K in Permission]: boolean } = {} as any;\n                for (const def of this.serverConfigService.getPermissionDefinitions()) {\n                    permissionsHash[def.name] = permissionSet.has(def.name as Permission);\n                }\n                this.selectedRolePermissions[channelId] = {\n                    // tslint:disable:no-non-null-assertion\n                    channelId,\n                    channelCode: channelIdCodeMap.get(channelId)!,\n                    permissions: permissionsHash,\n                    // tslint:enable:no-non-null-assertion\n                };\n            }\n        }\n    }\n}\n","import { Component } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    BaseListComponent,\r\n    DataService,\r\n    GetAdministrators,\r\n    ModalService,\r\n    NotificationService,\r\n} from '@vendure/admin-ui/core';\r\nimport { EMPTY } from 'rxjs';\r\nimport { switchMap } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'vdr-administrator-list',\r\n    templateUrl: './administrator-list.component.html',\r\n    styleUrls: ['./administrator-list.component.scss'],\r\n})\r\nexport class AdministratorListComponent extends BaseListComponent<\r\n    GetAdministrators.Query,\r\n    GetAdministrators.Items\r\n> {\r\n    constructor(\r\n        private dataService: DataService,\r\n        router: Router,\r\n        route: ActivatedRoute,\r\n        private modalService: ModalService,\r\n        private notificationService: NotificationService,\r\n    ) {\r\n        super(router, route);\r\n        super.setQueryFn(\r\n            (...args: any[]) => this.dataService.administrator.getAdministrators(...args),\r\n            (data) => data.administrators,\r\n        );\r\n    }\r\n\r\n    deleteAdministrator(administrator: GetAdministrators.Items) {\r\n        return this.modalService\r\n            .dialog({\r\n                title: _('catalog.confirm-delete-administrator'),\r\n                body: `${administrator.firstName} ${administrator.lastName}`,\r\n                buttons: [\r\n                    { type: 'secondary', label: _('common.cancel') },\r\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\r\n                ],\r\n            })\r\n            .pipe(\r\n                switchMap((res) =>\r\n                    res ? this.dataService.administrator.deleteAdministrator(administrator.id) : EMPTY,\r\n                ),\r\n            )\r\n            .subscribe(\r\n                () => {\r\n                    this.notificationService.success(_('common.notify-delete-success'), {\r\n                        entity: 'Administrator',\r\n                    });\r\n                    this.refresh();\r\n                },\r\n                (err) => {\r\n                    this.notificationService.error(_('common.notify-delete-error'), {\r\n                        entity: 'Administrator',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n}\r\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport { BaseDetailComponent, CustomFieldConfig, Permission } from '@vendure/admin-ui/core';\r\nimport {\r\n    Channel,\r\n    CreateChannelInput,\r\n    CurrencyCode,\r\n    GetZones,\r\n    LanguageCode,\r\n    UpdateChannelInput,\r\n} from '@vendure/admin-ui/core';\r\nimport { getDefaultUiLanguage } from '@vendure/admin-ui/core';\r\nimport { NotificationService } from '@vendure/admin-ui/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\nimport { ServerConfigService } from '@vendure/admin-ui/core';\r\nimport { DEFAULT_CHANNEL_CODE } from '@vendure/common/lib/shared-constants';\r\nimport { Observable } from 'rxjs';\r\nimport { map, mergeMap, take } from 'rxjs/operators';\r\n@Component({\r\n    selector: 'vdr-channel-detail',\r\n    templateUrl: './channel-detail.component.html',\r\n    styleUrls: ['./channel-detail.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ChannelDetailComponent\r\n    extends BaseDetailComponent<Channel.Fragment>\r\n    implements OnInit, OnDestroy {\r\n    customFields: CustomFieldConfig[];\r\n    zones$: Observable<GetZones.Zones[]>;\r\n    detailForm: FormGroup;\r\n    currencyCodes = Object.values(CurrencyCode);\r\n    availableLanguageCodes$: Observable<LanguageCode[]>;\r\n    readonly updatePermission = [Permission.SuperAdmin, Permission.UpdateChannel, Permission.CreateChannel];\r\n\r\n    constructor(\r\n        router: Router,\r\n        route: ActivatedRoute,\r\n        protected serverConfigService: ServerConfigService,\r\n        private changeDetector: ChangeDetectorRef,\r\n        protected dataService: DataService,\r\n        private formBuilder: FormBuilder,\r\n        private notificationService: NotificationService,\r\n    ) {\r\n        super(route, router, serverConfigService, dataService);\r\n        this.customFields = this.getCustomFieldConfig('Channel');\r\n        this.detailForm = this.formBuilder.group({\r\n            code: ['', Validators.required],\r\n            token: ['', Validators.required],\r\n            pricesIncludeTax: [false],\r\n            currencyCode: [''],\r\n            defaultShippingZoneId: ['', Validators.required],\r\n            defaultLanguageCode: [],\r\n            defaultTaxZoneId: ['', Validators.required],\r\n            customFields: this.formBuilder.group(\r\n                this.customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\r\n            ),\r\n        });\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.init();\r\n        this.zones$ = this.dataService.settings.getZones().mapSingle(data => data.zones);\r\n        this.availableLanguageCodes$ = this.serverConfigService.getAvailableLanguages();\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.destroy();\r\n    }\r\n\r\n    customFieldIsSet(name: string): boolean {\r\n        return !!this.detailForm.get(['customFields', name]);\r\n    }\r\n\r\n    saveButtonEnabled(): boolean {\r\n        return this.detailForm.dirty && this.detailForm.valid;\r\n    }\r\n\r\n    create() {\r\n        if (!this.detailForm.dirty) {\r\n            return;\r\n        }\r\n        const formValue = this.detailForm.value;\r\n        const input: CreateChannelInput = {\r\n            code: formValue.code,\r\n            token: formValue.token,\r\n            defaultLanguageCode: formValue.defaultLanguageCode,\r\n            pricesIncludeTax: formValue.pricesIncludeTax,\r\n            currencyCode: formValue.currencyCode,\r\n            defaultShippingZoneId: formValue.defaultShippingZoneId,\r\n            defaultTaxZoneId: formValue.defaultTaxZoneId,\r\n            customFields: formValue.customFields,\r\n        };\r\n        this.dataService.settings\r\n            .createChannel(input)\r\n            .pipe(\r\n                mergeMap(({ createChannel }) =>\r\n                    this.dataService.auth.currentUser().single$.pipe(\r\n                        map(({ me }) => ({\r\n                            me,\r\n                            createChannel,\r\n                        })),\r\n                    ),\r\n                ),\r\n                mergeMap(({ me, createChannel }) =>\r\n                    // tslint:disable-next-line:no-non-null-assertion\r\n                    this.dataService.client.updateUserChannels(me!.channels).pipe(map(() => createChannel)),\r\n                ),\r\n            )\r\n            .subscribe(data => {\r\n                switch (data.__typename) {\r\n                    case 'Channel':\r\n                        this.notificationService.success(_('common.notify-create-success'), {\r\n                            entity: 'Channel',\r\n                        });\r\n                        this.detailForm.markAsPristine();\r\n                        this.changeDetector.markForCheck();\r\n                        this.router.navigate(['../', data.id], { relativeTo: this.route });\r\n                        break;\r\n                    case 'LanguageNotAvailableError':\r\n                        this.notificationService.error(data.message);\r\n                        break;\r\n                }\r\n            });\r\n    }\r\n\r\n    save() {\r\n        if (!this.detailForm.dirty) {\r\n            return;\r\n        }\r\n        const formValue = this.detailForm.value;\r\n        this.entity$\r\n            .pipe(\r\n                take(1),\r\n                mergeMap(channel => {\r\n                    const input = {\r\n                        id: channel.id,\r\n                        code: formValue.code,\r\n                        token: formValue.token,\r\n                        pricesIncludeTax: formValue.pricesIncludeTax,\r\n                        currencyCode: formValue.currencyCode,\r\n                        defaultShippingZoneId: formValue.defaultShippingZoneId,\r\n                        defaultLanguageCode: formValue.defaultLanguageCode,\r\n                        defaultTaxZoneId: formValue.defaultTaxZoneId,\r\n                        customFields: formValue.customFields,\r\n                    } as UpdateChannelInput;\r\n                    return this.dataService.settings.updateChannel(input);\r\n                }),\r\n            )\r\n            .subscribe(({ updateChannel }) => {\r\n                switch (updateChannel.__typename) {\r\n                    case 'Channel':\r\n                        this.notificationService.success(_('common.notify-update-success'), {\r\n                            entity: 'Channel',\r\n                        });\r\n                        this.detailForm.markAsPristine();\r\n                        this.changeDetector.markForCheck();\r\n                        break;\r\n                    case 'LanguageNotAvailableError':\r\n                        this.notificationService.error(updateChannel.message);\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Update the form values when the entity changes.\r\n     */\r\n    protected setFormValues(entity: Channel.Fragment, languageCode: LanguageCode): void {\r\n        this.detailForm.patchValue({\r\n            code: entity.code,\r\n            token: entity.token || this.generateToken(),\r\n            pricesIncludeTax: entity.pricesIncludeTax,\r\n            currencyCode: entity.currencyCode,\r\n            defaultShippingZoneId: entity.defaultShippingZone ? entity.defaultShippingZone.id : '',\r\n            defaultLanguageCode: entity.defaultLanguageCode,\r\n            defaultTaxZoneId: entity.defaultTaxZone ? entity.defaultTaxZone.id : '',\r\n        });\r\n        if (this.customFields.length) {\r\n            const customFieldsGroup = this.detailForm.get('customFields') as FormGroup;\r\n\r\n            for (const fieldDef of this.customFields) {\r\n                const key = fieldDef.name;\r\n                const value = (entity as any).customFields[key];\r\n                const control = customFieldsGroup.get(key);\r\n                if (control) {\r\n                    control.patchValue(value);\r\n                }\r\n            }\r\n        }\r\n        if (entity.code === DEFAULT_CHANNEL_CODE) {\r\n            const codeControl = this.detailForm.get('code');\r\n            if (codeControl) {\r\n                codeControl.disable();\r\n            }\r\n        }\r\n    }\r\n\r\n    private generateToken(): string {\r\n        const randomString = () => Math.random().toString(36).substr(3, 10);\r\n        return `${randomString()}${randomString()}`;\r\n    }\r\n}\r\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport { DEFAULT_CHANNEL_CODE } from '@vendure/common/lib/shared-constants';\r\nimport { EMPTY, Observable, Subject } from 'rxjs';\r\nimport { mergeMap, startWith, switchMap } from 'rxjs/operators';\r\n\r\nimport { Channel } from '@vendure/admin-ui/core';\r\nimport { NotificationService } from '@vendure/admin-ui/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\nimport { ModalService } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-channel-list',\r\n    templateUrl: './channel-list.component.html',\r\n    styleUrls: ['./channel-list.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ChannelListComponent {\r\n    channels$: Observable<Channel.Fragment[]>;\r\n    private refresh$ = new Subject();\r\n\r\n    constructor(\r\n        private dataService: DataService,\r\n        private modalService: ModalService,\r\n        private notificationService: NotificationService,\r\n    ) {\r\n        this.channels$ = this.refresh$.pipe(\r\n            startWith(1),\r\n            switchMap(() => this.dataService.settings.getChannels().mapStream(data => data.channels)),\r\n        );\r\n    }\r\n\r\n    isDefaultChannel(channelCode: string): boolean {\r\n        return channelCode === DEFAULT_CHANNEL_CODE;\r\n    }\r\n\r\n    deleteChannel(id: string) {\r\n        this.modalService\r\n            .dialog({\r\n                title: _('catalog.confirm-delete-channel'),\r\n                buttons: [\r\n                    { type: 'secondary', label: _('common.cancel') },\r\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\r\n                ],\r\n            })\r\n            .pipe(\r\n                switchMap(response => (response ? this.dataService.settings.deleteChannel(id) : EMPTY)),\r\n                mergeMap(() => this.dataService.auth.currentUser().single$),\r\n                // tslint:disable-next-line:no-non-null-assertion\r\n                mergeMap(data => this.dataService.client.updateUserChannels(data.me!.channels)),\r\n            )\r\n            .subscribe(\r\n                () => {\r\n                    this.notificationService.success(_('common.notify-delete-success'), {\r\n                        entity: 'Channel',\r\n                    });\r\n                    this.refresh$.next(1);\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-delete-error'), {\r\n                        entity: 'Channel',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n}\r\n","import { ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    BaseDetailComponent,\n    Country,\n    CreateCountryInput,\n    createUpdatedTranslatable,\n    DataService,\n    findTranslation,\n    LanguageCode,\n    NotificationService,\n    Permission,\n    ServerConfigService,\n    UpdateCountryInput,\n} from '@vendure/admin-ui/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { mergeMap, take } from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-country-detail',\n    templateUrl: './country-detail.component.html',\n    styleUrls: ['./country-detail.component.scss'],\n})\nexport class CountryDetailComponent\n    extends BaseDetailComponent<Country.Fragment>\n    implements OnInit, OnDestroy {\n    country$: Observable<Country.Fragment>;\n    detailForm: FormGroup;\n    readonly updatePermission = [Permission.UpdateSettings, Permission.UpdateCountry];\n\n    constructor(\n        router: Router,\n        route: ActivatedRoute,\n        serverConfigService: ServerConfigService,\n        private changeDetector: ChangeDetectorRef,\n        protected dataService: DataService,\n        private formBuilder: FormBuilder,\n        private notificationService: NotificationService,\n    ) {\n        super(route, router, serverConfigService, dataService);\n        this.detailForm = this.formBuilder.group({\n            code: ['', Validators.required],\n            name: ['', Validators.required],\n            enabled: [true],\n        });\n    }\n\n    ngOnInit() {\n        this.init();\n        this.country$ = this.entity$;\n    }\n\n    ngOnDestroy(): void {\n        this.destroy();\n    }\n\n    create() {\n        if (!this.detailForm.dirty) {\n            return;\n        }\n        combineLatest(this.country$, this.languageCode$)\n            .pipe(\n                take(1),\n                mergeMap(([country, languageCode]) => {\n                    const formValue = this.detailForm.value;\n                    const input: CreateCountryInput = createUpdatedTranslatable({\n                        translatable: country,\n                        updatedFields: formValue,\n                        languageCode,\n                        defaultTranslation: {\n                            name: formValue.name,\n                            languageCode,\n                        },\n                    });\n                    return this.dataService.settings.createCountry(input);\n                }),\n            )\n            .subscribe(\n                data => {\n                    this.notificationService.success(_('common.notify-create-success'), {\n                        entity: 'Country',\n                    });\n                    this.detailForm.markAsPristine();\n                    this.changeDetector.markForCheck();\n                    this.router.navigate(['../', data.createCountry.id], { relativeTo: this.route });\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-create-error'), {\n                        entity: 'Country',\n                    });\n                },\n            );\n    }\n\n    save() {\n        combineLatest(this.country$, this.languageCode$)\n            .pipe(\n                take(1),\n                mergeMap(([country, languageCode]) => {\n                    const formValue = this.detailForm.value;\n                    const input: UpdateCountryInput = createUpdatedTranslatable({\n                        translatable: country,\n                        updatedFields: formValue,\n                        languageCode,\n                        defaultTranslation: {\n                            name: formValue.name,\n                            languageCode,\n                        },\n                    });\n                    return this.dataService.settings.updateCountry(input);\n                }),\n            )\n            .subscribe(\n                data => {\n                    this.notificationService.success(_('common.notify-update-success'), {\n                        entity: 'Country',\n                    });\n                    this.detailForm.markAsPristine();\n                    this.changeDetector.markForCheck();\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-update-error'), {\n                        entity: 'Country',\n                    });\n                },\n            );\n    }\n\n    protected setFormValues(country: Country, languageCode: LanguageCode): void {\n        const currentTranslation = findTranslation(country, languageCode);\n\n        this.detailForm.patchValue({\n            code: country.code,\n            name: currentTranslation ? currentTranslation.name : '',\n            enabled: country.enabled,\n        });\n    }\n}\n","import { ChangeDetectionStrategy, Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    DataService,\r\n    DeletionResult,\r\n    GetCountryList,\r\n    GetZones,\r\n    ModalService,\r\n    NotificationService,\r\n    Zone,\r\n} from '@vendure/admin-ui/core';\r\nimport { combineLatest, EMPTY, Observable, Subject } from 'rxjs';\r\nimport { map, startWith, switchMap, tap } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'vdr-country-list',\r\n    templateUrl: './country-list.component.html',\r\n    styleUrls: ['./country-list.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CountryListComponent implements OnInit, OnDestroy {\r\n    searchTerm = new FormControl('');\r\n    countriesWithZones$: Observable<Array<GetCountryList.Items & { zones: GetZones.Zones[] }>>;\r\n    zones$: Observable<GetZones.Zones[]>;\r\n\r\n    private countries: GetCountryList.Items[] = [];\r\n    private destroy$ = new Subject();\r\n\r\n    constructor(\r\n        private dataService: DataService,\r\n        private notificationService: NotificationService,\r\n        private modalService: ModalService,\r\n    ) {}\r\n\r\n    ngOnInit() {\r\n        const countries$ = this.searchTerm.valueChanges.pipe(\r\n            startWith(null),\r\n            switchMap(term => this.dataService.settings.getCountries(999, 0, term).stream$),\r\n            tap(data => (this.countries = data.countries.items)),\r\n            map(data => data.countries.items),\r\n        );\r\n        this.zones$ = this.dataService.settings.getZones().mapStream(data => data.zones);\r\n        this.countriesWithZones$ = combineLatest(countries$, this.zones$).pipe(\r\n            map(([countries, zones]) => {\r\n                return countries.map(country => ({\r\n                    ...country,\r\n                    zones: zones.filter(z => !!z.members.find(c => c.id === country.id)),\r\n                }));\r\n            }),\r\n        );\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.destroy$.next();\r\n        this.destroy$.complete();\r\n    }\r\n\r\n    deleteCountry(countryId: string) {\r\n        this.modalService\r\n            .dialog({\r\n                title: _('catalog.confirm-delete-country'),\r\n                buttons: [\r\n                    { type: 'secondary', label: _('common.cancel') },\r\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\r\n                ],\r\n            })\r\n            .pipe(\r\n                switchMap(response =>\r\n                    response ? this.dataService.settings.deleteCountry(countryId) : EMPTY,\r\n                ),\r\n            )\r\n            .subscribe(\r\n                response => {\r\n                    if (response.deleteCountry.result === DeletionResult.DELETED) {\r\n                        this.notificationService.success(_('common.notify-delete-success'), {\r\n                            entity: 'Country',\r\n                        });\r\n                        this.dataService.settings.getCountries(999, 0).single$.subscribe();\r\n                    } else {\r\n                        this.notificationService.error(response.deleteCountry.message || '');\r\n                    }\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-delete-error'), {\r\n                        entity: 'Country',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    private isZone(input: Zone.Fragment | { name: string } | string): input is Zone.Fragment {\r\n        return input.hasOwnProperty('id');\r\n    }\r\n}\r\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    BaseDetailComponent,\r\n    CustomFieldConfig,\r\n    DataService,\r\n    GlobalSettings,\r\n    LanguageCode,\r\n    NotificationService,\r\n    Permission,\r\n    ServerConfigService,\r\n} from '@vendure/admin-ui/core';\r\nimport { switchMap, tap, withLatestFrom } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'vdr-global-settings',\r\n    templateUrl: './global-settings.component.html',\r\n    styleUrls: ['./global-settings.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class GlobalSettingsComponent extends BaseDetailComponent<GlobalSettings> implements OnInit {\r\n    detailForm: FormGroup;\r\n    customFields: CustomFieldConfig[];\r\n    languageCodes = Object.values(LanguageCode);\r\n    readonly updatePermission = [Permission.UpdateSettings, Permission.UpdateGlobalSettings];\r\n\r\n    constructor(\r\n        router: Router,\r\n        route: ActivatedRoute,\r\n        serverConfigService: ServerConfigService,\r\n        private changeDetector: ChangeDetectorRef,\r\n        protected dataService: DataService,\r\n        private formBuilder: FormBuilder,\r\n        private notificationService: NotificationService,\r\n    ) {\r\n        super(route, router, serverConfigService, dataService);\r\n        this.customFields = this.getCustomFieldConfig('GlobalSettings');\r\n        this.detailForm = this.formBuilder.group({\r\n            availableLanguages: [''],\r\n            trackInventory: false,\r\n            outOfStockThreshold: [0, Validators.required],\r\n            customFields: this.formBuilder.group(\r\n                this.customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\r\n            ),\r\n        });\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.init();\r\n        this.dataService.client.userStatus().single$.subscribe(({ userStatus }) => {\r\n            if (!userStatus.permissions.includes(Permission.UpdateSettings)) {\r\n                const languagesSelect = this.detailForm.get('availableLanguages');\r\n                if (languagesSelect) {\r\n                    languagesSelect.disable();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    customFieldIsSet(name: string): boolean {\r\n        return !!this.detailForm.get(['customFields', name]);\r\n    }\r\n\r\n    save() {\r\n        if (!this.detailForm.dirty) {\r\n            return;\r\n        }\r\n\r\n        this.dataService.settings\r\n            .updateGlobalSettings(this.detailForm.value)\r\n            .pipe(\r\n                tap(({ updateGlobalSettings }) => {\r\n                    switch (updateGlobalSettings.__typename) {\r\n                        case 'GlobalSettings':\r\n                            this.detailForm.markAsPristine();\r\n                            this.changeDetector.markForCheck();\r\n                            this.notificationService.success(_('common.notify-update-success'), {\r\n                                entity: 'Settings',\r\n                            });\r\n                            break;\r\n                        case 'ChannelDefaultLanguageError':\r\n                            this.notificationService.error(updateGlobalSettings.message);\r\n                    }\r\n                }),\r\n                switchMap(() => this.serverConfigService.refreshGlobalSettings()),\r\n                withLatestFrom(this.dataService.client.uiState().single$),\r\n            )\r\n            .subscribe(([{ globalSettings }, { uiState }]) => {\r\n                const availableLangs = globalSettings.availableLanguages;\r\n                if (availableLangs.length && !availableLangs.includes(uiState.contentLanguage)) {\r\n                    this.dataService.client.setContentLanguage(availableLangs[0]).subscribe();\r\n                }\r\n            });\r\n    }\r\n\r\n    protected setFormValues(entity: GlobalSettings, languageCode: LanguageCode): void {\r\n        this.detailForm.patchValue({\r\n            availableLanguages: entity.availableLanguages,\r\n            trackInventory: entity.trackInventory,\r\n            outOfStockThreshold: entity.outOfStockThreshold,\r\n        });\r\n        if (this.customFields.length) {\r\n            const customFieldsGroup = this.detailForm.get('customFields') as FormGroup;\r\n\r\n            for (const fieldDef of this.customFields) {\r\n                const key = fieldDef.name;\r\n                const value = (entity as any).customFields[key];\r\n                const control = customFieldsGroup.get(key);\r\n                if (control) {\r\n                    control.patchValue(value);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    BaseDetailComponent,\r\n    ConfigArgDefinition,\r\n    configurableDefinitionToInstance,\r\n    ConfigurableOperation,\r\n    ConfigurableOperationDefinition,\r\n    CreatePaymentMethodInput,\r\n    DataService,\r\n    encodeConfigArgValue,\r\n    getConfigArgValue,\r\n    NotificationService,\r\n    PaymentMethod,\r\n    Permission,\r\n    ServerConfigService,\r\n    toConfigurableOperationInput,\r\n    UpdatePaymentMethodInput,\r\n} from '@vendure/admin-ui/core';\r\nimport { normalizeString } from '@vendure/common/lib/normalize-string';\r\nimport { combineLatest } from 'rxjs';\r\nimport { mergeMap, take } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'vdr-payment-method-detail',\r\n    templateUrl: './payment-method-detail.component.html',\r\n    styleUrls: ['./payment-method-detail.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class PaymentMethodDetailComponent\r\n    extends BaseDetailComponent<PaymentMethod.Fragment>\r\n    implements OnInit, OnDestroy {\r\n    detailForm: FormGroup;\r\n    checkers: ConfigurableOperationDefinition[] = [];\r\n    handlers: ConfigurableOperationDefinition[] = [];\r\n    selectedChecker?: ConfigurableOperation | null;\r\n    selectedCheckerDefinition?: ConfigurableOperationDefinition;\r\n    selectedHandler?: ConfigurableOperation | null;\r\n    selectedHandlerDefinition?: ConfigurableOperationDefinition;\r\n    readonly updatePermission = [Permission.UpdateSettings, Permission.UpdatePaymentMethod];\r\n\r\n    constructor(\r\n        router: Router,\r\n        route: ActivatedRoute,\r\n        serverConfigService: ServerConfigService,\r\n        private changeDetector: ChangeDetectorRef,\r\n        protected dataService: DataService,\r\n        private formBuilder: FormBuilder,\r\n        private notificationService: NotificationService,\r\n    ) {\r\n        super(route, router, serverConfigService, dataService);\r\n        this.detailForm = this.formBuilder.group({\r\n            code: ['', Validators.required],\r\n            name: ['', Validators.required],\r\n            description: '',\r\n            enabled: [true, Validators.required],\r\n            checker: {},\r\n            handler: {},\r\n        });\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.init();\r\n        combineLatest([\r\n            this.dataService.settings.getPaymentMethodOperations().single$,\r\n            this.entity$.pipe(take(1)),\r\n        ]).subscribe(([data, entity]) => {\r\n            this.checkers = data.paymentMethodEligibilityCheckers;\r\n            this.handlers = data.paymentMethodHandlers;\r\n            this.changeDetector.markForCheck();\r\n            this.selectedCheckerDefinition = data.paymentMethodEligibilityCheckers.find(\r\n                c => c.code === (entity.checker && entity.checker.code),\r\n            );\r\n            this.selectedHandlerDefinition = data.paymentMethodHandlers.find(\r\n                c => c.code === (entity.handler && entity.handler.code),\r\n            );\r\n        });\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.destroy();\r\n    }\r\n\r\n    updateCode(currentCode: string, nameValue: string) {\r\n        if (!currentCode) {\r\n            const codeControl = this.detailForm.get(['code']);\r\n            if (codeControl && codeControl.pristine) {\r\n                codeControl.setValue(normalizeString(nameValue, '-'));\r\n            }\r\n        }\r\n    }\r\n\r\n    configArgsIsPopulated(): boolean {\r\n        const configArgsGroup = this.detailForm.get('configArgs') as FormGroup | undefined;\r\n        if (!configArgsGroup) {\r\n            return false;\r\n        }\r\n        return 0 < Object.keys(configArgsGroup.controls).length;\r\n    }\r\n\r\n    selectChecker(checker: ConfigurableOperationDefinition) {\r\n        this.selectedCheckerDefinition = checker;\r\n        this.selectedChecker = configurableDefinitionToInstance(checker);\r\n        const formControl = this.detailForm.get('checker');\r\n        if (formControl) {\r\n            formControl.clearValidators();\r\n            formControl.updateValueAndValidity({ onlySelf: true });\r\n            formControl.patchValue(this.selectedChecker);\r\n        }\r\n        this.detailForm.markAsDirty();\r\n    }\r\n\r\n    selectHandler(handler: ConfigurableOperationDefinition) {\r\n        this.selectedHandlerDefinition = handler;\r\n        this.selectedHandler = configurableDefinitionToInstance(handler);\r\n        const formControl = this.detailForm.get('handler');\r\n        if (formControl) {\r\n            formControl.clearValidators();\r\n            formControl.updateValueAndValidity({ onlySelf: true });\r\n            formControl.patchValue(this.selectedHandler);\r\n        }\r\n        this.detailForm.markAsDirty();\r\n    }\r\n\r\n    removeChecker() {\r\n        this.selectedChecker = null;\r\n        this.detailForm.markAsDirty();\r\n    }\r\n\r\n    removeHandler() {\r\n        this.selectedHandler = null;\r\n        this.detailForm.markAsDirty();\r\n    }\r\n\r\n    create() {\r\n        const selectedChecker = this.selectedChecker;\r\n        const selectedHandler = this.selectedHandler;\r\n        if (!selectedHandler) {\r\n            return;\r\n        }\r\n        this.entity$\r\n            .pipe(\r\n                take(1),\r\n                mergeMap(({ id }) => {\r\n                    const formValue = this.detailForm.value;\r\n                    const input: CreatePaymentMethodInput = {\r\n                        name: formValue.name,\r\n                        code: formValue.code,\r\n                        description: formValue.description,\r\n                        enabled: formValue.enabled,\r\n                        checker: selectedChecker\r\n                            ? toConfigurableOperationInput(selectedChecker, formValue.checker)\r\n                            : null,\r\n                        handler: toConfigurableOperationInput(selectedHandler, formValue.handler),\r\n                    };\r\n                    return this.dataService.settings.createPaymentMethod(input);\r\n                }),\r\n            )\r\n            .subscribe(\r\n                data => {\r\n                    this.notificationService.success(_('common.notify-create-success'), {\r\n                        entity: 'PaymentMethod',\r\n                    });\r\n                    this.detailForm.markAsPristine();\r\n                    this.changeDetector.markForCheck();\r\n                    this.router.navigate(['../', data.createPaymentMethod.id], { relativeTo: this.route });\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-create-error'), {\r\n                        entity: 'PaymentMethod',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    save() {\r\n        const selectedChecker = this.selectedChecker;\r\n        const selectedHandler = this.selectedHandler;\r\n        if (!selectedHandler) {\r\n            return;\r\n        }\r\n        this.entity$\r\n            .pipe(\r\n                take(1),\r\n                mergeMap(({ id }) => {\r\n                    const formValue = this.detailForm.value;\r\n                    const input: UpdatePaymentMethodInput = {\r\n                        id,\r\n                        name: formValue.name,\r\n                        code: formValue.code,\r\n                        description: formValue.description,\r\n                        enabled: formValue.enabled,\r\n                        checker: selectedChecker\r\n                            ? toConfigurableOperationInput(selectedChecker, formValue.checker)\r\n                            : null,\r\n                        handler: toConfigurableOperationInput(selectedHandler, formValue.handler),\r\n                    };\r\n                    return this.dataService.settings.updatePaymentMethod(input);\r\n                }),\r\n            )\r\n            .subscribe(\r\n                data => {\r\n                    this.notificationService.success(_('common.notify-update-success'), {\r\n                        entity: 'PaymentMethod',\r\n                    });\r\n                    this.detailForm.markAsPristine();\r\n                    this.changeDetector.markForCheck();\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-update-error'), {\r\n                        entity: 'PaymentMethod',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    protected setFormValues(paymentMethod: PaymentMethod.Fragment): void {\r\n        this.detailForm.patchValue({\r\n            name: paymentMethod.name,\r\n            code: paymentMethod.code,\r\n            description: paymentMethod.description,\r\n            enabled: paymentMethod.enabled,\r\n            checker: paymentMethod.checker || {},\r\n            handler: paymentMethod.handler || {},\r\n        });\r\n        if (!this.selectedChecker) {\r\n            this.selectedChecker = paymentMethod.checker && {\r\n                code: paymentMethod.checker.code,\r\n                args: paymentMethod.checker.args.map(a => ({ ...a, value: getConfigArgValue(a.value) })),\r\n            };\r\n        }\r\n        if (!this.selectedHandler) {\r\n            this.selectedHandler = paymentMethod.handler && {\r\n                code: paymentMethod.handler.code,\r\n                args: paymentMethod.handler.args.map(a => ({ ...a, value: getConfigArgValue(a.value) })),\r\n            };\r\n        }\r\n    }\r\n}\r\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    BaseListComponent,\r\n    DataService,\r\n    DeletionResult,\r\n    GetPaymentMethodList,\r\n    ModalService,\r\n    NotificationService,\r\n} from '@vendure/admin-ui/core';\r\nimport { EMPTY } from 'rxjs';\r\nimport { map, switchMap } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'vdr-payment-method-list',\r\n    templateUrl: './payment-method-list.component.html',\r\n    styleUrls: ['./payment-method-list.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class PaymentMethodListComponent extends BaseListComponent<\r\n    GetPaymentMethodList.Query,\r\n    GetPaymentMethodList.Items\r\n> {\r\n    constructor(\r\n        private dataService: DataService,\r\n        router: Router,\r\n        route: ActivatedRoute,\r\n        private modalService: ModalService,\r\n        private notificationService: NotificationService,\r\n    ) {\r\n        super(router, route);\r\n        super.setQueryFn(\r\n            (...args: any[]) => this.dataService.settings.getPaymentMethods(...args).refetchOnChannelChange(),\r\n            data => data.paymentMethods,\r\n        );\r\n    }\r\n\r\n    deletePaymentMethod(paymentMethodId: string) {\r\n        this.showModalAndDelete(paymentMethodId)\r\n            .pipe(\r\n                switchMap(response => {\r\n                    if (response.result === DeletionResult.DELETED) {\r\n                        return [true];\r\n                    } else {\r\n                        return this.showModalAndDelete(paymentMethodId, response.message || '').pipe(\r\n                            map(r => r.result === DeletionResult.DELETED),\r\n                        );\r\n                    }\r\n                }),\r\n                // Refresh the cached facets to reflect the changes\r\n                switchMap(() => this.dataService.settings.getPaymentMethods(100).single$),\r\n            )\r\n            .subscribe(\r\n                () => {\r\n                    this.notificationService.success(_('common.notify-delete-success'), {\r\n                        entity: 'PaymentMethod',\r\n                    });\r\n                    this.refresh();\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-delete-error'), {\r\n                        entity: 'PaymentMethod',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    private showModalAndDelete(paymentMethodId: string, message?: string) {\r\n        return this.modalService\r\n            .dialog({\r\n                title: _('settings.confirm-delete-payment-method'),\r\n                body: message,\r\n                buttons: [\r\n                    { type: 'secondary', label: _('common.cancel') },\r\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\r\n                ],\r\n            })\r\n            .pipe(\r\n                switchMap(res =>\r\n                    res ? this.dataService.settings.deletePaymentMethod(paymentMethodId, !!message) : EMPTY,\r\n                ),\r\n                map(res => res.deletePaymentMethod),\r\n            );\r\n    }\r\n}\r\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport { PermissionDefinition } from '@vendure/admin-ui/core';\n\nexport interface PermissionGridRow {\n    label: string;\n    description: string;\n    permissions: PermissionDefinition[];\n}\n\n/**\n * A table showing and allowing the setting of all possible CRUD permissions.\n */\n@Component({\n    selector: 'vdr-permission-grid',\n    templateUrl: './permission-grid.component.html',\n    styleUrls: ['./permission-grid.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PermissionGridComponent implements OnInit {\n    @Input() permissionDefinitions: PermissionDefinition[];\n    @Input() activePermissions: string[];\n    @Input() readonly = false;\n    @Output() permissionChange = new EventEmitter<{ permission: string; value: boolean }>();\n    gridData: PermissionGridRow[];\n\n    ngOnInit() {\n        this.buildGrid();\n    }\n\n    setPermission(permission: string, value: boolean) {\n        if (!this.readonly) {\n            this.permissionChange.emit({ permission, value });\n        }\n    }\n\n    toggleAll(defs: PermissionDefinition[]) {\n        const value = defs.some(d => !this.activePermissions.includes(d.name));\n        for (const def of defs) {\n            this.permissionChange.emit({ permission: def.name, value });\n        }\n    }\n\n    private buildGrid() {\n        const crudGroups = new Map<string, PermissionDefinition[]>();\n        const nonCrud: PermissionDefinition[] = [];\n        const crudRe = /^(Create|Read|Update|Delete)([a-zA-Z]+)$/;\n        for (const def of this.permissionDefinitions) {\n            const isCrud = crudRe.test(def.name);\n            if (isCrud) {\n                const groupName = def.name.match(crudRe)?.[2];\n                if (groupName) {\n                    const existing = crudGroups.get(groupName);\n                    if (existing) {\n                        existing.push(def);\n                    } else {\n                        crudGroups.set(groupName, [def]);\n                    }\n                }\n            } else if (def.assignable) {\n                nonCrud.push(def);\n            }\n        }\n        this.gridData = [\n            ...nonCrud.map(d => ({\n                label: d.name,\n                description: d.description,\n                permissions: [d],\n            })),\n            ...Array.from(crudGroups.entries()).map(([label, defs]) => {\n                return {\n                    label,\n                    description: this.extractCrudDescription(defs[0]),\n                    permissions: defs,\n                };\n            }),\n        ];\n    }\n\n    private extractCrudDescription(def: PermissionDefinition): string {\n        return def.description.replace(/Grants permission to [\\w]+/, 'Grants permissions on');\n    }\n}\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    Administrator,\r\n    BaseDetailComponent,\r\n    CustomFieldConfig,\r\n    DataService,\r\n    GetActiveAdministrator,\r\n    LanguageCode,\r\n    NotificationService,\r\n    ServerConfigService,\r\n    UpdateActiveAdministratorInput,\r\n} from '@vendure/admin-ui/core';\r\nimport { mergeMap, take } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'vdr-profile',\r\n    templateUrl: './profile.component.html',\r\n    styleUrls: ['./profile.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ProfileComponent\r\n    extends BaseDetailComponent<GetActiveAdministrator.ActiveAdministrator>\r\n    implements OnInit, OnDestroy {\r\n    customFields: CustomFieldConfig[];\r\n    detailForm: FormGroup;\r\n\r\n    constructor(\r\n        router: Router,\r\n        route: ActivatedRoute,\r\n        serverConfigService: ServerConfigService,\r\n        private changeDetector: ChangeDetectorRef,\r\n        protected dataService: DataService,\r\n        private formBuilder: FormBuilder,\r\n        private notificationService: NotificationService,\r\n    ) {\r\n        super(route, router, serverConfigService, dataService);\r\n        this.customFields = this.getCustomFieldConfig('Administrator');\r\n        this.detailForm = this.formBuilder.group({\r\n            emailAddress: ['', Validators.required],\r\n            firstName: ['', Validators.required],\r\n            lastName: ['', Validators.required],\r\n            password: [''],\r\n            customFields: this.formBuilder.group(\r\n                this.customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\r\n            ),\r\n        });\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.init();\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.destroy();\r\n    }\r\n\r\n    customFieldIsSet(name: string): boolean {\r\n        return !!this.detailForm.get(['customFields', name]);\r\n    }\r\n\r\n    save() {\r\n        this.entity$\r\n            .pipe(\r\n                take(1),\r\n                mergeMap(({ id }) => {\r\n                    const formValue = this.detailForm.value;\r\n                    const administrator: UpdateActiveAdministratorInput = {\r\n                        emailAddress: formValue.emailAddress,\r\n                        firstName: formValue.firstName,\r\n                        lastName: formValue.lastName,\r\n                        password: formValue.password,\r\n                        customFields: formValue.customFields,\r\n                    };\r\n                    return this.dataService.administrator.updateActiveAdministrator(administrator);\r\n                }),\r\n            )\r\n            .subscribe(\r\n                data => {\r\n                    this.notificationService.success(_('common.notify-update-success'), {\r\n                        entity: 'Administrator',\r\n                    });\r\n                    this.detailForm.markAsPristine();\r\n                    this.changeDetector.markForCheck();\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-update-error'), {\r\n                        entity: 'Administrator',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    protected setFormValues(administrator: Administrator, languageCode: LanguageCode): void {\r\n        this.detailForm.patchValue({\r\n            emailAddress: administrator.emailAddress,\r\n            firstName: administrator.firstName,\r\n            lastName: administrator.lastName,\r\n        });\r\n        if (this.customFields.length) {\r\n            const customFieldsGroup = this.detailForm.get('customFields') as FormGroup;\r\n\r\n            for (const fieldDef of this.customFields) {\r\n                const key = fieldDef.name;\r\n                const value = (administrator as any).customFields[key];\r\n                const control = customFieldsGroup.get(key);\r\n                if (control) {\r\n                    control.patchValue(value);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    BaseDetailComponent,\n    CreateRoleInput,\n    DataService,\n    LanguageCode,\n    NotificationService,\n    Permission,\n    PermissionDefinition,\n    Role,\n    ServerConfigService,\n    UpdateRoleInput,\n} from '@vendure/admin-ui/core';\nimport { normalizeString } from '@vendure/common/lib/normalize-string';\nimport { unique } from '@vendure/common/lib/unique';\nimport { Observable } from 'rxjs';\nimport { mergeMap, take } from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-role-detail',\n    templateUrl: './role-detail.component.html',\n    styleUrls: ['./role-detail.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class RoleDetailComponent extends BaseDetailComponent<Role> implements OnInit, OnDestroy {\n    role$: Observable<Role>;\n    detailForm: FormGroup;\n    permissionDefinitions: PermissionDefinition[];\n    constructor(\n        router: Router,\n        route: ActivatedRoute,\n        serverConfigService: ServerConfigService,\n        private changeDetector: ChangeDetectorRef,\n        protected dataService: DataService,\n        private formBuilder: FormBuilder,\n        private notificationService: NotificationService,\n    ) {\n        super(route, router, serverConfigService, dataService);\n        this.detailForm = this.formBuilder.group({\n            code: ['', Validators.required],\n            description: ['', Validators.required],\n            channelIds: [],\n            permissions: [],\n        });\n    }\n\n    ngOnInit() {\n        this.init();\n        this.role$ = this.entity$;\n        this.permissionDefinitions = this.serverConfigService.getPermissionDefinitions();\n    }\n\n    ngOnDestroy(): void {\n        this.destroy();\n    }\n\n    updateCode(nameValue: string) {\n        const codeControl = this.detailForm.get(['code']);\n        if (codeControl && codeControl.pristine) {\n            codeControl.setValue(normalizeString(nameValue, '-'));\n        }\n    }\n\n    setPermission(change: { permission: string; value: boolean }) {\n        const permissionsControl = this.detailForm.get('permissions');\n        if (permissionsControl) {\n            const currentPermissions = permissionsControl.value as string[];\n            const newValue =\n                change.value === true\n                    ? unique([...currentPermissions, change.permission])\n                    : currentPermissions.filter(p => p !== change.permission);\n            permissionsControl.setValue(newValue);\n            permissionsControl.markAsDirty();\n        }\n    }\n\n    create() {\n        const formValue = this.detailForm.value;\n        const role: CreateRoleInput = formValue;\n        this.dataService.administrator.createRole(role).subscribe(\n            data => {\n                this.notificationService.success(_('common.notify-create-success'), { entity: 'Role' });\n                this.detailForm.markAsPristine();\n                this.changeDetector.markForCheck();\n                this.router.navigate(['../', data.createRole.id], { relativeTo: this.route });\n            },\n            err => {\n                this.notificationService.error(_('common.notify-create-error'), {\n                    entity: 'Role',\n                });\n            },\n        );\n    }\n\n    save() {\n        this.role$\n            .pipe(\n                take(1),\n                mergeMap(({ id }) => {\n                    const formValue = this.detailForm.value;\n                    const role: UpdateRoleInput = { id, ...formValue };\n                    return this.dataService.administrator.updateRole(role);\n                }),\n            )\n            .subscribe(\n                data => {\n                    this.notificationService.success(_('common.notify-update-success'), { entity: 'Role' });\n                    this.detailForm.markAsPristine();\n                    this.changeDetector.markForCheck();\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-update-error'), {\n                        entity: 'Role',\n                    });\n                },\n            );\n    }\n\n    protected setFormValues(role: Role, languageCode: LanguageCode): void {\n        this.detailForm.patchValue({\n            description: role.description,\n            code: role.code,\n            channelIds: role.channels.map(c => c.id),\n            permissions: role.permissions,\n        });\n        // This was required to get the channel selector component to\n        // correctly display its contents. A while spent debugging the root\n        // cause did not yield a solution, therefore this next line.\n        this.changeDetector.detectChanges();\n    }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport { BaseListComponent } from '@vendure/admin-ui/core';\nimport { GetRoles, Role } from '@vendure/admin-ui/core';\nimport { NotificationService } from '@vendure/admin-ui/core';\nimport { DataService } from '@vendure/admin-ui/core';\nimport { ModalService } from '@vendure/admin-ui/core';\nimport { CUSTOMER_ROLE_CODE, SUPER_ADMIN_ROLE_CODE } from '@vendure/common/lib/shared-constants';\nimport { EMPTY, Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-role-list',\n    templateUrl: './role-list.component.html',\n    styleUrls: ['./role-list.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class RoleListComponent extends BaseListComponent<GetRoles.Query, GetRoles.Items> implements OnInit {\n    readonly initialLimit = 3;\n    displayLimit: { [id: string]: number } = {};\n    visibleRoles$: Observable<GetRoles.Items[]>;\n\n    constructor(\n        private modalService: ModalService,\n        private notificationService: NotificationService,\n        private dataService: DataService,\n        router: Router,\n        route: ActivatedRoute,\n    ) {\n        super(router, route);\n        super.setQueryFn(\n            (...args: any[]) => this.dataService.administrator.getRoles(...args),\n            data => data.roles,\n        );\n    }\n\n    ngOnInit() {\n        super.ngOnInit();\n        this.visibleRoles$ = this.items$.pipe(\n            map(roles => roles.filter(role => role.code !== CUSTOMER_ROLE_CODE)),\n        );\n    }\n\n    toggleDisplayLimit(role: GetRoles.Items) {\n        if (this.displayLimit[role.id] === role.permissions.length) {\n            this.displayLimit[role.id] = this.initialLimit;\n        } else {\n            this.displayLimit[role.id] = role.permissions.length;\n        }\n    }\n\n    isDefaultRole(role: Role): boolean {\n        return role.code === SUPER_ADMIN_ROLE_CODE || role.code === CUSTOMER_ROLE_CODE;\n    }\n\n    deleteRole(id: string) {\n        this.modalService\n            .dialog({\n                title: _('settings.confirm-delete-role'),\n                buttons: [\n                    { type: 'secondary', label: _('common.cancel') },\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\n                ],\n            })\n            .pipe(switchMap(response => (response ? this.dataService.administrator.deleteRole(id) : EMPTY)))\n            .subscribe(\n                () => {\n                    this.notificationService.success(_('common.notify-delete-success'), {\n                        entity: 'Role',\n                    });\n                    this.refresh();\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-delete-error'), {\n                        entity: 'Role',\n                    });\n                },\n            );\n    }\n}\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\r\n\r\nimport { CurrencyCode, ShippingMethodQuote } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-shipping-eligibility-test-result',\r\n    templateUrl: './shipping-eligibility-test-result.component.html',\r\n    styleUrls: ['./shipping-eligibility-test-result.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ShippingEligibilityTestResultComponent {\r\n    @Input() testResult: ShippingMethodQuote[];\r\n    @Input() okToRun = false;\r\n    @Input() testDataUpdated = false;\r\n    @Input() currencyCode: CurrencyCode;\r\n    @Output() runTest = new EventEmitter<void>();\r\n}\r\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    BaseDetailComponent,\r\n    configurableDefinitionToInstance,\r\n    ConfigurableOperation,\r\n    ConfigurableOperationDefinition,\r\n    CreateShippingMethodInput,\r\n    createUpdatedTranslatable,\r\n    CustomFieldConfig,\r\n    DataService,\r\n    findTranslation,\r\n    GetActiveChannel,\r\n    getConfigArgValue,\r\n    LanguageCode,\r\n    NotificationService,\r\n    Permission,\r\n    ServerConfigService,\r\n    ShippingMethod,\r\n    TestShippingMethodInput,\r\n    TestShippingMethodResult,\r\n    toConfigurableOperationInput,\r\n    UpdateShippingMethodInput,\r\n} from '@vendure/admin-ui/core';\r\nimport { normalizeString } from '@vendure/common/lib/normalize-string';\r\nimport { combineLatest, merge, Observable, of, Subject } from 'rxjs';\r\nimport { mergeMap, switchMap, take, takeUntil } from 'rxjs/operators';\r\n\r\nimport { TestAddress } from '../test-address-form/test-address-form.component';\r\nimport { TestOrderLine } from '../test-order-builder/test-order-builder.component';\r\n\r\n@Component({\r\n    selector: 'vdr-shipping-method-detail',\r\n    templateUrl: './shipping-method-detail.component.html',\r\n    styleUrls: ['./shipping-method-detail.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ShippingMethodDetailComponent\r\n    extends BaseDetailComponent<ShippingMethod.Fragment>\r\n    implements OnInit, OnDestroy {\r\n    detailForm: FormGroup;\r\n    checkers: ConfigurableOperationDefinition[] = [];\r\n    calculators: ConfigurableOperationDefinition[] = [];\r\n    fulfillmentHandlers: ConfigurableOperationDefinition[] = [];\r\n    selectedChecker?: ConfigurableOperation | null;\r\n    selectedCheckerDefinition?: ConfigurableOperationDefinition;\r\n    selectedCalculator?: ConfigurableOperation | null;\r\n    selectedCalculatorDefinition?: ConfigurableOperationDefinition;\r\n    activeChannel$: Observable<GetActiveChannel.ActiveChannel>;\r\n    testAddress: TestAddress;\r\n    testOrderLines: TestOrderLine[];\r\n    testDataUpdated = false;\r\n    testResult$: Observable<TestShippingMethodResult | undefined>;\r\n    customFields: CustomFieldConfig[];\r\n    readonly updatePermission = [Permission.UpdateSettings, Permission.UpdateShippingMethod];\r\n    private fetchTestResult$ = new Subject<[TestAddress, TestOrderLine[]]>();\r\n\r\n    constructor(\r\n        router: Router,\r\n        route: ActivatedRoute,\r\n        serverConfigService: ServerConfigService,\r\n        private changeDetector: ChangeDetectorRef,\r\n        protected dataService: DataService,\r\n        private formBuilder: FormBuilder,\r\n        private notificationService: NotificationService,\r\n    ) {\r\n        super(route, router, serverConfigService, dataService);\r\n        this.customFields = this.getCustomFieldConfig('ShippingMethod');\r\n        this.detailForm = this.formBuilder.group({\r\n            code: ['', Validators.required],\r\n            name: ['', Validators.required],\r\n            description: '',\r\n            fulfillmentHandler: ['', Validators.required],\r\n            checker: {},\r\n            calculator: {},\r\n            customFields: this.formBuilder.group(\r\n                this.customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\r\n            ),\r\n        });\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.init();\r\n        combineLatest([\r\n            this.dataService.shippingMethod.getShippingMethodOperations().single$,\r\n            this.entity$.pipe(take(1)),\r\n        ]).subscribe(([data, entity]) => {\r\n            this.checkers = data.shippingEligibilityCheckers;\r\n            this.calculators = data.shippingCalculators;\r\n            this.fulfillmentHandlers = data.fulfillmentHandlers;\r\n            this.changeDetector.markForCheck();\r\n            this.selectedCheckerDefinition = data.shippingEligibilityCheckers.find(\r\n                c => c.code === (entity.checker && entity.checker.code),\r\n            );\r\n            this.selectedCalculatorDefinition = data.shippingCalculators.find(\r\n                c => c.code === (entity.calculator && entity.calculator.code),\r\n            );\r\n        });\r\n\r\n        this.activeChannel$ = this.dataService.settings\r\n            .getActiveChannel()\r\n            .mapStream(data => data.activeChannel);\r\n\r\n        this.testResult$ = this.fetchTestResult$.pipe(\r\n            switchMap(([address, lines]) => {\r\n                if (!this.selectedChecker || !this.selectedCalculator) {\r\n                    return of(undefined);\r\n                }\r\n                const formValue = this.detailForm.value;\r\n                const input: TestShippingMethodInput = {\r\n                    shippingAddress: { ...address, streetLine1: 'test' },\r\n                    lines: lines.map(l => ({ productVariantId: l.id, quantity: l.quantity })),\r\n                    checker: toConfigurableOperationInput(this.selectedChecker, formValue.checker),\r\n                    calculator: toConfigurableOperationInput(this.selectedCalculator, formValue.calculator),\r\n                };\r\n                return this.dataService.shippingMethod\r\n                    .testShippingMethod(input)\r\n                    .mapSingle(result => result.testShippingMethod);\r\n            }),\r\n        );\r\n\r\n        // tslint:disable:no-non-null-assertion\r\n        merge(\r\n            this.detailForm.get(['checker'])!.valueChanges,\r\n            this.detailForm.get(['calculator'])!.valueChanges,\r\n        )\r\n            .pipe(takeUntil(this.destroy$))\r\n            .subscribe(() => (this.testDataUpdated = true));\r\n        // tslint:enable:no-non-null-assertion\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.destroy();\r\n    }\r\n\r\n    customFieldIsSet(name: string): boolean {\r\n        return !!this.detailForm.get(['customFields', name]);\r\n    }\r\n\r\n    updateCode(currentCode: string, nameValue: string) {\r\n        if (!currentCode) {\r\n            const codeControl = this.detailForm.get(['code']);\r\n            if (codeControl && codeControl.pristine) {\r\n                codeControl.setValue(normalizeString(nameValue, '-'));\r\n            }\r\n        }\r\n    }\r\n\r\n    selectChecker(checker: ConfigurableOperationDefinition) {\r\n        this.selectedCheckerDefinition = checker;\r\n        this.selectedChecker = configurableDefinitionToInstance(checker);\r\n        const formControl = this.detailForm.get('checker');\r\n        if (formControl) {\r\n            formControl.clearValidators();\r\n            formControl.updateValueAndValidity({ onlySelf: true });\r\n            formControl.patchValue(this.selectedChecker);\r\n        }\r\n        this.detailForm.markAsDirty();\r\n    }\r\n\r\n    selectCalculator(calculator: ConfigurableOperationDefinition) {\r\n        this.selectedCalculatorDefinition = calculator;\r\n        this.selectedCalculator = configurableDefinitionToInstance(calculator);\r\n        const formControl = this.detailForm.get('calculator');\r\n        if (formControl) {\r\n            formControl.clearValidators();\r\n            formControl.updateValueAndValidity({ onlySelf: true });\r\n            formControl.patchValue(this.selectedCalculator);\r\n        }\r\n        this.detailForm.markAsDirty();\r\n    }\r\n\r\n    create() {\r\n        const selectedChecker = this.selectedChecker;\r\n        const selectedCalculator = this.selectedCalculator;\r\n        if (!selectedChecker || !selectedCalculator) {\r\n            return;\r\n        }\r\n        combineLatest([this.entity$, this.languageCode$])\r\n            .pipe(\r\n                take(1),\r\n                mergeMap(([shippingMethod, languageCode]) => {\r\n                    const formValue = this.detailForm.value;\r\n                    const input = {\r\n                        ...(this.getUpdatedShippingMethod(\r\n                            shippingMethod,\r\n                            this.detailForm,\r\n                            languageCode,\r\n                        ) as CreateShippingMethodInput),\r\n                        checker: toConfigurableOperationInput(selectedChecker, formValue.checker),\r\n                        calculator: toConfigurableOperationInput(selectedCalculator, formValue.calculator),\r\n                    };\r\n                    return this.dataService.shippingMethod.createShippingMethod(input);\r\n                }),\r\n            )\r\n            .subscribe(\r\n                data => {\r\n                    this.notificationService.success(_('common.notify-create-success'), {\r\n                        entity: 'ShippingMethod',\r\n                    });\r\n                    this.detailForm.markAsPristine();\r\n                    this.changeDetector.markForCheck();\r\n                    this.router.navigate(['../', data.createShippingMethod.id], { relativeTo: this.route });\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-create-error'), {\r\n                        entity: 'ShippingMethod',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    save() {\r\n        const selectedChecker = this.selectedChecker;\r\n        const selectedCalculator = this.selectedCalculator;\r\n        if (!selectedChecker || !selectedCalculator) {\r\n            return;\r\n        }\r\n        combineLatest([this.entity$, this.languageCode$])\r\n            .pipe(\r\n                take(1),\r\n                mergeMap(([shippingMethod, languageCode]) => {\r\n                    const formValue = this.detailForm.value;\r\n                    const input = {\r\n                        ...(this.getUpdatedShippingMethod(\r\n                            shippingMethod,\r\n                            this.detailForm,\r\n                            languageCode,\r\n                        ) as UpdateShippingMethodInput),\r\n                        checker: toConfigurableOperationInput(selectedChecker, formValue.checker),\r\n                        calculator: toConfigurableOperationInput(selectedCalculator, formValue.calculator),\r\n                    };\r\n                    return this.dataService.shippingMethod.updateShippingMethod(input);\r\n                }),\r\n            )\r\n            .subscribe(\r\n                data => {\r\n                    this.notificationService.success(_('common.notify-update-success'), {\r\n                        entity: 'ShippingMethod',\r\n                    });\r\n                    this.detailForm.markAsPristine();\r\n                    this.changeDetector.markForCheck();\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-update-error'), {\r\n                        entity: 'ShippingMethod',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    setTestOrderLines(event: TestOrderLine[]) {\r\n        this.testOrderLines = event;\r\n        this.testDataUpdated = true;\r\n    }\r\n\r\n    setTestAddress(event: TestAddress) {\r\n        this.testAddress = event;\r\n        this.testDataUpdated = true;\r\n    }\r\n\r\n    allTestDataPresent(): boolean {\r\n        return !!(\r\n            this.testAddress &&\r\n            this.testOrderLines &&\r\n            this.testOrderLines.length &&\r\n            this.selectedChecker &&\r\n            this.selectedCalculator\r\n        );\r\n    }\r\n\r\n    runTest() {\r\n        this.fetchTestResult$.next([this.testAddress, this.testOrderLines]);\r\n        this.testDataUpdated = false;\r\n    }\r\n\r\n    /**\r\n     * Given a ShippingMethod and the value of the detailForm, this method creates an updated copy which\r\n     * can then be persisted to the API.\r\n     */\r\n    private getUpdatedShippingMethod(\r\n        shippingMethod: ShippingMethod.Fragment,\r\n        formGroup: FormGroup,\r\n        languageCode: LanguageCode,\r\n    ): Omit<CreateShippingMethodInput | UpdateShippingMethodInput, 'checker' | 'calculator'> {\r\n        const formValue = formGroup.value;\r\n        const input = createUpdatedTranslatable({\r\n            translatable: shippingMethod,\r\n            updatedFields: formValue,\r\n            customFieldConfig: this.customFields,\r\n            languageCode,\r\n            defaultTranslation: {\r\n                languageCode,\r\n                name: shippingMethod.name || '',\r\n                description: shippingMethod.description || '',\r\n            },\r\n        });\r\n        return { ...input, fulfillmentHandler: formValue.fulfillmentHandler };\r\n    }\r\n\r\n    protected setFormValues(shippingMethod: ShippingMethod.Fragment, languageCode: LanguageCode): void {\r\n        const currentTranslation = findTranslation(shippingMethod, languageCode);\r\n        this.detailForm.patchValue({\r\n            name: currentTranslation?.name ?? '',\r\n            description: currentTranslation?.description ?? '',\r\n            code: shippingMethod.code,\r\n            fulfillmentHandler: shippingMethod.fulfillmentHandlerCode,\r\n            checker: shippingMethod.checker || {},\r\n            calculator: shippingMethod.calculator || {},\r\n        });\r\n        if (!this.selectedChecker) {\r\n            this.selectedChecker = shippingMethod.checker && {\r\n                code: shippingMethod.checker.code,\r\n                args: shippingMethod.checker.args.map(a => ({ ...a, value: getConfigArgValue(a.value) })),\r\n            };\r\n        }\r\n        if (!this.selectedCalculator) {\r\n            this.selectedCalculator = shippingMethod.calculator && {\r\n                code: shippingMethod.calculator?.code,\r\n                args: shippingMethod.calculator?.args.map(a => ({ ...a, value: getConfigArgValue(a.value) })),\r\n            };\r\n        }\r\n        if (this.customFields.length) {\r\n            const customFieldsGroup = this.detailForm.get('customFields') as FormGroup;\r\n\r\n            for (const fieldDef of this.customFields) {\r\n                const key = fieldDef.name;\r\n                const value =\r\n                    fieldDef.type === 'localeString'\r\n                        ? (currentTranslation as any).customFields[key]\r\n                        : (shippingMethod as any).customFields[key];\r\n                const control = customFieldsGroup.get(key);\r\n                if (control) {\r\n                    control.patchValue(value);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    BaseListComponent,\r\n    DataService,\r\n    GetActiveChannel,\r\n    GetShippingMethodList,\r\n    LanguageCode,\r\n    ModalService,\r\n    NotificationService,\r\n    ServerConfigService,\r\n    ShippingMethodQuote,\r\n    TestEligibleShippingMethodsInput,\r\n} from '@vendure/admin-ui/core';\r\nimport { EMPTY, Observable, Subject } from 'rxjs';\r\nimport { switchMap, tap } from 'rxjs/operators';\r\n\r\nimport { TestAddress } from '../test-address-form/test-address-form.component';\r\nimport { TestOrderLine } from '../test-order-builder/test-order-builder.component';\r\n\r\n@Component({\r\n    selector: 'vdr-shipping-method-list',\r\n    templateUrl: './shipping-method-list.component.html',\r\n    styleUrls: ['./shipping-method-list.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ShippingMethodListComponent\r\n    extends BaseListComponent<GetShippingMethodList.Query, GetShippingMethodList.Items>\r\n    implements OnInit {\r\n    activeChannel$: Observable<GetActiveChannel.ActiveChannel>;\r\n    testAddress: TestAddress;\r\n    testOrderLines: TestOrderLine[];\r\n    testDataUpdated = false;\r\n    testResult$: Observable<ShippingMethodQuote[] | undefined>;\r\n    availableLanguages$: Observable<LanguageCode[]>;\r\n    contentLanguage$: Observable<LanguageCode>;\r\n    private fetchTestResult$ = new Subject<[TestAddress, TestOrderLine[]]>();\r\n\r\n    constructor(\r\n        private modalService: ModalService,\r\n        private notificationService: NotificationService,\r\n        private dataService: DataService,\r\n        private serverConfigService: ServerConfigService,\r\n        router: Router,\r\n        route: ActivatedRoute,\r\n    ) {\r\n        super(router, route);\r\n        super.setQueryFn(\r\n            (...args: any[]) =>\r\n                this.dataService.shippingMethod.getShippingMethods(...args).refetchOnChannelChange(),\r\n            data => data.shippingMethods,\r\n        );\r\n    }\r\n\r\n    ngOnInit() {\r\n        super.ngOnInit();\r\n        this.testResult$ = this.fetchTestResult$.pipe(\r\n            switchMap(([address, lines]) => {\r\n                const input: TestEligibleShippingMethodsInput = {\r\n                    shippingAddress: { ...address, streetLine1: 'test' },\r\n                    lines: lines.map(l => ({ productVariantId: l.id, quantity: l.quantity })),\r\n                };\r\n                return this.dataService.shippingMethod\r\n                    .testEligibleShippingMethods(input)\r\n                    .mapSingle(result => result.testEligibleShippingMethods);\r\n            }),\r\n        );\r\n        this.activeChannel$ = this.dataService.settings\r\n            .getActiveChannel()\r\n            .mapStream(data => data.activeChannel);\r\n        this.availableLanguages$ = this.serverConfigService.getAvailableLanguages();\r\n        this.contentLanguage$ = this.dataService.client\r\n            .uiState()\r\n            .mapStream(({ uiState }) => uiState.contentLanguage)\r\n            .pipe(tap(() => this.refresh()));\r\n    }\r\n\r\n    deleteShippingMethod(id: string) {\r\n        this.modalService\r\n            .dialog({\r\n                title: _('catalog.confirm-delete-shipping-method'),\r\n                buttons: [\r\n                    { type: 'secondary', label: _('common.cancel') },\r\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\r\n                ],\r\n            })\r\n            .pipe(\r\n                switchMap(response =>\r\n                    response ? this.dataService.shippingMethod.deleteShippingMethod(id) : EMPTY,\r\n                ),\r\n            )\r\n            .subscribe(\r\n                () => {\r\n                    this.notificationService.success(_('common.notify-delete-success'), {\r\n                        entity: 'ShippingMethod',\r\n                    });\r\n                    this.refresh();\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-delete-error'), {\r\n                        entity: 'ShippingMethod',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    setTestOrderLines(event: TestOrderLine[]) {\r\n        this.testOrderLines = event;\r\n        this.testDataUpdated = true;\r\n    }\r\n\r\n    setTestAddress(event: TestAddress) {\r\n        this.testAddress = event;\r\n        this.testDataUpdated = true;\r\n    }\r\n\r\n    allTestDataPresent(): boolean {\r\n        return !!(this.testAddress && this.testOrderLines && this.testOrderLines.length);\r\n    }\r\n\r\n    runTest() {\r\n        this.fetchTestResult$.next([this.testAddress, this.testOrderLines]);\r\n        this.testDataUpdated = false;\r\n    }\r\n\r\n    setLanguage(code: LanguageCode) {\r\n        this.dataService.client.setContentLanguage(code).subscribe();\r\n    }\r\n}\r\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\r\n\r\nimport { CurrencyCode, TestShippingMethodResult } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-shipping-method-test-result',\r\n    templateUrl: './shipping-method-test-result.component.html',\r\n    styleUrls: ['./shipping-method-test-result.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ShippingMethodTestResultComponent {\r\n    @Input() testResult: TestShippingMethodResult;\r\n    @Input() okToRun = false;\r\n    @Input() testDataUpdated = false;\r\n    @Input() currencyCode: CurrencyCode;\r\n    @Output() runTest = new EventEmitter<void>();\r\n}\r\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport { BaseDetailComponent, Permission } from '@vendure/admin-ui/core';\nimport {\n    ConfigurableOperation,\n    CreateTaxCategoryInput,\n    LanguageCode,\n    TaxCategory,\n    UpdateTaxCategoryInput,\n} from '@vendure/admin-ui/core';\nimport { NotificationService } from '@vendure/admin-ui/core';\nimport { DataService } from '@vendure/admin-ui/core';\nimport { ServerConfigService } from '@vendure/admin-ui/core';\nimport { Observable } from 'rxjs';\nimport { mergeMap, take } from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-tax-detail',\n    templateUrl: './tax-category-detail.component.html',\n    styleUrls: ['./tax-category-detail.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TaxCategoryDetailComponent\n    extends BaseDetailComponent<TaxCategory.Fragment>\n    implements OnInit, OnDestroy {\n    taxCategory$: Observable<TaxCategory.Fragment>;\n    detailForm: FormGroup;\n    readonly updatePermission = [Permission.UpdateSettings, Permission.UpdateTaxCategory];\n\n    private taxCondition: ConfigurableOperation;\n    private taxAction: ConfigurableOperation;\n\n    constructor(\n        router: Router,\n        route: ActivatedRoute,\n        serverConfigService: ServerConfigService,\n        private changeDetector: ChangeDetectorRef,\n        protected dataService: DataService,\n        private formBuilder: FormBuilder,\n        private notificationService: NotificationService,\n    ) {\n        super(route, router, serverConfigService, dataService);\n        this.detailForm = this.formBuilder.group({\n            name: ['', Validators.required],\n            isDefault: false,\n        });\n    }\n\n    ngOnInit() {\n        this.init();\n        this.taxCategory$ = this.entity$;\n    }\n\n    ngOnDestroy() {\n        this.destroy();\n    }\n\n    saveButtonEnabled(): boolean {\n        return this.detailForm.dirty && this.detailForm.valid;\n    }\n\n    create() {\n        if (!this.detailForm.dirty) {\n            return;\n        }\n        const formValue = this.detailForm.value;\n        const input = { name: formValue.name, isDefault: formValue.isDefault } as CreateTaxCategoryInput;\n        this.dataService.settings.createTaxCategory(input).subscribe(\n            data => {\n                this.notificationService.success(_('common.notify-create-success'), {\n                    entity: 'TaxCategory',\n                });\n                this.detailForm.markAsPristine();\n                this.changeDetector.markForCheck();\n                this.router.navigate(['../', data.createTaxCategory.id], { relativeTo: this.route });\n            },\n            err => {\n                this.notificationService.error(_('common.notify-create-error'), {\n                    entity: 'TaxCategory',\n                });\n            },\n        );\n    }\n\n    save() {\n        if (!this.detailForm.dirty) {\n            return;\n        }\n        const formValue = this.detailForm.value;\n        this.taxCategory$\n            .pipe(\n                take(1),\n                mergeMap(taxCategory => {\n                    const input = {\n                        id: taxCategory.id,\n                        name: formValue.name,\n                        isDefault: formValue.isDefault,\n                    } as UpdateTaxCategoryInput;\n                    return this.dataService.settings.updateTaxCategory(input);\n                }),\n            )\n            .subscribe(\n                data => {\n                    this.notificationService.success(_('common.notify-update-success'), {\n                        entity: 'TaxCategory',\n                    });\n                    this.detailForm.markAsPristine();\n                    this.changeDetector.markForCheck();\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-update-error'), {\n                        entity: 'TaxCategory',\n                    });\n                },\n            );\n    }\n\n    /**\n     * Update the form values when the entity changes.\n     */\n    protected setFormValues(entity: TaxCategory.Fragment, languageCode: LanguageCode): void {\n        this.detailForm.patchValue({\n            name: entity.name,\n            isDefault: entity.isDefault,\n        });\n    }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport { EMPTY, Observable } from 'rxjs';\r\nimport { map, switchMap } from 'rxjs/operators';\r\n\r\nimport { DeletionResult, GetTaxCategories, TaxCategory } from '@vendure/admin-ui/core';\r\nimport { NotificationService } from '@vendure/admin-ui/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\nimport { QueryResult } from '@vendure/admin-ui/core';\r\nimport { ModalService } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-tax-list',\r\n    templateUrl: './tax-category-list.component.html',\r\n    styleUrls: ['./tax-category-list.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class TaxCategoryListComponent {\r\n    taxCategories$: Observable<TaxCategory.Fragment[]>;\r\n    private queryResult: QueryResult<GetTaxCategories.Query>;\r\n\r\n    constructor(\r\n        private dataService: DataService,\r\n        private notificationService: NotificationService,\r\n        private modalService: ModalService,\r\n    ) {\r\n        this.queryResult = this.dataService.settings.getTaxCategories();\r\n        this.taxCategories$ = this.queryResult.mapStream(data => data.taxCategories);\r\n    }\r\n\r\n    deleteTaxCategory(taxCategory: TaxCategory.Fragment) {\r\n        return this.modalService\r\n            .dialog({\r\n                title: _('settings.confirm-delete-tax-category'),\r\n                body: taxCategory.name,\r\n                buttons: [\r\n                    { type: 'secondary', label: _('common.cancel') },\r\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\r\n                ],\r\n            })\r\n            .pipe(\r\n                switchMap(res => (res ? this.dataService.settings.deleteTaxCategory(taxCategory.id) : EMPTY)),\r\n                map(res => res.deleteTaxCategory),\r\n            )\r\n            .subscribe(\r\n                res => {\r\n                    if (res.result === DeletionResult.DELETED) {\r\n                        this.notificationService.success(_('common.notify-delete-success'), {\r\n                            entity: 'TaxRate',\r\n                        });\r\n                        this.queryResult.ref.refetch();\r\n                    } else {\r\n                        this.notificationService.error(res.message || _('common.notify-delete-error'), {\r\n                            entity: 'TaxRate',\r\n                        });\r\n                    }\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-delete-error'), {\r\n                        entity: 'TaxRate',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n}\r\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    BaseDetailComponent,\n    CreateTaxRateInput,\n    CustomerGroup,\n    DataService,\n    GetZones,\n    LanguageCode,\n    NotificationService,\n    Permission,\n    ServerConfigService,\n    TaxCategory,\n    TaxRate,\n    UpdateTaxRateInput,\n} from '@vendure/admin-ui/core';\nimport { Observable } from 'rxjs';\nimport { mergeMap, take } from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-tax-rate-detail',\n    templateUrl: './tax-rate-detail.component.html',\n    styleUrls: ['./tax-rate-detail.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TaxRateDetailComponent\n    extends BaseDetailComponent<TaxRate.Fragment>\n    implements OnInit, OnDestroy {\n    taxCategories$: Observable<TaxCategory.Fragment[]>;\n    zones$: Observable<GetZones.Zones[]>;\n    groups$: Observable<CustomerGroup[]>;\n    detailForm: FormGroup;\n    readonly updatePermission = [Permission.UpdateSettings, Permission.UpdateTaxRate];\n\n    constructor(\n        router: Router,\n        route: ActivatedRoute,\n        serverConfigService: ServerConfigService,\n        private changeDetector: ChangeDetectorRef,\n        protected dataService: DataService,\n        private formBuilder: FormBuilder,\n        private notificationService: NotificationService,\n    ) {\n        super(route, router, serverConfigService, dataService);\n        this.detailForm = this.formBuilder.group({\n            name: ['', Validators.required],\n            enabled: [true],\n            value: [0, Validators.required],\n            taxCategoryId: [''],\n            zoneId: [''],\n            customerGroupId: [''],\n        });\n    }\n\n    ngOnInit() {\n        this.init();\n        this.taxCategories$ = this.dataService.settings\n            .getTaxCategories()\n            .mapSingle(data => data.taxCategories);\n        this.zones$ = this.dataService.settings.getZones().mapSingle(data => data.zones);\n    }\n\n    ngOnDestroy() {\n        this.destroy();\n    }\n\n    saveButtonEnabled(): boolean {\n        return this.detailForm.dirty && this.detailForm.valid;\n    }\n\n    create() {\n        if (!this.detailForm.dirty) {\n            return;\n        }\n        const formValue = this.detailForm.value;\n        const input = {\n            name: formValue.name,\n            enabled: formValue.enabled,\n            value: formValue.value,\n            categoryId: formValue.taxCategoryId,\n            zoneId: formValue.zoneId,\n            customerGroupId: formValue.customerGroupId,\n        } as CreateTaxRateInput;\n        this.dataService.settings.createTaxRate(input).subscribe(\n            data => {\n                this.notificationService.success(_('common.notify-create-success'), {\n                    entity: 'TaxRate',\n                });\n                this.detailForm.markAsPristine();\n                this.changeDetector.markForCheck();\n                this.router.navigate(['../', data.createTaxRate.id], { relativeTo: this.route });\n            },\n            err => {\n                this.notificationService.error(_('common.notify-create-error'), {\n                    entity: 'TaxRate',\n                });\n            },\n        );\n    }\n\n    save() {\n        if (!this.detailForm.dirty) {\n            return;\n        }\n        const formValue = this.detailForm.value;\n        this.entity$\n            .pipe(\n                take(1),\n                mergeMap(taxRate => {\n                    const input = {\n                        id: taxRate.id,\n                        name: formValue.name,\n                        enabled: formValue.enabled,\n                        value: formValue.value,\n                        categoryId: formValue.taxCategoryId,\n                        zoneId: formValue.zoneId,\n                        customerGroupId: formValue.customerGroupId,\n                    } as UpdateTaxRateInput;\n                    return this.dataService.settings.updateTaxRate(input);\n                }),\n            )\n            .subscribe(\n                data => {\n                    this.notificationService.success(_('common.notify-update-success'), {\n                        entity: 'TaxRate',\n                    });\n                    this.detailForm.markAsPristine();\n                    this.changeDetector.markForCheck();\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-update-error'), {\n                        entity: 'TaxRate',\n                    });\n                },\n            );\n    }\n\n    /**\n     * Update the form values when the entity changes.\n     */\n    protected setFormValues(entity: TaxRate.Fragment, languageCode: LanguageCode): void {\n        this.detailForm.patchValue({\n            name: entity.name,\n            enabled: entity.enabled,\n            value: entity.value,\n            taxCategoryId: entity.category ? entity.category.id : '',\n            zoneId: entity.zone ? entity.zone.id : '',\n            customerGroupId: entity.customerGroup ? entity.customerGroup.id : '',\n        });\n    }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport { EMPTY } from 'rxjs';\r\nimport { map, switchMap } from 'rxjs/operators';\r\n\r\nimport { BaseListComponent } from '@vendure/admin-ui/core';\r\nimport { DeletionResult, GetTaxRateList } from '@vendure/admin-ui/core';\r\nimport { NotificationService } from '@vendure/admin-ui/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\nimport { ModalService } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-tax-rate-list',\r\n    templateUrl: './tax-rate-list.component.html',\r\n    styleUrls: ['./tax-rate-list.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class TaxRateListComponent extends BaseListComponent<GetTaxRateList.Query, GetTaxRateList.Items> {\r\n    constructor(\r\n        private modalService: ModalService,\r\n        private notificationService: NotificationService,\r\n        private dataService: DataService,\r\n        router: Router,\r\n        route: ActivatedRoute,\r\n    ) {\r\n        super(router, route);\r\n        super.setQueryFn(\r\n            (...args: any[]) => this.dataService.settings.getTaxRates(...args),\r\n            data => data.taxRates,\r\n        );\r\n    }\r\n\r\n    deleteTaxRate(taxRate: GetTaxRateList.Items) {\r\n        return this.modalService\r\n            .dialog({\r\n                title: _('settings.confirm-delete-tax-rate'),\r\n                body: taxRate.name,\r\n                buttons: [\r\n                    { type: 'secondary', label: _('common.cancel') },\r\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\r\n                ],\r\n            })\r\n            .pipe(\r\n                switchMap(res => (res ? this.dataService.settings.deleteTaxRate(taxRate.id) : EMPTY)),\r\n                map(res => res.deleteTaxRate),\r\n            )\r\n            .subscribe(\r\n                res => {\r\n                    if (res.result === DeletionResult.DELETED) {\r\n                        this.notificationService.success(_('common.notify-delete-success'), {\r\n                            entity: 'TaxRate',\r\n                        });\r\n                        this.refresh();\r\n                    } else {\r\n                        this.notificationService.error(res.message || _('common.notify-delete-error'), {\r\n                            entity: 'TaxRate',\r\n                        });\r\n                    }\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-delete-error'), {\r\n                        entity: 'TaxRate',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n}\r\n","import { ChangeDetectionStrategy, Component, EventEmitter, OnDestroy, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { DataService, GetAvailableCountries, LocalStorageService } from '@vendure/admin-ui/core';\r\nimport { Observable, Subscription } from 'rxjs';\r\n\r\nexport interface TestAddress {\r\n    city: string;\r\n    province: string;\r\n    postalCode: string;\r\n    countryCode: string;\r\n}\r\n\r\n@Component({\r\n    selector: 'vdr-test-address-form',\r\n    templateUrl: './test-address-form.component.html',\r\n    styleUrls: ['./test-address-form.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class TestAddressFormComponent implements OnInit, OnDestroy {\r\n    @Output() addressChange = new EventEmitter<TestAddress>();\r\n    availableCountries$: Observable<GetAvailableCountries.Items[]>;\r\n    form: FormGroup;\r\n    private subscription: Subscription;\r\n\r\n    constructor(\r\n        private formBuilder: FormBuilder,\r\n        private dataService: DataService,\r\n        private localStorageService: LocalStorageService,\r\n    ) {}\r\n\r\n    ngOnInit() {\r\n        this.availableCountries$ = this.dataService.settings\r\n            .getAvailableCountries()\r\n            .mapSingle(result => result.countries.items);\r\n        const storedValue = this.localStorageService.getForCurrentLocation('shippingTestAddress');\r\n        const initialValue: TestAddress = storedValue\r\n            ? storedValue\r\n            : {\r\n                  city: '',\r\n                  countryCode: '',\r\n                  postalCode: '',\r\n                  province: '',\r\n              };\r\n        this.addressChange.emit(initialValue);\r\n\r\n        this.form = this.formBuilder.group(initialValue);\r\n        this.subscription = this.form.valueChanges.subscribe(value => {\r\n            this.localStorageService.setForCurrentLocation('shippingTestAddress', value);\r\n            this.addressChange.emit(value);\r\n        });\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.subscription) {\r\n            this.subscription.unsubscribe();\r\n        }\r\n    }\r\n}\r\n","import { ChangeDetectionStrategy, Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport {\n    CurrencyCode,\n    DataService,\n    LocalStorageService,\n    ProductSelectorSearch,\n} from '@vendure/admin-ui/core';\n\nexport interface TestOrderLine {\n    id: string;\n    name: string;\n    preview: string;\n    sku: string;\n    unitPriceWithTax: number;\n    quantity: number;\n}\n\n@Component({\n    selector: 'vdr-test-order-builder',\n    templateUrl: './test-order-builder.component.html',\n    styleUrls: ['./test-order-builder.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TestOrderBuilderComponent implements OnInit {\n    @Output() orderLinesChange = new EventEmitter<TestOrderLine[]>();\n    lines: TestOrderLine[] = [];\n    currencyCode: CurrencyCode;\n    get subTotal(): number {\n        return this.lines.reduce((sum, l) => sum + l.unitPriceWithTax * l.quantity, 0);\n    }\n\n    constructor(private dataService: DataService, private localStorageService: LocalStorageService) {}\n\n    ngOnInit() {\n        this.lines = this.loadFromLocalStorage();\n        if (this.lines) {\n            this.orderLinesChange.emit(this.lines);\n        }\n        this.dataService.settings.getActiveChannel('cache-first').single$.subscribe(result => {\n            this.currencyCode = result.activeChannel.currencyCode;\n        });\n    }\n\n    selectResult(result: ProductSelectorSearch.Items) {\n        if (result) {\n            this.addToLines(result);\n        }\n    }\n\n    private addToLines(result: ProductSelectorSearch.Items) {\n        if (!this.lines.find(l => l.id === result.productVariantId)) {\n            this.lines.push({\n                id: result.productVariantId,\n                name: result.productVariantName,\n                preview: result.productAsset?.preview ?? '',\n                quantity: 1,\n                sku: result.sku,\n                unitPriceWithTax:\n                    (result.priceWithTax.__typename === 'SinglePrice' && result.priceWithTax.value) || 0,\n            });\n            this.persistToLocalStorage();\n            this.orderLinesChange.emit(this.lines);\n        }\n    }\n\n    updateQuantity() {\n        this.persistToLocalStorage();\n        this.orderLinesChange.emit(this.lines);\n    }\n\n    removeLine(line: TestOrderLine) {\n        this.lines = this.lines.filter(l => l.id !== line.id);\n        this.persistToLocalStorage();\n        this.orderLinesChange.emit(this.lines);\n    }\n\n    private persistToLocalStorage() {\n        this.localStorageService.setForCurrentLocation('shippingTestOrder', this.lines);\n    }\n\n    private loadFromLocalStorage(): TestOrderLine[] {\n        return this.localStorageService.getForCurrentLocation('shippingTestOrder') || [];\n    }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { Dialog } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-zone-detail-dialog',\r\n    templateUrl: './zone-detail-dialog.component.html',\r\n    styleUrls: ['./zone-detail-dialog.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ZoneDetailDialogComponent implements Dialog<string> {\r\n    zone: { id?: string; name: string };\r\n    resolveWith: (result?: string) => void;\r\n\r\n    cancel() {\r\n        this.resolveWith();\r\n    }\r\n\r\n    save() {\r\n        this.resolveWith(this.zone.name);\r\n    }\r\n}\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    Country,\r\n    DataService,\r\n    DeletionResult,\r\n    GetZones,\r\n    ModalService,\r\n    NotificationService,\r\n} from '@vendure/admin-ui/core';\r\nimport { combineLatest, EMPTY, Observable, of } from 'rxjs';\r\nimport { distinctUntilChanged, map, mapTo, startWith, switchMap, tap } from 'rxjs/operators';\r\n\r\nimport { AddCountryToZoneDialogComponent } from '../add-country-to-zone-dialog/add-country-to-zone-dialog.component';\r\nimport { ZoneDetailDialogComponent } from '../zone-detail-dialog/zone-detail-dialog.component';\r\n\r\n@Component({\r\n    selector: 'vdr-zone-list',\r\n    templateUrl: './zone-list.component.html',\r\n    styleUrls: ['./zone-list.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ZoneListComponent implements OnInit {\r\n    activeZone$: Observable<GetZones.Zones | undefined>;\r\n    zones$: Observable<GetZones.Zones[]>;\r\n    members$: Observable<GetZones.Members[]>;\r\n    selectedMemberIds: string[] = [];\r\n\r\n    constructor(\r\n        private dataService: DataService,\r\n        private notificationService: NotificationService,\r\n        private modalService: ModalService,\r\n        private route: ActivatedRoute,\r\n        private router: Router,\r\n    ) {}\r\n\r\n    ngOnInit(): void {\r\n        this.zones$ = this.dataService.settings.getZones().mapStream(data => data.zones);\r\n        const activeZoneId$ = this.route.paramMap.pipe(\r\n            map(pm => pm.get('contents')),\r\n            distinctUntilChanged(),\r\n            tap(() => (this.selectedMemberIds = [])),\r\n        );\r\n        this.activeZone$ = combineLatest(this.zones$, activeZoneId$).pipe(\r\n            map(([zones, activeZoneId]) => {\r\n                if (activeZoneId) {\r\n                    return zones.find(z => z.id === activeZoneId);\r\n                }\r\n            }),\r\n        );\r\n    }\r\n\r\n    create() {\r\n        this.modalService\r\n            .fromComponent(ZoneDetailDialogComponent, { locals: { zone: { name: '' } } })\r\n            .pipe(\r\n                switchMap(name =>\r\n                    name ? this.dataService.settings.createZone({ name, memberIds: [] }) : EMPTY,\r\n                ),\r\n                // refresh list\r\n                switchMap(() => this.dataService.settings.getZones().single$),\r\n            )\r\n            .subscribe(\r\n                () => {\r\n                    this.notificationService.success(_('common.notify-create-success'), {\r\n                        entity: 'Zone',\r\n                    });\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-create-error'), {\r\n                        entity: 'Zone',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    delete(zoneId: string) {\r\n        this.modalService\r\n            .dialog({\r\n                title: _('catalog.confirm-delete-zone'),\r\n                buttons: [\r\n                    { type: 'secondary', label: _('common.cancel') },\r\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\r\n                ],\r\n            })\r\n            .pipe(\r\n                switchMap(response => (response ? this.dataService.settings.deleteZone(zoneId) : EMPTY)),\r\n\r\n                switchMap(result => {\r\n                    if (result.deleteZone.result === DeletionResult.DELETED) {\r\n                        // refresh list\r\n                        return this.dataService.settings\r\n                            .getZones()\r\n                            .mapSingle(() => ({ errorMessage: false }));\r\n                    } else {\r\n                        return of({ errorMessage: result.deleteZone.message });\r\n                    }\r\n                }),\r\n            )\r\n            .subscribe(\r\n                result => {\r\n                    if (typeof result.errorMessage === 'string') {\r\n                        this.notificationService.error(result.errorMessage);\r\n                    } else {\r\n                        this.notificationService.success(_('common.notify-delete-success'), {\r\n                            entity: 'Zone',\r\n                        });\r\n                    }\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-delete-error'), {\r\n                        entity: 'Zone',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    update(zone: GetZones.Zones) {\r\n        this.modalService\r\n            .fromComponent(ZoneDetailDialogComponent, { locals: { zone } })\r\n            .pipe(\r\n                switchMap(name =>\r\n                    name ? this.dataService.settings.updateZone({ id: zone.id, name }) : EMPTY,\r\n                ),\r\n            )\r\n            .subscribe(\r\n                () => {\r\n                    this.notificationService.success(_('common.notify-update-success'), {\r\n                        entity: 'Zone',\r\n                    });\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-update-error'), {\r\n                        entity: 'Zone',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    closeMembers() {\r\n        const params = { ...this.route.snapshot.params };\r\n        delete params.contents;\r\n        this.router.navigate(['./', params], { relativeTo: this.route, queryParamsHandling: 'preserve' });\r\n    }\r\n\r\n    addToZone(zone: GetZones.Zones) {\r\n        this.modalService\r\n            .fromComponent(AddCountryToZoneDialogComponent, {\r\n                locals: {\r\n                    zoneName: zone.name,\r\n                    currentMembers: zone.members,\r\n                },\r\n                size: 'md',\r\n            })\r\n            .pipe(\r\n                switchMap(memberIds =>\r\n                    memberIds\r\n                        ? this.dataService.settings\r\n                              .addMembersToZone(zone.id, memberIds)\r\n                              .pipe(mapTo(memberIds))\r\n                        : EMPTY,\r\n                ),\r\n            )\r\n            .subscribe({\r\n                next: result => {\r\n                    this.notificationService.success(_(`settings.add-countries-to-zone-success`), {\r\n                        countryCount: result.length,\r\n                        zoneName: zone.name,\r\n                    });\r\n                },\r\n                error: err => {\r\n                    this.notificationService.error(err);\r\n                },\r\n            });\r\n    }\r\n\r\n    removeFromZone(zone: GetZones.Zones, memberIds: string[]) {\r\n        this.dataService.settings.removeMembersFromZone(zone.id, memberIds).subscribe({\r\n            complete: () => {\r\n                this.notificationService.success(_(`settings.remove-countries-from-zone-success`), {\r\n                    countryCount: memberIds.length,\r\n                    zoneName: zone.name,\r\n                });\r\n            },\r\n        });\r\n    }\r\n}\r\n","import { Directive, TemplateRef } from '@angular/core';\r\n\r\n@Directive({\r\n    selector: '[vdrZoneMemberControls]',\r\n})\r\nexport class ZoneMemberControlsDirective {\r\n    constructor(public templateRef: TemplateRef<any>) {}\r\n}\r\n","import { Directive, TemplateRef } from '@angular/core';\r\n\r\n@Directive({\r\n    selector: '[vdrZoneMemberListHeader]',\r\n})\r\nexport class ZoneMemberListHeaderDirective {\r\n    constructor(public templateRef: TemplateRef<any>) {}\r\n}\r\n","import { ChangeDetectionStrategy, Component, ContentChild, EventEmitter, Input, Output } from '@angular/core';\r\nimport { GetZones } from '@vendure/admin-ui/core';\r\n\r\nimport { ZoneMemberControlsDirective } from './zone-member-controls.directive';\r\nimport { ZoneMemberListHeaderDirective } from './zone-member-list-header.directive';\r\n\r\nexport type ZoneMember = { id: string; name: string; code: string };\r\n\r\n@Component({\r\n    selector: 'vdr-zone-member-list',\r\n    templateUrl: './zone-member-list.component.html',\r\n    styleUrls: ['./zone-member-list.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ZoneMemberListComponent {\r\n    @Input() members: ZoneMember[] = [];\r\n    @Input() selectedMemberIds: string[] = [];\r\n    @Output() selectionChange = new EventEmitter<string[]>();\r\n    @ContentChild(ZoneMemberListHeaderDirective) headerTemplate: ZoneMemberListHeaderDirective;\r\n    @ContentChild(ZoneMemberControlsDirective) controlsTemplate: ZoneMemberControlsDirective;\r\n    filterTerm = '';\r\n\r\n    filteredMembers(): ZoneMember[] {\r\n        if (this.filterTerm !== '') {\r\n            const term = this.filterTerm.toLocaleLowerCase();\r\n            return this.members.filter(\r\n                m => m.name.toLocaleLowerCase().includes(term) || m.code.toLocaleLowerCase().includes(term),\r\n            );\r\n        } else {\r\n            return this.members;\r\n        }\r\n    }\r\n\r\n    areAllSelected(): boolean {\r\n        if (this.members) {\r\n            return this.selectedMemberIds.length === this.members.length;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    toggleSelectAll() {\r\n        if (this.areAllSelected()) {\r\n            this.selectionChange.emit([]);\r\n        } else {\r\n            this.selectionChange.emit(this.members.map(v => v.id));\r\n        }\r\n    }\r\n\r\n    toggleSelectMember(member: ZoneMember) {\r\n        if (this.selectedMemberIds.includes(member.id)) {\r\n            this.selectionChange.emit(this.selectedMemberIds.filter(id => id !== member.id));\r\n        } else {\r\n            this.selectionChange.emit([...this.selectedMemberIds, member.id]);\r\n        }\r\n    }\r\n\r\n    isMemberSelected = (member: ZoneMember): boolean => {\r\n        return -1 < this.selectedMemberIds.indexOf(member.id);\r\n    };\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { BaseEntityResolver } from '@vendure/admin-ui/core';\r\nimport { Administrator, Role } from '@vendure/admin-ui/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class AdministratorResolver extends BaseEntityResolver<Administrator.Fragment> {\r\n    constructor(router: Router, dataService: DataService) {\r\n        super(\r\n            router,\r\n            {\r\n                __typename: 'Administrator' as 'Administrator',\r\n                id: '',\r\n                createdAt: '',\r\n                updatedAt: '',\r\n                emailAddress: '',\r\n                firstName: '',\r\n                lastName: '',\r\n                user: { roles: [] } as any,\r\n            },\r\n            id => dataService.administrator.getAdministrator(id).mapStream(data => data.administrator),\r\n        );\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { BaseEntityResolver } from '@vendure/admin-ui/core';\r\nimport { Channel, CurrencyCode } from '@vendure/admin-ui/core';\r\nimport { getDefaultUiLanguage } from '@vendure/admin-ui/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\n\r\n/**\r\n * Resolves the id from the path into a Customer entity.\r\n */\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class ChannelResolver extends BaseEntityResolver<Channel.Fragment> {\r\n    constructor(router: Router, dataService: DataService) {\r\n        super(\r\n            router,\r\n            {\r\n                __typename: 'Channel',\r\n                id: '',\r\n                createdAt: '',\r\n                updatedAt: '',\r\n                code: '',\r\n                token: '',\r\n                pricesIncludeTax: false,\r\n                currencyCode: CurrencyCode.USD,\r\n                defaultLanguageCode: getDefaultUiLanguage(),\r\n                defaultShippingZone: {} as any,\r\n                defaultTaxZone: {} as any,\r\n            },\r\n            (id) => dataService.settings.getChannel(id).mapStream((data) => data.channel),\r\n        );\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { BaseEntityResolver } from '@vendure/admin-ui/core';\r\nimport { Country } from '@vendure/admin-ui/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\n\r\n/**\r\n * Resolves the id from the path into a Customer entity.\r\n */\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class CountryResolver extends BaseEntityResolver<Country.Fragment> {\r\n    constructor(router: Router, dataService: DataService) {\r\n        super(\r\n            router,\r\n            {\r\n                __typename: 'Country',\r\n                id: '',\r\n                createdAt: '',\r\n                updatedAt: '',\r\n                code: '',\r\n                name: '',\r\n                enabled: false,\r\n                translations: [],\r\n            },\r\n            id => dataService.settings.getCountry(id).mapStream(data => data.country),\r\n        );\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { BaseEntityResolver } from '@vendure/admin-ui/core';\r\nimport { GetGlobalSettings } from '@vendure/admin-ui/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\n\r\n/**\r\n * Resolves the global settings.\r\n */\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class GlobalSettingsResolver extends BaseEntityResolver<GetGlobalSettings.GlobalSettings> {\r\n    constructor(router: Router, dataService: DataService) {\r\n        super(\r\n            router,\r\n            // we will never be creating a new GlobalSettings entity, so this part is not used.\r\n            {} as any,\r\n            () => dataService.settings.getGlobalSettings().mapStream(data => data.globalSettings),\r\n        );\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { BaseEntityResolver } from '@vendure/admin-ui/core';\r\nimport { PaymentMethod } from '@vendure/admin-ui/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\n\r\n/**\r\n * Resolves the id from the path into a Customer entity.\r\n */\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class PaymentMethodResolver extends BaseEntityResolver<PaymentMethod.Fragment> {\r\n    constructor(router: Router, dataService: DataService) {\r\n        super(\r\n            router,\r\n            {\r\n                __typename: 'PaymentMethod',\r\n                id: '',\r\n                createdAt: '',\r\n                updatedAt: '',\r\n                name: '',\r\n                code: '',\r\n                description: '',\r\n                enabled: true,\r\n                checker: undefined as any,\r\n                handler: undefined as any,\r\n            },\r\n            id => dataService.settings.getPaymentMethod(id).mapStream(data => data.paymentMethod),\r\n        );\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { BaseEntityResolver } from '@vendure/admin-ui/core';\r\nimport { Administrator, Role } from '@vendure/admin-ui/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class ProfileResolver extends BaseEntityResolver<Administrator.Fragment> {\r\n    constructor(router: Router, dataService: DataService) {\r\n        super(\r\n            router,\r\n            {\r\n                __typename: 'Administrator' as 'Administrator',\r\n                id: '',\r\n                createdAt: '',\r\n                updatedAt: '',\r\n                emailAddress: '',\r\n                firstName: '',\r\n                lastName: '',\r\n                user: { roles: [] } as any,\r\n            },\r\n            id =>\r\n                dataService.administrator\r\n                    .getActiveAdministrator()\r\n                    .mapStream(data => data.activeAdministrator),\r\n        );\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { BaseEntityResolver } from '@vendure/admin-ui/core';\r\nimport { Role } from '@vendure/admin-ui/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class RoleResolver extends BaseEntityResolver<Role.Fragment> {\r\n    constructor(router: Router, dataService: DataService) {\r\n        super(\r\n            router,\r\n            {\r\n                __typename: 'Role' as 'Role',\r\n                id: '',\r\n                createdAt: '',\r\n                updatedAt: '',\r\n                code: '',\r\n                description: '',\r\n                permissions: [],\r\n                channels: [],\r\n            },\r\n            id => dataService.administrator.getRole(id).mapStream(data => data.role),\r\n        );\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BaseEntityResolver } from '@vendure/admin-ui/core';\nimport { ShippingMethod } from '@vendure/admin-ui/core';\nimport { DataService } from '@vendure/admin-ui/core';\n\n/**\n * Resolves the id from the path into a Customer entity.\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class ShippingMethodResolver extends BaseEntityResolver<ShippingMethod.Fragment> {\n    constructor(router: Router, dataService: DataService) {\n        super(\n            router,\n            {\n                __typename: 'ShippingMethod',\n                createdAt: '',\n                updatedAt: '',\n                id: '',\n                code: '',\n                name: '',\n                description: '',\n                fulfillmentHandlerCode: undefined as any,\n                checker: undefined as any,\n                calculator: undefined as any,\n                translations: [],\n            },\n            id => dataService.shippingMethod.getShippingMethod(id).mapStream(data => data.shippingMethod),\n        );\n    }\n}\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { BaseEntityResolver, DataService, TaxCategory } from '@vendure/admin-ui/core';\r\n\r\n/**\r\n * Resolves the id from the path into a Customer entity.\r\n */\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class TaxCategoryResolver extends BaseEntityResolver<TaxCategory.Fragment> {\r\n    constructor(router: Router, dataService: DataService) {\r\n        super(\r\n            router,\r\n            {\r\n                __typename: 'TaxCategory',\r\n                id: '',\r\n                createdAt: '',\r\n                updatedAt: '',\r\n                name: '',\r\n                isDefault: false,\r\n            },\r\n            id => dataService.settings.getTaxCategory(id).mapStream(data => data.taxCategory),\r\n        );\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { BaseEntityResolver, DataService, TaxRate } from '@vendure/admin-ui/core';\r\n\r\n/**\r\n * Resolves the id from the path into a Customer entity.\r\n */\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class TaxRateResolver extends BaseEntityResolver<TaxRate.Fragment> {\r\n    constructor(router: Router, dataService: DataService) {\r\n        super(\r\n            router,\r\n            {\r\n                __typename: 'TaxRate',\r\n                id: '',\r\n                createdAt: '',\r\n                updatedAt: '',\r\n                name: '',\r\n                value: 0,\r\n                enabled: true,\r\n                category: {} as any,\r\n                zone: {} as any,\r\n                customerGroup: null,\r\n            },\r\n            id => dataService.settings.getTaxRate(id).mapStream(data => data.taxRate),\r\n        );\r\n    }\r\n}\r\n","import { Route } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    Administrator,\r\n    CanDeactivateDetailGuard,\r\n    Channel,\r\n    Country,\r\n    createResolveData,\r\n    detailBreadcrumb,\r\n    Role,\r\n    ShippingMethod,\r\n    TaxCategory,\r\n    TaxRate,\r\n} from '@vendure/admin-ui/core';\r\n\r\nimport { AdminDetailComponent } from './components/admin-detail/admin-detail.component';\r\nimport { AdministratorListComponent } from './components/administrator-list/administrator-list.component';\r\nimport { ChannelDetailComponent } from './components/channel-detail/channel-detail.component';\r\nimport { ChannelListComponent } from './components/channel-list/channel-list.component';\r\nimport { CountryDetailComponent } from './components/country-detail/country-detail.component';\r\nimport { CountryListComponent } from './components/country-list/country-list.component';\r\nimport { GlobalSettingsComponent } from './components/global-settings/global-settings.component';\r\nimport { PaymentMethodDetailComponent } from './components/payment-method-detail/payment-method-detail.component';\r\nimport { PaymentMethodListComponent } from './components/payment-method-list/payment-method-list.component';\r\nimport { ProfileComponent } from './components/profile/profile.component';\r\nimport { RoleDetailComponent } from './components/role-detail/role-detail.component';\r\nimport { RoleListComponent } from './components/role-list/role-list.component';\r\nimport { ShippingMethodDetailComponent } from './components/shipping-method-detail/shipping-method-detail.component';\r\nimport { ShippingMethodListComponent } from './components/shipping-method-list/shipping-method-list.component';\r\nimport { TaxCategoryDetailComponent } from './components/tax-category-detail/tax-category-detail.component';\r\nimport { TaxCategoryListComponent } from './components/tax-category-list/tax-category-list.component';\r\nimport { TaxRateDetailComponent } from './components/tax-rate-detail/tax-rate-detail.component';\r\nimport { TaxRateListComponent } from './components/tax-rate-list/tax-rate-list.component';\r\nimport { ZoneListComponent } from './components/zone-list/zone-list.component';\r\nimport { AdministratorResolver } from './providers/routing/administrator-resolver';\r\nimport { ChannelResolver } from './providers/routing/channel-resolver';\r\nimport { CountryResolver } from './providers/routing/country-resolver';\r\nimport { GlobalSettingsResolver } from './providers/routing/global-settings-resolver';\r\nimport { PaymentMethodResolver } from './providers/routing/payment-method-resolver';\r\nimport { ProfileResolver } from './providers/routing/profile-resolver';\r\nimport { RoleResolver } from './providers/routing/role-resolver';\r\nimport { ShippingMethodResolver } from './providers/routing/shipping-method-resolver';\r\nimport { TaxCategoryResolver } from './providers/routing/tax-category-resolver';\r\nimport { TaxRateResolver } from './providers/routing/tax-rate-resolver';\r\n\r\nexport const settingsRoutes: Route[] = [\r\n    {\r\n        path: 'profile',\r\n        component: ProfileComponent,\r\n        resolve: createResolveData(ProfileResolver),\r\n        canDeactivate: [CanDeactivateDetailGuard],\r\n        data: {\r\n            breadcrumb: _('breadcrumb.profile'),\r\n        },\r\n    },\r\n    {\r\n        path: 'administrators',\r\n        component: AdministratorListComponent,\r\n        data: {\r\n            breadcrumb: _('breadcrumb.administrators'),\r\n        },\r\n    },\r\n    {\r\n        path: 'administrators/:id',\r\n        component: AdminDetailComponent,\r\n        resolve: createResolveData(AdministratorResolver),\r\n        canDeactivate: [CanDeactivateDetailGuard],\r\n        data: { breadcrumb: administratorBreadcrumb },\r\n    },\r\n    {\r\n        path: 'channels',\r\n        component: ChannelListComponent,\r\n        data: {\r\n            breadcrumb: _('breadcrumb.channels'),\r\n        },\r\n    },\r\n    {\r\n        path: 'channels/:id',\r\n        component: ChannelDetailComponent,\r\n        resolve: createResolveData(ChannelResolver),\r\n        canDeactivate: [CanDeactivateDetailGuard],\r\n        data: { breadcrumb: channelBreadcrumb },\r\n    },\r\n    {\r\n        path: 'roles',\r\n        component: RoleListComponent,\r\n        data: {\r\n            breadcrumb: _('breadcrumb.roles'),\r\n        },\r\n    },\r\n    {\r\n        path: 'roles/:id',\r\n        component: RoleDetailComponent,\r\n        resolve: createResolveData(RoleResolver),\r\n        canDeactivate: [CanDeactivateDetailGuard],\r\n        data: { breadcrumb: roleBreadcrumb },\r\n    },\r\n    {\r\n        path: 'tax-categories',\r\n        component: TaxCategoryListComponent,\r\n        data: {\r\n            breadcrumb: _('breadcrumb.tax-categories'),\r\n        },\r\n    },\r\n    {\r\n        path: 'tax-categories/:id',\r\n        component: TaxCategoryDetailComponent,\r\n        resolve: createResolveData(TaxCategoryResolver),\r\n        canDeactivate: [CanDeactivateDetailGuard],\r\n        data: {\r\n            breadcrumb: taxCategoryBreadcrumb,\r\n        },\r\n    },\r\n    {\r\n        path: 'tax-rates',\r\n        component: TaxRateListComponent,\r\n        data: {\r\n            breadcrumb: _('breadcrumb.tax-rates'),\r\n        },\r\n    },\r\n    {\r\n        path: 'tax-rates/:id',\r\n        component: TaxRateDetailComponent,\r\n        resolve: createResolveData(TaxRateResolver),\r\n        canDeactivate: [CanDeactivateDetailGuard],\r\n        data: {\r\n            breadcrumb: taxRateBreadcrumb,\r\n        },\r\n    },\r\n    {\r\n        path: 'countries',\r\n        component: CountryListComponent,\r\n        data: {\r\n            breadcrumb: _('breadcrumb.countries'),\r\n        },\r\n    },\r\n    {\r\n        path: 'countries/:id',\r\n        component: CountryDetailComponent,\r\n        resolve: createResolveData(CountryResolver),\r\n        canDeactivate: [CanDeactivateDetailGuard],\r\n        data: {\r\n            breadcrumb: countryBreadcrumb,\r\n        },\r\n    },\r\n    {\r\n        path: 'zones',\r\n        component: ZoneListComponent,\r\n        data: {\r\n            breadcrumb: _('breadcrumb.zones'),\r\n        },\r\n    },\r\n    {\r\n        path: 'shipping-methods',\r\n        component: ShippingMethodListComponent,\r\n        data: {\r\n            breadcrumb: _('breadcrumb.shipping-methods'),\r\n        },\r\n    },\r\n    {\r\n        path: 'shipping-methods/:id',\r\n        component: ShippingMethodDetailComponent,\r\n        resolve: createResolveData(ShippingMethodResolver),\r\n        canDeactivate: [CanDeactivateDetailGuard],\r\n        data: {\r\n            breadcrumb: shippingMethodBreadcrumb,\r\n        },\r\n    },\r\n    {\r\n        path: 'payment-methods',\r\n        component: PaymentMethodListComponent,\r\n        data: {\r\n            breadcrumb: _('breadcrumb.payment-methods'),\r\n        },\r\n    },\r\n    {\r\n        path: 'payment-methods/:id',\r\n        component: PaymentMethodDetailComponent,\r\n        resolve: createResolveData(PaymentMethodResolver),\r\n        canDeactivate: [CanDeactivateDetailGuard],\r\n        data: {\r\n            breadcrumb: paymentMethodBreadcrumb,\r\n        },\r\n    },\r\n    {\r\n        path: 'global-settings',\r\n        component: GlobalSettingsComponent,\r\n        resolve: createResolveData(GlobalSettingsResolver),\r\n        canDeactivate: [CanDeactivateDetailGuard],\r\n        data: {\r\n            breadcrumb: _('breadcrumb.global-settings'),\r\n        },\r\n    },\r\n];\r\n\r\nexport function administratorBreadcrumb(data: any, params: any) {\r\n    return detailBreadcrumb<Administrator>({\r\n        entity: data.entity,\r\n        id: params.id,\r\n        breadcrumbKey: 'breadcrumb.administrators',\r\n        getName: admin => `${admin.firstName} ${admin.lastName}`,\r\n        route: 'administrators',\r\n    });\r\n}\r\n\r\nexport function channelBreadcrumb(data: any, params: any) {\r\n    return detailBreadcrumb<Channel>({\r\n        entity: data.entity,\r\n        id: params.id,\r\n        breadcrumbKey: 'breadcrumb.channels',\r\n        getName: channel => channel.code,\r\n        route: 'channels',\r\n    });\r\n}\r\n\r\nexport function roleBreadcrumb(data: any, params: any) {\r\n    return detailBreadcrumb<Role>({\r\n        entity: data.entity,\r\n        id: params.id,\r\n        breadcrumbKey: 'breadcrumb.roles',\r\n        getName: role => role.description,\r\n        route: 'roles',\r\n    });\r\n}\r\n\r\nexport function taxCategoryBreadcrumb(data: any, params: any) {\r\n    return detailBreadcrumb<TaxCategory.Fragment>({\r\n        entity: data.entity,\r\n        id: params.id,\r\n        breadcrumbKey: 'breadcrumb.tax-categories',\r\n        getName: category => category.name,\r\n        route: 'tax-categories',\r\n    });\r\n}\r\n\r\nexport function taxRateBreadcrumb(data: any, params: any) {\r\n    return detailBreadcrumb<TaxRate.Fragment>({\r\n        entity: data.entity,\r\n        id: params.id,\r\n        breadcrumbKey: 'breadcrumb.tax-rates',\r\n        getName: category => category.name,\r\n        route: 'tax-rates',\r\n    });\r\n}\r\n\r\nexport function countryBreadcrumb(data: any, params: any) {\r\n    return detailBreadcrumb<Country.Fragment>({\r\n        entity: data.entity,\r\n        id: params.id,\r\n        breadcrumbKey: 'breadcrumb.countries',\r\n        getName: promotion => promotion.name,\r\n        route: 'countries',\r\n    });\r\n}\r\n\r\nexport function shippingMethodBreadcrumb(data: any, params: any) {\r\n    return detailBreadcrumb<ShippingMethod.Fragment>({\r\n        entity: data.entity,\r\n        id: params.id,\r\n        breadcrumbKey: 'breadcrumb.shipping-methods',\r\n        getName: method => method.name,\r\n        route: 'shipping-methods',\r\n    });\r\n}\r\n\r\nexport function paymentMethodBreadcrumb(data: any, params: any) {\r\n    return detailBreadcrumb<ShippingMethod.Fragment>({\r\n        entity: data.entity,\r\n        id: params.id,\r\n        breadcrumbKey: 'breadcrumb.payment-methods',\r\n        getName: method => method.code,\r\n        route: 'payment-methods',\r\n    });\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { SharedModule } from '@vendure/admin-ui/core';\r\n\r\nimport { AddCountryToZoneDialogComponent } from './components/add-country-to-zone-dialog/add-country-to-zone-dialog.component';\r\nimport { AdminDetailComponent } from './components/admin-detail/admin-detail.component';\r\nimport { AdministratorListComponent } from './components/administrator-list/administrator-list.component';\r\nimport { ChannelDetailComponent } from './components/channel-detail/channel-detail.component';\r\nimport { ChannelListComponent } from './components/channel-list/channel-list.component';\r\nimport { CountryDetailComponent } from './components/country-detail/country-detail.component';\r\nimport { CountryListComponent } from './components/country-list/country-list.component';\r\nimport { GlobalSettingsComponent } from './components/global-settings/global-settings.component';\r\nimport { PaymentMethodDetailComponent } from './components/payment-method-detail/payment-method-detail.component';\r\nimport { PaymentMethodListComponent } from './components/payment-method-list/payment-method-list.component';\r\nimport { PermissionGridComponent } from './components/permission-grid/permission-grid.component';\r\nimport { ProfileComponent } from './components/profile/profile.component';\r\nimport { RoleDetailComponent } from './components/role-detail/role-detail.component';\r\nimport { RoleListComponent } from './components/role-list/role-list.component';\r\nimport { ShippingEligibilityTestResultComponent } from './components/shipping-eligibility-test-result/shipping-eligibility-test-result.component';\r\nimport { ShippingMethodDetailComponent } from './components/shipping-method-detail/shipping-method-detail.component';\r\nimport { ShippingMethodListComponent } from './components/shipping-method-list/shipping-method-list.component';\r\nimport { ShippingMethodTestResultComponent } from './components/shipping-method-test-result/shipping-method-test-result.component';\r\nimport { TaxCategoryDetailComponent } from './components/tax-category-detail/tax-category-detail.component';\r\nimport { TaxCategoryListComponent } from './components/tax-category-list/tax-category-list.component';\r\nimport { TaxRateDetailComponent } from './components/tax-rate-detail/tax-rate-detail.component';\r\nimport { TaxRateListComponent } from './components/tax-rate-list/tax-rate-list.component';\r\nimport { TestAddressFormComponent } from './components/test-address-form/test-address-form.component';\r\nimport { TestOrderBuilderComponent } from './components/test-order-builder/test-order-builder.component';\r\nimport { ZoneDetailDialogComponent } from './components/zone-detail-dialog/zone-detail-dialog.component';\r\nimport { ZoneListComponent } from './components/zone-list/zone-list.component';\r\nimport { ZoneMemberControlsDirective } from './components/zone-member-list/zone-member-controls.directive';\r\nimport { ZoneMemberListHeaderDirective } from './components/zone-member-list/zone-member-list-header.directive';\r\nimport { ZoneMemberListComponent } from './components/zone-member-list/zone-member-list.component';\r\nimport { settingsRoutes } from './settings.routes';\r\n\r\n@NgModule({\r\n    imports: [SharedModule, RouterModule.forChild(settingsRoutes)],\r\n    declarations: [\r\n        TaxCategoryListComponent,\r\n        TaxCategoryDetailComponent,\r\n        AdministratorListComponent,\r\n        RoleListComponent,\r\n        RoleDetailComponent,\r\n        AdminDetailComponent,\r\n        PermissionGridComponent,\r\n        CountryListComponent,\r\n        CountryDetailComponent,\r\n        TaxRateListComponent,\r\n        TaxRateDetailComponent,\r\n        ChannelListComponent,\r\n        ChannelDetailComponent,\r\n        ShippingMethodListComponent,\r\n        ShippingMethodDetailComponent,\r\n        PaymentMethodListComponent,\r\n        PaymentMethodDetailComponent,\r\n        GlobalSettingsComponent,\r\n        TestOrderBuilderComponent,\r\n        TestAddressFormComponent,\r\n        ShippingMethodTestResultComponent,\r\n        ShippingEligibilityTestResultComponent,\r\n        ZoneListComponent,\r\n        AddCountryToZoneDialogComponent,\r\n        ZoneMemberListComponent,\r\n        ZoneMemberListHeaderDirective,\r\n        ZoneMemberControlsDirective,\r\n        ZoneDetailDialogComponent,\r\n        ProfileComponent,\r\n    ],\r\n})\r\nexport class SettingsModule {}\r\n"]}