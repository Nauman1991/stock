{"version":3,"sources":["../../node_modules/tslib/tslib.es6.js","../../src/lib/catalog/src/components/asset-detail/asset-detail.component.ts","../../src/lib/catalog/src/components/asset-list/asset-list.component.ts","../../src/lib/catalog/src/components/collection-detail/collection-detail.component.ts","../../src/lib/catalog/src/components/collection-list/collection-list.component.ts","../../src/lib/catalog/src/components/facet-detail/facet-detail.component.ts","../../src/lib/catalog/src/components/facet-list/facet-list.component.ts","../../src/lib/catalog/src/providers/product-detail/replace-last.ts","../../src/lib/catalog/src/providers/product-detail/product-detail.service.ts","../../src/lib/catalog/src/components/apply-facet-dialog/apply-facet-dialog.component.ts","../../src/lib/catalog/src/components/assign-products-to-channel-dialog/assign-products-to-channel-dialog.component.ts","../../src/lib/catalog/src/components/product-detail/product-detail.component.ts","../../src/lib/catalog/src/components/product-list/product-list.component.ts","../../src/lib/catalog/src/components/confirm-variant-deletion-dialog/confirm-variant-deletion-dialog.component.ts","../../src/lib/catalog/src/components/product-variants-editor/product-variants-editor.component.ts","../../src/lib/catalog/src/providers/routing/asset-resolver.ts","../../src/lib/catalog/src/providers/routing/collection-resolver.ts","../../src/lib/catalog/src/providers/routing/facet-resolver.ts","../../src/lib/catalog/src/providers/routing/product-resolver.ts","../../src/lib/catalog/src/providers/routing/product-variants-resolver.ts","../../src/lib/catalog/src/catalog.routes.ts","../../src/lib/catalog/src/components/collection-contents/collection-contents.component.ts","../../src/lib/catalog/src/components/collection-tree/array-to-tree.ts","../../src/lib/catalog/src/components/collection-tree/collection-tree.component.ts","../../src/lib/catalog/src/components/collection-tree/collection-tree-node.component.ts","../../src/lib/catalog/src/components/generate-product-variants/generate-product-variants.component.ts","../../src/lib/catalog/src/components/option-value-input/option-value-input.component.ts","../../src/lib/catalog/src/components/product-assets/product-assets.component.ts","../../src/lib/catalog/src/components/product-search-input/product-search-input.component.ts","../../src/lib/catalog/src/components/update-product-option-dialog/update-product-option-dialog.component.ts","../../src/lib/catalog/src/components/product-variants-list/product-variants-list.component.ts","../../src/lib/catalog/src/components/product-variants-table/product-variants-table.component.ts","../../src/lib/catalog/src/components/variant-price-detail/variant-price-detail.component.ts","../../src/lib/catalog/src/catalog.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","__extends","TypeError","String","__","this","constructor","create","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","__generator","body","f","y","t","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","n","v","op","pop","length","push","__values","o","s","m","i","__read","r","ar","error","__spread","arguments","concat","AssetDetailComponent","router","route","serverConfigService","notificationService","dataService","formBuilder","_this","_super","detailForm","FormGroup","customFields","getCustomFieldConfig","ngOnInit","name","FormControl","tags","group","reduce","hash","field","assign","_c","init","ngOnDestroy","destroy","onAssetChange","event","_a","get","setValue","_b","markAsDirty","save","product","updateAsset","id","subscribe","success","entity","err","setFormValues","languageCode","customFieldsGroup","_d","_e","key","control","patchValue","BaseDetailComponent","Component","args","selector","template","changeDetection","ChangeDetectionStrategy","OnPush","Router","ActivatedRoute","ServerConfigService","NotificationService","DataService","FormBuilder","AssetListComponent","modalService","searchTerm$","BehaviorSubject","undefined","filterByTags$","uploading","setQueryFn","_i","getAssetList","data","assets","skip","take","searchTerm","map","options","filter","contains","sort","createdAt","SortOrder","DESC","tagsOperator","LogicalOperator","AND","paginationConfig$","combineLatest","itemsPerPage$","currentPage$","totalItems$","pipe","itemsPerPage","currentPage","totalItems","debounceTime","takeUntil","destroy$","refresh","allTags$","getTagList","mapStream","items","filesSelected","files","createAssets","finalize","successCount","createAssets_1","createAssets_1_1","__typename","message","count","deleteAssets","showModalAndDelete","a","switchMap","response","DeletionResult","DELETED","assetIds","dialog","title","translationVars","buttons","type","returnValue","res","EMPTY","BaseListComponent","ModalService","CollectionDetailComponent","changeDetector","assetChanges","filters","allFilters","updatePermission","Permission","UpdateCatalog","UpdateCollection","Validators","required","slug","description","visible","array","collection","getCollectionFilters","single$","collectionFilters","getFilterDefinition","find","code","customFieldIsSet","assetsChanged","values","updateSlug","nameValue","entity$","languageCode$","slugControl","currentTranslation","findTranslation","currentSlugIsEmpty","pristine","normalizeString","addFilter","collectionFilter","filtersArray","findIndex","argsHash","output","arg","getConfigArgValue","removeFilter","index","removeAt","splice","dirty","mergeMap","category","input","getUpdatedCollection","parentId","snapshot","paramMap","createCollection","markAsPristine","markForCheck","navigate","relativeTo","updateCollection","contentsComponent","canDeactivate","featuredAsset","isPrivate","forEach","fieldDef","form","updatedCategory","createUpdatedTranslatable","translatable","updatedFields","customFieldConfig","defaultTranslation","featuredAssetId","mapOperationsToInputs","operations","formValueOperations","j","encodeConfigArgValue","ChangeDetectorRef","ViewChild","CollectionListComponent","expandAll","queryResult","getCollections","refetchOnChannelChange","items$","collections","shareReplay","activeCollectionId$","pm","distinctUntilChanged","activeCollectionTitle$","match","c","availableLanguages$","getAvailableLanguages","contentLanguage$","client","uiState","contentLanguage","tap","completed$","onRearrange","moveCollection","deleteCollection","parent","hasChildren","closeContents","params","contents","queryParamsHandling","setLanguage","setContentLanguage","ref","refetch","FacetDetailComponent","UpdateFacet","customValueFields","facet","updateCode","currentCode","codeControl","updateValueCode","customValueFieldIsSet","getValuesFormArray","addFacetValue","valuesFormArray","insert","facetForm","newFacet","getUpdatedFacet","createFacet","getAllFacets","mapTo","facetGroup","updateOperations","updateFacet","valuesArray","newValues","controls","facetId","translations","createFacetValues","getFacet","updatedValues","getUpdatedFacetValues","updateFacetValues","forkJoin","deleteFacetValue","facetValueId","deleted","deleteFacetValues","currentValuesFormArray","valueTranslation","valueControl","at","customValueFieldsGroup","addControl","fieldValue","facetFormGroup","dirtyValues","formRow","toString","dirtyValueValues","Error","notNullOrUndefined","FacetListComponent","initialLimit","displayLimit","getFacets","facets","toggleDisplayLimit","deleteFacet","replaceLast","target","search","replace","lastIndex","lastIndexOf","substr","ProductDetailService","mapSingle","getTaxCategories","settings","taxCategories","createProductWithVariants","createVariantsConfig","createProduct$","createProduct","nonEmptyOptionGroups","groups","createOptionGroups$","createProductOptionGroups","_f","optionGroups","optionGroup","addOptionGroupToProduct","productId","optionGroupId","of","variants","optionIds","optionValues","optionName","option","og","flat","createProductVariants","createProductOptionGroup","variantData","join","price","sku","stockOnHand","stock","updateProduct","updateOptions","autoUpdate","productInput","updateVariantsInput","variantsInput","productOldName","productNewName","variant","currentVariantName","variantInput","existingVariantInput","variantTranslation","_g","updateProductVariants","updateProductOption","updateProductVariantNames$","oldOptionName","newOptionName","variantsToUpdate","includes","variantName","deleteProductVariant","getProduct","throwError","Injectable","providedIn","ApplyFacetDialogComponent","selectedValues","ngAfterViewInit","setTimeout","focus","selectValues","resolveWith","cancel","FacetValueSelectorComponent","AssignProductsToChannelDialogComponent","priceFactorControl","selectedChannelIdControl","defineProperty","productVariantIds","activeChannelId$","userStatus","activeChannelId","allChannels$","getChannels","channels","currentChannel","availableChannels","valueChanges","ids","selectChannel","variantsPreview$","from","getTopVariants","startWith","factor","pricePreview","channelIds","selectedChannel","isProductVariantMode","assignVariantsToChannel","channelId","priceFactor","channel","assignProductsToChannel","productIds","toPromise","productVariants","slice","ProductDetailComponent","productDetailService","location","filterInput","variantAssetChanges","selectedVariantIds","variantDisplayMode","customVariantFields","customOptionGroupFields","customOptionFields","enabled","autoUpdateVariantNames","facetValueIds","product$","variants$","filterTerm$","term","lcTerm","toLocaleLowerCase","taxCategories$","activeTab$","qpm","facets$","productFacetValues$","facetValues","allFacetValues$","flattenFacetValues","formFacetValueIdChanges$","getProductFormGroup","val","formChangeFacetValues$","combined","fv","facetValues$","merge","productChannels$","channelPriceIncludesTax$","getActiveChannel","activeChannel","pricesIncludeTax","navigateToTab","tabName","replaceState","createUrlTree","tab","isDefaultChannel","channelCode","DEFAULT_CHANNEL_CODE","assignToChannel","fromComponent","size","locals","currentChannelIds","removeFromChannel","removeProductsFromChannel","assignVariantToChannel","removeVariantFromChannel","removeVariantsFromChannel","variantAssetsChanged","keys","variantAssetChange","variantId","selectProductFacetValue","displayFacetValueModal","productGroup","currentFacetValueIds","unique","removeProductFacetValue","selectVariantFacetValue","withLatestFrom","existingFacetValueIds","variantFormGroup","selectedVariantIds_1","selectedVariantIds_1_1","variantsToCreateAreValid","every","closable","newProduct","getUpdatedProduct","console","priceIncludesTax","variantsArray","getUpdatedProductVariants","updateSlugAfterSave","cfCurrentTranslation","cfProduct","variantsFormArray","priceWithTax","taxCategoryId","taxCategory","useGlobalOutOfStockThreshold","outOfStockThreshold","trackInventory","productFormGroup","updatedProduct","dirtyVariants","dirtyVariantValues","formValue","results","firstResult","emitEvent","Location","ProductListComponent","jobQueueService","groupByProduct","searchProducts","facetValueOperator","result$","queryParamMap","productSearchInput","setSearchTerm","fvids$","getAll","setFacetValues","delay","setQueryParam","q","page","setFacetValueIds","fvids","rebuildSearchIndex","reindex","info","addJob","job","state","JobState","COMPLETED","time","Intl","NumberFormat","format","duration","indexedItemCount","deleteProduct","JobQueueService","static","ConfirmVariantDeletionDialogComponent","confirm","config","_h","_j","ProductVariantsEditorComponent","formValueChanged","generatedVariants","initOptionsAndVariants","getDefaultUiLanguage","currencyCode","onFormChanged","variantInfo","getVariantsToAdd","existing","getVariantName","addOption","isNew","generateVariants","previousVariants","generatedVariantFactory","isDefault","existingVariant","prototypeVariant","getVariantPrototype","GeneratedVariant","productVariantId","generateAllCombinations","optionsAreEqual","optionsAreSubset","pick","deleteVariant","reFetchProduct","newOptionGroups","checkUniqueSkus","confirmDeletionOfObsoleteVariants","createdOptionGroups","addOptionGroupsToProduct","addNewOptionsToGroups","groupsIds","fetchOptionGroups","createNewProductVariants","deleteObsoleteVariants","withDuplicateSkus","gv","trim","obsoleteVariants","getObsoleteVariants","hasOnlyDefaultVariant","newOptions","createdGroup","cog","productOptionGroupId","locked","allGroupIds","addOptionToGroup","getProductOptionGroup","productOptionGroup","deleteOperations","getProductVariantsOptions","toOptionString","x","Default","AssetResolver","updatedAt","AssetType","IMAGE","fileSize","mimeType","width","height","source","preview","focalPoint","getAsset","asset","BaseEntityResolver","CollectionResolver","children","getCollection","FacetResolver","ProductResolver","ProductVariantsResolver","breadcrumb","ɵ1","productBreadcrumb","ɵ2","productVariantEditorBreadcrumb","ɵ3","ɵ4","facetBreadcrumb","ɵ5","ɵ6","collectionBreadcrumb","ɵ7","ɵ8","assetBreadcrumb","catalogRoutes","path","component","ɵ0$1","createResolveData","CanDeactivateDetailGuard","detailBreadcrumb","breadcrumbKey","getName","link","CollectionContentsComponent","filterTermControl","collectionIdChange$","refresh$","Subject","contentsCurrentPage$","contentsItemsPerPage$","perPage","setContentsPageNumber","collection$","filterTerm","getCollectionContents","contents$","contentsTotalItems$","ngOnChanges","changes","collectionId","currentValue","complete","setParam","setContentsItemsPerPage","arrayToTree","nodes","currentState","topLevelNodes","mappedArr","currentStateMap","tree","nodeMap","Map","visit","node","set","treeToMap","nodes_1","nodes_1_1","mappedElem","expanded","Input","ContentChild","TemplateRef","CollectionTreeComponent","rearrange","EventEmitter","collectionTree","onDrop","item","newParentId","container","emit","currentIndex","onMove","onDelete","isRootNode","Output","CollectionTreeNodeComponent","root","depth","parentName","permissions$","permissions","hasUpdatePermission$","perms","hasDeletePermission$","DeleteCatalog","DeleteCollection","expandAllChange","previousValue","trackByFn","getMoveListItems","parentPath","path_1","child","move","moveUp","moveDown","drop","moveItemInArray","previousIndex","delete","decorators","SkipSelf","Optional","DEFAULT_VARIANT_CODE","GenerateProductVariantsComponent","variantsChange","variantFormValues","removeOption","sum","copyFromDefault","onFormChange","handleEnter","optionValueInputComponent","preventDefault","stopPropagation","variantsToCreate","prop","OPTION_VALUE_INPUT_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","OptionValueInputComponent","multi","groupName","disabled","isFocussed","lastSelected","registerOnChange","fn","onChangeFn","registerOnTouched","onTouchFn","setDisabledState","isDisabled","writeValue","obj","textArea","nativeElement","handleKey","addOptionValue","removeLastOption","handleBlur","parseInputIntoOptions","split","providers","ProductAssetsComponent","viewportRuler","collectionDetailComponent","compact","change","updateCollectionPermissions","updateProductPermissions","UpdateProduct","selectAssets","AssetPickerDialogComponent","emitChangeEvent","setAsFeatured","isFeatured","previewAsset","AssetPreviewDialogComponent","removeAsset","dropListDropped","previousContainer","ViewportRuler","HostBinding","SingleSearchSelectionModelFactory","ProductSearchInputComponent","searchTermChange","facetValueChange","lastTerm","lastFacetValueIds","filterFacetResults","isFacetValueItem","facetValue","toLowerCase","startsWith","selectComponent","select","currentTerm","selectedItems","unselect","onSelectChange","isArray","searchTermItem","addTagFn","isSearchHeaderSelected","itemsList","markedIndex","SELECTION_MODEL_FACTORY","useValue","ɵ0","UpdateProductOptionDialogComponent","updateVariantName","codeInputTouched","productOption","activeLanguage","customFieldsForm","update","ProductVariantsListComponent","assetChange","selectionChange","selectFacetValueClick","pagination","formGroupMap","GlobalFlag","getGlobalSettings","globalSettings","globalTrackInventory","globalOutOfStockThreshold","subscription","formArray","add","buildFormGroupMap","unsubscribe","trackById","inventoryIsNotTracked","formGroup","FALSE","INHERIT","getTaxCategoryName","getSaleableStockLevel","effectiveOutOfStockThreshold","stockAllocated","areAllSelected","toggleSelectAll","toggleSelectVariant","indexOf","optionGroupName","pendingFacetValues","formFacetValueIds","getFacetValueIds","variantFacetValueIds_1","existingFacetValues","removeFacetValue","newValue","isVariantSelected","editOption","clear","controlGroup","ProductVariantsTableComponent","getFeaturedAsset","pendingAssetChanges","VariantPriceDetailComponent","priceChange$","taxCategoryIdChange$","taxRates$","getTaxRates","taxRates","activeChannel$","taxRate$","defaultTaxZone","applicableRate","taxRate","zone","grossPrice$","Math","round","NgModule","imports","SharedModule","RouterModule","forChild","exports","declarations"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from) {\r\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\r\n        to[j] = from[i];\r\n    return to;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import { ChangeDetectionStrategy, Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    Asset,\r\n    BaseDetailComponent,\r\n    CustomFieldConfig,\r\n    GetAsset,\r\n    LanguageCode,\r\n} from '@vendure/admin-ui/core';\r\nimport { DataService, NotificationService, ServerConfigService } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-asset-detail',\r\n    templateUrl: './asset-detail.component.html',\r\n    styleUrls: ['./asset-detail.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class AssetDetailComponent extends BaseDetailComponent<GetAsset.Asset> implements OnInit, OnDestroy {\r\n    detailForm = new FormGroup({});\r\n    customFields: CustomFieldConfig[];\r\n\r\n    constructor(\r\n        router: Router,\r\n        route: ActivatedRoute,\r\n        serverConfigService: ServerConfigService,\r\n        private notificationService: NotificationService,\r\n        protected dataService: DataService,\r\n        private formBuilder: FormBuilder,\r\n    ) {\r\n        super(route, router, serverConfigService, dataService);\r\n        this.customFields = this.getCustomFieldConfig('Asset');\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.detailForm = new FormGroup({\r\n            name: new FormControl(''),\r\n            tags: new FormControl([]),\r\n            customFields: this.formBuilder.group(\r\n                this.customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\r\n            ),\r\n        });\r\n        this.init();\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.destroy();\r\n    }\r\n\r\n    onAssetChange(event: { id: string; name: string; tags: string[] }) {\r\n        this.detailForm.get('name')?.setValue(event.name);\r\n        this.detailForm.get('tags')?.setValue(event.tags);\r\n        this.detailForm.markAsDirty();\r\n    }\r\n\r\n    save() {\r\n        this.dataService.product\r\n            .updateAsset({\r\n                id: this.id,\r\n                name: this.detailForm.value.name,\r\n                tags: this.detailForm.value.tags,\r\n                customFields: this.detailForm.value.customFields,\r\n            })\r\n            .subscribe(\r\n                () => {\r\n                    this.notificationService.success(_('common.notify-update-success'), { entity: 'Asset' });\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-update-error'), {\r\n                        entity: 'Asset',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    protected setFormValues(entity: GetAsset.Asset, languageCode: LanguageCode): void {\r\n        this.detailForm.get('name')?.setValue(entity.name);\r\n        this.detailForm.get('tags')?.setValue(entity.tags);\r\n        if (this.customFields.length) {\r\n            const customFieldsGroup = this.detailForm.get('customFields') as FormGroup;\r\n\r\n            for (const fieldDef of this.customFields) {\r\n                const key = fieldDef.name;\r\n                const value = (entity as any).customFields[key];\r\n                const control = customFieldsGroup.get(key);\r\n                if (control) {\r\n                    control.patchValue(value);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    Asset,\r\n    BaseListComponent,\r\n    DataService,\r\n    DeletionResult,\r\n    GetAssetList,\r\n    LogicalOperator,\r\n    ModalService,\r\n    NotificationService,\r\n    SortOrder,\r\n    TagFragment,\r\n} from '@vendure/admin-ui/core';\r\nimport { PaginationInstance } from 'ngx-pagination';\r\nimport { BehaviorSubject, combineLatest, EMPTY, Observable } from 'rxjs';\r\nimport { debounceTime, finalize, map, switchMap, takeUntil } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'vdr-asset-list',\r\n    templateUrl: './asset-list.component.html',\r\n    styleUrls: ['./asset-list.component.scss'],\r\n})\r\nexport class AssetListComponent\r\n    extends BaseListComponent<GetAssetList.Query, GetAssetList.Items, GetAssetList.Variables>\r\n    implements OnInit {\r\n    searchTerm$ = new BehaviorSubject<string | undefined>(undefined);\r\n    filterByTags$ = new BehaviorSubject<TagFragment[] | undefined>(undefined);\r\n    uploading = false;\r\n    allTags$: Observable<TagFragment[]>;\r\n    paginationConfig$: Observable<PaginationInstance>;\r\n\r\n    constructor(\r\n        private notificationService: NotificationService,\r\n        private modalService: ModalService,\r\n        private dataService: DataService,\r\n        router: Router,\r\n        route: ActivatedRoute,\r\n    ) {\r\n        super(router, route);\r\n        super.setQueryFn(\r\n            (...args: any[]) => this.dataService.product.getAssetList(...args),\r\n            data => data.assets,\r\n            (skip, take) => {\r\n                const searchTerm = this.searchTerm$.value;\r\n                const tags = this.filterByTags$.value?.map(t => t.value);\r\n                return {\r\n                    options: {\r\n                        skip,\r\n                        take,\r\n                        ...(searchTerm\r\n                            ? {\r\n                                  filter: {\r\n                                      name: { contains: searchTerm },\r\n                                  },\r\n                              }\r\n                            : {}),\r\n                        sort: {\r\n                            createdAt: SortOrder.DESC,\r\n                        },\r\n                        tags,\r\n                        tagsOperator: LogicalOperator.AND,\r\n                    },\r\n                };\r\n            },\r\n            { take: 25, skip: 0 },\r\n        );\r\n    }\r\n\r\n    ngOnInit() {\r\n        super.ngOnInit();\r\n        this.paginationConfig$ = combineLatest(this.itemsPerPage$, this.currentPage$, this.totalItems$).pipe(\r\n            map(([itemsPerPage, currentPage, totalItems]) => ({ itemsPerPage, currentPage, totalItems })),\r\n        );\r\n        this.searchTerm$.pipe(debounceTime(250), takeUntil(this.destroy$)).subscribe(() => this.refresh());\r\n\r\n        this.filterByTags$.pipe(takeUntil(this.destroy$)).subscribe(() => this.refresh());\r\n        this.allTags$ = this.dataService.product.getTagList().mapStream(data => data.tags.items);\r\n    }\r\n\r\n    filesSelected(files: File[]) {\r\n        if (files.length) {\r\n            this.uploading = true;\r\n            this.dataService.product\r\n                .createAssets(files)\r\n                .pipe(finalize(() => (this.uploading = false)))\r\n                .subscribe(({ createAssets }) => {\r\n                    let successCount = 0;\r\n                    for (const result of createAssets) {\r\n                        switch (result.__typename) {\r\n                            case 'Asset':\r\n                                successCount++;\r\n                                break;\r\n                            case 'MimeTypeError':\r\n                                this.notificationService.error(result.message);\r\n                                break;\r\n                        }\r\n                    }\r\n                    if (0 < successCount) {\r\n                        super.refresh();\r\n                        this.notificationService.success(_('asset.notify-create-assets-success'), {\r\n                            count: successCount,\r\n                        });\r\n                    }\r\n                });\r\n        }\r\n    }\r\n\r\n    deleteAssets(assets: Asset[]) {\r\n        this.showModalAndDelete(assets.map(a => a.id))\r\n            .pipe(\r\n                switchMap(response => {\r\n                    if (response.result === DeletionResult.DELETED) {\r\n                        return [true];\r\n                    } else {\r\n                        return this.showModalAndDelete(\r\n                            assets.map(a => a.id),\r\n                            response.message || '',\r\n                        ).pipe(map(r => r.result === DeletionResult.DELETED));\r\n                    }\r\n                }),\r\n            )\r\n            .subscribe(\r\n                () => {\r\n                    this.notificationService.success(_('common.notify-delete-success'), {\r\n                        entity: 'Assets',\r\n                    });\r\n                    this.refresh();\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-delete-error'), {\r\n                        entity: 'Assets',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    private showModalAndDelete(assetIds: string[], message?: string) {\r\n        return this.modalService\r\n            .dialog({\r\n                title: _('catalog.confirm-delete-assets'),\r\n                translationVars: {\r\n                    count: assetIds.length,\r\n                },\r\n                body: message,\r\n                buttons: [\r\n                    { type: 'secondary', label: _('common.cancel') },\r\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\r\n                ],\r\n            })\r\n            .pipe(\r\n                switchMap(res => (res ? this.dataService.product.deleteAssets(assetIds, !!message) : EMPTY)),\r\n                map(res => res.deleteAssets),\r\n            );\r\n    }\r\n}\r\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    OnDestroy,\n    OnInit,\n    ViewChild,\n} from '@angular/core';\nimport { FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    Asset,\n    BaseDetailComponent,\n    Collection,\n    ConfigurableOperation,\n    ConfigurableOperationDefinition,\n    ConfigurableOperationInput,\n    CreateCollectionInput,\n    createUpdatedTranslatable,\n    CustomFieldConfig,\n    DataService,\n    encodeConfigArgValue,\n    findTranslation,\n    getConfigArgValue,\n    LanguageCode,\n    ModalService,\n    NotificationService,\n    Permission,\n    ServerConfigService,\n    UpdateCollectionInput,\n} from '@vendure/admin-ui/core';\nimport { normalizeString } from '@vendure/common/lib/normalize-string';\nimport { combineLatest } from 'rxjs';\nimport { mergeMap, take } from 'rxjs/operators';\n\nimport { CollectionContentsComponent } from '../collection-contents/collection-contents.component';\n\n@Component({\n    selector: 'vdr-collection-detail',\n    templateUrl: './collection-detail.component.html',\n    styleUrls: ['./collection-detail.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CollectionDetailComponent\n    extends BaseDetailComponent<Collection.Fragment>\n    implements OnInit, OnDestroy {\n    customFields: CustomFieldConfig[];\n    detailForm: FormGroup;\n    assetChanges: { assets?: Asset[]; featuredAsset?: Asset } = {};\n    filters: ConfigurableOperation[] = [];\n    allFilters: ConfigurableOperationDefinition[] = [];\n    readonly updatePermission = [Permission.UpdateCatalog, Permission.UpdateCollection];\n    @ViewChild('collectionContents') contentsComponent: CollectionContentsComponent;\n\n    constructor(\n        router: Router,\n        route: ActivatedRoute,\n        serverConfigService: ServerConfigService,\n        private changeDetector: ChangeDetectorRef,\n        protected dataService: DataService,\n        private formBuilder: FormBuilder,\n        private notificationService: NotificationService,\n        private modalService: ModalService,\n    ) {\n        super(route, router, serverConfigService, dataService);\n        this.customFields = this.getCustomFieldConfig('Collection');\n        this.detailForm = this.formBuilder.group({\n            name: ['', Validators.required],\n            slug: '',\n            description: '',\n            visible: false,\n            filters: this.formBuilder.array([]),\n            customFields: this.formBuilder.group(\n                this.customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\n            ),\n        });\n    }\n\n    ngOnInit() {\n        this.init();\n        this.dataService.collection.getCollectionFilters().single$.subscribe(res => {\n            this.allFilters = res.collectionFilters;\n        });\n    }\n\n    ngOnDestroy() {\n        this.destroy();\n    }\n\n    getFilterDefinition(filter: ConfigurableOperation): ConfigurableOperationDefinition | undefined {\n        return this.allFilters.find(f => f.code === filter.code);\n    }\n\n    customFieldIsSet(name: string): boolean {\n        return !!this.detailForm.get(['customFields', name]);\n    }\n\n    assetsChanged(): boolean {\n        return !!Object.values(this.assetChanges).length;\n    }\n\n    /**\n     * If creating a new Collection, automatically generate the slug based on the collection name.\n     */\n    updateSlug(nameValue: string) {\n        combineLatest(this.entity$, this.languageCode$)\n            .pipe(take(1))\n            .subscribe(([entity, languageCode]) => {\n                const slugControl = this.detailForm.get(['slug']);\n                const currentTranslation = findTranslation(entity, languageCode);\n                const currentSlugIsEmpty = !currentTranslation || !currentTranslation.slug;\n                if (slugControl && slugControl.pristine && currentSlugIsEmpty) {\n                    slugControl.setValue(normalizeString(`${nameValue}`, '-'));\n                }\n            });\n    }\n\n    addFilter(collectionFilter: ConfigurableOperation) {\n        const filtersArray = this.detailForm.get('filters') as FormArray;\n        const index = filtersArray.value.findIndex(o => o.code === collectionFilter.code);\n        if (index === -1) {\n            const argsHash = collectionFilter.args.reduce(\n                (output, arg) => ({\n                    ...output,\n                    [arg.name]: getConfigArgValue(arg.value),\n                }),\n                {},\n            );\n            filtersArray.push(\n                this.formBuilder.control({\n                    code: collectionFilter.code,\n                    args: argsHash,\n                }),\n            );\n            this.filters.push({\n                code: collectionFilter.code,\n                args: collectionFilter.args.map(a => ({ name: a.name, value: getConfigArgValue(a.value) })),\n            });\n        }\n    }\n\n    removeFilter(collectionFilter: ConfigurableOperation) {\n        const filtersArray = this.detailForm.get('filters') as FormArray;\n        const index = filtersArray.value.findIndex(o => o.code === collectionFilter.code);\n        if (index !== -1) {\n            filtersArray.removeAt(index);\n            this.filters.splice(index, 1);\n        }\n    }\n\n    create() {\n        if (!this.detailForm.dirty) {\n            return;\n        }\n        combineLatest(this.entity$, this.languageCode$)\n            .pipe(\n                take(1),\n                mergeMap(([category, languageCode]) => {\n                    const input = this.getUpdatedCollection(\n                        category,\n                        this.detailForm,\n                        languageCode,\n                    ) as CreateCollectionInput;\n                    const parentId = this.route.snapshot.paramMap.get('parentId');\n                    if (parentId) {\n                        input.parentId = parentId;\n                    }\n                    return this.dataService.collection.createCollection(input);\n                }),\n            )\n            .subscribe(\n                data => {\n                    this.notificationService.success(_('common.notify-create-success'), {\n                        entity: 'Collection',\n                    });\n                    this.assetChanges = {};\n                    this.detailForm.markAsPristine();\n                    this.changeDetector.markForCheck();\n                    this.router.navigate(['../', data.createCollection.id], { relativeTo: this.route });\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-create-error'), {\n                        entity: 'Collection',\n                    });\n                },\n            );\n    }\n\n    save() {\n        combineLatest(this.entity$, this.languageCode$)\n            .pipe(\n                take(1),\n                mergeMap(([category, languageCode]) => {\n                    const input = this.getUpdatedCollection(\n                        category,\n                        this.detailForm,\n                        languageCode,\n                    ) as UpdateCollectionInput;\n                    return this.dataService.collection.updateCollection(input);\n                }),\n            )\n            .subscribe(\n                () => {\n                    this.assetChanges = {};\n                    this.detailForm.markAsPristine();\n                    this.changeDetector.markForCheck();\n                    this.notificationService.success(_('common.notify-update-success'), {\n                        entity: 'Collection',\n                    });\n                    this.contentsComponent.refresh();\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-update-error'), {\n                        entity: 'Collection',\n                    });\n                },\n            );\n    }\n\n    canDeactivate(): boolean {\n        return super.canDeactivate() && !this.assetChanges.assets && !this.assetChanges.featuredAsset;\n    }\n\n    /**\n     * Sets the values of the form on changes to the category or current language.\n     */\n    protected setFormValues(entity: Collection.Fragment, languageCode: LanguageCode) {\n        const currentTranslation = findTranslation(entity, languageCode);\n\n        this.detailForm.patchValue({\n            name: currentTranslation ? currentTranslation.name : '',\n            slug: currentTranslation ? currentTranslation.slug : '',\n            description: currentTranslation ? currentTranslation.description : '',\n            visible: !entity.isPrivate,\n        });\n\n        entity.filters.forEach(f => this.addFilter(f));\n\n        if (this.customFields.length) {\n            const customFieldsGroup = this.detailForm.get(['customFields']) as FormGroup;\n\n            for (const fieldDef of this.customFields) {\n                const key = fieldDef.name;\n                const value =\n                    fieldDef.type === 'localeString'\n                        ? (currentTranslation as any).customFields[key]\n                        : (entity as any).customFields[key];\n                const control = customFieldsGroup.get(key);\n                if (control) {\n                    control.patchValue(value);\n                }\n            }\n        }\n    }\n\n    /**\n     * Given a category and the value of the form, this method creates an updated copy of the category which\n     * can then be persisted to the API.\n     */\n    private getUpdatedCollection(\n        category: Collection.Fragment,\n        form: FormGroup,\n        languageCode: LanguageCode,\n    ): CreateCollectionInput | UpdateCollectionInput {\n        const updatedCategory = createUpdatedTranslatable({\n            translatable: category,\n            updatedFields: form.value,\n            customFieldConfig: this.customFields,\n            languageCode,\n            defaultTranslation: {\n                languageCode,\n                name: category.name || '',\n                slug: category.slug || '',\n                description: category.description || '',\n            },\n        });\n        return {\n            ...updatedCategory,\n            assetIds: this.assetChanges.assets?.map(a => a.id),\n            featuredAssetId: this.assetChanges.featuredAsset?.id,\n            isPrivate: !form.value.visible,\n            filters: this.mapOperationsToInputs(this.filters, this.detailForm.value.filters),\n        };\n    }\n\n    /**\n     * Maps an array of conditions or actions to the input format expected by the GraphQL API.\n     */\n    private mapOperationsToInputs(\n        operations: ConfigurableOperation[],\n        formValueOperations: any,\n    ): ConfigurableOperationInput[] {\n        return operations.map((o, i) => {\n            return {\n                code: o.code,\n                arguments: Object.values(formValueOperations[i].args).map((value: any, j) => ({\n                    name: o.args[j].name,\n                    value: encodeConfigArgValue(value),\n                })),\n            };\n        });\n    }\n}\n","import { ChangeDetectionStrategy, Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    DataService,\r\n    GetCollectionList,\r\n    LanguageCode,\r\n    ModalService,\r\n    NotificationService,\r\n    QueryResult,\r\n    ServerConfigService,\r\n} from '@vendure/admin-ui/core';\r\nimport { combineLatest, EMPTY, Observable } from 'rxjs';\r\nimport { distinctUntilChanged, map, shareReplay, switchMap, take, tap } from 'rxjs/operators';\r\n\r\nimport { RearrangeEvent } from '../collection-tree/collection-tree.component';\r\n\r\n@Component({\r\n    selector: 'vdr-collection-list',\r\n    templateUrl: './collection-list.component.html',\r\n    styleUrls: ['./collection-list.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CollectionListComponent implements OnInit, OnDestroy {\r\n    activeCollectionId$: Observable<string | null>;\r\n    activeCollectionTitle$: Observable<string>;\r\n    items$: Observable<GetCollectionList.Items[]>;\r\n    availableLanguages$: Observable<LanguageCode[]>;\r\n    contentLanguage$: Observable<LanguageCode>;\r\n    expandAll = false;\r\n    private queryResult: QueryResult<any>;\r\n\r\n    constructor(\r\n        private dataService: DataService,\r\n        private notificationService: NotificationService,\r\n        private modalService: ModalService,\r\n        private router: Router,\r\n        private route: ActivatedRoute,\r\n        private serverConfigService: ServerConfigService,\r\n    ) {}\r\n\r\n    ngOnInit() {\r\n        this.queryResult = this.dataService.collection.getCollections(1000, 0).refetchOnChannelChange();\r\n        this.items$ = this.queryResult.mapStream(data => data.collections.items).pipe(shareReplay(1));\r\n        this.activeCollectionId$ = this.route.paramMap.pipe(\r\n            map(pm => pm.get('contents')),\r\n            distinctUntilChanged(),\r\n        );\r\n\r\n        this.activeCollectionTitle$ = combineLatest(this.activeCollectionId$, this.items$).pipe(\r\n            map(([id, collections]) => {\r\n                if (id) {\r\n                    const match = collections.find(c => c.id === id);\r\n                    return match ? match.name : '';\r\n                }\r\n                return '';\r\n            }),\r\n        );\r\n        this.availableLanguages$ = this.serverConfigService.getAvailableLanguages();\r\n        this.contentLanguage$ = this.dataService.client\r\n            .uiState()\r\n            .mapStream(({ uiState }) => uiState.contentLanguage)\r\n            .pipe(tap(() => this.refresh()));\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.queryResult.completed$.next();\r\n    }\r\n\r\n    onRearrange(event: RearrangeEvent) {\r\n        this.dataService.collection.moveCollection([event]).subscribe({\r\n            next: () => {\r\n                this.notificationService.success(_('common.notify-saved-changes'));\r\n                this.refresh();\r\n            },\r\n            error: err => {\r\n                this.notificationService.error(_('common.notify-save-changes-error'));\r\n            },\r\n        });\r\n    }\r\n\r\n    deleteCollection(id: string) {\r\n        this.items$\r\n            .pipe(\r\n                take(1),\r\n                map(items => -1 < items.findIndex(i => i.parent && i.parent.id === id)),\r\n                switchMap(hasChildren => {\r\n                    return this.modalService.dialog({\r\n                        title: _('catalog.confirm-delete-collection'),\r\n                        body: hasChildren\r\n                            ? _('catalog.confirm-delete-collection-and-children-body')\r\n                            : undefined,\r\n                        buttons: [\r\n                            { type: 'secondary', label: _('common.cancel') },\r\n                            { type: 'danger', label: _('common.delete'), returnValue: true },\r\n                        ],\r\n                    });\r\n                }),\r\n                switchMap(response => (response ? this.dataService.collection.deleteCollection(id) : EMPTY)),\r\n            )\r\n            .subscribe(\r\n                () => {\r\n                    this.notificationService.success(_('common.notify-delete-success'), {\r\n                        entity: 'Collection',\r\n                    });\r\n                    this.refresh();\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-delete-error'), {\r\n                        entity: 'Collection',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    closeContents() {\r\n        const params = { ...this.route.snapshot.params };\r\n        delete params.contents;\r\n        this.router.navigate(['./', params], { relativeTo: this.route, queryParamsHandling: 'preserve' });\r\n    }\r\n\r\n    setLanguage(code: LanguageCode) {\r\n        this.dataService.client.setContentLanguage(code).subscribe();\r\n    }\r\n\r\n    private refresh() {\r\n        this.queryResult.ref.refetch();\r\n    }\r\n}\r\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormArray, FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    BaseDetailComponent,\n    CreateFacetInput,\n    CreateFacetValueInput,\n    createUpdatedTranslatable,\n    CustomFieldConfig,\n    DataService,\n    DeletionResult,\n    FacetWithValues,\n    findTranslation,\n    LanguageCode,\n    ModalService,\n    NotificationService,\n    Permission,\n    ServerConfigService,\n    UpdateFacetInput,\n    UpdateFacetValueInput,\n} from '@vendure/admin-ui/core';\nimport { normalizeString } from '@vendure/common/lib/normalize-string';\nimport { notNullOrUndefined } from '@vendure/common/lib/shared-utils';\nimport { combineLatest, EMPTY, forkJoin, Observable } from 'rxjs';\nimport { map, mapTo, mergeMap, switchMap, take } from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-facet-detail',\n    templateUrl: './facet-detail.component.html',\n    styleUrls: ['./facet-detail.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FacetDetailComponent\n    extends BaseDetailComponent<FacetWithValues.Fragment>\n    implements OnInit, OnDestroy {\n    customFields: CustomFieldConfig[];\n    customValueFields: CustomFieldConfig[];\n    detailForm: FormGroup;\n    values: Array<FacetWithValues.Values | { name: string; code: string }>;\n    readonly updatePermission = [Permission.UpdateCatalog, Permission.UpdateFacet];\n\n    constructor(\n        router: Router,\n        route: ActivatedRoute,\n        serverConfigService: ServerConfigService,\n        private changeDetector: ChangeDetectorRef,\n        protected dataService: DataService,\n        private formBuilder: FormBuilder,\n        private notificationService: NotificationService,\n        private modalService: ModalService,\n    ) {\n        super(route, router, serverConfigService, dataService);\n        this.customFields = this.getCustomFieldConfig('Facet');\n        this.customValueFields = this.getCustomFieldConfig('FacetValue');\n        this.detailForm = this.formBuilder.group({\n            facet: this.formBuilder.group({\n                code: ['', Validators.required],\n                name: '',\n                visible: true,\n                customFields: this.formBuilder.group(\n                    this.customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\n                ),\n            }),\n            values: this.formBuilder.array([]),\n        });\n    }\n\n    ngOnInit() {\n        this.init();\n    }\n\n    ngOnDestroy() {\n        this.destroy();\n    }\n\n    updateCode(currentCode: string, nameValue: string) {\n        if (!currentCode) {\n            const codeControl = this.detailForm.get(['facet', 'code']);\n            if (codeControl && codeControl.pristine) {\n                codeControl.setValue(normalizeString(nameValue, '-'));\n            }\n        }\n    }\n\n    updateValueCode(currentCode: string, nameValue: string, index: number) {\n        if (!currentCode) {\n            const codeControl = this.detailForm.get(['values', index, 'code']);\n            if (codeControl && codeControl.pristine) {\n                codeControl.setValue(normalizeString(nameValue, '-'));\n            }\n        }\n    }\n\n    customFieldIsSet(name: string): boolean {\n        return !!this.detailForm.get(['facet', 'customFields', name]);\n    }\n\n    customValueFieldIsSet(index: number, name: string): boolean {\n        return !!this.detailForm.get(['values', index, 'customFields', name]);\n    }\n\n    getValuesFormArray(): FormArray {\n        return this.detailForm.get('values') as FormArray;\n    }\n\n    addFacetValue() {\n        const valuesFormArray = this.detailForm.get('values') as FormArray | null;\n        if (valuesFormArray) {\n            valuesFormArray.insert(\n                valuesFormArray.length,\n                this.formBuilder.group({\n                    id: '',\n                    name: ['', Validators.required],\n                    code: '',\n                }),\n            );\n            this.values.push({ name: '', code: '' });\n        }\n    }\n\n    create() {\n        const facetForm = this.detailForm.get('facet');\n        if (!facetForm || !facetForm.dirty) {\n            return;\n        }\n        combineLatest(this.entity$, this.languageCode$)\n            .pipe(\n                take(1),\n                mergeMap(([facet, languageCode]) => {\n                    const newFacet = this.getUpdatedFacet(\n                        facet,\n                        facetForm as FormGroup,\n                        languageCode,\n                    ) as CreateFacetInput;\n                    return this.dataService.facet.createFacet(newFacet);\n                }),\n                switchMap(data => this.dataService.facet.getAllFacets().single$.pipe(mapTo(data))),\n            )\n            .subscribe(\n                data => {\n                    this.notificationService.success(_('common.notify-create-success'), { entity: 'Facet' });\n                    this.detailForm.markAsPristine();\n                    this.changeDetector.markForCheck();\n                    this.router.navigate(['../', data.createFacet.id], { relativeTo: this.route });\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-create-error'), {\n                        entity: 'Facet',\n                    });\n                },\n            );\n    }\n\n    save() {\n        combineLatest(this.entity$, this.languageCode$)\n            .pipe(\n                take(1),\n                mergeMap(([facet, languageCode]) => {\n                    const facetGroup = this.detailForm.get('facet');\n                    const updateOperations: Array<Observable<any>> = [];\n\n                    if (facetGroup && facetGroup.dirty) {\n                        const newFacet = this.getUpdatedFacet(\n                            facet,\n                            facetGroup as FormGroup,\n                            languageCode,\n                        ) as UpdateFacetInput;\n                        if (newFacet) {\n                            updateOperations.push(this.dataService.facet.updateFacet(newFacet));\n                        }\n                    }\n                    const valuesArray = this.detailForm.get('values');\n                    if (valuesArray && valuesArray.dirty) {\n                        const newValues: CreateFacetValueInput[] = (valuesArray as FormArray).controls\n                            .filter(c => !c.value.id)\n                            .map(c => ({\n                                facetId: facet.id,\n                                code: c.value.code,\n                                translations: [{ name: c.value.name, languageCode }],\n                            }));\n                        if (newValues.length) {\n                            updateOperations.push(\n                                this.dataService.facet\n                                    .createFacetValues(newValues)\n                                    .pipe(switchMap(() => this.dataService.facet.getFacet(this.id).single$)),\n                            );\n                        }\n                        const updatedValues = this.getUpdatedFacetValues(\n                            facet,\n                            valuesArray as FormArray,\n                            languageCode,\n                        );\n                        if (updatedValues.length) {\n                            updateOperations.push(this.dataService.facet.updateFacetValues(updatedValues));\n                        }\n                    }\n\n                    return forkJoin(updateOperations);\n                }),\n                switchMap(() => this.dataService.facet.getAllFacets().single$),\n            )\n            .subscribe(\n                () => {\n                    this.detailForm.markAsPristine();\n                    this.changeDetector.markForCheck();\n                    this.notificationService.success(_('common.notify-update-success'), { entity: 'Facet' });\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-update-error'), {\n                        entity: 'Facet',\n                    });\n                },\n            );\n    }\n\n    deleteFacetValue(facetValueId: string | undefined, index: number) {\n        if (!facetValueId) {\n            // deleting a newly-added (not persisted) FacetValue\n            const valuesFormArray = this.detailForm.get('values') as FormArray | null;\n            if (valuesFormArray) {\n                valuesFormArray.removeAt(index);\n            }\n            this.values.splice(index, 1);\n            return;\n        }\n        this.showModalAndDelete(facetValueId)\n            .pipe(\n                switchMap(response => {\n                    if (response.result === DeletionResult.DELETED) {\n                        return [true];\n                    } else {\n                        return this.showModalAndDelete(facetValueId, response.message || '').pipe(\n                            map(r => r.result === DeletionResult.DELETED),\n                        );\n                    }\n                }),\n                switchMap(deleted => (deleted ? this.dataService.facet.getFacet(this.id).single$ : [])),\n            )\n            .subscribe(\n                () => {\n                    this.notificationService.success(_('common.notify-delete-success'), {\n                        entity: 'FacetValue',\n                    });\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-delete-error'), {\n                        entity: 'FacetValue',\n                    });\n                },\n            );\n    }\n\n    private showModalAndDelete(facetValueId: string, message?: string) {\n        return this.modalService\n            .dialog({\n                title: _('catalog.confirm-delete-facet-value'),\n                body: message,\n                buttons: [\n                    { type: 'secondary', label: _('common.cancel') },\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\n                ],\n            })\n            .pipe(\n                switchMap(result =>\n                    result ? this.dataService.facet.deleteFacetValues([facetValueId], !!message) : EMPTY,\n                ),\n                map(result => result.deleteFacetValues[0]),\n            );\n    }\n\n    /**\n     * Sets the values of the form on changes to the facet or current language.\n     */\n    protected setFormValues(facet: FacetWithValues.Fragment, languageCode: LanguageCode) {\n        const currentTranslation = findTranslation(facet, languageCode);\n\n        this.detailForm.patchValue({\n            facet: {\n                code: facet.code,\n                visible: !facet.isPrivate,\n                name: currentTranslation?.name ?? '',\n            },\n        });\n\n        if (this.customFields.length) {\n            const customFieldsGroup = this.detailForm.get(['facet', 'customFields']) as FormGroup;\n\n            for (const fieldDef of this.customFields) {\n                const key = fieldDef.name;\n                const value =\n                    fieldDef.type === 'localeString'\n                        ? (currentTranslation as any).customFields[key]\n                        : (facet as any).customFields[key];\n                const control = customFieldsGroup.get(key);\n                if (control) {\n                    control.patchValue(value);\n                }\n            }\n        }\n\n        const currentValuesFormArray = this.detailForm.get('values') as FormArray;\n        this.values = [...facet.values];\n        facet.values.forEach((value, i) => {\n            const valueTranslation = findTranslation(value, languageCode);\n            const group = {\n                id: value.id,\n                code: value.code,\n                name: valueTranslation ? valueTranslation.name : '',\n            };\n            const valueControl = currentValuesFormArray.at(i);\n            if (valueControl) {\n                valueControl.setValue(group);\n            } else {\n                currentValuesFormArray.insert(i, this.formBuilder.group(group));\n            }\n            if (this.customValueFields.length) {\n                let customValueFieldsGroup = this.detailForm.get(['values', i, 'customFields']) as FormGroup;\n                if (!customValueFieldsGroup) {\n                    customValueFieldsGroup = new FormGroup({});\n                    (this.detailForm.get(['values', i]) as FormGroup).addControl(\n                        'customFields',\n                        customValueFieldsGroup,\n                    );\n                }\n\n                if (customValueFieldsGroup) {\n                    for (const fieldDef of this.customValueFields) {\n                        const key = fieldDef.name;\n                        const fieldValue =\n                            fieldDef.type === 'localeString'\n                                ? (valueTranslation as any).customFields[key]\n                                : (value as any).customFields[key];\n                        const control = customValueFieldsGroup.get(key);\n                        if (control) {\n                            control.setValue(fieldValue);\n                        } else {\n                            customValueFieldsGroup.addControl(key, new FormControl(fieldValue));\n                        }\n                    }\n                }\n            }\n        });\n    }\n\n    /**\n     * Given a facet and the value of the detailForm, this method creates an updated copy of the facet which\n     * can then be persisted to the API.\n     */\n    private getUpdatedFacet(\n        facet: FacetWithValues.Fragment,\n        facetFormGroup: FormGroup,\n        languageCode: LanguageCode,\n    ): CreateFacetInput | UpdateFacetInput {\n        const input = createUpdatedTranslatable({\n            translatable: facet,\n            updatedFields: facetFormGroup.value,\n            customFieldConfig: this.customFields,\n            languageCode,\n            defaultTranslation: {\n                languageCode,\n                name: facet.name || '',\n            },\n        });\n        input.isPrivate = !facetFormGroup.value.visible;\n        return input;\n    }\n\n    /**\n     * Given an array of facet values and the values from the detailForm, this method creates an new array\n     * which can be persisted to the API.\n     */\n    private getUpdatedFacetValues(\n        facet: FacetWithValues.Fragment,\n        valuesFormArray: FormArray,\n        languageCode: LanguageCode,\n    ): UpdateFacetValueInput[] {\n        const dirtyValues = facet.values.filter((v, i) => {\n            const formRow = valuesFormArray.get(i.toString());\n            return formRow && formRow.dirty && formRow.value.id;\n        });\n        const dirtyValueValues = valuesFormArray.controls\n            .filter(c => c.dirty && c.value.id)\n            .map(c => c.value);\n\n        if (dirtyValues.length !== dirtyValueValues.length) {\n            throw new Error(_(`error.facet-value-form-values-do-not-match`));\n        }\n        return dirtyValues\n            .map((value, i) => {\n                return createUpdatedTranslatable({\n                    translatable: value,\n                    updatedFields: dirtyValueValues[i],\n                    customFieldConfig: this.customValueFields,\n                    languageCode,\n                    defaultTranslation: {\n                        languageCode,\n                        name: '',\n                    },\n                });\n            })\n            .filter(notNullOrUndefined);\n    }\n}\n","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport { BaseListComponent, LanguageCode, ServerConfigService } from '@vendure/admin-ui/core';\r\nimport { DeletionResult, GetFacetList } from '@vendure/admin-ui/core';\r\nimport { NotificationService } from '@vendure/admin-ui/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\nimport { ModalService } from '@vendure/admin-ui/core';\r\nimport { EMPTY, Observable } from 'rxjs';\r\nimport { map, switchMap, tap } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'vdr-facet-list',\r\n    templateUrl: './facet-list.component.html',\r\n    styleUrls: ['./facet-list.component.scss'],\r\n})\r\nexport class FacetListComponent\r\n    extends BaseListComponent<GetFacetList.Query, GetFacetList.Items>\r\n    implements OnInit {\r\n    availableLanguages$: Observable<LanguageCode[]>;\r\n    contentLanguage$: Observable<LanguageCode>;\r\n    readonly initialLimit = 3;\r\n    displayLimit: { [id: string]: number } = {};\r\n    constructor(\r\n        private dataService: DataService,\r\n        private modalService: ModalService,\r\n        private notificationService: NotificationService,\r\n        private serverConfigService: ServerConfigService,\r\n        router: Router,\r\n        route: ActivatedRoute,\r\n    ) {\r\n        super(router, route);\r\n        super.setQueryFn(\r\n            (...args: any[]) => this.dataService.facet.getFacets(...args).refetchOnChannelChange(),\r\n            data => data.facets,\r\n        );\r\n    }\r\n\r\n    ngOnInit() {\r\n        super.ngOnInit();\r\n        this.availableLanguages$ = this.serverConfigService.getAvailableLanguages();\r\n        this.contentLanguage$ = this.dataService.client\r\n            .uiState()\r\n            .mapStream(({ uiState }) => uiState.contentLanguage)\r\n            .pipe(tap(() => this.refresh()));\r\n    }\r\n\r\n    toggleDisplayLimit(facet: GetFacetList.Items) {\r\n        if (this.displayLimit[facet.id] === facet.values.length) {\r\n            this.displayLimit[facet.id] = this.initialLimit;\r\n        } else {\r\n            this.displayLimit[facet.id] = facet.values.length;\r\n        }\r\n    }\r\n\r\n    deleteFacet(facetValueId: string) {\r\n        this.showModalAndDelete(facetValueId)\r\n            .pipe(\r\n                switchMap(response => {\r\n                    if (response.result === DeletionResult.DELETED) {\r\n                        return [true];\r\n                    } else {\r\n                        return this.showModalAndDelete(facetValueId, response.message || '').pipe(\r\n                            map(r => r.result === DeletionResult.DELETED),\r\n                        );\r\n                    }\r\n                }),\r\n                // Refresh the cached facets to reflect the changes\r\n                switchMap(() => this.dataService.facet.getAllFacets().single$),\r\n            )\r\n            .subscribe(\r\n                () => {\r\n                    this.notificationService.success(_('common.notify-delete-success'), {\r\n                        entity: 'FacetValue',\r\n                    });\r\n                    this.refresh();\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-delete-error'), {\r\n                        entity: 'FacetValue',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    setLanguage(code: LanguageCode) {\r\n        this.dataService.client.setContentLanguage(code).subscribe();\r\n    }\r\n\r\n    private showModalAndDelete(facetId: string, message?: string) {\r\n        return this.modalService\r\n            .dialog({\r\n                title: _('catalog.confirm-delete-facet'),\r\n                body: message,\r\n                buttons: [\r\n                    { type: 'secondary', label: _('common.cancel') },\r\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\r\n                ],\r\n            })\r\n            .pipe(\r\n                switchMap(res => (res ? this.dataService.facet.deleteFacet(facetId, !!message) : EMPTY)),\r\n                map(res => res.deleteFacet),\r\n            );\r\n    }\r\n}\r\n","/**\r\n * @description\r\n * Like String.prototype.replace(), but replaces the last instance\r\n * rather than the first.\r\n */\r\nexport function replaceLast(target: string | undefined | null, search: string, replace: string): string {\r\n    if (!target) {\r\n        return '';\r\n    }\r\n    const lastIndex = target.lastIndexOf(search);\r\n    if (lastIndex === -1) {\r\n        return target;\r\n    }\r\n    const head = target.substr(0, lastIndex);\r\n    const tail = target.substr(lastIndex).replace(search, replace);\r\n    return head + tail;\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {\r\n    CreateProductInput,\r\n    CreateProductVariantInput,\r\n    DataService,\r\n    DeletionResult,\r\n    FacetWithValues,\r\n    findTranslation,\r\n    LanguageCode,\r\n    ProductWithVariants,\r\n    UpdateProductInput,\r\n    UpdateProductMutation,\r\n    UpdateProductOptionInput,\r\n    UpdateProductVariantInput,\r\n    UpdateProductVariantsMutation,\r\n} from '@vendure/admin-ui/core';\r\nimport { normalizeString } from '@vendure/common/lib/normalize-string';\r\nimport { notNullOrUndefined } from '@vendure/common/lib/shared-utils';\r\nimport { forkJoin, Observable, of, throwError } from 'rxjs';\r\nimport { map, mergeMap, shareReplay, switchMap } from 'rxjs/operators';\r\n\r\nimport { CreateProductVariantsConfig } from '../../components/generate-product-variants/generate-product-variants.component';\r\n\r\nimport { replaceLast } from './replace-last';\r\n\r\n/**\r\n * Handles the logic for making the API calls to perform CRUD operations on a Product and its related\r\n * entities. This logic was extracted out of the component because it became too large and hard to follow.\r\n */\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class ProductDetailService {\r\n    constructor(private dataService: DataService) {}\r\n\r\n    getFacets(): Observable<FacetWithValues.Fragment[]> {\r\n        return this.dataService.facet.getAllFacets().mapSingle(data => data.facets.items);\r\n    }\r\n\r\n    getTaxCategories() {\r\n        return this.dataService.settings\r\n            .getTaxCategories()\r\n            .mapSingle(data => data.taxCategories)\r\n            .pipe(shareReplay(1));\r\n    }\r\n\r\n    createProductWithVariants(\r\n        input: CreateProductInput,\r\n        createVariantsConfig: CreateProductVariantsConfig,\r\n        languageCode: LanguageCode,\r\n    ) {\r\n        const createProduct$ = this.dataService.product.createProduct(input);\r\n        const nonEmptyOptionGroups = createVariantsConfig.groups.filter(g => 0 < g.values.length);\r\n        const createOptionGroups$ = this.createProductOptionGroups(nonEmptyOptionGroups, languageCode);\r\n\r\n        return forkJoin(createProduct$, createOptionGroups$).pipe(\r\n            mergeMap(([{ createProduct }, optionGroups]) => {\r\n                const addOptionsToProduct$ = optionGroups.length\r\n                    ? forkJoin(\r\n                          optionGroups.map(optionGroup => {\r\n                              return this.dataService.product.addOptionGroupToProduct({\r\n                                  productId: createProduct.id,\r\n                                  optionGroupId: optionGroup.id,\r\n                              });\r\n                          }),\r\n                      )\r\n                    : of([]);\r\n                return addOptionsToProduct$.pipe(\r\n                    map(() => {\r\n                        return { createProduct, optionGroups };\r\n                    }),\r\n                );\r\n            }),\r\n            mergeMap(({ createProduct, optionGroups }) => {\r\n                const variants = createVariantsConfig.variants.map(v => {\r\n                    const optionIds = optionGroups.length\r\n                        ? v.optionValues.map((optionName, index) => {\r\n                              const option = optionGroups[index].options.find(o => o.name === optionName);\r\n                              if (!option) {\r\n                                  throw new Error(\r\n                                      `Could not find a matching ProductOption \"${optionName}\" when creating variant`,\r\n                                  );\r\n                              }\r\n                              return option.id;\r\n                          })\r\n                        : [];\r\n                    return {\r\n                        ...v,\r\n                        optionIds,\r\n                    };\r\n                });\r\n                const options = optionGroups.map(og => og.options).reduce((flat, o) => [...flat, ...o], []);\r\n                return this.createProductVariants(createProduct, variants, options, languageCode);\r\n            }),\r\n        );\r\n    }\r\n\r\n    createProductOptionGroups(groups: Array<{ name: string; values: string[] }>, languageCode: LanguageCode) {\r\n        return groups.length\r\n            ? forkJoin(\r\n                  groups.map(c => {\r\n                      return this.dataService.product\r\n                          .createProductOptionGroups({\r\n                              code: normalizeString(c.name, '-'),\r\n                              translations: [{ languageCode, name: c.name }],\r\n                              options: c.values.map(v => ({\r\n                                  code: normalizeString(v, '-'),\r\n                                  translations: [{ languageCode, name: v }],\r\n                              })),\r\n                          })\r\n                          .pipe(map(data => data.createProductOptionGroup));\r\n                  }),\r\n              )\r\n            : of([]);\r\n    }\r\n\r\n    createProductVariants(\r\n        product: { name: string; id: string },\r\n        variantData: Array<{ price: number; sku: string; stock: number; optionIds: string[] }>,\r\n        options: Array<{ id: string; name: string }>,\r\n        languageCode: LanguageCode,\r\n    ) {\r\n        const variants: CreateProductVariantInput[] = variantData.map(v => {\r\n            const name = options.length\r\n                ? `${product.name} ${v.optionIds\r\n                      .map(id => options.find(o => o.id === id))\r\n                      .filter(notNullOrUndefined)\r\n                      .map(o => o.name)\r\n                      .join(' ')}`\r\n                : product.name;\r\n            return {\r\n                productId: product.id,\r\n                price: v.price,\r\n                sku: v.sku,\r\n                stockOnHand: v.stock,\r\n                translations: [\r\n                    {\r\n                        languageCode,\r\n                        name,\r\n                    },\r\n                ],\r\n                optionIds: v.optionIds,\r\n            };\r\n        });\r\n        return this.dataService.product.createProductVariants(variants).pipe(\r\n            map(({ createProductVariants }) => ({\r\n                createProductVariants,\r\n                productId: product.id,\r\n            })),\r\n        );\r\n    }\r\n\r\n    updateProduct(updateOptions: {\r\n        product: ProductWithVariants.Fragment;\r\n        languageCode: LanguageCode;\r\n        autoUpdate: boolean;\r\n        productInput?: UpdateProductInput;\r\n        variantsInput?: UpdateProductVariantInput[];\r\n    }) {\r\n        const { product, languageCode, autoUpdate, productInput, variantsInput } = updateOptions;\r\n        const updateOperations: Array<Observable<UpdateProductMutation | UpdateProductVariantsMutation>> = [];\r\n        const updateVariantsInput = variantsInput || [];\r\n        if (productInput) {\r\n            updateOperations.push(this.dataService.product.updateProduct(productInput));\r\n\r\n            const productOldName = findTranslation(product, languageCode)?.name ?? '';\r\n            const productNewName = findTranslation(productInput, languageCode)?.name;\r\n            if (productNewName && productOldName !== productNewName && autoUpdate) {\r\n                for (const variant of product.variants) {\r\n                    const currentVariantName = findTranslation(variant, languageCode)?.name || '';\r\n                    let variantInput: UpdateProductVariantInput;\r\n                    const existingVariantInput = updateVariantsInput.find(i => i.id === variant.id);\r\n                    if (existingVariantInput) {\r\n                        variantInput = existingVariantInput;\r\n                    } else {\r\n                        variantInput = {\r\n                            id: variant.id,\r\n                            translations: [{ languageCode, name: currentVariantName }],\r\n                        };\r\n                        updateVariantsInput.push(variantInput);\r\n                    }\r\n                    const variantTranslation = findTranslation(variantInput, languageCode);\r\n                    if (variantTranslation) {\r\n                        if (variantTranslation.name) {\r\n                            variantTranslation.name = replaceLast(\r\n                                variantTranslation.name,\r\n                                productOldName,\r\n                                productNewName,\r\n                            );\r\n                        } else {\r\n                            // The variant translation was falsy, which occurs\r\n                            // when defining the product name for a new translation\r\n                            // language that had not yet been defined.\r\n                            variantTranslation.name = [\r\n                                productNewName,\r\n                                ...variant.options.map(o => o.name),\r\n                            ].join(' ');\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (updateVariantsInput.length) {\r\n            updateOperations.push(this.dataService.product.updateProductVariants(updateVariantsInput));\r\n        }\r\n        return forkJoin(updateOperations);\r\n    }\r\n\r\n    updateProductOption(\r\n        input: UpdateProductOptionInput & { autoUpdate: boolean },\r\n        product: ProductWithVariants.Fragment,\r\n        languageCode: LanguageCode,\r\n    ) {\r\n        let updateProductVariantNames$: Observable<any> = of([]);\r\n        if (input.autoUpdate) {\r\n            // Update any ProductVariants' names which include the option name\r\n            let oldOptionName: string | undefined;\r\n            const newOptionName = findTranslation(input, languageCode)?.name;\r\n            if (!newOptionName) {\r\n                updateProductVariantNames$ = of([]);\r\n            }\r\n            const variantsToUpdate: UpdateProductVariantInput[] = [];\r\n            for (const variant of product.variants) {\r\n                if (variant.options.map(o => o.id).includes(input.id)) {\r\n                    if (!oldOptionName) {\r\n                        oldOptionName = findTranslation(\r\n                            variant.options.find(o => o.id === input.id),\r\n                            languageCode,\r\n                        )?.name;\r\n                    }\r\n                    const variantName = findTranslation(variant, languageCode)?.name || '';\r\n                    if (oldOptionName && newOptionName && variantName.includes(oldOptionName)) {\r\n                        variantsToUpdate.push({\r\n                            id: variant.id,\r\n                            translations: [\r\n                                {\r\n                                    languageCode,\r\n                                    name: replaceLast(variantName, oldOptionName, newOptionName),\r\n                                },\r\n                            ],\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n            if (variantsToUpdate.length) {\r\n                updateProductVariantNames$ = this.dataService.product.updateProductVariants(variantsToUpdate);\r\n            }\r\n        }\r\n        return this.dataService.product\r\n            .updateProductOption(input)\r\n            .pipe(mergeMap(() => updateProductVariantNames$));\r\n    }\r\n\r\n    deleteProductVariant(id: string, productId: string) {\r\n        return this.dataService.product.deleteProductVariant(id).pipe(\r\n            switchMap(result => {\r\n                if (result.deleteProductVariant.result === DeletionResult.DELETED) {\r\n                    return this.dataService.product.getProduct(productId).single$;\r\n                } else {\r\n                    return throwError(result.deleteProductVariant.message);\r\n                }\r\n            }),\r\n        );\r\n    }\r\n}\r\n","import {\r\n    AfterViewInit,\r\n    ChangeDetectionStrategy,\r\n    ChangeDetectorRef,\r\n    Component,\r\n    ViewChild,\r\n} from '@angular/core';\r\nimport { Dialog, FacetValue, FacetValueSelectorComponent, FacetWithValues } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-apply-facet-dialog',\r\n    templateUrl: './apply-facet-dialog.component.html',\r\n    styleUrls: ['./apply-facet-dialog.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ApplyFacetDialogComponent implements Dialog<FacetValue[]>, AfterViewInit {\r\n    @ViewChild(FacetValueSelectorComponent) private selector: FacetValueSelectorComponent;\r\n    resolveWith: (result?: FacetValue[]) => void;\r\n    selectedValues: FacetValue[] = [];\r\n    // Provided by caller\r\n    facets: FacetWithValues.Fragment[];\r\n\r\n    constructor(private changeDetector: ChangeDetectorRef) {}\r\n\r\n    ngAfterViewInit() {\r\n        setTimeout(() => this.selector.focus(), 0);\r\n    }\r\n\r\n    selectValues() {\r\n        this.resolveWith(this.selectedValues);\r\n    }\r\n\r\n    cancel() {\r\n        this.resolveWith();\r\n    }\r\n}\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport { GetChannels, ProductVariantFragment } from '@vendure/admin-ui/core';\nimport { NotificationService } from '@vendure/admin-ui/core';\nimport { DataService } from '@vendure/admin-ui/core';\nimport { Dialog } from '@vendure/admin-ui/core';\nimport { combineLatest, from, Observable } from 'rxjs';\nimport { map, startWith, switchMap } from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-assign-products-to-channel-dialog',\n    templateUrl: './assign-products-to-channel-dialog.component.html',\n    styleUrls: ['./assign-products-to-channel-dialog.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AssignProductsToChannelDialogComponent implements OnInit, Dialog<any> {\n    selectedChannel: GetChannels.Channels | null | undefined;\n    currentChannel: GetChannels.Channels;\n    availableChannels: GetChannels.Channels[];\n    resolveWith: (result?: any) => void;\n    variantsPreview$: Observable<Array<{ id: string; name: string; price: number; pricePreview: number }>>;\n    priceFactorControl = new FormControl(1);\n    selectedChannelIdControl = new FormControl();\n\n    // assigned by ModalService.fromComponent() call\n    productIds: string[];\n    productVariantIds: string[] | undefined;\n    currentChannelIds: string[];\n\n    get isProductVariantMode(): boolean {\n        return this.productVariantIds != null;\n    }\n\n    constructor(private dataService: DataService, private notificationService: NotificationService) {}\n\n    ngOnInit() {\n        const activeChannelId$ = this.dataService.client\n            .userStatus()\n            .mapSingle(({ userStatus }) => userStatus.activeChannelId);\n        const allChannels$ = this.dataService.settings.getChannels().mapSingle(data => data.channels);\n\n        combineLatest(activeChannelId$, allChannels$).subscribe(([activeChannelId, channels]) => {\n            // tslint:disable-next-line:no-non-null-assertion\n            this.currentChannel = channels.find(c => c.id === activeChannelId)!;\n            this.availableChannels = channels;\n        });\n\n        this.selectedChannelIdControl.valueChanges.subscribe(ids => {\n            this.selectChannel(ids);\n        });\n\n        this.variantsPreview$ = combineLatest(\n            from(this.getTopVariants(10)),\n            this.priceFactorControl.valueChanges.pipe(startWith(1)),\n        ).pipe(\n            map(([variants, factor]) => {\n                return variants.map(v => ({\n                    id: v.id,\n                    name: v.name,\n                    price: v.price,\n                    pricePreview: v.price * +factor,\n                }));\n            }),\n        );\n    }\n\n    selectChannel(channelIds: string[]) {\n        this.selectedChannel = this.availableChannels.find(c => c.id === channelIds[0]);\n    }\n\n    assign() {\n        const selectedChannel = this.selectedChannel;\n        if (selectedChannel) {\n            if (!this.isProductVariantMode) {\n                this.dataService.product\n                    .assignProductsToChannel({\n                        channelId: selectedChannel.id,\n                        productIds: this.productIds,\n                        priceFactor: +this.priceFactorControl.value,\n                    })\n                    .subscribe(() => {\n                        this.notificationService.success(_('catalog.assign-product-to-channel-success'), {\n                            channel: selectedChannel.code,\n                        });\n                        this.resolveWith(true);\n                    });\n            } else if (this.productVariantIds) {\n                this.dataService.product\n                    .assignVariantsToChannel({\n                        channelId: selectedChannel.id,\n                        productVariantIds: this.productVariantIds,\n                        priceFactor: +this.priceFactorControl.value,\n                    })\n                    .subscribe(() => {\n                        this.notificationService.success(_('catalog.assign-variant-to-channel-success'), {\n                            channel: selectedChannel.code,\n                        });\n                        this.resolveWith(true);\n                    });\n            }\n        }\n    }\n\n    cancel() {\n        this.resolveWith();\n    }\n\n    private async getTopVariants(take: number): Promise<ProductVariantFragment[]> {\n        const variants: ProductVariantFragment[] = [];\n\n        for (let i = 0; i < this.productIds.length && variants.length < take; i++) {\n            const productVariants = await this.dataService.product\n                .getProduct(this.productIds[i])\n                .mapSingle(({ product }) => {\n                    const _variants = product ? product.variants : [];\n                    return _variants.filter(v =>\n                        this.isProductVariantMode ? this.productVariantIds?.includes(v.id) : true,\n                    );\n                })\n                .toPromise();\n            variants.push(...(productVariants || []));\n        }\n        return variants.slice(0, take);\n    }\n}\n","import { Location } from '@angular/common';\r\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormArray, FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    Asset,\r\n    BaseDetailComponent,\r\n    CreateProductInput,\r\n    createUpdatedTranslatable,\r\n    CustomFieldConfig,\r\n    DataService,\r\n    FacetWithValues,\r\n    findTranslation,\r\n    flattenFacetValues,\r\n    GlobalFlag,\r\n    LanguageCode,\r\n    ModalService,\r\n    NotificationService,\r\n    ProductWithVariants,\r\n    ServerConfigService,\r\n    TaxCategory,\r\n    UpdateProductInput,\r\n    UpdateProductMutation,\r\n    UpdateProductOptionInput,\r\n    UpdateProductVariantInput,\r\n    UpdateProductVariantsMutation,\r\n} from '@vendure/admin-ui/core';\r\nimport { normalizeString } from '@vendure/common/lib/normalize-string';\r\nimport { DEFAULT_CHANNEL_CODE } from '@vendure/common/lib/shared-constants';\r\nimport { notNullOrUndefined } from '@vendure/common/lib/shared-utils';\r\nimport { unique } from '@vendure/common/lib/unique';\r\nimport { combineLatest, EMPTY, merge, Observable } from 'rxjs';\r\nimport {\r\n    debounceTime,\r\n    distinctUntilChanged,\r\n    map,\r\n    mergeMap,\r\n    shareReplay,\r\n    startWith,\r\n    switchMap,\r\n    take,\r\n    takeUntil,\r\n    withLatestFrom,\r\n} from 'rxjs/operators';\r\n\r\nimport { ProductDetailService } from '../../providers/product-detail/product-detail.service';\r\nimport { ApplyFacetDialogComponent } from '../apply-facet-dialog/apply-facet-dialog.component';\r\nimport { AssignProductsToChannelDialogComponent } from '../assign-products-to-channel-dialog/assign-products-to-channel-dialog.component';\r\nimport { CreateProductVariantsConfig } from '../generate-product-variants/generate-product-variants.component';\r\nimport { VariantAssetChange } from '../product-variants-list/product-variants-list.component';\r\n\r\nexport type TabName = 'details' | 'variants';\r\nexport interface VariantFormValue {\r\n    id: string;\r\n    enabled: boolean;\r\n    sku: string;\r\n    name: string;\r\n    price: number;\r\n    priceWithTax: number;\r\n    taxCategoryId: string;\r\n    stockOnHand: number;\r\n    useGlobalOutOfStockThreshold: boolean;\r\n    outOfStockThreshold: number;\r\n    trackInventory: GlobalFlag;\r\n    facetValueIds: string[];\r\n    customFields?: any;\r\n}\r\n\r\nexport interface SelectedAssets {\r\n    assets?: Asset[];\r\n    featuredAsset?: Asset;\r\n}\r\n\r\n@Component({\r\n    selector: 'vdr-product-detail',\r\n    templateUrl: './product-detail.component.html',\r\n    styleUrls: ['./product-detail.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ProductDetailComponent\r\n    extends BaseDetailComponent<ProductWithVariants.Fragment>\r\n    implements OnInit, OnDestroy {\r\n    activeTab$: Observable<TabName>;\r\n    product$: Observable<ProductWithVariants.Fragment>;\r\n    variants$: Observable<ProductWithVariants.Variants[]>;\r\n    taxCategories$: Observable<TaxCategory.Fragment[]>;\r\n    customFields: CustomFieldConfig[];\r\n    customVariantFields: CustomFieldConfig[];\r\n    customOptionGroupFields: CustomFieldConfig[];\r\n    customOptionFields: CustomFieldConfig[];\r\n    detailForm: FormGroup;\r\n    filterInput = new FormControl('');\r\n    assetChanges: SelectedAssets = {};\r\n    variantAssetChanges: { [variantId: string]: SelectedAssets } = {};\r\n    productChannels$: Observable<ProductWithVariants.Channels[]>;\r\n    facetValues$: Observable<ProductWithVariants.FacetValues[]>;\r\n    facets$: Observable<FacetWithValues.Fragment[]>;\r\n    selectedVariantIds: string[] = [];\r\n    variantDisplayMode: 'card' | 'table' = 'card';\r\n    createVariantsConfig: CreateProductVariantsConfig = { groups: [], variants: [] };\r\n    channelPriceIncludesTax$: Observable<boolean>;\r\n\r\n    constructor(\r\n        route: ActivatedRoute,\r\n        router: Router,\r\n        serverConfigService: ServerConfigService,\r\n        private productDetailService: ProductDetailService,\r\n        private formBuilder: FormBuilder,\r\n        private modalService: ModalService,\r\n        private notificationService: NotificationService,\r\n        protected dataService: DataService,\r\n        private location: Location,\r\n        private changeDetector: ChangeDetectorRef,\r\n    ) {\r\n        super(route, router, serverConfigService, dataService);\r\n        this.customFields = this.getCustomFieldConfig('Product');\r\n        this.customVariantFields = this.getCustomFieldConfig('ProductVariant');\r\n        this.customOptionGroupFields = this.getCustomFieldConfig('ProductOptionGroup');\r\n        this.customOptionFields = this.getCustomFieldConfig('ProductOption');\r\n        this.detailForm = this.formBuilder.group({\r\n            product: this.formBuilder.group({\r\n                enabled: true,\r\n                name: ['', Validators.required],\r\n                autoUpdateVariantNames: true,\r\n                slug: '',\r\n                description: '',\r\n                facetValueIds: [[]],\r\n                customFields: this.formBuilder.group(\r\n                    this.customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\r\n                ),\r\n            }),\r\n            variants: this.formBuilder.array([]),\r\n        });\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.init();\r\n        this.product$ = this.entity$;\r\n        const variants$ = this.product$.pipe(map(product => product.variants));\r\n        const filterTerm$ = this.filterInput.valueChanges.pipe(\r\n            startWith(''),\r\n            debounceTime(50),\r\n            shareReplay(),\r\n        );\r\n        this.variants$ = combineLatest(variants$, filterTerm$).pipe(\r\n            map(([variants, term]) => {\r\n                return term\r\n                    ? variants.filter(v => {\r\n                          const lcTerm = term.toLocaleLowerCase();\r\n                          return (\r\n                              v.name.toLocaleLowerCase().includes(lcTerm) ||\r\n                              v.sku.toLocaleLowerCase().includes(lcTerm)\r\n                          );\r\n                      })\r\n                    : variants;\r\n            }),\r\n        );\r\n        this.taxCategories$ = this.productDetailService.getTaxCategories().pipe(takeUntil(this.destroy$));\r\n        this.activeTab$ = this.route.paramMap.pipe(map(qpm => qpm.get('tab') as any));\r\n\r\n        // FacetValues are provided initially by the nested array of the\r\n        // Product entity, but once a fetch to get all Facets is made (as when\r\n        // opening the FacetValue selector modal), then these additional values\r\n        // are concatenated onto the initial array.\r\n        this.facets$ = this.productDetailService.getFacets();\r\n        const productFacetValues$ = this.product$.pipe(map(product => product.facetValues));\r\n        const allFacetValues$ = this.facets$.pipe(map(flattenFacetValues));\r\n        const productGroup = this.getProductFormGroup();\r\n\r\n        const formFacetValueIdChanges$ = productGroup.valueChanges.pipe(\r\n            map(val => val.facetValueIds as string[]),\r\n            distinctUntilChanged(),\r\n        );\r\n        const formChangeFacetValues$ = combineLatest(\r\n            formFacetValueIdChanges$,\r\n            productFacetValues$,\r\n            allFacetValues$,\r\n        ).pipe(\r\n            map(([ids, productFacetValues, allFacetValues]) => {\r\n                const combined = [...productFacetValues, ...allFacetValues];\r\n                return ids.map(id => combined.find(fv => fv.id === id)).filter(notNullOrUndefined);\r\n            }),\r\n        );\r\n\r\n        this.facetValues$ = merge(productFacetValues$, formChangeFacetValues$);\r\n        this.productChannels$ = this.product$.pipe(map(p => p.channels));\r\n        this.channelPriceIncludesTax$ = this.dataService.settings\r\n            .getActiveChannel('cache-first')\r\n            .refetchOnChannelChange()\r\n            .mapStream(data => data.activeChannel.pricesIncludeTax)\r\n            .pipe(shareReplay(1));\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.destroy();\r\n    }\r\n\r\n    navigateToTab(tabName: TabName) {\r\n        this.location.replaceState(\r\n            this.router\r\n                .createUrlTree(['./', { ...this.route.snapshot.params, tab: tabName }], {\r\n                    queryParamsHandling: 'merge',\r\n                    relativeTo: this.route,\r\n                })\r\n                .toString(),\r\n        );\r\n    }\r\n\r\n    isDefaultChannel(channelCode: string): boolean {\r\n        return channelCode === DEFAULT_CHANNEL_CODE;\r\n    }\r\n\r\n    assignToChannel() {\r\n        this.productChannels$\r\n            .pipe(\r\n                take(1),\r\n                switchMap(channels => {\r\n                    return this.modalService.fromComponent(AssignProductsToChannelDialogComponent, {\r\n                        size: 'lg',\r\n                        locals: {\r\n                            productIds: [this.id],\r\n                            currentChannelIds: channels.map(c => c.id),\r\n                        },\r\n                    });\r\n                }),\r\n            )\r\n            .subscribe();\r\n    }\r\n\r\n    removeFromChannel(channelId: string) {\r\n        this.modalService\r\n            .dialog({\r\n                title: _('catalog.remove-product-from-channel'),\r\n                buttons: [\r\n                    { type: 'secondary', label: _('common.cancel') },\r\n                    { type: 'danger', label: _('catalog.remove-from-channel'), returnValue: true },\r\n                ],\r\n            })\r\n            .pipe(\r\n                switchMap(response =>\r\n                    response\r\n                        ? this.dataService.product.removeProductsFromChannel({\r\n                              channelId,\r\n                              productIds: [this.id],\r\n                          })\r\n                        : EMPTY,\r\n                ),\r\n            )\r\n            .subscribe(\r\n                () => {\r\n                    this.notificationService.success(_('catalog.notify-remove-product-from-channel-success'));\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('catalog.notify-remove-product-from-channel-error'));\r\n                },\r\n            );\r\n    }\r\n\r\n    assignVariantToChannel(variant: ProductWithVariants.Variants) {\r\n        return this.modalService\r\n            .fromComponent(AssignProductsToChannelDialogComponent, {\r\n                size: 'lg',\r\n                locals: {\r\n                    productIds: [this.id],\r\n                    productVariantIds: [variant.id],\r\n                    currentChannelIds: variant.channels.map(c => c.id),\r\n                },\r\n            })\r\n            .subscribe();\r\n    }\r\n\r\n    removeVariantFromChannel({\r\n        channelId,\r\n        variant,\r\n    }: {\r\n        channelId: string;\r\n        variant: ProductWithVariants.Variants;\r\n    }) {\r\n        this.modalService\r\n            .dialog({\r\n                title: _('catalog.remove-product-variant-from-channel'),\r\n                buttons: [\r\n                    { type: 'secondary', label: _('common.cancel') },\r\n                    { type: 'danger', label: _('catalog.remove-from-channel'), returnValue: true },\r\n                ],\r\n            })\r\n            .pipe(\r\n                switchMap(response =>\r\n                    response\r\n                        ? this.dataService.product.removeVariantsFromChannel({\r\n                              channelId,\r\n                              productVariantIds: [variant.id],\r\n                          })\r\n                        : EMPTY,\r\n                ),\r\n            )\r\n            .subscribe(\r\n                () => {\r\n                    this.notificationService.success(_('catalog.notify-remove-variant-from-channel-success'));\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('catalog.notify-remove-variant-from-channel-error'));\r\n                },\r\n            );\r\n    }\r\n\r\n    customFieldIsSet(name: string): boolean {\r\n        return !!this.detailForm.get(['product', 'customFields', name]);\r\n    }\r\n\r\n    assetsChanged(): boolean {\r\n        return !!Object.values(this.assetChanges).length;\r\n    }\r\n\r\n    variantAssetsChanged(): boolean {\r\n        return !!Object.keys(this.variantAssetChanges).length;\r\n    }\r\n\r\n    variantAssetChange(event: VariantAssetChange) {\r\n        this.variantAssetChanges[event.variantId] = event;\r\n    }\r\n\r\n    /**\r\n     * If creating a new product, automatically generate the slug based on the product name.\r\n     */\r\n    updateSlug(nameValue: string) {\r\n        combineLatest(this.entity$, this.languageCode$)\r\n            .pipe(take(1))\r\n            .subscribe(([entity, languageCode]) => {\r\n                const slugControl = this.detailForm.get(['product', 'slug']);\r\n                const currentTranslation = findTranslation(entity, languageCode);\r\n                const currentSlugIsEmpty = !currentTranslation || !currentTranslation.slug;\r\n                if (slugControl && slugControl.pristine && currentSlugIsEmpty) {\r\n                    slugControl.setValue(normalizeString(`${nameValue}`, '-'));\r\n                }\r\n            });\r\n    }\r\n\r\n    selectProductFacetValue() {\r\n        this.displayFacetValueModal().subscribe(facetValueIds => {\r\n            if (facetValueIds) {\r\n                const productGroup = this.getProductFormGroup();\r\n                const currentFacetValueIds = productGroup.value.facetValueIds;\r\n                productGroup.patchValue({\r\n                    facetValueIds: unique([...currentFacetValueIds, ...facetValueIds]),\r\n                });\r\n                productGroup.markAsDirty();\r\n            }\r\n        });\r\n    }\r\n\r\n    updateProductOption(input: UpdateProductOptionInput & { autoUpdate: boolean }) {\r\n        combineLatest(this.product$, this.languageCode$)\r\n            .pipe(\r\n                take(1),\r\n                mergeMap(([product, languageCode]) =>\r\n                    this.productDetailService.updateProductOption(input, product, languageCode),\r\n                ),\r\n            )\r\n            .subscribe(\r\n                () => {\r\n                    this.notificationService.success(_('common.notify-update-success'), {\r\n                        entity: 'ProductOption',\r\n                    });\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-update-error'), {\r\n                        entity: 'ProductOption',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    removeProductFacetValue(facetValueId: string) {\r\n        const productGroup = this.getProductFormGroup();\r\n        const currentFacetValueIds = productGroup.value.facetValueIds;\r\n        productGroup.patchValue({\r\n            facetValueIds: currentFacetValueIds.filter(id => id !== facetValueId),\r\n        });\r\n        productGroup.markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Opens a dialog to select FacetValues to apply to the select ProductVariants.\r\n     */\r\n    selectVariantFacetValue(selectedVariantIds: string[]) {\r\n        this.displayFacetValueModal()\r\n            .pipe(withLatestFrom(this.variants$))\r\n            .subscribe(([facetValueIds, variants]) => {\r\n                if (facetValueIds) {\r\n                    for (const variantId of selectedVariantIds) {\r\n                        const index = variants.findIndex(v => v.id === variantId);\r\n                        const variant = variants[index];\r\n                        const existingFacetValueIds = variant ? variant.facetValues.map(fv => fv.id) : [];\r\n                        const variantFormGroup = this.detailForm.get(['variants', index]);\r\n                        if (variantFormGroup) {\r\n                            variantFormGroup.patchValue({\r\n                                facetValueIds: unique([...existingFacetValueIds, ...facetValueIds]),\r\n                            });\r\n                            variantFormGroup.markAsDirty();\r\n                        }\r\n                    }\r\n                    this.changeDetector.markForCheck();\r\n                }\r\n            });\r\n    }\r\n\r\n    variantsToCreateAreValid(): boolean {\r\n        return (\r\n            0 < this.createVariantsConfig.variants.length &&\r\n            this.createVariantsConfig.variants.every(v => {\r\n                return v.sku !== '';\r\n            })\r\n        );\r\n    }\r\n\r\n    private displayFacetValueModal(): Observable<string[] | undefined> {\r\n        return this.productDetailService.getFacets().pipe(\r\n            mergeMap(facets =>\r\n                this.modalService.fromComponent(ApplyFacetDialogComponent, {\r\n                    size: 'md',\r\n                    closable: true,\r\n                    locals: { facets },\r\n                }),\r\n            ),\r\n            map(facetValues => facetValues && facetValues.map(v => v.id)),\r\n        );\r\n    }\r\n\r\n    create() {\r\n        const productGroup = this.getProductFormGroup();\r\n        if (!productGroup.dirty) {\r\n            return;\r\n        }\r\n        combineLatest(this.product$, this.languageCode$)\r\n            .pipe(\r\n                take(1),\r\n                mergeMap(([product, languageCode]) => {\r\n                    const newProduct = this.getUpdatedProduct(\r\n                        product,\r\n                        productGroup as FormGroup,\r\n                        languageCode,\r\n                    ) as CreateProductInput;\r\n                    return this.productDetailService.createProductWithVariants(\r\n                        newProduct,\r\n                        this.createVariantsConfig,\r\n                        languageCode,\r\n                    );\r\n                }),\r\n            )\r\n            .subscribe(\r\n                ({ createProductVariants, productId }) => {\r\n                    this.notificationService.success(_('common.notify-create-success'), {\r\n                        entity: 'Product',\r\n                    });\r\n                    this.assetChanges = {};\r\n                    this.variantAssetChanges = {};\r\n                    this.detailForm.markAsPristine();\r\n                    this.router.navigate(['../', productId], { relativeTo: this.route });\r\n                },\r\n                err => {\r\n                    // tslint:disable-next-line:no-console\r\n                    console.error(err);\r\n                    this.notificationService.error(_('common.notify-create-error'), {\r\n                        entity: 'Product',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    save() {\r\n        combineLatest(this.product$, this.languageCode$, this.channelPriceIncludesTax$)\r\n            .pipe(\r\n                take(1),\r\n                mergeMap(([product, languageCode, priceIncludesTax]) => {\r\n                    const productGroup = this.getProductFormGroup();\r\n                    let productInput: UpdateProductInput | undefined;\r\n                    let variantsInput: UpdateProductVariantInput[] | undefined;\r\n\r\n                    if (productGroup.dirty || this.assetsChanged()) {\r\n                        productInput = this.getUpdatedProduct(\r\n                            product,\r\n                            productGroup as FormGroup,\r\n                            languageCode,\r\n                        ) as UpdateProductInput;\r\n                    }\r\n                    const variantsArray = this.detailForm.get('variants');\r\n                    if ((variantsArray && variantsArray.dirty) || this.variantAssetsChanged()) {\r\n                        variantsInput = this.getUpdatedProductVariants(\r\n                            product,\r\n                            variantsArray as FormArray,\r\n                            languageCode,\r\n                            priceIncludesTax,\r\n                        );\r\n                    }\r\n\r\n                    return this.productDetailService.updateProduct({\r\n                        product,\r\n                        languageCode,\r\n                        autoUpdate:\r\n                            this.detailForm.get(['product', 'autoUpdateVariantNames'])?.value ?? false,\r\n                        productInput,\r\n                        variantsInput,\r\n                    });\r\n                }),\r\n            )\r\n            .subscribe(\r\n                result => {\r\n                    this.updateSlugAfterSave(result);\r\n                    this.detailForm.markAsPristine();\r\n                    this.assetChanges = {};\r\n                    this.variantAssetChanges = {};\r\n                    this.notificationService.success(_('common.notify-update-success'), {\r\n                        entity: 'Product',\r\n                    });\r\n                    this.changeDetector.markForCheck();\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-update-error'), {\r\n                        entity: 'Product',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    canDeactivate(): boolean {\r\n        return super.canDeactivate() && !this.assetChanges.assets && !this.assetChanges.featuredAsset;\r\n    }\r\n\r\n    /**\r\n     * Sets the values of the form on changes to the product or current language.\r\n     */\r\n    protected setFormValues(product: ProductWithVariants.Fragment, languageCode: LanguageCode) {\r\n        const currentTranslation = findTranslation(product, languageCode);\r\n        this.detailForm.patchValue({\r\n            product: {\r\n                enabled: product.enabled,\r\n                name: currentTranslation ? currentTranslation.name : '',\r\n                slug: currentTranslation ? currentTranslation.slug : '',\r\n                description: currentTranslation ? currentTranslation.description : '',\r\n                facetValueIds: product.facetValues.map(fv => fv.id),\r\n            },\r\n        });\r\n\r\n        if (this.customFields.length) {\r\n            const customFieldsGroup = this.detailForm.get(['product', 'customFields']) as FormGroup;\r\n            const cfCurrentTranslation =\r\n                (currentTranslation && (currentTranslation as any).customFields) || {};\r\n            const cfProduct = (product as any).customFields || {};\r\n\r\n            for (const fieldDef of this.customFields) {\r\n                const key = fieldDef.name;\r\n                const value = fieldDef.type === 'localeString' ? cfCurrentTranslation[key] : cfProduct[key];\r\n                const control = customFieldsGroup.get(key);\r\n                if (control) {\r\n                    control.patchValue(value);\r\n                }\r\n            }\r\n        }\r\n\r\n        const variantsFormArray = this.detailForm.get('variants') as FormArray;\r\n        product.variants.forEach((variant, i) => {\r\n            const variantTranslation = findTranslation(variant, languageCode);\r\n            const facetValueIds = variant.facetValues.map(fv => fv.id);\r\n            const group: VariantFormValue = {\r\n                id: variant.id,\r\n                enabled: variant.enabled,\r\n                sku: variant.sku,\r\n                name: variantTranslation ? variantTranslation.name : '',\r\n                price: variant.price,\r\n                priceWithTax: variant.priceWithTax,\r\n                taxCategoryId: variant.taxCategory.id,\r\n                stockOnHand: variant.stockOnHand,\r\n                useGlobalOutOfStockThreshold: variant.useGlobalOutOfStockThreshold,\r\n                outOfStockThreshold: variant.outOfStockThreshold,\r\n                trackInventory: variant.trackInventory,\r\n                facetValueIds,\r\n            };\r\n\r\n            let variantFormGroup = variantsFormArray.at(i) as FormGroup | undefined;\r\n            if (variantFormGroup) {\r\n                variantFormGroup.patchValue(group);\r\n            } else {\r\n                variantFormGroup = this.formBuilder.group({\r\n                    ...group,\r\n                    facetValueIds: this.formBuilder.control(facetValueIds),\r\n                });\r\n                variantsFormArray.insert(i, variantFormGroup);\r\n            }\r\n            if (this.customVariantFields.length) {\r\n                let customFieldsGroup = variantFormGroup.get(['customFields']) as FormGroup | undefined;\r\n\r\n                if (!customFieldsGroup) {\r\n                    customFieldsGroup = this.formBuilder.group(\r\n                        this.customVariantFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\r\n                    );\r\n                    variantFormGroup.addControl('customFields', customFieldsGroup);\r\n                }\r\n\r\n                for (const fieldDef of this.customVariantFields) {\r\n                    const key = fieldDef.name;\r\n                    const value =\r\n                        fieldDef.type === 'localeString'\r\n                            ? (variantTranslation as any).customFields[key]\r\n                            : (variant as any).customFields[key];\r\n                    const control = customFieldsGroup.get(key);\r\n                    if (control) {\r\n                        control.patchValue(value);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Given a product and the value of the detailForm, this method creates an updated copy of the product which\r\n     * can then be persisted to the API.\r\n     */\r\n    private getUpdatedProduct(\r\n        product: ProductWithVariants.Fragment,\r\n        productFormGroup: FormGroup,\r\n        languageCode: LanguageCode,\r\n    ): UpdateProductInput | CreateProductInput {\r\n        const updatedProduct = createUpdatedTranslatable({\r\n            translatable: product,\r\n            updatedFields: productFormGroup.value,\r\n            customFieldConfig: this.customFields,\r\n            languageCode,\r\n            defaultTranslation: {\r\n                languageCode,\r\n                name: product.name || '',\r\n                slug: product.slug || '',\r\n                description: product.description || '',\r\n            },\r\n        });\r\n        return {\r\n            ...updatedProduct,\r\n            assetIds: this.assetChanges.assets?.map(a => a.id),\r\n            featuredAssetId: this.assetChanges.featuredAsset?.id,\r\n            facetValueIds: productFormGroup.value.facetValueIds,\r\n        } as UpdateProductInput | CreateProductInput;\r\n    }\r\n\r\n    /**\r\n     * Given an array of product variants and the values from the detailForm, this method creates an new array\r\n     * which can be persisted to the API.\r\n     */\r\n    private getUpdatedProductVariants(\r\n        product: ProductWithVariants.Fragment,\r\n        variantsFormArray: FormArray,\r\n        languageCode: LanguageCode,\r\n        priceIncludesTax: boolean,\r\n    ): UpdateProductVariantInput[] {\r\n        const dirtyVariants = product.variants.filter((v, i) => {\r\n            const formRow = variantsFormArray.get(i.toString());\r\n            return formRow && formRow.dirty;\r\n        });\r\n        const dirtyVariantValues = variantsFormArray.controls.filter(c => c.dirty).map(c => c.value);\r\n\r\n        if (dirtyVariants.length !== dirtyVariantValues.length) {\r\n            throw new Error(_(`error.product-variant-form-values-do-not-match`));\r\n        }\r\n        return dirtyVariants\r\n            .map((variant, i) => {\r\n                const formValue: VariantFormValue = dirtyVariantValues[i];\r\n                const result: UpdateProductVariantInput = createUpdatedTranslatable({\r\n                    translatable: variant,\r\n                    updatedFields: formValue,\r\n                    customFieldConfig: this.customVariantFields,\r\n                    languageCode,\r\n                    defaultTranslation: {\r\n                        languageCode,\r\n                        name: '',\r\n                    },\r\n                });\r\n                result.taxCategoryId = formValue.taxCategoryId;\r\n                result.facetValueIds = formValue.facetValueIds;\r\n                result.price = priceIncludesTax ? formValue.priceWithTax : formValue.price;\r\n                const assetChanges = this.variantAssetChanges[variant.id];\r\n                if (assetChanges) {\r\n                    result.featuredAssetId = assetChanges.featuredAsset?.id;\r\n                    result.assetIds = assetChanges.assets?.map(a => a.id);\r\n                }\r\n                return result;\r\n            })\r\n            .filter(notNullOrUndefined);\r\n    }\r\n\r\n    private getProductFormGroup(): FormGroup {\r\n        return this.detailForm.get('product') as FormGroup;\r\n    }\r\n\r\n    /**\r\n     * The server may alter the slug value in order to normalize and ensure uniqueness upon saving.\r\n     */\r\n    private updateSlugAfterSave(results: Array<UpdateProductMutation | UpdateProductVariantsMutation>) {\r\n        const firstResult = results[0];\r\n        const slugControl = this.detailForm.get(['product', 'slug']);\r\n\r\n        function isUpdateMutation(input: any): input is UpdateProductMutation {\r\n            return input.hasOwnProperty('updateProduct');\r\n        }\r\n\r\n        if (slugControl && isUpdateMutation(firstResult)) {\r\n            slugControl.setValue(firstResult.updateProduct.slug, { emitEvent: false });\r\n        }\r\n    }\r\n}\r\n","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    BaseListComponent,\r\n    DataService,\r\n    JobQueueService,\r\n    JobState,\r\n    LanguageCode,\r\n    LogicalOperator,\r\n    ModalService,\r\n    NotificationService,\r\n    SearchInput,\r\n    SearchProducts,\r\n    ServerConfigService,\r\n} from '@vendure/admin-ui/core';\r\nimport { EMPTY, Observable, of } from 'rxjs';\r\nimport {\r\n    delay,\r\n    distinctUntilChanged,\r\n    map,\r\n    shareReplay,\r\n    switchMap,\r\n    take,\r\n    takeUntil,\r\n    tap,\r\n    withLatestFrom,\r\n} from 'rxjs/operators';\r\n\r\nimport { ProductSearchInputComponent } from '../product-search-input/product-search-input.component';\r\n\r\n@Component({\r\n    selector: 'vdr-products-list',\r\n    templateUrl: './product-list.component.html',\r\n    styleUrls: ['./product-list.component.scss'],\r\n})\r\nexport class ProductListComponent\r\n    extends BaseListComponent<SearchProducts.Query, SearchProducts.Items, SearchProducts.Variables>\r\n    implements OnInit {\r\n    searchTerm = '';\r\n    facetValueIds: string[] = [];\r\n    groupByProduct = true;\r\n    facetValues$: Observable<SearchProducts.FacetValues[]>;\r\n    availableLanguages$: Observable<LanguageCode[]>;\r\n    contentLanguage$: Observable<LanguageCode>;\r\n    @ViewChild('productSearchInputComponent', { static: true })\r\n    private productSearchInput: ProductSearchInputComponent;\r\n    constructor(\r\n        private dataService: DataService,\r\n        private modalService: ModalService,\r\n        private notificationService: NotificationService,\r\n        private jobQueueService: JobQueueService,\r\n        private serverConfigService: ServerConfigService,\r\n        router: Router,\r\n        route: ActivatedRoute,\r\n    ) {\r\n        super(router, route);\r\n        super.setQueryFn(\r\n            (...args: any[]) =>\r\n                this.dataService.product.searchProducts(this.searchTerm, ...args).refetchOnChannelChange(),\r\n            data => data.search,\r\n            // tslint:disable-next-line:no-shadowed-variable\r\n            (skip, take) => ({\r\n                input: {\r\n                    skip,\r\n                    take,\r\n                    term: this.searchTerm,\r\n                    facetValueIds: this.facetValueIds,\r\n                    facetValueOperator: LogicalOperator.AND,\r\n                    groupByProduct: this.groupByProduct,\r\n                } as SearchInput,\r\n            }),\r\n        );\r\n    }\r\n\r\n    ngOnInit() {\r\n        super.ngOnInit();\r\n        this.facetValues$ = this.result$.pipe(map(data => data.search.facetValues));\r\n        // this.facetValues$ = of([]);\r\n        this.route.queryParamMap\r\n            .pipe(\r\n                map(qpm => qpm.get('q')),\r\n                takeUntil(this.destroy$),\r\n            )\r\n            .subscribe(term => {\r\n                this.productSearchInput.setSearchTerm(term);\r\n            });\r\n\r\n        const fvids$ = this.route.queryParamMap.pipe(map(qpm => qpm.getAll('fvids')));\r\n\r\n        fvids$.pipe(takeUntil(this.destroy$)).subscribe(ids => {\r\n            this.productSearchInput.setFacetValues(ids);\r\n        });\r\n\r\n        this.facetValues$.pipe(take(1), delay(100), withLatestFrom(fvids$)).subscribe(([__, ids]) => {\r\n            this.productSearchInput.setFacetValues(ids);\r\n        });\r\n        this.availableLanguages$ = this.serverConfigService.getAvailableLanguages();\r\n        this.contentLanguage$ = this.dataService.client\r\n            .uiState()\r\n            .mapStream(({ uiState }) => uiState.contentLanguage)\r\n            .pipe(tap(() => this.refresh()));\r\n    }\r\n\r\n    setSearchTerm(term: string) {\r\n        this.searchTerm = term;\r\n        this.setQueryParam({ q: term || null, page: 1 });\r\n        this.refresh();\r\n    }\r\n\r\n    setFacetValueIds(ids: string[]) {\r\n        this.facetValueIds = ids;\r\n        this.setQueryParam({ fvids: ids, page: 1 });\r\n        this.refresh();\r\n    }\r\n\r\n    rebuildSearchIndex() {\r\n        this.dataService.product.reindex().subscribe(({ reindex }) => {\r\n            this.notificationService.info(_('catalog.reindexing'));\r\n            this.jobQueueService.addJob(reindex.id, job => {\r\n                if (job.state === JobState.COMPLETED) {\r\n                    const time = new Intl.NumberFormat().format(job.duration || 0);\r\n                    this.notificationService.success(_('catalog.reindex-successful'), {\r\n                        count: job.result.indexedItemCount,\r\n                        time,\r\n                    });\r\n                    this.refresh();\r\n                } else {\r\n                    this.notificationService.error(_('catalog.reindex-error'));\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    deleteProduct(productId: string) {\r\n        this.modalService\r\n            .dialog({\r\n                title: _('catalog.confirm-delete-product'),\r\n                buttons: [\r\n                    { type: 'secondary', label: _('common.cancel') },\r\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\r\n                ],\r\n            })\r\n            .pipe(\r\n                switchMap(response => (response ? this.dataService.product.deleteProduct(productId) : EMPTY)),\r\n                // Short delay to allow the product to be removed from the search index before\r\n                // refreshing.\r\n                delay(500),\r\n            )\r\n            .subscribe(\r\n                () => {\r\n                    this.notificationService.success(_('common.notify-delete-success'), {\r\n                        entity: 'Product',\r\n                    });\r\n                    this.refresh();\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-delete-error'), {\r\n                        entity: 'Product',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    setLanguage(code: LanguageCode) {\r\n        this.dataService.client.setContentLanguage(code).subscribe();\r\n    }\r\n}\r\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { Dialog, GetProductVariantOptions } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-confirm-variant-deletion-dialog',\r\n    templateUrl: './confirm-variant-deletion-dialog.component.html',\r\n    styleUrls: ['./confirm-variant-deletion-dialog.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ConfirmVariantDeletionDialogComponent implements Dialog<boolean> {\r\n    resolveWith: (result?: boolean) => void;\r\n    variants: GetProductVariantOptions.Variants[] = [];\r\n\r\n    confirm() {\r\n        this.resolveWith(true);\r\n    }\r\n\r\n    cancel() {\r\n        this.resolveWith();\r\n    }\r\n}\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    CreateProductOptionGroup,\r\n    CreateProductOptionInput,\r\n    CurrencyCode,\r\n    DataService,\r\n    DeactivateAware,\r\n    getDefaultUiLanguage,\r\n    GetProductVariantOptions,\r\n    LanguageCode,\r\n    ModalService,\r\n    NotificationService,\r\n    ProductOptionGroupWithOptionsFragment,\r\n} from '@vendure/admin-ui/core';\r\nimport { normalizeString } from '@vendure/common/lib/normalize-string';\r\nimport { pick } from '@vendure/common/lib/pick';\r\nimport { generateAllCombinations, notNullOrUndefined } from '@vendure/common/lib/shared-utils';\r\nimport { unique } from '@vendure/common/lib/unique';\r\nimport { EMPTY, forkJoin, Observable, of } from 'rxjs';\r\nimport { filter, map, mergeMap, switchMap } from 'rxjs/operators';\r\n\r\nimport { ProductDetailService } from '../../providers/product-detail/product-detail.service';\r\nimport { ConfirmVariantDeletionDialogComponent } from '../confirm-variant-deletion-dialog/confirm-variant-deletion-dialog.component';\r\n\r\nexport class GeneratedVariant {\r\n    isDefault: boolean;\r\n    options: Array<{ name: string; id?: string }>;\r\n    productVariantId?: string;\r\n    enabled: boolean;\r\n    existing: boolean;\r\n    sku: string;\r\n    price: number;\r\n    stock: number;\r\n\r\n    constructor(config: Partial<GeneratedVariant>) {\r\n        for (const key of Object.keys(config)) {\r\n            this[key] = config[key];\r\n        }\r\n    }\r\n}\r\n\r\n@Component({\r\n    selector: 'vdr-product-variants-editor',\r\n    templateUrl: './product-variants-editor.component.html',\r\n    styleUrls: ['./product-variants-editor.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.Default,\r\n})\r\nexport class ProductVariantsEditorComponent implements OnInit, DeactivateAware {\r\n    formValueChanged = false;\r\n    generatedVariants: GeneratedVariant[] = [];\r\n    optionGroups: Array<{\r\n        id?: string;\r\n        isNew: boolean;\r\n        name: string;\r\n        values: Array<{\r\n            id?: string;\r\n            name: string;\r\n            locked: boolean;\r\n        }>;\r\n    }>;\r\n    product: GetProductVariantOptions.Product;\r\n    currencyCode: CurrencyCode;\r\n    private languageCode: LanguageCode;\r\n\r\n    constructor(\r\n        private route: ActivatedRoute,\r\n        private dataService: DataService,\r\n        private productDetailService: ProductDetailService,\r\n        private notificationService: NotificationService,\r\n        private modalService: ModalService,\r\n    ) {}\r\n\r\n    ngOnInit() {\r\n        this.initOptionsAndVariants();\r\n        this.languageCode =\r\n            (this.route.snapshot.paramMap.get('lang') as LanguageCode) || getDefaultUiLanguage();\r\n        this.dataService.settings.getActiveChannel().single$.subscribe(data => {\r\n            this.currencyCode = data.activeChannel.currencyCode;\r\n        });\r\n    }\r\n\r\n    onFormChanged(variantInfo: GeneratedVariant) {\r\n        this.formValueChanged = true;\r\n        variantInfo.enabled = true;\r\n    }\r\n\r\n    canDeactivate(): boolean {\r\n        return !this.formValueChanged;\r\n    }\r\n\r\n    getVariantsToAdd() {\r\n        return this.generatedVariants.filter(v => !v.existing && v.enabled);\r\n    }\r\n\r\n    getVariantName(variant: GeneratedVariant) {\r\n        return variant.options.length === 0\r\n            ? _('catalog.default-variant')\r\n            : variant.options.map(o => o.name).join(' ');\r\n    }\r\n\r\n    addOption() {\r\n        this.optionGroups.push({\r\n            isNew: true,\r\n            name: '',\r\n            values: [],\r\n        });\r\n    }\r\n\r\n    generateVariants() {\r\n        const groups = this.optionGroups.map(g => g.values);\r\n        const previousVariants = this.generatedVariants;\r\n        const generatedVariantFactory = (\r\n            isDefault: boolean,\r\n            options: GeneratedVariant['options'],\r\n            existingVariant?: GetProductVariantOptions.Variants,\r\n            prototypeVariant?: GetProductVariantOptions.Variants,\r\n        ): GeneratedVariant => {\r\n            const prototype = this.getVariantPrototype(options, previousVariants);\r\n            return new GeneratedVariant({\r\n                enabled: true,\r\n                existing: !!existingVariant,\r\n                productVariantId: existingVariant?.id,\r\n                isDefault,\r\n                options,\r\n                price: existingVariant?.price ?? prototypeVariant?.price ?? prototype.price,\r\n                sku: existingVariant?.sku ?? prototypeVariant?.sku ?? prototype.sku,\r\n                stock: existingVariant?.stockOnHand ?? prototypeVariant?.stockOnHand ?? prototype.stock,\r\n            });\r\n        };\r\n        this.generatedVariants = groups.length\r\n            ? generateAllCombinations(groups).map(options => {\r\n                  const existingVariant = this.product.variants.find(v =>\r\n                      this.optionsAreEqual(v.options, options),\r\n                  );\r\n                  const prototypeVariant = this.product.variants.find(v =>\r\n                      this.optionsAreSubset(v.options, options),\r\n                  );\r\n                  return generatedVariantFactory(false, options, existingVariant, prototypeVariant);\r\n              })\r\n            : [generatedVariantFactory(true, [], this.product.variants[0])];\r\n    }\r\n\r\n    /**\r\n     * Returns one of the existing variants to base the newly-generated variant's\r\n     * details off.\r\n     */\r\n    private getVariantPrototype(\r\n        options: GeneratedVariant['options'],\r\n        previousVariants: GeneratedVariant[],\r\n    ): Pick<GeneratedVariant, 'sku' | 'price' | 'stock'> {\r\n        const variantsWithSimilarOptions = previousVariants.filter(v =>\r\n            options.map(o => o.name).filter(name => v.options.map(o => o.name).includes(name)),\r\n        );\r\n        if (variantsWithSimilarOptions.length) {\r\n            return pick(previousVariants[0], ['sku', 'price', 'stock']);\r\n        }\r\n        return {\r\n            sku: '',\r\n            price: 0,\r\n            stock: 0,\r\n        };\r\n    }\r\n\r\n    deleteVariant(id: string) {\r\n        this.modalService\r\n            .dialog({\r\n                title: _('catalog.confirm-delete-product-variant'),\r\n                buttons: [\r\n                    { type: 'secondary', label: _('common.cancel') },\r\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\r\n                ],\r\n            })\r\n            .pipe(\r\n                switchMap(response =>\r\n                    response ? this.productDetailService.deleteProductVariant(id, this.product.id) : EMPTY,\r\n                ),\r\n                switchMap(() => this.reFetchProduct(null)),\r\n            )\r\n            .subscribe(\r\n                () => {\r\n                    this.notificationService.success(_('common.notify-delete-success'), {\r\n                        entity: 'ProductVariant',\r\n                    });\r\n                    this.initOptionsAndVariants();\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-delete-error'), {\r\n                        entity: 'ProductVariant',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    save() {\r\n        const newOptionGroups = this.optionGroups\r\n            .filter(og => og.isNew)\r\n            .map(og => ({\r\n                name: og.name,\r\n                values: [],\r\n            }));\r\n\r\n        this.checkUniqueSkus()\r\n            .pipe(\r\n                mergeMap(() => this.confirmDeletionOfObsoleteVariants()),\r\n                mergeMap(() =>\r\n                    this.productDetailService.createProductOptionGroups(newOptionGroups, this.languageCode),\r\n                ),\r\n                mergeMap(createdOptionGroups => this.addOptionGroupsToProduct(createdOptionGroups)),\r\n                mergeMap(createdOptionGroups => this.addNewOptionsToGroups(createdOptionGroups)),\r\n                mergeMap(groupsIds => this.fetchOptionGroups(groupsIds)),\r\n                mergeMap(groups => this.createNewProductVariants(groups)),\r\n                mergeMap(res => this.deleteObsoleteVariants(res.createProductVariants)),\r\n                mergeMap(variants => this.reFetchProduct(variants)),\r\n            )\r\n            .subscribe({\r\n                next: variants => {\r\n                    this.formValueChanged = false;\r\n                    this.notificationService.success(_('catalog.created-new-variants-success'), {\r\n                        count: variants.length,\r\n                    });\r\n                    this.initOptionsAndVariants();\r\n                },\r\n            });\r\n    }\r\n\r\n    private checkUniqueSkus() {\r\n        const withDuplicateSkus = this.generatedVariants.filter((variant, index) => {\r\n            return this.generatedVariants.find(gv => gv.sku.trim() === variant.sku.trim() && gv !== variant);\r\n        });\r\n        if (withDuplicateSkus.length) {\r\n            return this.modalService\r\n                .dialog({\r\n                    title: _('catalog.duplicate-sku-warning'),\r\n                    body: unique(withDuplicateSkus.map(v => `${v.sku}`)).join(', '),\r\n                    buttons: [{ label: _('common.close'), returnValue: false, type: 'primary' }],\r\n                })\r\n                .pipe(mergeMap(res => EMPTY));\r\n        } else {\r\n            return of(true);\r\n        }\r\n    }\r\n\r\n    private confirmDeletionOfObsoleteVariants(): Observable<boolean> {\r\n        const obsoleteVariants = this.getObsoleteVariants();\r\n        if (obsoleteVariants.length) {\r\n            return this.modalService\r\n                .fromComponent(ConfirmVariantDeletionDialogComponent, {\r\n                    locals: {\r\n                        variants: obsoleteVariants,\r\n                    },\r\n                })\r\n                .pipe(\r\n                    mergeMap(res => {\r\n                        return res === true ? of(true) : EMPTY;\r\n                    }),\r\n                );\r\n        } else {\r\n            return of(true);\r\n        }\r\n    }\r\n\r\n    private getObsoleteVariants() {\r\n        return this.product.variants.filter(\r\n            variant => !this.generatedVariants.find(gv => gv.productVariantId === variant.id),\r\n        );\r\n    }\r\n\r\n    private hasOnlyDefaultVariant(product: GetProductVariantOptions.Product): boolean {\r\n        return product.variants.length === 1 && product.optionGroups.length === 0;\r\n    }\r\n\r\n    private addOptionGroupsToProduct(\r\n        createdOptionGroups: CreateProductOptionGroup.CreateProductOptionGroup[],\r\n    ): Observable<CreateProductOptionGroup.CreateProductOptionGroup[]> {\r\n        if (createdOptionGroups.length) {\r\n            return forkJoin(\r\n                createdOptionGroups.map(optionGroup => {\r\n                    return this.dataService.product.addOptionGroupToProduct({\r\n                        productId: this.product.id,\r\n                        optionGroupId: optionGroup.id,\r\n                    });\r\n                }),\r\n            ).pipe(map(() => createdOptionGroups));\r\n        } else {\r\n            return of([]);\r\n        }\r\n    }\r\n\r\n    private addNewOptionsToGroups(\r\n        createdOptionGroups: CreateProductOptionGroup.CreateProductOptionGroup[],\r\n    ): Observable<string[]> {\r\n        const newOptions: CreateProductOptionInput[] = this.optionGroups\r\n            .map(og => {\r\n                const createdGroup = createdOptionGroups.find(cog => cog.name === og.name);\r\n                const productOptionGroupId = createdGroup ? createdGroup.id : og.id;\r\n                if (!productOptionGroupId) {\r\n                    throw new Error('Could not get a productOptionGroupId');\r\n                }\r\n                return og.values\r\n                    .filter(v => !v.locked)\r\n                    .map(v => ({\r\n                        productOptionGroupId,\r\n                        code: normalizeString(v.name, '-'),\r\n                        translations: [{ name: v.name, languageCode: this.languageCode }],\r\n                    }));\r\n            })\r\n            .reduce((flat, options) => [...flat, ...options], []);\r\n\r\n        const allGroupIds = [\r\n            ...createdOptionGroups.map(g => g.id),\r\n            ...this.optionGroups.map(g => g.id).filter(notNullOrUndefined),\r\n        ];\r\n\r\n        if (newOptions.length) {\r\n            return forkJoin(newOptions.map(input => this.dataService.product.addOptionToGroup(input))).pipe(\r\n                map(() => allGroupIds),\r\n            );\r\n        } else {\r\n            return of(allGroupIds);\r\n        }\r\n    }\r\n\r\n    private fetchOptionGroups(groupsIds: string[]): Observable<ProductOptionGroupWithOptionsFragment[]> {\r\n        return forkJoin(\r\n            groupsIds.map(id =>\r\n                this.dataService.product\r\n                    .getProductOptionGroup(id)\r\n                    .mapSingle(data => data.productOptionGroup)\r\n                    .pipe(filter(notNullOrUndefined)),\r\n            ),\r\n        );\r\n    }\r\n\r\n    private createNewProductVariants(groups: ProductOptionGroupWithOptionsFragment[]) {\r\n        const options = groups\r\n            .filter(notNullOrUndefined)\r\n            .map(og => og.options)\r\n            .reduce((flat, o) => [...flat, ...o], []);\r\n        const variants = this.generatedVariants\r\n            .filter(v => v.enabled && !v.existing)\r\n            .map(v => ({\r\n                price: v.price,\r\n                sku: v.sku,\r\n                stock: v.stock,\r\n                optionIds: v.options\r\n                    .map(name => options.find(o => o.name === name.name))\r\n                    .filter(notNullOrUndefined)\r\n                    .map(o => o.id),\r\n            }));\r\n        return this.productDetailService.createProductVariants(\r\n            this.product,\r\n            variants,\r\n            options,\r\n            this.languageCode,\r\n        );\r\n    }\r\n\r\n    private deleteObsoleteVariants<T>(input: T): Observable<T> {\r\n        const obsoleteVariants = this.getObsoleteVariants();\r\n        if (obsoleteVariants.length) {\r\n            const deleteOperations = obsoleteVariants.map(v =>\r\n                this.dataService.product.deleteProductVariant(v.id).pipe(map(() => input)),\r\n            );\r\n            return forkJoin(...deleteOperations);\r\n        } else {\r\n            return of(input);\r\n        }\r\n    }\r\n\r\n    private reFetchProduct<T>(input: T): Observable<T> {\r\n        // Re-fetch the Product to force an update to the view.\r\n        const id = this.route.snapshot.paramMap.get('id');\r\n        if (id) {\r\n            return this.dataService.product.getProduct(id).single$.pipe(map(() => input));\r\n        } else {\r\n            return of(input);\r\n        }\r\n    }\r\n\r\n    initOptionsAndVariants() {\r\n        this.dataService.product\r\n            // tslint:disable-next-line:no-non-null-assertion\r\n            .getProductVariantsOptions(this.route.snapshot.paramMap.get('id')!)\r\n            // tslint:disable-next-line:no-non-null-assertion\r\n            .mapSingle(({ product }) => product!)\r\n            .subscribe(p => {\r\n                this.product = p;\r\n                this.optionGroups = p.optionGroups.map(og => {\r\n                    return {\r\n                        id: og.id,\r\n                        isNew: false,\r\n                        name: og.name,\r\n                        values: og.options.map(o => ({\r\n                            id: o.id,\r\n                            name: o.name,\r\n                            locked: true,\r\n                        })),\r\n                    };\r\n                });\r\n                this.generateVariants();\r\n            });\r\n    }\r\n\r\n    private optionsAreEqual(a: Array<{ name: string }>, b: Array<{ name: string }>): boolean {\r\n        return this.toOptionString(a) === this.toOptionString(b);\r\n    }\r\n\r\n    private optionsAreSubset(a: Array<{ name: string }>, b: Array<{ name: string }>): boolean {\r\n        return this.toOptionString(b).includes(this.toOptionString(a));\r\n    }\r\n\r\n    private toOptionString(o: Array<{ name: string }>): string {\r\n        return o\r\n            .map(x => x.name)\r\n            .sort()\r\n            .join('|');\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Asset, AssetType, BaseEntityResolver } from '@vendure/admin-ui/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class AssetResolver extends BaseEntityResolver<Asset.Fragment> {\r\n    constructor(router: Router, dataService: DataService) {\r\n        super(\r\n            router,\r\n            {\r\n                __typename: 'Asset' as const,\r\n                id: '',\r\n                createdAt: '',\r\n                updatedAt: '',\r\n                name: '',\r\n                type: AssetType.IMAGE,\r\n                fileSize: 0,\r\n                mimeType: '',\r\n                width: 0,\r\n                height: 0,\r\n                source: '',\r\n                preview: '',\r\n                focalPoint: null,\r\n            },\r\n            id => dataService.product.getAsset(id).mapStream(data => data.asset),\r\n        );\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { BaseEntityResolver } from '@vendure/admin-ui/core';\r\nimport { Collection, ProductWithVariants } from '@vendure/admin-ui/core';\r\nimport { getDefaultUiLanguage } from '@vendure/admin-ui/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class CollectionResolver extends BaseEntityResolver<Collection.Fragment> {\r\n    constructor(router: Router, dataService: DataService) {\r\n        super(\r\n            router,\r\n            {\r\n                __typename: 'Collection' as 'Collection',\r\n                id: '',\r\n                createdAt: '',\r\n                updatedAt: '',\r\n                languageCode: getDefaultUiLanguage(),\r\n                name: '',\r\n                slug: '',\r\n                isPrivate: false,\r\n                description: '',\r\n                featuredAsset: null,\r\n                assets: [],\r\n                translations: [],\r\n                filters: [],\r\n                parent: {} as any,\r\n                children: null,\r\n            },\r\n            id => dataService.collection.getCollection(id).mapStream(data => data.collection),\r\n        );\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { BaseEntityResolver } from '@vendure/admin-ui/core';\r\nimport { FacetWithValues } from '@vendure/admin-ui/core';\r\nimport { getDefaultUiLanguage } from '@vendure/admin-ui/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class FacetResolver extends BaseEntityResolver<FacetWithValues.Fragment> {\r\n    constructor(router: Router, dataService: DataService) {\r\n        super(\r\n            router,\r\n            {\r\n                __typename: 'Facet' as 'Facet',\r\n                id: '',\r\n                createdAt: '',\r\n                updatedAt: '',\r\n                isPrivate: false,\r\n                languageCode: getDefaultUiLanguage(),\r\n                name: '',\r\n                code: '',\r\n                translations: [],\r\n                values: [],\r\n            },\r\n            (id) => dataService.facet.getFacet(id).mapStream((data) => data.facet),\r\n        );\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { BaseEntityResolver } from '@vendure/admin-ui/core';\r\nimport { ProductWithVariants } from '@vendure/admin-ui/core';\r\nimport { getDefaultUiLanguage } from '@vendure/admin-ui/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class ProductResolver extends BaseEntityResolver<ProductWithVariants.Fragment> {\r\n    constructor(dataService: DataService, router: Router) {\r\n        super(\r\n            router,\r\n            {\r\n                __typename: 'Product' as 'Product',\r\n                id: '',\r\n                createdAt: '',\r\n                updatedAt: '',\r\n                enabled: true,\r\n                languageCode: getDefaultUiLanguage(),\r\n                name: '',\r\n                slug: '',\r\n                featuredAsset: null,\r\n                assets: [],\r\n                description: '',\r\n                translations: [],\r\n                optionGroups: [],\r\n                facetValues: [],\r\n                variants: [],\r\n                channels: [],\r\n            },\r\n            (id) =>\r\n                dataService.product\r\n                    .getProduct(id)\r\n                    .refetchOnChannelChange()\r\n                    .mapStream((data) => data.product),\r\n        );\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { BaseEntityResolver } from '@vendure/admin-ui/core';\r\nimport { GetProductVariantOptions } from '@vendure/admin-ui/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class ProductVariantsResolver extends BaseEntityResolver<GetProductVariantOptions.Product> {\r\n    constructor(router: Router, dataService: DataService) {\r\n        super(\r\n            router,\r\n            {\r\n                __typename: 'Product' as 'Product',\r\n                id: '',\r\n                createdAt: '',\r\n                updatedAt: '',\r\n                name: '',\r\n                optionGroups: [],\r\n                variants: [],\r\n            },\r\n            id => dataService.product.getProductVariantsOptions(id).mapStream(data => data.product),\r\n        );\r\n    }\r\n}\r\n","import { Route } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    Asset,\r\n    CanDeactivateDetailGuard,\r\n    Collection,\r\n    createResolveData,\r\n    detailBreadcrumb,\r\n    FacetWithValues,\r\n    ProductWithVariants,\r\n} from '@vendure/admin-ui/core';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { AssetDetailComponent } from './components/asset-detail/asset-detail.component';\r\nimport { AssetListComponent } from './components/asset-list/asset-list.component';\r\nimport { CollectionDetailComponent } from './components/collection-detail/collection-detail.component';\r\nimport { CollectionListComponent } from './components/collection-list/collection-list.component';\r\nimport { FacetDetailComponent } from './components/facet-detail/facet-detail.component';\r\nimport { FacetListComponent } from './components/facet-list/facet-list.component';\r\nimport { ProductDetailComponent } from './components/product-detail/product-detail.component';\r\nimport { ProductListComponent } from './components/product-list/product-list.component';\r\nimport { ProductVariantsEditorComponent } from './components/product-variants-editor/product-variants-editor.component';\r\nimport { AssetResolver } from './providers/routing/asset-resolver';\r\nimport { CollectionResolver } from './providers/routing/collection-resolver';\r\nimport { FacetResolver } from './providers/routing/facet-resolver';\r\nimport { ProductResolver } from './providers/routing/product-resolver';\r\nimport { ProductVariantsResolver } from './providers/routing/product-variants-resolver';\r\n\r\nexport const catalogRoutes: Route[] = [\r\n    {\r\n        path: 'products',\r\n        component: ProductListComponent,\r\n        data: {\r\n            breadcrumb: _('breadcrumb.products'),\r\n        },\r\n    },\r\n    {\r\n        path: 'products/:id',\r\n        component: ProductDetailComponent,\r\n        resolve: createResolveData(ProductResolver),\r\n        canDeactivate: [CanDeactivateDetailGuard],\r\n        data: {\r\n            breadcrumb: productBreadcrumb,\r\n        },\r\n    },\r\n    {\r\n        path: 'products/:id/manage-variants',\r\n        component: ProductVariantsEditorComponent,\r\n        resolve: createResolveData(ProductVariantsResolver),\r\n        canDeactivate: [CanDeactivateDetailGuard],\r\n        data: {\r\n            breadcrumb: productVariantEditorBreadcrumb,\r\n        },\r\n    },\r\n    {\r\n        path: 'facets',\r\n        component: FacetListComponent,\r\n        data: {\r\n            breadcrumb: _('breadcrumb.facets'),\r\n        },\r\n    },\r\n    {\r\n        path: 'facets/:id',\r\n        component: FacetDetailComponent,\r\n        resolve: createResolveData(FacetResolver),\r\n        canDeactivate: [CanDeactivateDetailGuard],\r\n        data: {\r\n            breadcrumb: facetBreadcrumb,\r\n        },\r\n    },\r\n    {\r\n        path: 'collections',\r\n        component: CollectionListComponent,\r\n        data: {\r\n            breadcrumb: _('breadcrumb.collections'),\r\n        },\r\n    },\r\n    {\r\n        path: 'collections/:id',\r\n        component: CollectionDetailComponent,\r\n        resolve: createResolveData(CollectionResolver),\r\n        canDeactivate: [CanDeactivateDetailGuard],\r\n        data: {\r\n            breadcrumb: collectionBreadcrumb,\r\n        },\r\n    },\r\n    {\r\n        path: 'assets',\r\n        component: AssetListComponent,\r\n        data: {\r\n            breadcrumb: _('breadcrumb.assets'),\r\n        },\r\n    },\r\n    {\r\n        path: 'assets/:id',\r\n        component: AssetDetailComponent,\r\n        resolve: createResolveData(AssetResolver),\r\n        data: {\r\n            breadcrumb: assetBreadcrumb,\r\n        },\r\n    },\r\n];\r\n\r\nexport function productBreadcrumb(data: any, params: any) {\r\n    return detailBreadcrumb<ProductWithVariants.Fragment>({\r\n        entity: data.entity,\r\n        id: params.id,\r\n        breadcrumbKey: 'breadcrumb.products',\r\n        getName: product => product.name,\r\n        route: 'products',\r\n    });\r\n}\r\n\r\nexport function productVariantEditorBreadcrumb(data: any, params: any) {\r\n    return data.entity.pipe(\r\n        map((entity: any) => {\r\n            return [\r\n                {\r\n                    label: _('breadcrumb.products'),\r\n                    link: ['../', 'products'],\r\n                },\r\n                {\r\n                    label: `${entity.name}`,\r\n                    link: ['../', 'products', params.id, { tab: 'variants' }],\r\n                },\r\n                {\r\n                    label: _('breadcrumb.manage-variants'),\r\n                    link: ['manage-variants'],\r\n                },\r\n            ];\r\n        }),\r\n    );\r\n}\r\n\r\nexport function facetBreadcrumb(data: any, params: any) {\r\n    return detailBreadcrumb<FacetWithValues.Fragment>({\r\n        entity: data.entity,\r\n        id: params.id,\r\n        breadcrumbKey: 'breadcrumb.facets',\r\n        getName: facet => facet.name,\r\n        route: 'facets',\r\n    });\r\n}\r\n\r\nexport function collectionBreadcrumb(data: any, params: any) {\r\n    return detailBreadcrumb<Collection.Fragment>({\r\n        entity: data.entity,\r\n        id: params.id,\r\n        breadcrumbKey: 'breadcrumb.collections',\r\n        getName: collection => collection.name,\r\n        route: 'collections',\r\n    });\r\n}\r\n\r\nexport function assetBreadcrumb(data: any, params: any) {\r\n    return detailBreadcrumb<Asset.Fragment>({\r\n        entity: data.entity,\r\n        id: params.id,\r\n        breadcrumbKey: 'breadcrumb.assets',\r\n        getName: asset => asset.name,\r\n        route: 'assets',\r\n    });\r\n}\r\n","import {\r\n    ChangeDetectionStrategy,\r\n    Component,\r\n    ContentChild,\r\n    Input,\r\n    OnChanges,\r\n    OnDestroy,\r\n    OnInit,\r\n    SimpleChanges,\r\n    TemplateRef,\r\n} from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { BehaviorSubject, combineLatest, Observable, of, Subject } from 'rxjs';\r\nimport {\r\n    debounceTime,\r\n    distinctUntilChanged,\r\n    map,\r\n    startWith,\r\n    switchMap,\r\n    takeUntil,\r\n    tap,\r\n} from 'rxjs/operators';\r\n\r\nimport { GetCollectionContents } from '@vendure/admin-ui/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-collection-contents',\r\n    templateUrl: './collection-contents.component.html',\r\n    styleUrls: ['./collection-contents.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CollectionContentsComponent implements OnInit, OnChanges, OnDestroy {\r\n    @Input() collectionId: string;\r\n    @ContentChild(TemplateRef, { static: true }) headerTemplate: TemplateRef<any>;\r\n\r\n    contents$: Observable<GetCollectionContents.Items[]>;\r\n    contentsTotalItems$: Observable<number>;\r\n    contentsItemsPerPage$: Observable<number>;\r\n    contentsCurrentPage$: Observable<number>;\r\n    filterTermControl = new FormControl('');\r\n    private collectionIdChange$ = new BehaviorSubject<string>('');\r\n    private refresh$ = new BehaviorSubject<boolean>(true);\r\n    private destroy$ = new Subject<void>();\r\n\r\n    constructor(private route: ActivatedRoute, private router: Router, private dataService: DataService) {}\r\n\r\n    ngOnInit() {\r\n        this.contentsCurrentPage$ = this.route.paramMap.pipe(\r\n            map(qpm => qpm.get('contentsPage')),\r\n            map(page => (!page ? 1 : +page)),\r\n            startWith(1),\r\n            distinctUntilChanged(),\r\n        );\r\n\r\n        this.contentsItemsPerPage$ = this.route.paramMap.pipe(\r\n            map(qpm => qpm.get('contentsPerPage')),\r\n            map(perPage => (!perPage ? 10 : +perPage)),\r\n            startWith(10),\r\n            distinctUntilChanged(),\r\n        );\r\n\r\n        const filterTerm$ = this.filterTermControl.valueChanges.pipe(\r\n            debounceTime(250),\r\n            tap(() => this.setContentsPageNumber(1)),\r\n            startWith(''),\r\n        );\r\n\r\n        const collection$ = combineLatest(\r\n            this.collectionIdChange$,\r\n            this.contentsCurrentPage$,\r\n            this.contentsItemsPerPage$,\r\n            filterTerm$,\r\n            this.refresh$,\r\n        ).pipe(\r\n            takeUntil(this.destroy$),\r\n            switchMap(([id, currentPage, itemsPerPage, filterTerm]) => {\r\n                const take = itemsPerPage;\r\n                const skip = (currentPage - 1) * itemsPerPage;\r\n                if (id) {\r\n                    return this.dataService.collection\r\n                        .getCollectionContents(id, take, skip, filterTerm)\r\n                        .mapSingle(data => data.collection);\r\n                } else {\r\n                    return of(null);\r\n                }\r\n            }),\r\n        );\r\n\r\n        this.contents$ = collection$.pipe(map(result => (result ? result.productVariants.items : [])));\r\n        this.contentsTotalItems$ = collection$.pipe(\r\n            map(result => (result ? result.productVariants.totalItems : 0)),\r\n        );\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        if ('collectionId' in changes) {\r\n            this.collectionIdChange$.next(changes.collectionId.currentValue);\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.destroy$.next();\r\n        this.destroy$.complete();\r\n    }\r\n\r\n    setContentsPageNumber(page: number) {\r\n        this.setParam('contentsPage', page);\r\n    }\r\n\r\n    setContentsItemsPerPage(perPage: number) {\r\n        this.setParam('contentsPerPage', perPage);\r\n    }\r\n\r\n    refresh() {\r\n        this.refresh$.next(true);\r\n    }\r\n\r\n    private setParam(key: string, value: any) {\r\n        this.router.navigate(['./', { ...this.route.snapshot.params, [key]: value }], {\r\n            relativeTo: this.route,\r\n            queryParamsHandling: 'merge',\r\n        });\r\n    }\r\n}\r\n","export type HasParent = { id: string; parent?: { id: string } | null };\r\nexport type TreeNode<T extends HasParent> = T & { children: Array<TreeNode<T>>; expanded: boolean };\r\nexport type RootNode<T extends HasParent> = { id?: string; children: Array<TreeNode<T>> };\r\n\r\n/**\r\n * Builds a tree from an array of nodes which have a parent.\r\n * Based on https://stackoverflow.com/a/31247960/772859, modified to preserve ordering.\r\n */\r\nexport function arrayToTree<T extends HasParent>(nodes: T[], currentState?: RootNode<T>): RootNode<T> {\r\n    const topLevelNodes: Array<TreeNode<T>> = [];\r\n    const mappedArr: { [id: string]: TreeNode<T> } = {};\r\n    const currentStateMap = treeToMap(currentState);\r\n\r\n    // First map the nodes of the array to an object -> create a hash table.\r\n    for (const node of nodes) {\r\n        mappedArr[node.id] = { ...(node as any), children: [] };\r\n    }\r\n\r\n    for (const id of nodes.map(n => n.id)) {\r\n        if (mappedArr.hasOwnProperty(id)) {\r\n            const mappedElem = mappedArr[id];\r\n            mappedElem.expanded = currentStateMap.get(id)?.expanded ?? false;\r\n            const parent = mappedElem.parent;\r\n            if (!parent) {\r\n                continue;\r\n            }\r\n            // If the element is not at the root level, add it to its parent array of children.\r\n            const parentIsRoot = !mappedArr[parent.id];\r\n            if (!parentIsRoot) {\r\n                if (mappedArr[parent.id]) {\r\n                    mappedArr[parent.id].children.push(mappedElem);\r\n                } else {\r\n                    mappedArr[parent.id] = { children: [mappedElem] } as any;\r\n                }\r\n            } else {\r\n                topLevelNodes.push(mappedElem);\r\n            }\r\n        }\r\n    }\r\n    // tslint:disable-next-line:no-non-null-assertion\r\n    const rootId = topLevelNodes.length ? topLevelNodes[0].parent!.id : undefined;\r\n    return { id: rootId, children: topLevelNodes };\r\n}\r\n\r\n/**\r\n * Converts an existing tree (as generated by the arrayToTree function) into a flat\r\n * Map. This is used to persist certain states (e.g. `expanded`) when re-building the\r\n * tree.\r\n */\r\nfunction treeToMap<T extends HasParent>(tree?: RootNode<T>): Map<string, TreeNode<T>> {\r\n    const nodeMap = new Map<string, TreeNode<T>>();\r\n    function visit(node: TreeNode<T>) {\r\n        nodeMap.set(node.id, node);\r\n        node.children.forEach(visit);\r\n    }\r\n    if (tree) {\r\n        visit(tree as TreeNode<T>);\r\n    }\r\n    return nodeMap;\r\n}\r\n","import { CdkDragDrop } from '@angular/cdk/drag-drop';\r\nimport {\r\n    ChangeDetectionStrategy,\r\n    Component,\r\n    EventEmitter,\r\n    Input,\r\n    OnChanges,\r\n    Output,\r\n    SimpleChanges,\r\n} from '@angular/core';\r\nimport { Collection } from '@vendure/admin-ui/core';\r\n\r\nimport { arrayToTree, HasParent, RootNode } from './array-to-tree';\r\n\r\nexport type RearrangeEvent = { collectionId: string; parentId: string; index: number };\r\nexport type CollectionPartial = Pick<Collection.Fragment, 'id' | 'parent' | 'name'>;\r\n\r\n@Component({\r\n    selector: 'vdr-collection-tree',\r\n    templateUrl: 'collection-tree.component.html',\r\n    styleUrls: ['./collection-tree.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CollectionTreeComponent implements OnChanges {\r\n    @Input() collections: CollectionPartial[];\r\n    @Input() activeCollectionId: string;\r\n    @Input() expandAll = false;\r\n    @Output() rearrange = new EventEmitter<RearrangeEvent>();\r\n    @Output() deleteCollection = new EventEmitter<string>();\r\n    collectionTree: RootNode<CollectionPartial>;\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if ('collections' in changes && this.collections) {\r\n            this.collectionTree = arrayToTree(this.collections, this.collectionTree);\r\n        }\r\n    }\r\n\r\n    onDrop(event: CdkDragDrop<CollectionPartial | RootNode<CollectionPartial>>) {\r\n        const item = event.item.data as CollectionPartial;\r\n        const newParent = event.container.data;\r\n        const newParentId = newParent.id;\r\n        if (newParentId == null) {\r\n            throw new Error(`Could not determine the ID of the root Collection`);\r\n        }\r\n        this.rearrange.emit({\r\n            collectionId: item.id,\r\n            parentId: newParentId,\r\n            index: event.currentIndex,\r\n        });\r\n    }\r\n\r\n    onMove(event: RearrangeEvent) {\r\n        this.rearrange.emit(event);\r\n    }\r\n\r\n    onDelete(id: string) {\r\n        this.deleteCollection.emit(id);\r\n    }\r\n\r\n    private isRootNode<T extends HasParent>(node: T | RootNode<T>): node is RootNode<T> {\r\n        return !node.hasOwnProperty('parent');\r\n    }\r\n}\r\n","import { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';\nimport {\n    ChangeDetectionStrategy,\n    Component,\n    Input,\n    OnChanges,\n    OnInit,\n    Optional,\n    SimpleChanges,\n    SkipSelf,\n} from '@angular/core';\nimport { DataService, Permission } from '@vendure/admin-ui/core';\nimport { Observable } from 'rxjs';\nimport { map, shareReplay } from 'rxjs/operators';\n\nimport { RootNode, TreeNode } from './array-to-tree';\nimport { CollectionPartial, CollectionTreeComponent } from './collection-tree.component';\n\n@Component({\n    selector: 'vdr-collection-tree-node',\n    templateUrl: './collection-tree-node.component.html',\n    styleUrls: ['./collection-tree-node.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CollectionTreeNodeComponent implements OnInit, OnChanges {\n    depth = 0;\n    parentName: string;\n    @Input() collectionTree: TreeNode<CollectionPartial>;\n    @Input() activeCollectionId: string;\n    @Input() expandAll = false;\n    hasUpdatePermission$: Observable<boolean>;\n    hasDeletePermission$: Observable<boolean>;\n\n    constructor(\n        @SkipSelf() @Optional() private parent: CollectionTreeNodeComponent,\n        private root: CollectionTreeComponent,\n        private dataService: DataService,\n    ) {\n        if (parent) {\n            this.depth = parent.depth + 1;\n        }\n    }\n\n    ngOnInit() {\n        this.parentName = this.collectionTree.name || '<root>';\n        const permissions$ = this.dataService.client\n            .userStatus()\n            .mapStream(data => data.userStatus.permissions)\n            .pipe(shareReplay(1));\n        this.hasUpdatePermission$ = permissions$.pipe(\n            map(\n                perms =>\n                    perms.includes(Permission.UpdateCatalog) || perms.includes(Permission.UpdateCollection),\n            ),\n        );\n        this.hasDeletePermission$ = permissions$.pipe(\n            map(\n                perms =>\n                    perms.includes(Permission.DeleteCatalog) || perms.includes(Permission.DeleteCollection),\n            ),\n        );\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const expandAllChange = changes['expandAll'];\n        if (expandAllChange) {\n            if (expandAllChange.previousValue === true && expandAllChange.currentValue === false) {\n                this.collectionTree.children.forEach(c => (c.expanded = false));\n            }\n        }\n    }\n\n    trackByFn(index: number, item: CollectionPartial) {\n        return item.id;\n    }\n\n    getMoveListItems(collection: CollectionPartial): Array<{ path: string; id: string }> {\n        const visit = (\n            node: TreeNode<any>,\n            parentPath: string[],\n            output: Array<{ path: string; id: string }>,\n        ) => {\n            if (node.id !== collection.id) {\n                const path = parentPath.concat(node.name);\n                const parentId = collection.parent && collection.parent.id;\n                if (node.id !== parentId) {\n                    output.push({ path: path.slice(1).join(' / ') || 'root', id: node.id });\n                }\n                node.children.forEach(child => visit(child, path, output));\n            }\n            return output;\n        };\n        return visit(this.root.collectionTree, [], []);\n    }\n\n    move(collection: CollectionPartial, parentId: string) {\n        this.root.onMove({\n            index: 0,\n            parentId,\n            collectionId: collection.id,\n        });\n    }\n\n    moveUp(collection: CollectionPartial, currentIndex: number) {\n        if (!collection.parent) {\n            return;\n        }\n        this.root.onMove({\n            index: currentIndex - 1,\n            parentId: collection.parent.id,\n            collectionId: collection.id,\n        });\n    }\n\n    moveDown(collection: CollectionPartial, currentIndex: number) {\n        if (!collection.parent) {\n            return;\n        }\n        this.root.onMove({\n            index: currentIndex + 1,\n            parentId: collection.parent.id,\n            collectionId: collection.id,\n        });\n    }\n\n    drop(event: CdkDragDrop<CollectionPartial | RootNode<CollectionPartial>>) {\n        moveItemInArray(this.collectionTree.children, event.previousIndex, event.currentIndex);\n        this.root.onDrop(event);\n    }\n\n    delete(id: string) {\n        this.root.onDelete(id);\n    }\n}\n","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport { generateAllCombinations } from '@vendure/common/lib/shared-utils';\r\n\r\nimport { CurrencyCode } from '@vendure/admin-ui/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\nimport { OptionValueInputComponent } from '../option-value-input/option-value-input.component';\r\n\r\nconst DEFAULT_VARIANT_CODE = '__DEFAULT_VARIANT__';\r\nexport type CreateVariantValues = {\r\n    optionValues: string[];\r\n    enabled: boolean;\r\n    sku: string;\r\n    price: number;\r\n    stock: number;\r\n};\r\nexport type CreateProductVariantsConfig = {\r\n    groups: Array<{ name: string; values: string[] }>;\r\n    variants: CreateVariantValues[];\r\n};\r\n\r\n@Component({\r\n    selector: 'vdr-generate-product-variants',\r\n    templateUrl: './generate-product-variants.component.html',\r\n    styleUrls: ['./generate-product-variants.component.scss'],\r\n})\r\nexport class GenerateProductVariantsComponent implements OnInit {\r\n    @Output() variantsChange = new EventEmitter<CreateProductVariantsConfig>();\r\n    optionGroups: Array<{ name: string; values: Array<{ name: string; locked: boolean }> }> = [];\r\n    currencyCode: CurrencyCode;\r\n    variants: Array<{ id: string; values: string[] }>;\r\n    variantFormValues: { [id: string]: CreateVariantValues } = {};\r\n    constructor(private dataService: DataService) {}\r\n\r\n    ngOnInit() {\r\n        this.dataService.settings.getActiveChannel().single$.subscribe(data => {\r\n            this.currencyCode = data.activeChannel.currencyCode;\r\n        });\r\n\r\n        this.generateVariants();\r\n    }\r\n\r\n    addOption() {\r\n        this.optionGroups.push({ name: '', values: [] });\r\n    }\r\n\r\n    removeOption(name: string) {\r\n        this.optionGroups = this.optionGroups.filter(g => g.name !== name);\r\n        this.generateVariants();\r\n    }\r\n\r\n    generateVariants() {\r\n        const totalValuesCount = this.optionGroups.reduce((sum, group) => sum + group.values.length, 0);\r\n        const groups = totalValuesCount\r\n            ? this.optionGroups.map(g => g.values.map(v => v.name))\r\n            : [[DEFAULT_VARIANT_CODE]];\r\n        this.variants = generateAllCombinations(groups).map(values => ({ id: values.join('|'), values }));\r\n\r\n        this.variants.forEach(variant => {\r\n            if (!this.variantFormValues[variant.id]) {\r\n                this.variantFormValues[variant.id] = {\r\n                    optionValues: variant.values,\r\n                    enabled: true,\r\n                    price: this.copyFromDefault(variant.id, 'price', 0),\r\n                    sku: this.copyFromDefault(variant.id, 'sku', ''),\r\n                    stock: this.copyFromDefault(variant.id, 'stock', 0),\r\n                };\r\n            }\r\n        });\r\n        this.onFormChange();\r\n    }\r\n\r\n    trackByFn(index: number, variant: { name: string; values: string[] }) {\r\n        return variant.values.join('|');\r\n    }\r\n\r\n    handleEnter(event: KeyboardEvent, optionValueInputComponent: OptionValueInputComponent) {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        optionValueInputComponent.focus();\r\n    }\r\n\r\n    onFormChange() {\r\n        const variantsToCreate = this.variants.map(v => this.variantFormValues[v.id]).filter(v => v.enabled);\r\n        this.variantsChange.emit({\r\n            groups: this.optionGroups.map(og => ({ name: og.name, values: og.values.map(v => v.name) })),\r\n            variants: variantsToCreate,\r\n        });\r\n    }\r\n\r\n    private copyFromDefault<T extends keyof CreateVariantValues>(\r\n        variantId: string,\r\n        prop: T,\r\n        value: CreateVariantValues[T],\r\n    ): CreateVariantValues[T] {\r\n        return variantId !== DEFAULT_VARIANT_CODE\r\n            ? this.variantFormValues[DEFAULT_VARIANT_CODE][prop]\r\n            : value;\r\n    }\r\n}\r\n","import {\r\n    ChangeDetectionStrategy,\r\n    ChangeDetectorRef,\r\n    Component,\r\n    ElementRef,\r\n    forwardRef,\r\n    Input,\r\n    Provider,\r\n    ViewChild,\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { unique } from '@vendure/common/lib/unique';\r\n\r\nexport const OPTION_VALUE_INPUT_VALUE_ACCESSOR: Provider = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => OptionValueInputComponent),\r\n    multi: true,\r\n};\r\n\r\n@Component({\r\n    selector: 'vdr-option-value-input',\r\n    templateUrl: './option-value-input.component.html',\r\n    styleUrls: ['./option-value-input.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.Default,\r\n    providers: [OPTION_VALUE_INPUT_VALUE_ACCESSOR],\r\n})\r\nexport class OptionValueInputComponent implements ControlValueAccessor {\r\n    @Input() groupName = '';\r\n    @ViewChild('textArea', { static: true }) textArea: ElementRef<HTMLTextAreaElement>;\r\n    options: Array<{ name: string; locked: boolean }>;\r\n    disabled = false;\r\n    input = '';\r\n    isFocussed = false;\r\n    lastSelected = false;\r\n    onChangeFn: (value: any) => void;\r\n    onTouchFn: (value: any) => void;\r\n\r\n    constructor(private changeDetector: ChangeDetectorRef) {}\r\n\r\n    registerOnChange(fn: any): void {\r\n        this.onChangeFn = fn;\r\n    }\r\n\r\n    registerOnTouched(fn: any): void {\r\n        this.onTouchFn = fn;\r\n    }\r\n\r\n    setDisabledState(isDisabled: boolean): void {\r\n        this.disabled = isDisabled;\r\n        this.changeDetector.markForCheck();\r\n    }\r\n\r\n    writeValue(obj: any): void {\r\n        this.options = obj || [];\r\n    }\r\n\r\n    focus() {\r\n        this.textArea.nativeElement.focus();\r\n    }\r\n\r\n    removeOption(option: { name: string; locked: boolean }) {\r\n        if (!option.locked) {\r\n            this.options = this.options.filter(o => o.name !== option.name);\r\n            this.onChangeFn(this.options);\r\n        }\r\n    }\r\n\r\n    handleKey(event: KeyboardEvent) {\r\n        switch (event.key) {\r\n            case ',':\r\n            case 'Enter':\r\n                this.addOptionValue();\r\n                event.preventDefault();\r\n                break;\r\n            case 'Backspace':\r\n                if (this.lastSelected) {\r\n                    this.removeLastOption();\r\n                    this.lastSelected = false;\r\n                } else if (this.input === '') {\r\n                    this.lastSelected = true;\r\n                }\r\n                break;\r\n            default:\r\n                this.lastSelected = false;\r\n        }\r\n    }\r\n\r\n    handleBlur() {\r\n        this.isFocussed = false;\r\n        this.addOptionValue();\r\n    }\r\n\r\n    private addOptionValue() {\r\n        this.options = unique([...this.options, ...this.parseInputIntoOptions(this.input)]);\r\n        this.input = '';\r\n        this.onChangeFn(this.options);\r\n    }\r\n\r\n    private parseInputIntoOptions(input: string): Array<{ name: string; locked: boolean }> {\r\n        return input\r\n            .split(/[,\\n]/)\r\n            .map(s => s.trim())\r\n            .filter(s => s !== '')\r\n            .map(s => ({ name: s, locked: false }));\r\n    }\r\n\r\n    private removeLastOption() {\r\n        if (!this.options[this.options.length - 1].locked) {\r\n            this.options = this.options.slice(0, this.options.length - 1);\r\n        }\r\n    }\r\n}\r\n","import { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';\r\nimport { ViewportRuler } from '@angular/cdk/overlay';\r\nimport {\r\n    ChangeDetectionStrategy,\r\n    ChangeDetectorRef,\r\n    Component,\r\n    EventEmitter,\r\n    HostBinding,\r\n    Input,\r\n    Optional,\r\n    Output,\r\n} from '@angular/core';\r\nimport {\r\n    Asset,\r\n    AssetPickerDialogComponent,\r\n    AssetPreviewDialogComponent,\r\n    ModalService,\r\n    Permission,\r\n} from '@vendure/admin-ui/core';\r\nimport { unique } from '@vendure/common/lib/unique';\r\n\r\nimport { CollectionDetailComponent } from '../collection-detail/collection-detail.component';\r\n\r\nexport interface AssetChange {\r\n    assets: Asset[];\r\n    featuredAsset: Asset | undefined;\r\n}\r\n\r\n/**\r\n * A component which displays the Assets associated with a product, and allows assets to be removed and\r\n * added, and for the featured asset to be set.\r\n *\r\n * Note: rather complex code for drag drop is due to a limitation of the default CDK implementation\r\n * which is addressed by a work-around from here: https://github.com/angular/components/issues/13372#issuecomment-483998378\r\n */\r\n@Component({\r\n    selector: 'vdr-product-assets',\r\n    templateUrl: './product-assets.component.html',\r\n    styleUrls: ['./product-assets.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ProductAssetsComponent {\r\n    @Input('assets') set assetsSetter(val: Asset[]) {\r\n        // create a new non-readonly array of assets\r\n        this.assets = val.slice();\r\n    }\r\n\r\n    @Input() featuredAsset: Asset | undefined;\r\n    @HostBinding('class.compact')\r\n    @Input()\r\n    compact = false;\r\n    @Output() change = new EventEmitter<AssetChange>();\r\n\r\n    public assets: Asset[] = [];\r\n\r\n    private readonly updateCollectionPermissions = [Permission.UpdateCatalog, Permission.UpdateCollection];\r\n    private readonly updateProductPermissions = [Permission.UpdateCatalog, Permission.UpdateProduct];\r\n\r\n    get updatePermissions(): Permission[] {\r\n        if (this.collectionDetailComponent) {\r\n            return this.updateCollectionPermissions;\r\n        } else {\r\n            return this.updateProductPermissions;\r\n        }\r\n    }\r\n\r\n    constructor(\r\n        private modalService: ModalService,\r\n        private changeDetector: ChangeDetectorRef,\r\n        private viewportRuler: ViewportRuler,\r\n        @Optional() private collectionDetailComponent?: CollectionDetailComponent,\r\n    ) {}\r\n\r\n    selectAssets() {\r\n        this.modalService\r\n            .fromComponent(AssetPickerDialogComponent, {\r\n                size: 'xl',\r\n            })\r\n            .subscribe(result => {\r\n                if (result && result.length) {\r\n                    this.assets = unique(this.assets.concat(result), 'id');\r\n                    if (!this.featuredAsset) {\r\n                        this.featuredAsset = result[0];\r\n                    }\r\n                    this.emitChangeEvent(this.assets, this.featuredAsset);\r\n                    this.changeDetector.markForCheck();\r\n                }\r\n            });\r\n    }\r\n\r\n    setAsFeatured(asset: Asset) {\r\n        this.featuredAsset = asset;\r\n        this.emitChangeEvent(this.assets, asset);\r\n    }\r\n\r\n    isFeatured(asset: Asset): boolean {\r\n        return !!this.featuredAsset && this.featuredAsset.id === asset.id;\r\n    }\r\n\r\n    previewAsset(asset: Asset) {\r\n        this.modalService\r\n            .fromComponent(AssetPreviewDialogComponent, {\r\n                size: 'xl',\r\n                closable: true,\r\n                locals: { asset },\r\n            })\r\n            .subscribe();\r\n    }\r\n\r\n    removeAsset(asset: Asset) {\r\n        this.assets = this.assets.filter(a => a.id !== asset.id);\r\n        if (this.featuredAsset && this.featuredAsset.id === asset.id) {\r\n            this.featuredAsset = this.assets.length > 0 ? this.assets[0] : undefined;\r\n        }\r\n        this.emitChangeEvent(this.assets, this.featuredAsset);\r\n    }\r\n\r\n    private emitChangeEvent(assets: Asset[], featuredAsset: Asset | undefined) {\r\n        this.change.emit({\r\n            assets,\r\n            featuredAsset,\r\n        });\r\n    }\r\n\r\n    dropListDropped(event: CdkDragDrop<number>) {\r\n        moveItemInArray(this.assets, event.previousContainer.data, event.container.data);\r\n        this.emitChangeEvent(this.assets, this.featuredAsset);\r\n    }\r\n}\r\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';\r\nimport { NgSelectComponent, SELECTION_MODEL_FACTORY } from '@ng-select/ng-select';\r\nimport { SearchProducts, SingleSearchSelectionModelFactory } from '@vendure/admin-ui/core';\r\nimport { notNullOrUndefined } from '@vendure/common/lib/shared-utils';\r\n\r\n@Component({\r\n    selector: 'vdr-product-search-input',\r\n    templateUrl: './product-search-input.component.html',\r\n    styleUrls: ['./product-search-input.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    providers: [{ provide: SELECTION_MODEL_FACTORY, useValue: SingleSearchSelectionModelFactory }],\r\n})\r\nexport class ProductSearchInputComponent {\r\n    @Input() facetValueResults: SearchProducts.FacetValues[];\r\n    @Output() searchTermChange = new EventEmitter<string>();\r\n    @Output() facetValueChange = new EventEmitter<string[]>();\r\n    @ViewChild('selectComponent', { static: true }) private selectComponent: NgSelectComponent;\r\n    private lastTerm = '';\r\n    private lastFacetValueIds: string[] = [];\r\n\r\n    setSearchTerm(term: string | null) {\r\n        if (term) {\r\n            this.selectComponent.select({ label: term, value: { label: term } });\r\n        } else {\r\n            const currentTerm = this.selectComponent.selectedItems.find(i => !this.isFacetValueItem(i.value));\r\n            if (currentTerm) {\r\n                this.selectComponent.unselect(currentTerm);\r\n            }\r\n        }\r\n    }\r\n\r\n    setFacetValues(ids: string[]) {\r\n        const items = this.selectComponent.items;\r\n\r\n        this.selectComponent.selectedItems.forEach(item => {\r\n            if (this.isFacetValueItem(item.value) && !ids.includes(item.value.facetValue.id)) {\r\n                this.selectComponent.unselect(item);\r\n            }\r\n        });\r\n\r\n        ids.map(id => {\r\n            return items.find(item => this.isFacetValueItem(item) && item.facetValue.id === id);\r\n        })\r\n            .filter(notNullOrUndefined)\r\n            .forEach(item => {\r\n                const isSelected = this.selectComponent.selectedItems.find(i => {\r\n                    const val = i.value;\r\n                    if (this.isFacetValueItem(val)) {\r\n                        return val.facetValue.id === item.facetValue.id;\r\n                    }\r\n                    return false;\r\n                });\r\n                if (!isSelected) {\r\n                    this.selectComponent.select({ label: '', value: item });\r\n                }\r\n            });\r\n    }\r\n\r\n    filterFacetResults = (term: string, item: SearchProducts.FacetValues | { label: string }) => {\r\n        if (!this.isFacetValueItem(item)) {\r\n            return false;\r\n        }\r\n        return (\r\n            item.facetValue.name.toLowerCase().startsWith(term.toLowerCase()) ||\r\n            item.facetValue.facet.name.toLowerCase().startsWith(term.toLowerCase())\r\n        );\r\n    };\r\n\r\n    onSelectChange(selectedItems: Array<SearchProducts.FacetValues | { label: string }>) {\r\n        if (!Array.isArray(selectedItems)) {\r\n            selectedItems = [selectedItems];\r\n        }\r\n        const searchTermItem = selectedItems.find(item => !this.isFacetValueItem(item)) as\r\n            | { label: string }\r\n            | undefined;\r\n        const searchTerm = searchTermItem ? searchTermItem.label : '';\r\n\r\n        const facetValueIds = selectedItems.filter(this.isFacetValueItem).map(i => i.facetValue.id);\r\n\r\n        if (searchTerm !== this.lastTerm) {\r\n            this.searchTermChange.emit(searchTerm);\r\n            this.lastTerm = searchTerm;\r\n        }\r\n        if (this.lastFacetValueIds.join(',') !== facetValueIds.join(',')) {\r\n            this.facetValueChange.emit(facetValueIds);\r\n            this.lastFacetValueIds = facetValueIds;\r\n        }\r\n    }\r\n\r\n    addTagFn(item: any) {\r\n        return { label: item };\r\n    }\r\n\r\n    isSearchHeaderSelected(): boolean {\r\n        return this.selectComponent.itemsList.markedIndex === -1;\r\n    }\r\n\r\n    private isFacetValueItem = (input: unknown): input is SearchProducts.FacetValues => {\r\n        return typeof input === 'object' && !!input && input.hasOwnProperty('facetValue');\r\n    };\r\n}\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup } from '@angular/forms';\r\nimport {\r\n    CustomFieldConfig,\r\n    LanguageCode,\r\n    ProductVariant,\r\n    UpdateProductOptionInput,\r\n} from '@vendure/admin-ui/core';\r\nimport { createUpdatedTranslatable } from '@vendure/admin-ui/core';\r\nimport { Dialog } from '@vendure/admin-ui/core';\r\nimport { normalizeString } from '@vendure/common/lib/normalize-string';\r\n\r\n@Component({\r\n    selector: 'vdr-update-product-option-dialog',\r\n    templateUrl: './update-product-option-dialog.component.html',\r\n    styleUrls: ['./update-product-option-dialog.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class UpdateProductOptionDialogComponent\r\n    implements Dialog<UpdateProductOptionInput & { autoUpdate: boolean }>, OnInit {\r\n    resolveWith: (result?: UpdateProductOptionInput & { autoUpdate: boolean }) => void;\r\n    updateVariantName = true;\r\n    // Provided by caller\r\n    productOption: ProductVariant.Options;\r\n    activeLanguage: LanguageCode;\r\n    name: string;\r\n    code: string;\r\n    customFields: CustomFieldConfig[];\r\n    codeInputTouched = false;\r\n    customFieldsForm: FormGroup;\r\n\r\n    ngOnInit(): void {\r\n        const currentTranslation = this.productOption.translations.find(\r\n            t => t.languageCode === this.activeLanguage,\r\n        );\r\n        this.name = currentTranslation?.name ?? '';\r\n        this.code = this.productOption.code;\r\n        this.customFieldsForm = new FormGroup({});\r\n        if (this.customFields) {\r\n            const cfCurrentTranslation =\r\n                (currentTranslation && (currentTranslation as any).customFields) || {};\r\n\r\n            for (const fieldDef of this.customFields) {\r\n                const key = fieldDef.name;\r\n                const value =\r\n                    fieldDef.type === 'localeString'\r\n                        ? cfCurrentTranslation[key]\r\n                        : (this.productOption as any).customFields[key];\r\n                this.customFieldsForm.addControl(fieldDef.name, new FormControl(value));\r\n            }\r\n        }\r\n    }\r\n\r\n    update() {\r\n        const result = createUpdatedTranslatable({\r\n            translatable: this.productOption,\r\n            languageCode: this.activeLanguage,\r\n            updatedFields: {\r\n                code: this.code,\r\n                name: this.name,\r\n                customFields: this.customFieldsForm.value,\r\n            },\r\n            customFieldConfig: this.customFields,\r\n            defaultTranslation: {\r\n                languageCode: this.activeLanguage,\r\n                name: '',\r\n            },\r\n        });\r\n        this.resolveWith({ ...result, autoUpdate: this.updateVariantName });\r\n    }\r\n\r\n    cancel() {\r\n        this.resolveWith();\r\n    }\r\n\r\n    updateCode(nameValue: string) {\r\n        if (!this.codeInputTouched && !this.productOption.code) {\r\n            this.code = normalizeString(nameValue, '-');\r\n        }\r\n    }\r\n}\r\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    Input,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Output,\n    SimpleChanges,\n} from '@angular/core';\nimport { FormArray, FormGroup } from '@angular/forms';\nimport {\n    CustomFieldConfig,\n    DataService,\n    FacetValue,\n    FacetWithValues,\n    flattenFacetValues,\n    GlobalFlag,\n    LanguageCode,\n    ModalService,\n    Permission,\n    ProductOptionFragment,\n    ProductVariant,\n    ProductWithVariants,\n    TaxCategory,\n    UpdateProductOptionInput,\n} from '@vendure/admin-ui/core';\nimport { DEFAULT_CHANNEL_CODE } from '@vendure/common/lib/shared-constants';\nimport { notNullOrUndefined } from '@vendure/common/lib/shared-utils';\nimport { PaginationInstance } from 'ngx-pagination';\nimport { Subscription } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, map } from 'rxjs/operators';\n\nimport { AssetChange } from '../product-assets/product-assets.component';\nimport { SelectedAssets, VariantFormValue } from '../product-detail/product-detail.component';\nimport { UpdateProductOptionDialogComponent } from '../update-product-option-dialog/update-product-option-dialog.component';\n\nexport interface VariantAssetChange extends AssetChange {\n    variantId: string;\n}\n\n@Component({\n    selector: 'vdr-product-variants-list',\n    templateUrl: './product-variants-list.component.html',\n    styleUrls: ['./product-variants-list.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductVariantsListComponent implements OnChanges, OnInit, OnDestroy {\n    @Input('productVariantsFormArray') formArray: FormArray;\n    @Input() variants: ProductWithVariants.Variants[];\n    @Input() channelPriceIncludesTax: boolean;\n    @Input() taxCategories: TaxCategory[];\n    @Input() facets: FacetWithValues.Fragment[];\n    @Input() optionGroups: ProductWithVariants.OptionGroups[];\n    @Input() customFields: CustomFieldConfig[];\n    @Input() customOptionFields: CustomFieldConfig[];\n    @Input() activeLanguage: LanguageCode;\n    @Input() pendingAssetChanges: { [variantId: string]: SelectedAssets };\n    @Output() assignToChannel = new EventEmitter<ProductWithVariants.Variants>();\n    @Output() removeFromChannel = new EventEmitter<{\n        channelId: string;\n        variant: ProductWithVariants.Variants;\n    }>();\n    @Output() assetChange = new EventEmitter<VariantAssetChange>();\n    @Output() selectionChange = new EventEmitter<string[]>();\n    @Output() selectFacetValueClick = new EventEmitter<string[]>();\n    @Output() updateProductOption = new EventEmitter<UpdateProductOptionInput & { autoUpdate: boolean }>();\n    selectedVariantIds: string[] = [];\n    pagination: PaginationInstance = {\n        currentPage: 1,\n        itemsPerPage: 10,\n    };\n    formGroupMap = new Map<string, FormGroup>();\n    GlobalFlag = GlobalFlag;\n    globalTrackInventory: boolean;\n    globalOutOfStockThreshold: number;\n    readonly updatePermission = [Permission.UpdateCatalog, Permission.UpdateProduct];\n    private facetValues: FacetValue.Fragment[];\n    private subscription: Subscription;\n\n    constructor(\n        private changeDetector: ChangeDetectorRef,\n        private modalService: ModalService,\n        private dataService: DataService,\n    ) {}\n\n    ngOnInit() {\n        this.dataService.settings.getGlobalSettings('cache-first').single$.subscribe(({ globalSettings }) => {\n            this.globalTrackInventory = globalSettings.trackInventory;\n            this.globalOutOfStockThreshold = globalSettings.outOfStockThreshold;\n            this.changeDetector.markForCheck();\n        });\n        this.subscription = this.formArray.valueChanges.subscribe(() => this.changeDetector.markForCheck());\n\n        this.subscription.add(\n            this.formArray.valueChanges\n                .pipe(\n                    map(value => value.length),\n                    debounceTime(1),\n                    distinctUntilChanged(),\n                )\n                .subscribe(() => {\n                    this.buildFormGroupMap();\n                }),\n        );\n\n        this.buildFormGroupMap();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if ('facets' in changes && !!changes['facets'].currentValue) {\n            this.facetValues = flattenFacetValues(this.facets);\n        }\n        if ('variants' in changes) {\n            if (changes['variants'].currentValue?.length !== changes['variants'].previousValue?.length) {\n                this.pagination.currentPage = 1;\n            }\n        }\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n\n    isDefaultChannel(channelCode: string): boolean {\n        return channelCode === DEFAULT_CHANNEL_CODE;\n    }\n\n    trackById(index: number, item: ProductWithVariants.Variants) {\n        return item.id;\n    }\n\n    inventoryIsNotTracked(formGroup: FormGroup): boolean {\n        const trackInventory = formGroup.get('trackInventory')?.value;\n        return (\n            trackInventory === GlobalFlag.FALSE ||\n            (trackInventory === GlobalFlag.INHERIT && this.globalTrackInventory === false)\n        );\n    }\n\n    getTaxCategoryName(group: FormGroup): string {\n        const control = group.get(['taxCategoryId']);\n        if (control && this.taxCategories) {\n            const match = this.taxCategories.find(t => t.id === control.value);\n            return match ? match.name : '';\n        }\n        return '';\n    }\n\n    getSaleableStockLevel(variant: ProductWithVariants.Variants) {\n        const effectiveOutOfStockThreshold = variant.useGlobalOutOfStockThreshold\n            ? this.globalOutOfStockThreshold\n            : variant.outOfStockThreshold;\n        return variant.stockOnHand - variant.stockAllocated - effectiveOutOfStockThreshold;\n    }\n\n    areAllSelected(): boolean {\n        return !!this.variants && this.selectedVariantIds.length === this.variants.length;\n    }\n\n    onAssetChange(variantId: string, event: AssetChange) {\n        this.assetChange.emit({\n            variantId,\n            ...event,\n        });\n        const index = this.variants.findIndex(v => v.id === variantId);\n        this.formArray.at(index).markAsDirty();\n    }\n\n    toggleSelectAll() {\n        if (this.areAllSelected()) {\n            this.selectedVariantIds = [];\n        } else {\n            this.selectedVariantIds = this.variants.map(v => v.id);\n        }\n        this.selectionChange.emit(this.selectedVariantIds);\n    }\n\n    toggleSelectVariant(variantId: string) {\n        const index = this.selectedVariantIds.indexOf(variantId);\n        if (-1 < index) {\n            this.selectedVariantIds.splice(index, 1);\n        } else {\n            this.selectedVariantIds.push(variantId);\n        }\n        this.selectionChange.emit(this.selectedVariantIds);\n    }\n\n    optionGroupName(optionGroupId: string): string | undefined {\n        const group = this.optionGroups.find(g => g.id === optionGroupId);\n        if (group) {\n            const translation =\n                group?.translations.find(t => t.languageCode === this.activeLanguage) ??\n                group.translations[0];\n            return translation.name;\n        }\n    }\n\n    optionName(option: ProductOptionFragment) {\n        const translation =\n            option.translations.find(t => t.languageCode === this.activeLanguage) ?? option.translations[0];\n        return translation.name;\n    }\n\n    pendingFacetValues(variant: ProductWithVariants.Variants) {\n        if (this.facets) {\n            const formFacetValueIds = this.getFacetValueIds(variant.id);\n            const variantFacetValueIds = variant.facetValues.map(fv => fv.id);\n            return formFacetValueIds\n                .filter(x => !variantFacetValueIds.includes(x))\n                .map(id => this.facetValues.find(fv => fv.id === id))\n                .filter(notNullOrUndefined);\n        } else {\n            return [];\n        }\n    }\n\n    existingFacetValues(variant: ProductWithVariants.Variants) {\n        const formFacetValueIds = this.getFacetValueIds(variant.id);\n        const intersection = [...formFacetValueIds].filter(x =>\n            variant.facetValues.map(fv => fv.id).includes(x),\n        );\n        return intersection\n            .map(id => variant.facetValues.find(fv => fv.id === id))\n            .filter(notNullOrUndefined);\n    }\n\n    removeFacetValue(variant: ProductWithVariants.Variants, facetValueId: string) {\n        const formGroup = this.formGroupMap.get(variant.id);\n        if (formGroup) {\n            const newValue = (formGroup.value as VariantFormValue).facetValueIds.filter(\n                id => id !== facetValueId,\n            );\n            formGroup.patchValue({\n                facetValueIds: newValue,\n            });\n            formGroup.markAsDirty();\n        }\n    }\n\n    isVariantSelected(variantId: string): boolean {\n        return -1 < this.selectedVariantIds.indexOf(variantId);\n    }\n\n    editOption(option: ProductVariant.Options) {\n        this.modalService\n            .fromComponent(UpdateProductOptionDialogComponent, {\n                size: 'md',\n                locals: {\n                    productOption: option,\n                    activeLanguage: this.activeLanguage,\n                    customFields: this.customOptionFields,\n                },\n            })\n            .subscribe(result => {\n                if (result) {\n                    this.updateProductOption.emit(result);\n                }\n            });\n    }\n\n    private buildFormGroupMap() {\n        this.formGroupMap.clear();\n        for (const controlGroup of this.formArray.controls) {\n            this.formGroupMap.set(controlGroup.value.id, controlGroup as FormGroup);\n        }\n        this.changeDetector.markForCheck();\n    }\n\n    private getFacetValueIds(id: string): string[] {\n        const formValue: VariantFormValue = this.formGroupMap.get(id)?.value;\n        return formValue.facetValueIds;\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    Input,\n    OnDestroy,\n    OnInit,\n} from '@angular/core';\nimport { FormArray, FormGroup } from '@angular/forms';\nimport { Permission, ProductWithVariants } from '@vendure/admin-ui/core';\nimport { Subscription } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, map } from 'rxjs/operators';\n\nimport { SelectedAssets } from '../product-detail/product-detail.component';\n\n@Component({\n    selector: 'vdr-product-variants-table',\n    templateUrl: './product-variants-table.component.html',\n    styleUrls: ['./product-variants-table.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductVariantsTableComponent implements OnInit, OnDestroy {\n    @Input('productVariantsFormArray') formArray: FormArray;\n    @Input() variants: ProductWithVariants.Variants[];\n    @Input() channelPriceIncludesTax: boolean;\n    @Input() optionGroups: ProductWithVariants.OptionGroups[];\n    @Input() pendingAssetChanges: { [variantId: string]: SelectedAssets };\n    formGroupMap = new Map<string, FormGroup>();\n    readonly updatePermission = [Permission.UpdateCatalog, Permission.UpdateProduct];\n    private subscription: Subscription;\n\n    constructor(private changeDetector: ChangeDetectorRef) {}\n\n    ngOnInit() {\n        this.subscription = this.formArray.valueChanges\n            .pipe(\n                map(value => value.length),\n                debounceTime(1),\n                distinctUntilChanged(),\n            )\n            .subscribe(() => {\n                this.buildFormGroupMap();\n            });\n\n        this.buildFormGroupMap();\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n\n    getFeaturedAsset(variant: ProductWithVariants.Variants) {\n        return this.pendingAssetChanges[variant.id]?.featuredAsset || variant.featuredAsset;\n    }\n\n    optionGroupName(optionGroupId: string): string | undefined {\n        const group = this.optionGroups.find(g => g.id === optionGroupId);\n        return group && group.name;\n    }\n\n    private buildFormGroupMap() {\n        this.formGroupMap.clear();\n        for (const controlGroup of this.formArray.controls) {\n            this.formGroupMap.set(controlGroup.value.id, controlGroup as FormGroup);\n        }\n        this.changeDetector.markForCheck();\n    }\n}\n","import { ChangeDetectionStrategy, Component, Input, OnChanges, OnInit, SimpleChanges } from '@angular/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\nimport { BehaviorSubject, combineLatest, Observable, Subject } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'vdr-variant-price-detail',\r\n    templateUrl: './variant-price-detail.component.html',\r\n    styleUrls: ['./variant-price-detail.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class VariantPriceDetailComponent implements OnInit, OnChanges {\r\n    @Input() priceIncludesTax: boolean;\r\n    @Input() price: number;\r\n    @Input() currencyCode: string;\r\n    @Input() taxCategoryId: string;\r\n\r\n    grossPrice$: Observable<number>;\r\n    taxRate$: Observable<number>;\r\n\r\n    private priceChange$ = new BehaviorSubject<number>(0);\r\n    private taxCategoryIdChange$ = new BehaviorSubject<string>('');\r\n\r\n    constructor(private dataService: DataService) {}\r\n\r\n    ngOnInit() {\r\n        const taxRates$ = this.dataService.settings\r\n            .getTaxRates(999, 0, 'cache-first')\r\n            .mapStream(data => data.taxRates.items);\r\n        const activeChannel$ = this.dataService.settings\r\n            .getActiveChannel('cache-first')\r\n            .refetchOnChannelChange()\r\n            .mapStream(data => data.activeChannel);\r\n\r\n        this.taxRate$ = combineLatest(activeChannel$, taxRates$, this.taxCategoryIdChange$).pipe(\r\n            map(([channel, taxRates, taxCategoryId]) => {\r\n                const defaultTaxZone = channel.defaultTaxZone;\r\n                if (!defaultTaxZone) {\r\n                    return 0;\r\n                }\r\n                const applicableRate = taxRates.find(\r\n                    taxRate => taxRate.zone.id === defaultTaxZone.id && taxRate.category.id === taxCategoryId,\r\n                );\r\n\r\n                if (!applicableRate) {\r\n                    return 0;\r\n                }\r\n                return applicableRate.value;\r\n            }),\r\n        );\r\n\r\n        this.grossPrice$ = combineLatest(this.taxRate$, this.priceChange$).pipe(\r\n            map(([taxRate, price]) => {\r\n                return Math.round(price * ((100 + taxRate) / 100));\r\n            }),\r\n        );\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        if ('price' in changes) {\r\n            this.priceChange$.next(changes.price.currentValue);\r\n        }\r\n        if ('taxCategoryId' in changes) {\r\n            this.taxCategoryIdChange$.next(changes.taxCategoryId.currentValue);\r\n        }\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { SharedModule } from '@vendure/admin-ui/core';\r\n\r\nimport { catalogRoutes } from './catalog.routes';\r\nimport { ApplyFacetDialogComponent } from './components/apply-facet-dialog/apply-facet-dialog.component';\r\nimport { AssetDetailComponent } from './components/asset-detail/asset-detail.component';\r\nimport { AssetListComponent } from './components/asset-list/asset-list.component';\r\nimport { AssignProductsToChannelDialogComponent } from './components/assign-products-to-channel-dialog/assign-products-to-channel-dialog.component';\r\nimport { CollectionContentsComponent } from './components/collection-contents/collection-contents.component';\r\nimport { CollectionDetailComponent } from './components/collection-detail/collection-detail.component';\r\nimport { CollectionListComponent } from './components/collection-list/collection-list.component';\r\nimport { CollectionTreeNodeComponent } from './components/collection-tree/collection-tree-node.component';\r\nimport { CollectionTreeComponent } from './components/collection-tree/collection-tree.component';\r\nimport { ConfirmVariantDeletionDialogComponent } from './components/confirm-variant-deletion-dialog/confirm-variant-deletion-dialog.component';\r\nimport { FacetDetailComponent } from './components/facet-detail/facet-detail.component';\r\nimport { FacetListComponent } from './components/facet-list/facet-list.component';\r\nimport { GenerateProductVariantsComponent } from './components/generate-product-variants/generate-product-variants.component';\r\nimport { OptionValueInputComponent } from './components/option-value-input/option-value-input.component';\r\nimport { ProductAssetsComponent } from './components/product-assets/product-assets.component';\r\nimport { ProductDetailComponent } from './components/product-detail/product-detail.component';\r\nimport { ProductListComponent } from './components/product-list/product-list.component';\r\nimport { ProductSearchInputComponent } from './components/product-search-input/product-search-input.component';\r\nimport { ProductVariantsEditorComponent } from './components/product-variants-editor/product-variants-editor.component';\r\nimport { ProductVariantsListComponent } from './components/product-variants-list/product-variants-list.component';\r\nimport { ProductVariantsTableComponent } from './components/product-variants-table/product-variants-table.component';\r\nimport { UpdateProductOptionDialogComponent } from './components/update-product-option-dialog/update-product-option-dialog.component';\r\nimport { VariantPriceDetailComponent } from './components/variant-price-detail/variant-price-detail.component';\r\n\r\n@NgModule({\r\n    imports: [SharedModule, RouterModule.forChild(catalogRoutes)],\r\n    exports: [],\r\n    declarations: [\r\n        ProductListComponent,\r\n        ProductDetailComponent,\r\n        FacetListComponent,\r\n        FacetDetailComponent,\r\n        GenerateProductVariantsComponent,\r\n        ProductVariantsListComponent,\r\n        ApplyFacetDialogComponent,\r\n        AssetListComponent,\r\n        ProductAssetsComponent,\r\n        VariantPriceDetailComponent,\r\n        CollectionListComponent,\r\n        CollectionDetailComponent,\r\n        CollectionTreeComponent,\r\n        CollectionTreeNodeComponent,\r\n        CollectionContentsComponent,\r\n        ProductVariantsTableComponent,\r\n        ProductSearchInputComponent,\r\n        OptionValueInputComponent,\r\n        UpdateProductOptionDialogComponent,\r\n        ProductVariantsEditorComponent,\r\n        AssignProductsToChannelDialogComponent,\r\n        AssetDetailComponent,\r\n        ConfirmVariantDeletionDialogComponent,\r\n    ],\r\n})\r\nexport class CatalogModule {}\r\n"]}