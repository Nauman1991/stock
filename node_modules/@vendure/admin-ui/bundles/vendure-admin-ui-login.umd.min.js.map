{"version":3,"sources":["../../src/lib/login/src/components/login/login.component.ts","../../src/lib/login/src/providers/login.guard.ts","../../src/lib/login/src/login.routes.ts","../../src/lib/login/src/login.module.ts"],"names":["LoginComponent","authService","router","this","username","password","rememberMe","version","ADMIN_UI_VERSION","brand","getAppConfig","hideVendureBranding","hideVersion","prototype","logIn","_this","errorMessage","undefined","subscribe","result","__typename","redirect","getRedirectRoute","navigateByUrl","message","redirectTo","re","RegExp","AUTH_REDIRECT_PARAM","redirectToParam","window","location","search","match","length","atob","decodeURIComponent","e","Component","args","selector","template","AuthService","Router","LoginGuard","canActivate","route","checkAuthenticatedStatus","pipe","map","authenticated","navigate","Injectable","providedIn","loginRoutes","path","component","pathMatch","NgModule","imports","SharedModule","RouterModule","forChild","exports","declarations"],"mappings":"4nBAmBI,SAAAA,EAAoBC,EAAkCC,GAAlCC,KAAAF,YAAAA,EAAkCE,KAAAD,OAAAA,EATtDC,KAAAC,SAAW,GACXD,KAAAE,SAAW,GACXF,KAAAG,YAAa,EACbH,KAAAI,QAAUC,EAAAA,iBAEVL,KAAAM,MAAQC,EAAAA,eAAeD,MACvBN,KAAAQ,oBAAsBD,EAAAA,eAAeC,oBACrCR,KAAAS,YAAcF,EAAAA,eAAeE,mBAI7BZ,EAAAa,UAAAC,MAAA,WAAA,IAAAC,EAAAZ,KACIA,KAAKa,kBAAeC,EACpBd,KAAKF,YAAYa,MAAMX,KAAKC,SAAUD,KAAKE,SAAUF,KAAKG,YAAYY,WAAU,SAAAC,GAC5E,OAAQA,EAAOC,YACX,IAAK,cACD,IAAMC,EAAWN,EAAKO,mBACtBP,EAAKb,OAAOqB,cAAcF,GAAsB,KAChD,MACJ,IAAK,0BACL,IAAK,0BACDN,EAAKC,aAAeG,EAAOK,aAUnCxB,EAAAa,UAAAS,iBAAA,WACJ,IAAIG,EACEC,EAAK,IAAIC,OAAUC,EAAAA,oBAAmB,SAC5C,IACI,IAAMC,EAAkBC,OAAOC,SAASC,OAAOC,MAAMP,GACjDG,GAAmB,EAAIA,EAAgBK,SACvCT,EAAaU,KAAKC,mBAAmBP,EAAgB,MAE3D,MAAOQ,IAGT,OAAOZ,4BAhDda,EAAAA,UAASC,KAAA,CAAC,CACPC,SAAU,YACVC,SAAA,ioGAJuBC,EAAAA,mBADlBC,EAAAA,2BCYL,SAAAC,EAAoB1C,EAAwBD,GAAxBE,KAAAD,OAAAA,EAAwBC,KAAAF,YAAAA,SAE5C2C,EAAA/B,UAAAgC,YAAA,SAAYC,GAAZ,IAAA/B,EAAAZ,KACI,OAAOA,KAAKF,YAAY8C,2BAA2BC,KAC/CC,EAAAA,KAAI,SAAAC,GAIA,OAHIA,GACAnC,EAAKb,OAAOiD,SAAS,CAAC,OAElBD,2KAZvBE,EAAAA,WAAUb,KAAA,CAAC,CACRc,WAAY,oDAT8BV,EAAAA,cACrCD,EAAAA,mBCGIY,EAAsB,CAC/B,CACIC,KAAM,GACNC,UAAWxD,EACXyD,UAAW,OACXZ,YAAa,CAACD,OCEtB,iCALCc,EAAAA,SAAQnB,KAAA,CAAC,CACNoB,QAAS,CAACC,EAAAA,aAAcC,EAAAA,aAAaC,SAASR,IAC9CS,QAAS,GACTC,aAAc,CAAChE","sourcesContent":["import { Component } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { ADMIN_UI_VERSION, AuthService, AUTH_REDIRECT_PARAM, getAppConfig } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-login',\r\n    templateUrl: './login.component.html',\r\n    styleUrls: ['./login.component.scss'],\r\n})\r\nexport class LoginComponent {\r\n    username = '';\r\n    password = '';\r\n    rememberMe = false;\r\n    version = ADMIN_UI_VERSION;\r\n    errorMessage: string | undefined;\r\n    brand = getAppConfig().brand;\r\n    hideVendureBranding = getAppConfig().hideVendureBranding;\r\n    hideVersion = getAppConfig().hideVersion;\r\n\r\n    constructor(private authService: AuthService, private router: Router) {}\r\n\r\n    logIn(): void {\r\n        this.errorMessage = undefined;\r\n        this.authService.logIn(this.username, this.password, this.rememberMe).subscribe(result => {\r\n            switch (result.__typename) {\r\n                case 'CurrentUser':\r\n                    const redirect = this.getRedirectRoute();\r\n                    this.router.navigateByUrl(redirect ? redirect : '/');\r\n                    break;\r\n                case 'InvalidCredentialsError':\r\n                case 'NativeAuthStrategyError':\r\n                    this.errorMessage = result.message;\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Attempts to read a redirect param from the current url and parse it into a\r\n     * route from which the user was redirected after a 401 error.\r\n     */\r\n    private getRedirectRoute(): string | undefined {\r\n        let redirectTo: string | undefined;\r\n        const re = new RegExp(`${AUTH_REDIRECT_PARAM}=(.*)`);\r\n        try {\r\n            const redirectToParam = window.location.search.match(re);\r\n            if (redirectToParam && 1 < redirectToParam.length) {\r\n                redirectTo = atob(decodeURIComponent(redirectToParam[1]));\r\n            }\r\n        } catch (e) {\r\n            // ignore\r\n        }\r\n        return redirectTo;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, CanActivate, Router } from '@angular/router';\r\nimport { AuthService } from '@vendure/admin-ui/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\n/**\r\n * This guard prevents loggen-in users from navigating to the login screen.\r\n */\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class LoginGuard implements CanActivate {\r\n    constructor(private router: Router, private authService: AuthService) {}\r\n\r\n    canActivate(route: ActivatedRouteSnapshot): Observable<boolean> {\r\n        return this.authService.checkAuthenticatedStatus().pipe(\r\n            map(authenticated => {\r\n                if (authenticated) {\r\n                    this.router.navigate(['/']);\r\n                }\r\n                return !authenticated;\r\n            }),\r\n        );\r\n    }\r\n}\r\n","import { Routes } from '@angular/router';\r\n\r\nimport { LoginComponent } from './components/login/login.component';\r\nimport { LoginGuard } from './providers/login.guard';\r\n\r\nexport const loginRoutes: Routes = [\r\n    {\r\n        path: '',\r\n        component: LoginComponent,\r\n        pathMatch: 'full',\r\n        canActivate: [LoginGuard],\r\n    },\r\n];\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { SharedModule } from '@vendure/admin-ui/core';\r\n\r\nimport { LoginComponent } from './components/login/login.component';\r\nimport { loginRoutes } from './login.routes';\r\n\r\n@NgModule({\r\n    imports: [SharedModule, RouterModule.forChild(loginRoutes)],\r\n    exports: [],\r\n    declarations: [LoginComponent],\r\n})\r\nexport class LoginModule {}\r\n"]}