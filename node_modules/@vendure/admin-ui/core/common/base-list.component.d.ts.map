{"version":3,"file":"base-list.component.d.ts","sources":["base-list.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { OnDestroy, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, QueryParamsHandling, Router } from '@angular/router';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { QueryResult } from '../data/query-result';\r\nexport declare type ListQueryFn<R> = (take: number, skip: number, ...args: any[]) => QueryResult<R, any>;\r\nexport declare type MappingFn<T, R> = (result: R) => {\r\n    items: T[];\r\n    totalItems: number;\r\n};\r\nexport declare type OnPageChangeFn<V> = (skip: number, take: number) => V;\r\n/**\r\n * This is a base class which implements the logic required to fetch and manipulate\r\n * a list of data from a query which returns a PaginatedList type.\r\n */\r\nexport declare class BaseListComponent<ResultType, ItemType, VariableType = any> implements OnInit, OnDestroy {\r\n    protected router: Router;\r\n    protected route: ActivatedRoute;\r\n    result$: Observable<ResultType>;\r\n    items$: Observable<ItemType[]>;\r\n    totalItems$: Observable<number>;\r\n    itemsPerPage$: Observable<number>;\r\n    currentPage$: Observable<number>;\r\n    protected destroy$: Subject<void>;\r\n    private listQuery;\r\n    private listQueryFn;\r\n    private mappingFn;\r\n    private onPageChangeFn;\r\n    private refresh$;\r\n    private defaults;\r\n    constructor(router: Router, route: ActivatedRoute);\r\n    /**\r\n     * Sets the fetch function for the list being implemented.\r\n     */\r\n    setQueryFn(listQueryFn: ListQueryFn<ResultType>, mappingFn: MappingFn<ItemType, ResultType>, onPageChangeFn?: OnPageChangeFn<VariableType>, defaults?: {\r\n        take: number;\r\n        skip: number;\r\n    }): void;\r\n    ngOnInit(): void;\r\n    ngOnDestroy(): void;\r\n    setPageNumber(page: number): void;\r\n    setItemsPerPage(perPage: number): void;\r\n    /**\r\n     * Re-fetch the current page\r\n     */\r\n    refresh(): void;\r\n    protected setQueryParam(hash: {\r\n        [key: string]: any;\r\n    }, options?: {\r\n        replaceUrl?: boolean;\r\n        queryParamsHandling?: QueryParamsHandling;\r\n    }): any;\r\n    protected setQueryParam(key: string, value: any, options?: {\r\n        replaceUrl?: boolean;\r\n        queryParamsHandling?: QueryParamsHandling;\r\n    }): any;\r\n}\r\n"]}