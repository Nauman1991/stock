{"version":3,"file":"data.service.d.ts","sources":["data.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { MutationUpdaterFn, WatchQueryFetchPolicy } from '@apollo/client/core';\r\nimport { DocumentNode } from 'graphql';\r\nimport { Observable } from 'rxjs';\r\nimport { QueryResult } from '../query-result';\r\nimport { AdministratorDataService } from './administrator-data.service';\r\nimport { AuthDataService } from './auth-data.service';\r\nimport { BaseDataService } from './base-data.service';\r\nimport { ClientDataService } from './client-data.service';\r\nimport { CollectionDataService } from './collection-data.service';\r\nimport { CustomerDataService } from './customer-data.service';\r\nimport { FacetDataService } from './facet-data.service';\r\nimport { OrderDataService } from './order-data.service';\r\nimport { ProductDataService } from './product-data.service';\r\nimport { PromotionDataService } from './promotion-data.service';\r\nimport { SettingsDataService } from './settings-data.service';\r\nimport { ShippingMethodDataService } from './shipping-method-data.service';\r\nexport declare class DataService {\r\n    private baseDataService;\r\n    promotion: PromotionDataService;\r\n    administrator: AdministratorDataService;\r\n    auth: AuthDataService;\r\n    collection: CollectionDataService;\r\n    product: ProductDataService;\r\n    client: ClientDataService;\r\n    facet: FacetDataService;\r\n    order: OrderDataService;\r\n    settings: SettingsDataService;\r\n    customer: CustomerDataService;\r\n    shippingMethod: ShippingMethodDataService;\r\n    constructor(baseDataService: BaseDataService);\r\n    /**\r\n     * Perform a GraphQL query.\r\n     */\r\n    query<T, V = Record<string, any>>(query: DocumentNode, variables?: V, fetchPolicy?: WatchQueryFetchPolicy): QueryResult<T, V>;\r\n    /**\r\n     * Perform a GraphQL mutation.\r\n     */\r\n    mutate<T, V = Record<string, any>>(mutation: DocumentNode, variables?: V, update?: MutationUpdaterFn<T>): Observable<T>;\r\n}\r\n"]}