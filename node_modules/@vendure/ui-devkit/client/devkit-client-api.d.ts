import { NotificationMessage, WatchQueryFetchPolicy } from '@vendure/common/lib/extension-host-types';
import { Observable } from 'rxjs';
/**
 * @description
 * Set the [window.postMessage API](https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage)
 * `targetOrigin`. The Vendure ui-devkit uses the postMessage API to
 * enable cross-frame and cross-origin communication between the ui extension code and the Admin UI
 * app. The `targetOrigin` is a security feature intended to provide control over where messages are sent.
 *
 * @docsCategory ui-devkit
 * @docsPage UiDevkitClient
 */
export declare function setTargetOrigin(value: string): void;
/**
 * @description
 * Perform a GraphQL query and returns either an Observable or a Promise of the result.
 *
 * @docsCategory ui-devkit
 * @docsPage UiDevkitClient
 */
export declare function graphQlQuery<T, V extends {
    [key: string]: any;
}>(document: string, variables?: {
    [key: string]: any;
}, fetchPolicy?: WatchQueryFetchPolicy): {
    then: Promise<T>['then'];
    stream: Observable<T>;
};
/**
 * @description
 * Perform a GraphQL mutation and returns either an Observable or a Promise of the result.
 *
 * @docsCategory ui-devkit
 * @docsPage UiDevkitClient
 */
export declare function graphQlMutation<T, V extends {
    [key: string]: any;
}>(document: string, variables?: {
    [key: string]: any;
}): {
    then: Promise<T>['then'];
    stream: Observable<T>;
};
/**
 * @description
 * Display a toast notification.
 *
 * @docsCategory ui-devkit
 * @docsPage UiDevkitClient
 */
export declare function notify(options: NotificationMessage['data']): void;
