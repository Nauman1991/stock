{"version":3,"sources":["webpack:///common/src/generated-shop-types.ts","webpack:///src/lib/customer/src/components/customer-group-member-list/customer-group-member-list.component.html","webpack:///src/lib/customer/src/components/customer-group-member-list/customer-group-member-list.component.ts","webpack:///src/lib/customer/src/components/add-customer-to-group-dialog/add-customer-to-group-dialog.component.html","webpack:///src/lib/customer/src/components/add-customer-to-group-dialog/add-customer-to-group-dialog.component.ts","webpack:///src/lib/customer/src/components/address-detail-dialog/address-detail-dialog.component.html","webpack:///src/lib/customer/src/components/address-detail-dialog/address-detail-dialog.component.ts","webpack:///src/lib/customer/src/components/address-card/address-card.component.html","webpack:///src/lib/customer/src/components/address-card/address-card.component.ts","webpack:///src/lib/customer/src/components/select-customer-group-dialog/select-customer-group-dialog.component.html","webpack:///src/lib/customer/src/components/select-customer-group-dialog/select-customer-group-dialog.component.ts","webpack:///src/lib/customer/src/components/customer-status-label/customer-status-label.component.html","webpack:///src/lib/customer/src/components/customer-status-label/customer-status-label.component.ts","webpack:///src/lib/customer/src/components/customer-history/customer-history.component.html","webpack:///src/lib/customer/src/components/customer-history/customer-history.component.ts","webpack:///src/lib/customer/src/components/customer-detail/customer-detail.component.html","webpack:///src/lib/customer/src/components/customer-detail/customer-detail.component.ts","webpack:///node_modules/rxjs/_esm2015/internal/operators/merge.js","webpack:///src/lib/customer/src/components/customer-group-detail-dialog/customer-group-detail-dialog.component.html","webpack:///src/lib/customer/src/components/customer-group-detail-dialog/customer-group-detail-dialog.component.ts","webpack:///src/lib/customer/src/components/customer-group-list/customer-group-list.component.html","webpack:///src/lib/customer/src/components/customer-group-list/customer-group-list.component.ts","webpack:///src/lib/customer/src/components/customer-list/customer-list.component.html","webpack:///src/lib/customer/src/components/customer-list/customer-list.component.ts","webpack:///src/lib/customer/src/providers/routing/customer-resolver.ts","webpack:///src/lib/customer/src/customer.routes.ts","webpack:///src/lib/customer/src/customer.module.ts"],"names":["LanguageCode","HistoryEntryType","CurrencyCode","LogicalOperator","ErrorCode","SortOrder","Permission","DeletionResult","AdjustmentType","GlobalFlag","AssetType","IMAGE","VIDEO","BINARY","TRUE","FALSE","INHERIT","PROMOTION","DISTRIBUTED_ORDER_PROMOTION","DELETED","NOT_DELETED","Authenticated","SuperAdmin","Owner","Public","UpdateGlobalSettings","CreateCatalog","ReadCatalog","UpdateCatalog","DeleteCatalog","CreateSettings","ReadSettings","UpdateSettings","DeleteSettings","CreateAdministrator","ReadAdministrator","UpdateAdministrator","DeleteAdministrator","CreateAsset","ReadAsset","UpdateAsset","DeleteAsset","CreateChannel","ReadChannel","UpdateChannel","DeleteChannel","CreateCollection","ReadCollection","UpdateCollection","DeleteCollection","CreateCountry","ReadCountry","UpdateCountry","DeleteCountry","CreateCustomer","ReadCustomer","UpdateCustomer","DeleteCustomer","CreateCustomerGroup","ReadCustomerGroup","UpdateCustomerGroup","DeleteCustomerGroup","CreateFacet","ReadFacet","UpdateFacet","DeleteFacet","CreateOrder","ReadOrder","UpdateOrder","DeleteOrder","CreatePaymentMethod","ReadPaymentMethod","UpdatePaymentMethod","DeletePaymentMethod","CreateProduct","ReadProduct","UpdateProduct","DeleteProduct","CreatePromotion","ReadPromotion","UpdatePromotion","DeletePromotion","CreateShippingMethod","ReadShippingMethod","UpdateShippingMethod","DeleteShippingMethod","CreateTag","ReadTag","UpdateTag","DeleteTag","CreateTaxCategory","ReadTaxCategory","UpdateTaxCategory","DeleteTaxCategory","CreateTaxRate","ReadTaxRate","UpdateTaxRate","DeleteTaxRate","CreateSystem","ReadSystem","UpdateSystem","DeleteSystem","CreateZone","ReadZone","UpdateZone","DeleteZone","ASC","DESC","UNKNOWN_ERROR","NATIVE_AUTH_STRATEGY_ERROR","INVALID_CREDENTIALS_ERROR","ORDER_STATE_TRANSITION_ERROR","EMAIL_ADDRESS_CONFLICT_ERROR","ORDER_LIMIT_ERROR","NEGATIVE_QUANTITY_ERROR","INSUFFICIENT_STOCK_ERROR","ORDER_MODIFICATION_ERROR","INELIGIBLE_SHIPPING_METHOD_ERROR","ORDER_PAYMENT_STATE_ERROR","INELIGIBLE_PAYMENT_METHOD_ERROR","PAYMENT_FAILED_ERROR","PAYMENT_DECLINED_ERROR","COUPON_CODE_INVALID_ERROR","COUPON_CODE_EXPIRED_ERROR","COUPON_CODE_LIMIT_ERROR","ALREADY_LOGGED_IN_ERROR","MISSING_PASSWORD_ERROR","PASSWORD_ALREADY_SET_ERROR","VERIFICATION_TOKEN_INVALID_ERROR","VERIFICATION_TOKEN_EXPIRED_ERROR","IDENTIFIER_CHANGE_TOKEN_INVALID_ERROR","IDENTIFIER_CHANGE_TOKEN_EXPIRED_ERROR","PASSWORD_RESET_TOKEN_INVALID_ERROR","PASSWORD_RESET_TOKEN_EXPIRED_ERROR","NOT_VERIFIED_ERROR","NO_ACTIVE_ORDER_ERROR","AND","OR","AED","AFN","ALL","AMD","ANG","AOA","ARS","AUD","AWG","AZN","BAM","BBD","BDT","BGN","BHD","BIF","BMD","BND","BOB","BRL","BSD","BTN","BWP","BYN","BZD","CAD","CDF","CHF","CLP","CNY","COP","CRC","CUC","CUP","CVE","CZK","DJF","DKK","DOP","DZD","EGP","ERN","ETB","EUR","FJD","FKP","GBP","GEL","GHS","GIP","GMD","GNF","GTQ","GYD","HKD","HNL","HRK","HTG","HUF","IDR","ILS","INR","IQD","IRR","ISK","JMD","JOD","JPY","KES","KGS","KHR","KMF","KPW","KRW","KWD","KYD","KZT","LAK","LBP","LKR","LRD","LSL","LYD","MAD","MDL","MGA","MKD","MMK","MNT","MOP","MRU","MUR","MVR","MWK","MXN","MYR","MZN","NAD","NGN","NIO","NOK","NPR","NZD","OMR","PAB","PEN","PGK","PHP","PKR","PLN","PYG","QAR","RON","RSD","RUB","RWF","SAR","SBD","SCR","SDG","SEK","SGD","SHP","SLL","SOS","SRD","SSP","STN","SVC","SYP","SZL","THB","TJS","TMT","TND","TOP","TRY","TTD","TWD","TZS","UAH","UGX","USD","UYU","UZS","VES","VND","VUV","WST","XAF","XCD","XOF","XPF","YER","ZAR","ZMW","ZWL","CUSTOMER_REGISTERED","CUSTOMER_VERIFIED","CUSTOMER_DETAIL_UPDATED","CUSTOMER_ADDED_TO_GROUP","CUSTOMER_REMOVED_FROM_GROUP","CUSTOMER_ADDRESS_CREATED","CUSTOMER_ADDRESS_UPDATED","CUSTOMER_ADDRESS_DELETED","CUSTOMER_PASSWORD_UPDATED","CUSTOMER_PASSWORD_RESET_REQUESTED","CUSTOMER_PASSWORD_RESET_VERIFIED","CUSTOMER_EMAIL_UPDATE_REQUESTED","CUSTOMER_EMAIL_UPDATE_VERIFIED","CUSTOMER_NOTE","ORDER_STATE_TRANSITION","ORDER_PAYMENT_TRANSITION","ORDER_FULFILLMENT","ORDER_CANCELLATION","ORDER_REFUND_TRANSITION","ORDER_FULFILLMENT_TRANSITION","ORDER_NOTE","ORDER_COUPON_APPLIED","ORDER_COUPON_REMOVED","ORDER_MODIFIED","af","ak","sq","am","ar","hy","as","az","bm","bn","eu","be","bs","br","bg","my","ca","ce","zh","zh_Hans","zh_Hant","cu","kw","co","hr","cs","da","nl","nl_BE","dz","en","en_AU","en_CA","en_GB","en_US","eo","et","ee","fo","fi","fr","fr_CA","fr_CH","ff","gl","lg","ka","de","de_AT","de_CH","el","gu","ht","ha","he","hi","hu","is","ig","id","ia","ga","it","ja","jv","kl","kn","ks","kk","km","ki","rw","ko","ku","ky","lo","la","lv","ln","lt","lu","lb","mk","mg","ms","ml","mt","gv","mi","mr","mn","ne","nd","se","nb","nn","ny","or","om","os","ps","fa","fa_AF","pl","pt","pt_BR","pt_PT","pa","qu","ro","ro_MD","rm","rn","ru","sm","sg","sa","gd","sr","sn","ii","sd","si","sk","sl","so","st","es","es_ES","es_MX","su","sw","sw_CD","sv","tg","ta","tt","te","th","bo","ti","to","tr","tk","uk","ur","ug","uz","vi","vo","cy","fy","wo","xh","yi","yo","zu","router","dataService","selectedMemberIds","selectionChange","fetchParamsChange","filterTermControl","refresh$","BehaviorSubject","destroy$","Subject","isMemberSelected","member","this","indexOf","membersCurrentPage$","route","paramMap","pipe","map","qpm","get","page","startWith","distinctUntilChanged","membersItemsPerPage$","perPage","filterTerm$","valueChanges","debounceTime","tap","setContentsPageNumber","combineLatest","takeUntil","subscribe","filterTerm","currentPage","itemsPerPage","take","skip","emit","next","complete","setParam","key","value","navigate","snapshot","params","relativeTo","queryParamsHandling","members","length","areAllSelected","v","includes","filter","setContentsItemsPerPage","toggleSelectMember","toggleSelectAll","selectedCustomerIds","fetchGroupMembers$","customerResult$","switchMap","customer","getCustomerList","mapStream","res","customers","customers$","items","customersTotal$","totalItems","resolveWith","AddressDetailDialogComponent","changeDetector","availableCountries","addressForm","markForCheck","modalService","editable","setAsDefaultShipping","setAsDefaultBilling","dataDependenciesPopulated","editAddress","changes","customFields","countryCode","match","find","c","code","name","markAsDirty","fromComponent","locals","size","closable","SelectCustomerGroupDialogComponent","selectedGroupIds","groups$","getCustomerGroupList","customerGroups","CustomerStatusLabelComponent","updateNote","deleteNote","addNote","note","type","entry","administrator","firstName","lastName","serverConfigService","formBuilder","notificationService","super","fetchHistory","addressDefaultsUpdated","ordersPerPage","currentOrdersPage","orderListUpdates$","getCustomFieldConfig","addressCustomFields","detailForm","group","title","required","phoneNumber","emailAddress","email","password","reduce","hash","field","addresses","init","availableCountries$","settings","getAvailableCountries","mapSingle","result","countries","shareReplay","customerWithUpdates$","entity$","observables","source","lift","call","merge","orders$","orders","ordersCount$","history$","getCustomerHistory","sort","createdAt","data","history","destroy","controls","defaultBillingAddressId","defaultShippingAddressId","addressFormArray","newAddress","fullName","company","streetLine1","streetLine2","city","province","postalCode","defaultShippingAddress","defaultBillingAddress","customFieldsGroup","fieldDef","addControl","push","fetchOrdersList","customerForm","formValue","createCustomer","__typename","success","entity","notify","message","translationVars","duration","markAsPristine","error","mergeMap","saveOperations","dirty","updateCustomer","addressControl","address","input","updateCustomerAddress","createCustomerAddress","forkJoin","err","groupIds","from","concatMap","groupId","addCustomersToGroup","customerCount","groupName","getCustomer","single$","dialog","buttons","label","returnValue","response","removeCustomersFromGroup","addNoteToCustomer","displayPrivacyControls","updateCustomerNote","noteId","body","deleteCustomerNote","customerGroup","patchValue","addressesArray","rest","addressGroup","country","control","setControl","notNullOrUndefined","CustomerGroupDetailDialogComponent","refreshActiveGroupMembers$","activeGroupId$","pm","listIsEmpty$","groups","activeGroup$","activeGroupId","g","membersResult$","activeGroup","getCustomerGroupWithCustomers","contains","of","members$","membersTotal$","createCustomerGroup","customerIds","deleteCustomerGroup","errorMessage","updateCustomerGroup","contents","verticalAlign","mapTo","emailSearchTerm","lastNameSearchTerm","refetchOnChannelChange","options","refresh","deleteCustomer","setPageNumber","setItemsPerPage","updatedAt","user","customerRoutes","path","component","pathMatch","breadcrumb","resolve","canDeactivate","customerBreadcrumb","breadcrumbKey","getName","CustomerModule","forChild"],"mappings":"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GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,MAAA,QAEA,EAAAC,MAAA,QAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,MAAA,QAEA,EAAAC,MAAA,QAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,MAAA,QAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,MAAA,QAEA,EAAAC,MAAA,QAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,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","file":"x","sourcesContent":["// tslint:disable\r\nexport type Maybe<T> = T;\r\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\r\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\r\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\r\n/** All built-in and custom scalars, mapped to their actual values */\r\nexport type Scalars = {\r\n  ID: string | number;\r\n  String: string;\r\n  Boolean: boolean;\r\n  Int: number;\r\n  Float: number;\r\n  /** The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */\r\n  JSON: any;\r\n  /** A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar. */\r\n  DateTime: any;\r\n  /** The `Upload` scalar type represents a file upload. */\r\n  Upload: any;\r\n};\r\n\r\nexport type Query = {\r\n  __typename?: 'Query';\r\n  /** The active Channel */\r\n  activeChannel: Channel;\r\n  /** The active Customer */\r\n  activeCustomer?: Maybe<Customer>;\r\n  /**\r\n   * The active Order. Will be `null` until an Order is created via `addItemToOrder`. Once an Order reaches the\r\n   * state of `PaymentApproved` or `PaymentSettled`, then that Order is no longer considered \"active\" and this\r\n   * query will once again return `null`.\r\n   */\r\n  activeOrder?: Maybe<Order>;\r\n  /** An array of supported Countries */\r\n  availableCountries: Array<Country>;\r\n  /** A list of Collections available to the shop */\r\n  collections: CollectionList;\r\n  /** Returns a Collection either by its id or slug. If neither 'id' nor 'slug' is speicified, an error will result. */\r\n  collection?: Maybe<Collection>;\r\n  /** Returns a list of eligible shipping methods based on the current active Order */\r\n  eligibleShippingMethods: Array<ShippingMethodQuote>;\r\n  /** Returns a list of payment methods and their eligibility based on the current active Order */\r\n  eligiblePaymentMethods: Array<PaymentMethodQuote>;\r\n  /** Returns information about the current authenticated User */\r\n  me?: Maybe<CurrentUser>;\r\n  /** Returns the possible next states that the activeOrder can transition to */\r\n  nextOrderStates: Array<Scalars['String']>;\r\n  /**\r\n   * Returns an Order based on the id. Note that in the Shop API, only orders belonging to the\r\n   * currently-authenticated User may be queried.\r\n   */\r\n  order?: Maybe<Order>;\r\n  /**\r\n   * Returns an Order based on the order `code`. For guest Orders (i.e. Orders placed by non-authenticated Customers)\r\n   * this query will only return the Order within 2 hours of the Order being placed. This allows an Order confirmation\r\n   * screen to be shown immediately after completion of a guest checkout, yet prevents security risks of allowing\r\n   * general anonymous access to Order data.\r\n   */\r\n  orderByCode?: Maybe<Order>;\r\n  /** Get a Product either by id or slug. If neither 'id' nor 'slug' is speicified, an error will result. */\r\n  product?: Maybe<Product>;\r\n  /** Get a list of Products */\r\n  products: ProductList;\r\n  /** Search Products based on the criteria set by the `SearchInput` */\r\n  search: SearchResponse;\r\n};\r\n\r\n\r\nexport type QueryCollectionsArgs = {\r\n  options?: Maybe<CollectionListOptions>;\r\n};\r\n\r\n\r\nexport type QueryCollectionArgs = {\r\n  id?: Maybe<Scalars['ID']>;\r\n  slug?: Maybe<Scalars['String']>;\r\n};\r\n\r\n\r\nexport type QueryOrderArgs = {\r\n  id: Scalars['ID'];\r\n};\r\n\r\n\r\nexport type QueryOrderByCodeArgs = {\r\n  code: Scalars['String'];\r\n};\r\n\r\n\r\nexport type QueryProductArgs = {\r\n  id?: Maybe<Scalars['ID']>;\r\n  slug?: Maybe<Scalars['String']>;\r\n};\r\n\r\n\r\nexport type QueryProductsArgs = {\r\n  options?: Maybe<ProductListOptions>;\r\n};\r\n\r\n\r\nexport type QuerySearchArgs = {\r\n  input: SearchInput;\r\n};\r\n\r\nexport type Mutation = {\r\n  __typename?: 'Mutation';\r\n  /** Adds an item to the order. If custom fields are defined on the OrderLine entity, a third argument 'customFields' will be available. */\r\n  addItemToOrder: UpdateOrderItemsResult;\r\n  /** Remove an OrderLine from the Order */\r\n  removeOrderLine: RemoveOrderItemsResult;\r\n  /** Remove all OrderLine from the Order */\r\n  removeAllOrderLines: RemoveOrderItemsResult;\r\n  /** Adjusts an OrderLine. If custom fields are defined on the OrderLine entity, a third argument 'customFields' of type `OrderLineCustomFieldsInput` will be available. */\r\n  adjustOrderLine: UpdateOrderItemsResult;\r\n  /** Applies the given coupon code to the active Order */\r\n  applyCouponCode: ApplyCouponCodeResult;\r\n  /** Removes the given coupon code from the active Order */\r\n  removeCouponCode?: Maybe<Order>;\r\n  /** Transitions an Order to a new state. Valid next states can be found by querying `nextOrderStates` */\r\n  transitionOrderToState?: Maybe<TransitionOrderToStateResult>;\r\n  /** Sets the shipping address for this order */\r\n  setOrderShippingAddress: ActiveOrderResult;\r\n  /** Sets the billing address for this order */\r\n  setOrderBillingAddress: ActiveOrderResult;\r\n  /** Allows any custom fields to be set for the active order */\r\n  setOrderCustomFields: ActiveOrderResult;\r\n  /** Sets the shipping method by id, which can be obtained with the `eligibleShippingMethods` query */\r\n  setOrderShippingMethod: SetOrderShippingMethodResult;\r\n  /** Add a Payment to the Order */\r\n  addPaymentToOrder: AddPaymentToOrderResult;\r\n  /** Set the Customer for the Order. Required only if the Customer is not currently logged in */\r\n  setCustomerForOrder: SetCustomerForOrderResult;\r\n  /** Authenticates the user using the native authentication strategy. This mutation is an alias for `authenticate({ native: { ... }})` */\r\n  login: NativeAuthenticationResult;\r\n  /** Authenticates the user using a named authentication strategy */\r\n  authenticate: AuthenticationResult;\r\n  /** End the current authenticated session */\r\n  logout: Success;\r\n  /**\r\n   * Register a Customer account with the given credentials. There are three possible registration flows:\r\n   *\r\n   * _If `authOptions.requireVerification` is set to `true`:_\r\n   *\r\n   * 1. **The Customer is registered _with_ a password**. A verificationToken will be created (and typically emailed to the Customer). That\r\n   *    verificationToken would then be passed to the `verifyCustomerAccount` mutation _without_ a password. The Customer is then\r\n   *    verified and authenticated in one step.\r\n   * 2. **The Customer is registered _without_ a password**. A verificationToken will be created (and typically emailed to the Customer). That\r\n   *    verificationToken would then be passed to the `verifyCustomerAccount` mutation _with_ the chosed password of the Customer. The Customer is then\r\n   *    verified and authenticated in one step.\r\n   *\r\n   * _If `authOptions.requireVerification` is set to `false`:_\r\n   *\r\n   * 3. The Customer _must_ be registered _with_ a password. No further action is needed - the Customer is able to authenticate immediately.\r\n   */\r\n  registerCustomerAccount: RegisterCustomerAccountResult;\r\n  /** Regenerate and send a verification token for a new Customer registration. Only applicable if `authOptions.requireVerification` is set to true. */\r\n  refreshCustomerVerification: RefreshCustomerVerificationResult;\r\n  /** Update an existing Customer */\r\n  updateCustomer: Customer;\r\n  /** Create a new Customer Address */\r\n  createCustomerAddress: Address;\r\n  /** Update an existing Address */\r\n  updateCustomerAddress: Address;\r\n  /** Delete an existing Address */\r\n  deleteCustomerAddress: Success;\r\n  /**\r\n   * Verify a Customer email address with the token sent to that address. Only applicable if `authOptions.requireVerification` is set to true.\r\n   *\r\n   * If the Customer was not registered with a password in the `registerCustomerAccount` mutation, the a password _must_ be\r\n   * provided here.\r\n   */\r\n  verifyCustomerAccount: VerifyCustomerAccountResult;\r\n  /** Update the password of the active Customer */\r\n  updateCustomerPassword: UpdateCustomerPasswordResult;\r\n  /**\r\n   * Request to update the emailAddress of the active Customer. If `authOptions.requireVerification` is enabled\r\n   * (as is the default), then the `identifierChangeToken` will be assigned to the current User and\r\n   * a IdentifierChangeRequestEvent will be raised. This can then be used e.g. by the EmailPlugin to email\r\n   * that verification token to the Customer, which is then used to verify the change of email address.\r\n   */\r\n  requestUpdateCustomerEmailAddress: RequestUpdateCustomerEmailAddressResult;\r\n  /**\r\n   * Confirm the update of the emailAddress with the provided token, which has been generated by the\r\n   * `requestUpdateCustomerEmailAddress` mutation.\r\n   */\r\n  updateCustomerEmailAddress: UpdateCustomerEmailAddressResult;\r\n  /** Requests a password reset email to be sent */\r\n  requestPasswordReset?: Maybe<RequestPasswordResetResult>;\r\n  /** Resets a Customer's password based on the provided token */\r\n  resetPassword: ResetPasswordResult;\r\n};\r\n\r\n\r\nexport type MutationAddItemToOrderArgs = {\r\n  productVariantId: Scalars['ID'];\r\n  quantity: Scalars['Int'];\r\n};\r\n\r\n\r\nexport type MutationRemoveOrderLineArgs = {\r\n  orderLineId: Scalars['ID'];\r\n};\r\n\r\n\r\nexport type MutationAdjustOrderLineArgs = {\r\n  orderLineId: Scalars['ID'];\r\n  quantity: Scalars['Int'];\r\n};\r\n\r\n\r\nexport type MutationApplyCouponCodeArgs = {\r\n  couponCode: Scalars['String'];\r\n};\r\n\r\n\r\nexport type MutationRemoveCouponCodeArgs = {\r\n  couponCode: Scalars['String'];\r\n};\r\n\r\n\r\nexport type MutationTransitionOrderToStateArgs = {\r\n  state: Scalars['String'];\r\n};\r\n\r\n\r\nexport type MutationSetOrderShippingAddressArgs = {\r\n  input: CreateAddressInput;\r\n};\r\n\r\n\r\nexport type MutationSetOrderBillingAddressArgs = {\r\n  input: CreateAddressInput;\r\n};\r\n\r\n\r\nexport type MutationSetOrderCustomFieldsArgs = {\r\n  input: UpdateOrderInput;\r\n};\r\n\r\n\r\nexport type MutationSetOrderShippingMethodArgs = {\r\n  shippingMethodId: Scalars['ID'];\r\n};\r\n\r\n\r\nexport type MutationAddPaymentToOrderArgs = {\r\n  input: PaymentInput;\r\n};\r\n\r\n\r\nexport type MutationSetCustomerForOrderArgs = {\r\n  input: CreateCustomerInput;\r\n};\r\n\r\n\r\nexport type MutationLoginArgs = {\r\n  username: Scalars['String'];\r\n  password: Scalars['String'];\r\n  rememberMe?: Maybe<Scalars['Boolean']>;\r\n};\r\n\r\n\r\nexport type MutationAuthenticateArgs = {\r\n  input: AuthenticationInput;\r\n  rememberMe?: Maybe<Scalars['Boolean']>;\r\n};\r\n\r\n\r\nexport type MutationRegisterCustomerAccountArgs = {\r\n  input: RegisterCustomerInput;\r\n};\r\n\r\n\r\nexport type MutationRefreshCustomerVerificationArgs = {\r\n  emailAddress: Scalars['String'];\r\n};\r\n\r\n\r\nexport type MutationUpdateCustomerArgs = {\r\n  input: UpdateCustomerInput;\r\n};\r\n\r\n\r\nexport type MutationCreateCustomerAddressArgs = {\r\n  input: CreateAddressInput;\r\n};\r\n\r\n\r\nexport type MutationUpdateCustomerAddressArgs = {\r\n  input: UpdateAddressInput;\r\n};\r\n\r\n\r\nexport type MutationDeleteCustomerAddressArgs = {\r\n  id: Scalars['ID'];\r\n};\r\n\r\n\r\nexport type MutationVerifyCustomerAccountArgs = {\r\n  token: Scalars['String'];\r\n  password?: Maybe<Scalars['String']>;\r\n};\r\n\r\n\r\nexport type MutationUpdateCustomerPasswordArgs = {\r\n  currentPassword: Scalars['String'];\r\n  newPassword: Scalars['String'];\r\n};\r\n\r\n\r\nexport type MutationRequestUpdateCustomerEmailAddressArgs = {\r\n  password: Scalars['String'];\r\n  newEmailAddress: Scalars['String'];\r\n};\r\n\r\n\r\nexport type MutationUpdateCustomerEmailAddressArgs = {\r\n  token: Scalars['String'];\r\n};\r\n\r\n\r\nexport type MutationRequestPasswordResetArgs = {\r\n  emailAddress: Scalars['String'];\r\n};\r\n\r\n\r\nexport type MutationResetPasswordArgs = {\r\n  token: Scalars['String'];\r\n  password: Scalars['String'];\r\n};\r\n\r\nexport type Address = Node & {\r\n  __typename?: 'Address';\r\n  id: Scalars['ID'];\r\n  createdAt: Scalars['DateTime'];\r\n  updatedAt: Scalars['DateTime'];\r\n  fullName?: Maybe<Scalars['String']>;\r\n  company?: Maybe<Scalars['String']>;\r\n  streetLine1: Scalars['String'];\r\n  streetLine2?: Maybe<Scalars['String']>;\r\n  city?: Maybe<Scalars['String']>;\r\n  province?: Maybe<Scalars['String']>;\r\n  postalCode?: Maybe<Scalars['String']>;\r\n  country: Country;\r\n  phoneNumber?: Maybe<Scalars['String']>;\r\n  defaultShippingAddress?: Maybe<Scalars['Boolean']>;\r\n  defaultBillingAddress?: Maybe<Scalars['Boolean']>;\r\n  customFields?: Maybe<Scalars['JSON']>;\r\n};\r\n\r\nexport type Asset = Node & {\r\n  __typename?: 'Asset';\r\n  id: Scalars['ID'];\r\n  createdAt: Scalars['DateTime'];\r\n  updatedAt: Scalars['DateTime'];\r\n  name: Scalars['String'];\r\n  type: AssetType;\r\n  fileSize: Scalars['Int'];\r\n  mimeType: Scalars['String'];\r\n  width: Scalars['Int'];\r\n  height: Scalars['Int'];\r\n  source: Scalars['String'];\r\n  preview: Scalars['String'];\r\n  focalPoint?: Maybe<Coordinate>;\r\n  customFields?: Maybe<Scalars['JSON']>;\r\n};\r\n\r\nexport type Coordinate = {\r\n  __typename?: 'Coordinate';\r\n  x: Scalars['Float'];\r\n  y: Scalars['Float'];\r\n};\r\n\r\nexport type AssetList = PaginatedList & {\r\n  __typename?: 'AssetList';\r\n  items: Array<Asset>;\r\n  totalItems: Scalars['Int'];\r\n};\r\n\r\nexport enum AssetType {\r\n  IMAGE = 'IMAGE',\r\n  VIDEO = 'VIDEO',\r\n  BINARY = 'BINARY'\r\n}\r\n\r\nexport type CurrentUser = {\r\n  __typename?: 'CurrentUser';\r\n  id: Scalars['ID'];\r\n  identifier: Scalars['String'];\r\n  channels: Array<CurrentUserChannel>;\r\n};\r\n\r\nexport type CurrentUserChannel = {\r\n  __typename?: 'CurrentUserChannel';\r\n  id: Scalars['ID'];\r\n  token: Scalars['String'];\r\n  code: Scalars['String'];\r\n  permissions: Array<Permission>;\r\n};\r\n\r\nexport type Channel = Node & {\r\n  __typename?: 'Channel';\r\n  id: Scalars['ID'];\r\n  createdAt: Scalars['DateTime'];\r\n  updatedAt: Scalars['DateTime'];\r\n  code: Scalars['String'];\r\n  token: Scalars['String'];\r\n  defaultTaxZone?: Maybe<Zone>;\r\n  defaultShippingZone?: Maybe<Zone>;\r\n  defaultLanguageCode: LanguageCode;\r\n  currencyCode: CurrencyCode;\r\n  pricesIncludeTax: Scalars['Boolean'];\r\n  customFields?: Maybe<Scalars['JSON']>;\r\n};\r\n\r\nexport type Collection = Node & {\r\n  __typename?: 'Collection';\r\n  id: Scalars['ID'];\r\n  createdAt: Scalars['DateTime'];\r\n  updatedAt: Scalars['DateTime'];\r\n  languageCode?: Maybe<LanguageCode>;\r\n  name: Scalars['String'];\r\n  slug: Scalars['String'];\r\n  breadcrumbs: Array<CollectionBreadcrumb>;\r\n  position: Scalars['Int'];\r\n  description: Scalars['String'];\r\n  featuredAsset?: Maybe<Asset>;\r\n  assets: Array<Asset>;\r\n  parent?: Maybe<Collection>;\r\n  children?: Maybe<Array<Collection>>;\r\n  filters: Array<ConfigurableOperation>;\r\n  translations: Array<CollectionTranslation>;\r\n  productVariants: ProductVariantList;\r\n  customFields?: Maybe<Scalars['JSON']>;\r\n};\r\n\r\n\r\nexport type CollectionProductVariantsArgs = {\r\n  options?: Maybe<ProductVariantListOptions>;\r\n};\r\n\r\nexport type CollectionBreadcrumb = {\r\n  __typename?: 'CollectionBreadcrumb';\r\n  id: Scalars['ID'];\r\n  name: Scalars['String'];\r\n  slug: Scalars['String'];\r\n};\r\n\r\nexport type CollectionTranslation = {\r\n  __typename?: 'CollectionTranslation';\r\n  id: Scalars['ID'];\r\n  createdAt: Scalars['DateTime'];\r\n  updatedAt: Scalars['DateTime'];\r\n  languageCode: LanguageCode;\r\n  name: Scalars['String'];\r\n  slug: Scalars['String'];\r\n  description: Scalars['String'];\r\n};\r\n\r\nexport type CollectionList = PaginatedList & {\r\n  __typename?: 'CollectionList';\r\n  items: Array<Collection>;\r\n  totalItems: Scalars['Int'];\r\n};\r\n\r\nexport type ProductVariantList = PaginatedList & {\r\n  __typename?: 'ProductVariantList';\r\n  items: Array<ProductVariant>;\r\n  totalItems: Scalars['Int'];\r\n};\r\n\r\nexport type ProductVariantListOptions = {\r\n  skip?: Maybe<Scalars['Int']>;\r\n  take?: Maybe<Scalars['Int']>;\r\n  sort?: Maybe<ProductVariantSortParameter>;\r\n  filter?: Maybe<ProductVariantFilterParameter>;\r\n};\r\n\r\nexport enum GlobalFlag {\r\n  TRUE = 'TRUE',\r\n  FALSE = 'FALSE',\r\n  INHERIT = 'INHERIT'\r\n}\r\n\r\nexport enum AdjustmentType {\r\n  PROMOTION = 'PROMOTION',\r\n  DISTRIBUTED_ORDER_PROMOTION = 'DISTRIBUTED_ORDER_PROMOTION'\r\n}\r\n\r\nexport enum DeletionResult {\r\n  /** The entity was successfully deleted */\r\n  DELETED = 'DELETED',\r\n  /** Deletion did not take place, reason given in message */\r\n  NOT_DELETED = 'NOT_DELETED'\r\n}\r\n\r\n/**\r\n * @description\r\n * Permissions for administrators and customers. Used to control access to\r\n * GraphQL resolvers via the {@link Allow} decorator.\r\n *\r\n * @docsCategory common\r\n */\r\nexport enum Permission {\r\n  /** Authenticated means simply that the user is logged in */\r\n  Authenticated = 'Authenticated',\r\n  /** SuperAdmin has unrestricted access to all operations */\r\n  SuperAdmin = 'SuperAdmin',\r\n  /** Owner means the user owns this entity, e.g. a Customer's own Order */\r\n  Owner = 'Owner',\r\n  /** Public means any unauthenticated user may perform the operation */\r\n  Public = 'Public',\r\n  /** Grants permission to update GlobalSettings */\r\n  UpdateGlobalSettings = 'UpdateGlobalSettings',\r\n  /** Grants permission to create Products, Facets, Assets, Collections */\r\n  CreateCatalog = 'CreateCatalog',\r\n  /** Grants permission to read Products, Facets, Assets, Collections */\r\n  ReadCatalog = 'ReadCatalog',\r\n  /** Grants permission to update Products, Facets, Assets, Collections */\r\n  UpdateCatalog = 'UpdateCatalog',\r\n  /** Grants permission to delete Products, Facets, Assets, Collections */\r\n  DeleteCatalog = 'DeleteCatalog',\r\n  /** Grants permission to create PaymentMethods, ShippingMethods, TaxCategories, TaxRates, Zones, Countries, System & GlobalSettings */\r\n  CreateSettings = 'CreateSettings',\r\n  /** Grants permission to read PaymentMethods, ShippingMethods, TaxCategories, TaxRates, Zones, Countries, System & GlobalSettings */\r\n  ReadSettings = 'ReadSettings',\r\n  /** Grants permission to update PaymentMethods, ShippingMethods, TaxCategories, TaxRates, Zones, Countries, System & GlobalSettings */\r\n  UpdateSettings = 'UpdateSettings',\r\n  /** Grants permission to delete PaymentMethods, ShippingMethods, TaxCategories, TaxRates, Zones, Countries, System & GlobalSettings */\r\n  DeleteSettings = 'DeleteSettings',\r\n  /** Grants permission to create Administrator */\r\n  CreateAdministrator = 'CreateAdministrator',\r\n  /** Grants permission to read Administrator */\r\n  ReadAdministrator = 'ReadAdministrator',\r\n  /** Grants permission to update Administrator */\r\n  UpdateAdministrator = 'UpdateAdministrator',\r\n  /** Grants permission to delete Administrator */\r\n  DeleteAdministrator = 'DeleteAdministrator',\r\n  /** Grants permission to create Asset */\r\n  CreateAsset = 'CreateAsset',\r\n  /** Grants permission to read Asset */\r\n  ReadAsset = 'ReadAsset',\r\n  /** Grants permission to update Asset */\r\n  UpdateAsset = 'UpdateAsset',\r\n  /** Grants permission to delete Asset */\r\n  DeleteAsset = 'DeleteAsset',\r\n  /** Grants permission to create Channel */\r\n  CreateChannel = 'CreateChannel',\r\n  /** Grants permission to read Channel */\r\n  ReadChannel = 'ReadChannel',\r\n  /** Grants permission to update Channel */\r\n  UpdateChannel = 'UpdateChannel',\r\n  /** Grants permission to delete Channel */\r\n  DeleteChannel = 'DeleteChannel',\r\n  /** Grants permission to create Collection */\r\n  CreateCollection = 'CreateCollection',\r\n  /** Grants permission to read Collection */\r\n  ReadCollection = 'ReadCollection',\r\n  /** Grants permission to update Collection */\r\n  UpdateCollection = 'UpdateCollection',\r\n  /** Grants permission to delete Collection */\r\n  DeleteCollection = 'DeleteCollection',\r\n  /** Grants permission to create Country */\r\n  CreateCountry = 'CreateCountry',\r\n  /** Grants permission to read Country */\r\n  ReadCountry = 'ReadCountry',\r\n  /** Grants permission to update Country */\r\n  UpdateCountry = 'UpdateCountry',\r\n  /** Grants permission to delete Country */\r\n  DeleteCountry = 'DeleteCountry',\r\n  /** Grants permission to create Customer */\r\n  CreateCustomer = 'CreateCustomer',\r\n  /** Grants permission to read Customer */\r\n  ReadCustomer = 'ReadCustomer',\r\n  /** Grants permission to update Customer */\r\n  UpdateCustomer = 'UpdateCustomer',\r\n  /** Grants permission to delete Customer */\r\n  DeleteCustomer = 'DeleteCustomer',\r\n  /** Grants permission to create CustomerGroup */\r\n  CreateCustomerGroup = 'CreateCustomerGroup',\r\n  /** Grants permission to read CustomerGroup */\r\n  ReadCustomerGroup = 'ReadCustomerGroup',\r\n  /** Grants permission to update CustomerGroup */\r\n  UpdateCustomerGroup = 'UpdateCustomerGroup',\r\n  /** Grants permission to delete CustomerGroup */\r\n  DeleteCustomerGroup = 'DeleteCustomerGroup',\r\n  /** Grants permission to create Facet */\r\n  CreateFacet = 'CreateFacet',\r\n  /** Grants permission to read Facet */\r\n  ReadFacet = 'ReadFacet',\r\n  /** Grants permission to update Facet */\r\n  UpdateFacet = 'UpdateFacet',\r\n  /** Grants permission to delete Facet */\r\n  DeleteFacet = 'DeleteFacet',\r\n  /** Grants permission to create Order */\r\n  CreateOrder = 'CreateOrder',\r\n  /** Grants permission to read Order */\r\n  ReadOrder = 'ReadOrder',\r\n  /** Grants permission to update Order */\r\n  UpdateOrder = 'UpdateOrder',\r\n  /** Grants permission to delete Order */\r\n  DeleteOrder = 'DeleteOrder',\r\n  /** Grants permission to create PaymentMethod */\r\n  CreatePaymentMethod = 'CreatePaymentMethod',\r\n  /** Grants permission to read PaymentMethod */\r\n  ReadPaymentMethod = 'ReadPaymentMethod',\r\n  /** Grants permission to update PaymentMethod */\r\n  UpdatePaymentMethod = 'UpdatePaymentMethod',\r\n  /** Grants permission to delete PaymentMethod */\r\n  DeletePaymentMethod = 'DeletePaymentMethod',\r\n  /** Grants permission to create Product */\r\n  CreateProduct = 'CreateProduct',\r\n  /** Grants permission to read Product */\r\n  ReadProduct = 'ReadProduct',\r\n  /** Grants permission to update Product */\r\n  UpdateProduct = 'UpdateProduct',\r\n  /** Grants permission to delete Product */\r\n  DeleteProduct = 'DeleteProduct',\r\n  /** Grants permission to create Promotion */\r\n  CreatePromotion = 'CreatePromotion',\r\n  /** Grants permission to read Promotion */\r\n  ReadPromotion = 'ReadPromotion',\r\n  /** Grants permission to update Promotion */\r\n  UpdatePromotion = 'UpdatePromotion',\r\n  /** Grants permission to delete Promotion */\r\n  DeletePromotion = 'DeletePromotion',\r\n  /** Grants permission to create ShippingMethod */\r\n  CreateShippingMethod = 'CreateShippingMethod',\r\n  /** Grants permission to read ShippingMethod */\r\n  ReadShippingMethod = 'ReadShippingMethod',\r\n  /** Grants permission to update ShippingMethod */\r\n  UpdateShippingMethod = 'UpdateShippingMethod',\r\n  /** Grants permission to delete ShippingMethod */\r\n  DeleteShippingMethod = 'DeleteShippingMethod',\r\n  /** Grants permission to create Tag */\r\n  CreateTag = 'CreateTag',\r\n  /** Grants permission to read Tag */\r\n  ReadTag = 'ReadTag',\r\n  /** Grants permission to update Tag */\r\n  UpdateTag = 'UpdateTag',\r\n  /** Grants permission to delete Tag */\r\n  DeleteTag = 'DeleteTag',\r\n  /** Grants permission to create TaxCategory */\r\n  CreateTaxCategory = 'CreateTaxCategory',\r\n  /** Grants permission to read TaxCategory */\r\n  ReadTaxCategory = 'ReadTaxCategory',\r\n  /** Grants permission to update TaxCategory */\r\n  UpdateTaxCategory = 'UpdateTaxCategory',\r\n  /** Grants permission to delete TaxCategory */\r\n  DeleteTaxCategory = 'DeleteTaxCategory',\r\n  /** Grants permission to create TaxRate */\r\n  CreateTaxRate = 'CreateTaxRate',\r\n  /** Grants permission to read TaxRate */\r\n  ReadTaxRate = 'ReadTaxRate',\r\n  /** Grants permission to update TaxRate */\r\n  UpdateTaxRate = 'UpdateTaxRate',\r\n  /** Grants permission to delete TaxRate */\r\n  DeleteTaxRate = 'DeleteTaxRate',\r\n  /** Grants permission to create System */\r\n  CreateSystem = 'CreateSystem',\r\n  /** Grants permission to read System */\r\n  ReadSystem = 'ReadSystem',\r\n  /** Grants permission to update System */\r\n  UpdateSystem = 'UpdateSystem',\r\n  /** Grants permission to delete System */\r\n  DeleteSystem = 'DeleteSystem',\r\n  /** Grants permission to create Zone */\r\n  CreateZone = 'CreateZone',\r\n  /** Grants permission to read Zone */\r\n  ReadZone = 'ReadZone',\r\n  /** Grants permission to update Zone */\r\n  UpdateZone = 'UpdateZone',\r\n  /** Grants permission to delete Zone */\r\n  DeleteZone = 'DeleteZone'\r\n}\r\n\r\nexport enum SortOrder {\r\n  ASC = 'ASC',\r\n  DESC = 'DESC'\r\n}\r\n\r\nexport enum ErrorCode {\r\n  UNKNOWN_ERROR = 'UNKNOWN_ERROR',\r\n  NATIVE_AUTH_STRATEGY_ERROR = 'NATIVE_AUTH_STRATEGY_ERROR',\r\n  INVALID_CREDENTIALS_ERROR = 'INVALID_CREDENTIALS_ERROR',\r\n  ORDER_STATE_TRANSITION_ERROR = 'ORDER_STATE_TRANSITION_ERROR',\r\n  EMAIL_ADDRESS_CONFLICT_ERROR = 'EMAIL_ADDRESS_CONFLICT_ERROR',\r\n  ORDER_LIMIT_ERROR = 'ORDER_LIMIT_ERROR',\r\n  NEGATIVE_QUANTITY_ERROR = 'NEGATIVE_QUANTITY_ERROR',\r\n  INSUFFICIENT_STOCK_ERROR = 'INSUFFICIENT_STOCK_ERROR',\r\n  ORDER_MODIFICATION_ERROR = 'ORDER_MODIFICATION_ERROR',\r\n  INELIGIBLE_SHIPPING_METHOD_ERROR = 'INELIGIBLE_SHIPPING_METHOD_ERROR',\r\n  ORDER_PAYMENT_STATE_ERROR = 'ORDER_PAYMENT_STATE_ERROR',\r\n  INELIGIBLE_PAYMENT_METHOD_ERROR = 'INELIGIBLE_PAYMENT_METHOD_ERROR',\r\n  PAYMENT_FAILED_ERROR = 'PAYMENT_FAILED_ERROR',\r\n  PAYMENT_DECLINED_ERROR = 'PAYMENT_DECLINED_ERROR',\r\n  COUPON_CODE_INVALID_ERROR = 'COUPON_CODE_INVALID_ERROR',\r\n  COUPON_CODE_EXPIRED_ERROR = 'COUPON_CODE_EXPIRED_ERROR',\r\n  COUPON_CODE_LIMIT_ERROR = 'COUPON_CODE_LIMIT_ERROR',\r\n  ALREADY_LOGGED_IN_ERROR = 'ALREADY_LOGGED_IN_ERROR',\r\n  MISSING_PASSWORD_ERROR = 'MISSING_PASSWORD_ERROR',\r\n  PASSWORD_ALREADY_SET_ERROR = 'PASSWORD_ALREADY_SET_ERROR',\r\n  VERIFICATION_TOKEN_INVALID_ERROR = 'VERIFICATION_TOKEN_INVALID_ERROR',\r\n  VERIFICATION_TOKEN_EXPIRED_ERROR = 'VERIFICATION_TOKEN_EXPIRED_ERROR',\r\n  IDENTIFIER_CHANGE_TOKEN_INVALID_ERROR = 'IDENTIFIER_CHANGE_TOKEN_INVALID_ERROR',\r\n  IDENTIFIER_CHANGE_TOKEN_EXPIRED_ERROR = 'IDENTIFIER_CHANGE_TOKEN_EXPIRED_ERROR',\r\n  PASSWORD_RESET_TOKEN_INVALID_ERROR = 'PASSWORD_RESET_TOKEN_INVALID_ERROR',\r\n  PASSWORD_RESET_TOKEN_EXPIRED_ERROR = 'PASSWORD_RESET_TOKEN_EXPIRED_ERROR',\r\n  NOT_VERIFIED_ERROR = 'NOT_VERIFIED_ERROR',\r\n  NO_ACTIVE_ORDER_ERROR = 'NO_ACTIVE_ORDER_ERROR'\r\n}\r\n\r\nexport enum LogicalOperator {\r\n  AND = 'AND',\r\n  OR = 'OR'\r\n}\r\n\r\n/** Retured when attempting an operation that relies on the NativeAuthStrategy, if that strategy is not configured. */\r\nexport type NativeAuthStrategyError = ErrorResult & {\r\n  __typename?: 'NativeAuthStrategyError';\r\n  errorCode: ErrorCode;\r\n  message: Scalars['String'];\r\n};\r\n\r\n/** Returned if the user authentication credentials are not valid */\r\nexport type InvalidCredentialsError = ErrorResult & {\r\n  __typename?: 'InvalidCredentialsError';\r\n  errorCode: ErrorCode;\r\n  message: Scalars['String'];\r\n  authenticationError: Scalars['String'];\r\n};\r\n\r\n/** Returned if there is an error in transitioning the Order state */\r\nexport type OrderStateTransitionError = ErrorResult & {\r\n  __typename?: 'OrderStateTransitionError';\r\n  errorCode: ErrorCode;\r\n  message: Scalars['String'];\r\n  transitionError: Scalars['String'];\r\n  fromState: Scalars['String'];\r\n  toState: Scalars['String'];\r\n};\r\n\r\n/** Retured when attemting to create a Customer with an email address already registered to an existing User. */\r\nexport type EmailAddressConflictError = ErrorResult & {\r\n  __typename?: 'EmailAddressConflictError';\r\n  errorCode: ErrorCode;\r\n  message: Scalars['String'];\r\n};\r\n\r\n/** Retured when the maximum order size limit has been reached. */\r\nexport type OrderLimitError = ErrorResult & {\r\n  __typename?: 'OrderLimitError';\r\n  errorCode: ErrorCode;\r\n  message: Scalars['String'];\r\n  maxItems: Scalars['Int'];\r\n};\r\n\r\n/** Retured when attemting to set a negative OrderLine quantity. */\r\nexport type NegativeQuantityError = ErrorResult & {\r\n  __typename?: 'NegativeQuantityError';\r\n  errorCode: ErrorCode;\r\n  message: Scalars['String'];\r\n};\r\n\r\n/** Returned when attempting to add more items to the Order than are available */\r\nexport type InsufficientStockError = ErrorResult & {\r\n  __typename?: 'InsufficientStockError';\r\n  errorCode: ErrorCode;\r\n  message: Scalars['String'];\r\n  quantityAvailable: Scalars['Int'];\r\n  order: Order;\r\n};\r\n\r\n\r\n\r\n\r\nexport type PaginatedList = {\r\n  items: Array<Node>;\r\n  totalItems: Scalars['Int'];\r\n};\r\n\r\nexport type Node = {\r\n  id: Scalars['ID'];\r\n};\r\n\r\nexport type ErrorResult = {\r\n  errorCode: ErrorCode;\r\n  message: Scalars['String'];\r\n};\r\n\r\nexport type Adjustment = {\r\n  __typename?: 'Adjustment';\r\n  adjustmentSource: Scalars['String'];\r\n  type: AdjustmentType;\r\n  description: Scalars['String'];\r\n  amount: Scalars['Int'];\r\n};\r\n\r\nexport type TaxLine = {\r\n  __typename?: 'TaxLine';\r\n  description: Scalars['String'];\r\n  taxRate: Scalars['Float'];\r\n};\r\n\r\nexport type ConfigArg = {\r\n  __typename?: 'ConfigArg';\r\n  name: Scalars['String'];\r\n  value: Scalars['String'];\r\n};\r\n\r\nexport type ConfigArgDefinition = {\r\n  __typename?: 'ConfigArgDefinition';\r\n  name: Scalars['String'];\r\n  type: Scalars['String'];\r\n  list: Scalars['Boolean'];\r\n  required: Scalars['Boolean'];\r\n  defaultValue?: Maybe<Scalars['JSON']>;\r\n  label?: Maybe<Scalars['String']>;\r\n  description?: Maybe<Scalars['String']>;\r\n  ui?: Maybe<Scalars['JSON']>;\r\n};\r\n\r\nexport type ConfigurableOperation = {\r\n  __typename?: 'ConfigurableOperation';\r\n  code: Scalars['String'];\r\n  args: Array<ConfigArg>;\r\n};\r\n\r\nexport type ConfigurableOperationDefinition = {\r\n  __typename?: 'ConfigurableOperationDefinition';\r\n  code: Scalars['String'];\r\n  args: Array<ConfigArgDefinition>;\r\n  description: Scalars['String'];\r\n};\r\n\r\nexport type DeletionResponse = {\r\n  __typename?: 'DeletionResponse';\r\n  result: DeletionResult;\r\n  message?: Maybe<Scalars['String']>;\r\n};\r\n\r\nexport type ConfigArgInput = {\r\n  name: Scalars['String'];\r\n  /** A JSON stringified representation of the actual value */\r\n  value: Scalars['String'];\r\n};\r\n\r\nexport type ConfigurableOperationInput = {\r\n  code: Scalars['String'];\r\n  arguments: Array<ConfigArgInput>;\r\n};\r\n\r\nexport type StringOperators = {\r\n  eq?: Maybe<Scalars['String']>;\r\n  notEq?: Maybe<Scalars['String']>;\r\n  contains?: Maybe<Scalars['String']>;\r\n  notContains?: Maybe<Scalars['String']>;\r\n  in?: Maybe<Array<Scalars['String']>>;\r\n  notIn?: Maybe<Array<Scalars['String']>>;\r\n  regex?: Maybe<Scalars['String']>;\r\n};\r\n\r\nexport type BooleanOperators = {\r\n  eq?: Maybe<Scalars['Boolean']>;\r\n};\r\n\r\nexport type NumberRange = {\r\n  start: Scalars['Float'];\r\n  end: Scalars['Float'];\r\n};\r\n\r\nexport type NumberOperators = {\r\n  eq?: Maybe<Scalars['Float']>;\r\n  lt?: Maybe<Scalars['Float']>;\r\n  lte?: Maybe<Scalars['Float']>;\r\n  gt?: Maybe<Scalars['Float']>;\r\n  gte?: Maybe<Scalars['Float']>;\r\n  between?: Maybe<NumberRange>;\r\n};\r\n\r\nexport type DateRange = {\r\n  start: Scalars['DateTime'];\r\n  end: Scalars['DateTime'];\r\n};\r\n\r\nexport type DateOperators = {\r\n  eq?: Maybe<Scalars['DateTime']>;\r\n  before?: Maybe<Scalars['DateTime']>;\r\n  after?: Maybe<Scalars['DateTime']>;\r\n  between?: Maybe<DateRange>;\r\n};\r\n\r\n/**\r\n * Used to construct boolean expressions for filtering search results\r\n * by FacetValue ID. Examples:\r\n *\r\n * * ID=1 OR ID=2: `{ facetValueFilters: [{ or: [1,2] }] }`\r\n * * ID=1 AND ID=2: `{ facetValueFilters: [{ and: 1 }, { and: 2 }] }`\r\n * * ID=1 AND (ID=2 OR ID=3): `{ facetValueFilters: [{ and: 1 }, { or: [2,3] }] }`\r\n */\r\nexport type FacetValueFilterInput = {\r\n  and?: Maybe<Scalars['ID']>;\r\n  or?: Maybe<Array<Scalars['ID']>>;\r\n};\r\n\r\nexport type SearchInput = {\r\n  term?: Maybe<Scalars['String']>;\r\n  facetValueIds?: Maybe<Array<Scalars['ID']>>;\r\n  facetValueOperator?: Maybe<LogicalOperator>;\r\n  facetValueFilters?: Maybe<Array<FacetValueFilterInput>>;\r\n  collectionId?: Maybe<Scalars['ID']>;\r\n  collectionSlug?: Maybe<Scalars['String']>;\r\n  groupByProduct?: Maybe<Scalars['Boolean']>;\r\n  take?: Maybe<Scalars['Int']>;\r\n  skip?: Maybe<Scalars['Int']>;\r\n  sort?: Maybe<SearchResultSortParameter>;\r\n};\r\n\r\nexport type SearchResultSortParameter = {\r\n  name?: Maybe<SortOrder>;\r\n  price?: Maybe<SortOrder>;\r\n};\r\n\r\nexport type CreateCustomerInput = {\r\n  title?: Maybe<Scalars['String']>;\r\n  firstName: Scalars['String'];\r\n  lastName: Scalars['String'];\r\n  phoneNumber?: Maybe<Scalars['String']>;\r\n  emailAddress: Scalars['String'];\r\n  customFields?: Maybe<Scalars['JSON']>;\r\n};\r\n\r\nexport type CreateAddressInput = {\r\n  fullName?: Maybe<Scalars['String']>;\r\n  company?: Maybe<Scalars['String']>;\r\n  streetLine1: Scalars['String'];\r\n  streetLine2?: Maybe<Scalars['String']>;\r\n  city?: Maybe<Scalars['String']>;\r\n  province?: Maybe<Scalars['String']>;\r\n  postalCode?: Maybe<Scalars['String']>;\r\n  countryCode: Scalars['String'];\r\n  phoneNumber?: Maybe<Scalars['String']>;\r\n  defaultShippingAddress?: Maybe<Scalars['Boolean']>;\r\n  defaultBillingAddress?: Maybe<Scalars['Boolean']>;\r\n  customFields?: Maybe<Scalars['JSON']>;\r\n};\r\n\r\nexport type UpdateAddressInput = {\r\n  id: Scalars['ID'];\r\n  fullName?: Maybe<Scalars['String']>;\r\n  company?: Maybe<Scalars['String']>;\r\n  streetLine1?: Maybe<Scalars['String']>;\r\n  streetLine2?: Maybe<Scalars['String']>;\r\n  city?: Maybe<Scalars['String']>;\r\n  province?: Maybe<Scalars['String']>;\r\n  postalCode?: Maybe<Scalars['String']>;\r\n  countryCode?: Maybe<Scalars['String']>;\r\n  phoneNumber?: Maybe<Scalars['String']>;\r\n  defaultShippingAddress?: Maybe<Scalars['Boolean']>;\r\n  defaultBillingAddress?: Maybe<Scalars['Boolean']>;\r\n  customFields?: Maybe<Scalars['JSON']>;\r\n};\r\n\r\n/** Indicates that an operation succeeded, where we do not want to return any more specific information. */\r\nexport type Success = {\r\n  __typename?: 'Success';\r\n  success: Scalars['Boolean'];\r\n};\r\n\r\nexport type ShippingMethodQuote = {\r\n  __typename?: 'ShippingMethodQuote';\r\n  id: Scalars['ID'];\r\n  price: Scalars['Int'];\r\n  priceWithTax: Scalars['Int'];\r\n  code: Scalars['String'];\r\n  name: Scalars['String'];\r\n  description: Scalars['String'];\r\n  /** Any optional metadata returned by the ShippingCalculator in the ShippingCalculationResult */\r\n  metadata?: Maybe<Scalars['JSON']>;\r\n};\r\n\r\nexport type PaymentMethodQuote = {\r\n  __typename?: 'PaymentMethodQuote';\r\n  id: Scalars['ID'];\r\n  code: Scalars['String'];\r\n  name: Scalars['String'];\r\n  description: Scalars['String'];\r\n  isEligible: Scalars['Boolean'];\r\n  eligibilityMessage?: Maybe<Scalars['String']>;\r\n};\r\n\r\nexport type Country = Node & {\r\n  __typename?: 'Country';\r\n  id: Scalars['ID'];\r\n  createdAt: Scalars['DateTime'];\r\n  updatedAt: Scalars['DateTime'];\r\n  languageCode: LanguageCode;\r\n  code: Scalars['String'];\r\n  name: Scalars['String'];\r\n  enabled: Scalars['Boolean'];\r\n  translations: Array<CountryTranslation>;\r\n};\r\n\r\nexport type CountryTranslation = {\r\n  __typename?: 'CountryTranslation';\r\n  id: Scalars['ID'];\r\n  createdAt: Scalars['DateTime'];\r\n  updatedAt: Scalars['DateTime'];\r\n  languageCode: LanguageCode;\r\n  name: Scalars['String'];\r\n};\r\n\r\nexport type CountryList = PaginatedList & {\r\n  __typename?: 'CountryList';\r\n  items: Array<Country>;\r\n  totalItems: Scalars['Int'];\r\n};\r\n\r\n/**\r\n * @description\r\n * ISO 4217 currency code\r\n *\r\n * @docsCategory common\r\n */\r\nexport enum CurrencyCode {\r\n  /** United Arab Emirates dirham */\r\n  AED = 'AED',\r\n  /** Afghan afghani */\r\n  AFN = 'AFN',\r\n  /** Albanian lek */\r\n  ALL = 'ALL',\r\n  /** Armenian dram */\r\n  AMD = 'AMD',\r\n  /** Netherlands Antillean guilder */\r\n  ANG = 'ANG',\r\n  /** Angolan kwanza */\r\n  AOA = 'AOA',\r\n  /** Argentine peso */\r\n  ARS = 'ARS',\r\n  /** Australian dollar */\r\n  AUD = 'AUD',\r\n  /** Aruban florin */\r\n  AWG = 'AWG',\r\n  /** Azerbaijani manat */\r\n  AZN = 'AZN',\r\n  /** Bosnia and Herzegovina convertible mark */\r\n  BAM = 'BAM',\r\n  /** Barbados dollar */\r\n  BBD = 'BBD',\r\n  /** Bangladeshi taka */\r\n  BDT = 'BDT',\r\n  /** Bulgarian lev */\r\n  BGN = 'BGN',\r\n  /** Bahraini dinar */\r\n  BHD = 'BHD',\r\n  /** Burundian franc */\r\n  BIF = 'BIF',\r\n  /** Bermudian dollar */\r\n  BMD = 'BMD',\r\n  /** Brunei dollar */\r\n  BND = 'BND',\r\n  /** Boliviano */\r\n  BOB = 'BOB',\r\n  /** Brazilian real */\r\n  BRL = 'BRL',\r\n  /** Bahamian dollar */\r\n  BSD = 'BSD',\r\n  /** Bhutanese ngultrum */\r\n  BTN = 'BTN',\r\n  /** Botswana pula */\r\n  BWP = 'BWP',\r\n  /** Belarusian ruble */\r\n  BYN = 'BYN',\r\n  /** Belize dollar */\r\n  BZD = 'BZD',\r\n  /** Canadian dollar */\r\n  CAD = 'CAD',\r\n  /** Congolese franc */\r\n  CDF = 'CDF',\r\n  /** Swiss franc */\r\n  CHF = 'CHF',\r\n  /** Chilean peso */\r\n  CLP = 'CLP',\r\n  /** Renminbi (Chinese) yuan */\r\n  CNY = 'CNY',\r\n  /** Colombian peso */\r\n  COP = 'COP',\r\n  /** Costa Rican colon */\r\n  CRC = 'CRC',\r\n  /** Cuban convertible peso */\r\n  CUC = 'CUC',\r\n  /** Cuban peso */\r\n  CUP = 'CUP',\r\n  /** Cape Verde escudo */\r\n  CVE = 'CVE',\r\n  /** Czech koruna */\r\n  CZK = 'CZK',\r\n  /** Djiboutian franc */\r\n  DJF = 'DJF',\r\n  /** Danish krone */\r\n  DKK = 'DKK',\r\n  /** Dominican peso */\r\n  DOP = 'DOP',\r\n  /** Algerian dinar */\r\n  DZD = 'DZD',\r\n  /** Egyptian pound */\r\n  EGP = 'EGP',\r\n  /** Eritrean nakfa */\r\n  ERN = 'ERN',\r\n  /** Ethiopian birr */\r\n  ETB = 'ETB',\r\n  /** Euro */\r\n  EUR = 'EUR',\r\n  /** Fiji dollar */\r\n  FJD = 'FJD',\r\n  /** Falkland Islands pound */\r\n  FKP = 'FKP',\r\n  /** Pound sterling */\r\n  GBP = 'GBP',\r\n  /** Georgian lari */\r\n  GEL = 'GEL',\r\n  /** Ghanaian cedi */\r\n  GHS = 'GHS',\r\n  /** Gibraltar pound */\r\n  GIP = 'GIP',\r\n  /** Gambian dalasi */\r\n  GMD = 'GMD',\r\n  /** Guinean franc */\r\n  GNF = 'GNF',\r\n  /** Guatemalan quetzal */\r\n  GTQ = 'GTQ',\r\n  /** Guyanese dollar */\r\n  GYD = 'GYD',\r\n  /** Hong Kong dollar */\r\n  HKD = 'HKD',\r\n  /** Honduran lempira */\r\n  HNL = 'HNL',\r\n  /** Croatian kuna */\r\n  HRK = 'HRK',\r\n  /** Haitian gourde */\r\n  HTG = 'HTG',\r\n  /** Hungarian forint */\r\n  HUF = 'HUF',\r\n  /** Indonesian rupiah */\r\n  IDR = 'IDR',\r\n  /** Israeli new shekel */\r\n  ILS = 'ILS',\r\n  /** Indian rupee */\r\n  INR = 'INR',\r\n  /** Iraqi dinar */\r\n  IQD = 'IQD',\r\n  /** Iranian rial */\r\n  IRR = 'IRR',\r\n  /** Icelandic króna */\r\n  ISK = 'ISK',\r\n  /** Jamaican dollar */\r\n  JMD = 'JMD',\r\n  /** Jordanian dinar */\r\n  JOD = 'JOD',\r\n  /** Japanese yen */\r\n  JPY = 'JPY',\r\n  /** Kenyan shilling */\r\n  KES = 'KES',\r\n  /** Kyrgyzstani som */\r\n  KGS = 'KGS',\r\n  /** Cambodian riel */\r\n  KHR = 'KHR',\r\n  /** Comoro franc */\r\n  KMF = 'KMF',\r\n  /** North Korean won */\r\n  KPW = 'KPW',\r\n  /** South Korean won */\r\n  KRW = 'KRW',\r\n  /** Kuwaiti dinar */\r\n  KWD = 'KWD',\r\n  /** Cayman Islands dollar */\r\n  KYD = 'KYD',\r\n  /** Kazakhstani tenge */\r\n  KZT = 'KZT',\r\n  /** Lao kip */\r\n  LAK = 'LAK',\r\n  /** Lebanese pound */\r\n  LBP = 'LBP',\r\n  /** Sri Lankan rupee */\r\n  LKR = 'LKR',\r\n  /** Liberian dollar */\r\n  LRD = 'LRD',\r\n  /** Lesotho loti */\r\n  LSL = 'LSL',\r\n  /** Libyan dinar */\r\n  LYD = 'LYD',\r\n  /** Moroccan dirham */\r\n  MAD = 'MAD',\r\n  /** Moldovan leu */\r\n  MDL = 'MDL',\r\n  /** Malagasy ariary */\r\n  MGA = 'MGA',\r\n  /** Macedonian denar */\r\n  MKD = 'MKD',\r\n  /** Myanmar kyat */\r\n  MMK = 'MMK',\r\n  /** Mongolian tögrög */\r\n  MNT = 'MNT',\r\n  /** Macanese pataca */\r\n  MOP = 'MOP',\r\n  /** Mauritanian ouguiya */\r\n  MRU = 'MRU',\r\n  /** Mauritian rupee */\r\n  MUR = 'MUR',\r\n  /** Maldivian rufiyaa */\r\n  MVR = 'MVR',\r\n  /** Malawian kwacha */\r\n  MWK = 'MWK',\r\n  /** Mexican peso */\r\n  MXN = 'MXN',\r\n  /** Malaysian ringgit */\r\n  MYR = 'MYR',\r\n  /** Mozambican metical */\r\n  MZN = 'MZN',\r\n  /** Namibian dollar */\r\n  NAD = 'NAD',\r\n  /** Nigerian naira */\r\n  NGN = 'NGN',\r\n  /** Nicaraguan córdoba */\r\n  NIO = 'NIO',\r\n  /** Norwegian krone */\r\n  NOK = 'NOK',\r\n  /** Nepalese rupee */\r\n  NPR = 'NPR',\r\n  /** New Zealand dollar */\r\n  NZD = 'NZD',\r\n  /** Omani rial */\r\n  OMR = 'OMR',\r\n  /** Panamanian balboa */\r\n  PAB = 'PAB',\r\n  /** Peruvian sol */\r\n  PEN = 'PEN',\r\n  /** Papua New Guinean kina */\r\n  PGK = 'PGK',\r\n  /** Philippine peso */\r\n  PHP = 'PHP',\r\n  /** Pakistani rupee */\r\n  PKR = 'PKR',\r\n  /** Polish złoty */\r\n  PLN = 'PLN',\r\n  /** Paraguayan guaraní */\r\n  PYG = 'PYG',\r\n  /** Qatari riyal */\r\n  QAR = 'QAR',\r\n  /** Romanian leu */\r\n  RON = 'RON',\r\n  /** Serbian dinar */\r\n  RSD = 'RSD',\r\n  /** Russian ruble */\r\n  RUB = 'RUB',\r\n  /** Rwandan franc */\r\n  RWF = 'RWF',\r\n  /** Saudi riyal */\r\n  SAR = 'SAR',\r\n  /** Solomon Islands dollar */\r\n  SBD = 'SBD',\r\n  /** Seychelles rupee */\r\n  SCR = 'SCR',\r\n  /** Sudanese pound */\r\n  SDG = 'SDG',\r\n  /** Swedish krona/kronor */\r\n  SEK = 'SEK',\r\n  /** Singapore dollar */\r\n  SGD = 'SGD',\r\n  /** Saint Helena pound */\r\n  SHP = 'SHP',\r\n  /** Sierra Leonean leone */\r\n  SLL = 'SLL',\r\n  /** Somali shilling */\r\n  SOS = 'SOS',\r\n  /** Surinamese dollar */\r\n  SRD = 'SRD',\r\n  /** South Sudanese pound */\r\n  SSP = 'SSP',\r\n  /** São Tomé and Príncipe dobra */\r\n  STN = 'STN',\r\n  /** Salvadoran colón */\r\n  SVC = 'SVC',\r\n  /** Syrian pound */\r\n  SYP = 'SYP',\r\n  /** Swazi lilangeni */\r\n  SZL = 'SZL',\r\n  /** Thai baht */\r\n  THB = 'THB',\r\n  /** Tajikistani somoni */\r\n  TJS = 'TJS',\r\n  /** Turkmenistan manat */\r\n  TMT = 'TMT',\r\n  /** Tunisian dinar */\r\n  TND = 'TND',\r\n  /** Tongan paʻanga */\r\n  TOP = 'TOP',\r\n  /** Turkish lira */\r\n  TRY = 'TRY',\r\n  /** Trinidad and Tobago dollar */\r\n  TTD = 'TTD',\r\n  /** New Taiwan dollar */\r\n  TWD = 'TWD',\r\n  /** Tanzanian shilling */\r\n  TZS = 'TZS',\r\n  /** Ukrainian hryvnia */\r\n  UAH = 'UAH',\r\n  /** Ugandan shilling */\r\n  UGX = 'UGX',\r\n  /** United States dollar */\r\n  USD = 'USD',\r\n  /** Uruguayan peso */\r\n  UYU = 'UYU',\r\n  /** Uzbekistan som */\r\n  UZS = 'UZS',\r\n  /** Venezuelan bolívar soberano */\r\n  VES = 'VES',\r\n  /** Vietnamese đồng */\r\n  VND = 'VND',\r\n  /** Vanuatu vatu */\r\n  VUV = 'VUV',\r\n  /** Samoan tala */\r\n  WST = 'WST',\r\n  /** CFA franc BEAC */\r\n  XAF = 'XAF',\r\n  /** East Caribbean dollar */\r\n  XCD = 'XCD',\r\n  /** CFA franc BCEAO */\r\n  XOF = 'XOF',\r\n  /** CFP franc (franc Pacifique) */\r\n  XPF = 'XPF',\r\n  /** Yemeni rial */\r\n  YER = 'YER',\r\n  /** South African rand */\r\n  ZAR = 'ZAR',\r\n  /** Zambian kwacha */\r\n  ZMW = 'ZMW',\r\n  /** Zimbabwean dollar */\r\n  ZWL = 'ZWL'\r\n}\r\n\r\nexport type CustomField = {\r\n  name: Scalars['String'];\r\n  type: Scalars['String'];\r\n  list: Scalars['Boolean'];\r\n  label?: Maybe<Array<LocalizedString>>;\r\n  description?: Maybe<Array<LocalizedString>>;\r\n  readonly?: Maybe<Scalars['Boolean']>;\r\n  internal?: Maybe<Scalars['Boolean']>;\r\n};\r\n\r\nexport type StringCustomFieldConfig = CustomField & {\r\n  __typename?: 'StringCustomFieldConfig';\r\n  name: Scalars['String'];\r\n  type: Scalars['String'];\r\n  list: Scalars['Boolean'];\r\n  length?: Maybe<Scalars['Int']>;\r\n  label?: Maybe<Array<LocalizedString>>;\r\n  description?: Maybe<Array<LocalizedString>>;\r\n  readonly?: Maybe<Scalars['Boolean']>;\r\n  internal?: Maybe<Scalars['Boolean']>;\r\n  pattern?: Maybe<Scalars['String']>;\r\n  options?: Maybe<Array<StringFieldOption>>;\r\n};\r\n\r\nexport type StringFieldOption = {\r\n  __typename?: 'StringFieldOption';\r\n  value: Scalars['String'];\r\n  label?: Maybe<Array<LocalizedString>>;\r\n};\r\n\r\nexport type LocaleStringCustomFieldConfig = CustomField & {\r\n  __typename?: 'LocaleStringCustomFieldConfig';\r\n  name: Scalars['String'];\r\n  type: Scalars['String'];\r\n  list: Scalars['Boolean'];\r\n  length?: Maybe<Scalars['Int']>;\r\n  label?: Maybe<Array<LocalizedString>>;\r\n  description?: Maybe<Array<LocalizedString>>;\r\n  readonly?: Maybe<Scalars['Boolean']>;\r\n  internal?: Maybe<Scalars['Boolean']>;\r\n  pattern?: Maybe<Scalars['String']>;\r\n};\r\n\r\nexport type IntCustomFieldConfig = CustomField & {\r\n  __typename?: 'IntCustomFieldConfig';\r\n  name: Scalars['String'];\r\n  type: Scalars['String'];\r\n  list: Scalars['Boolean'];\r\n  label?: Maybe<Array<LocalizedString>>;\r\n  description?: Maybe<Array<LocalizedString>>;\r\n  readonly?: Maybe<Scalars['Boolean']>;\r\n  internal?: Maybe<Scalars['Boolean']>;\r\n  min?: Maybe<Scalars['Int']>;\r\n  max?: Maybe<Scalars['Int']>;\r\n  step?: Maybe<Scalars['Int']>;\r\n};\r\n\r\nexport type FloatCustomFieldConfig = CustomField & {\r\n  __typename?: 'FloatCustomFieldConfig';\r\n  name: Scalars['String'];\r\n  type: Scalars['String'];\r\n  list: Scalars['Boolean'];\r\n  label?: Maybe<Array<LocalizedString>>;\r\n  description?: Maybe<Array<LocalizedString>>;\r\n  readonly?: Maybe<Scalars['Boolean']>;\r\n  internal?: Maybe<Scalars['Boolean']>;\r\n  min?: Maybe<Scalars['Float']>;\r\n  max?: Maybe<Scalars['Float']>;\r\n  step?: Maybe<Scalars['Float']>;\r\n};\r\n\r\nexport type BooleanCustomFieldConfig = CustomField & {\r\n  __typename?: 'BooleanCustomFieldConfig';\r\n  name: Scalars['String'];\r\n  type: Scalars['String'];\r\n  list: Scalars['Boolean'];\r\n  label?: Maybe<Array<LocalizedString>>;\r\n  description?: Maybe<Array<LocalizedString>>;\r\n  readonly?: Maybe<Scalars['Boolean']>;\r\n  internal?: Maybe<Scalars['Boolean']>;\r\n};\r\n\r\n/**\r\n * Expects the same validation formats as the `<input type=\"datetime-local\">` HTML element.\r\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/datetime-local#Additional_attributes\r\n */\r\nexport type DateTimeCustomFieldConfig = CustomField & {\r\n  __typename?: 'DateTimeCustomFieldConfig';\r\n  name: Scalars['String'];\r\n  type: Scalars['String'];\r\n  list: Scalars['Boolean'];\r\n  label?: Maybe<Array<LocalizedString>>;\r\n  description?: Maybe<Array<LocalizedString>>;\r\n  readonly?: Maybe<Scalars['Boolean']>;\r\n  internal?: Maybe<Scalars['Boolean']>;\r\n  min?: Maybe<Scalars['String']>;\r\n  max?: Maybe<Scalars['String']>;\r\n  step?: Maybe<Scalars['Int']>;\r\n};\r\n\r\nexport type RelationCustomFieldConfig = CustomField & {\r\n  __typename?: 'RelationCustomFieldConfig';\r\n  name: Scalars['String'];\r\n  type: Scalars['String'];\r\n  list: Scalars['Boolean'];\r\n  label?: Maybe<Array<LocalizedString>>;\r\n  description?: Maybe<Array<LocalizedString>>;\r\n  readonly?: Maybe<Scalars['Boolean']>;\r\n  internal?: Maybe<Scalars['Boolean']>;\r\n  entity: Scalars['String'];\r\n  scalarFields: Array<Scalars['String']>;\r\n};\r\n\r\nexport type TextCustomFieldConfig = CustomField & {\r\n  __typename?: 'TextCustomFieldConfig';\r\n  name: Scalars['String'];\r\n  type: Scalars['String'];\r\n  list: Scalars['Boolean'];\r\n  label?: Maybe<Array<LocalizedString>>;\r\n  description?: Maybe<Array<LocalizedString>>;\r\n  readonly?: Maybe<Scalars['Boolean']>;\r\n  internal?: Maybe<Scalars['Boolean']>;\r\n};\r\n\r\nexport type LocalizedString = {\r\n  __typename?: 'LocalizedString';\r\n  languageCode: LanguageCode;\r\n  value: Scalars['String'];\r\n};\r\n\r\nexport type CustomFieldConfig = StringCustomFieldConfig | LocaleStringCustomFieldConfig | IntCustomFieldConfig | FloatCustomFieldConfig | BooleanCustomFieldConfig | DateTimeCustomFieldConfig | RelationCustomFieldConfig | TextCustomFieldConfig;\r\n\r\nexport type CustomerGroup = Node & {\r\n  __typename?: 'CustomerGroup';\r\n  id: Scalars['ID'];\r\n  createdAt: Scalars['DateTime'];\r\n  updatedAt: Scalars['DateTime'];\r\n  name: Scalars['String'];\r\n  customers: CustomerList;\r\n};\r\n\r\n\r\nexport type CustomerGroupCustomersArgs = {\r\n  options?: Maybe<CustomerListOptions>;\r\n};\r\n\r\nexport type CustomerListOptions = {\r\n  skip?: Maybe<Scalars['Int']>;\r\n  take?: Maybe<Scalars['Int']>;\r\n  sort?: Maybe<CustomerSortParameter>;\r\n  filter?: Maybe<CustomerFilterParameter>;\r\n};\r\n\r\nexport type Customer = Node & {\r\n  __typename?: 'Customer';\r\n  id: Scalars['ID'];\r\n  createdAt: Scalars['DateTime'];\r\n  updatedAt: Scalars['DateTime'];\r\n  title?: Maybe<Scalars['String']>;\r\n  firstName: Scalars['String'];\r\n  lastName: Scalars['String'];\r\n  phoneNumber?: Maybe<Scalars['String']>;\r\n  emailAddress: Scalars['String'];\r\n  addresses?: Maybe<Array<Address>>;\r\n  orders: OrderList;\r\n  user?: Maybe<User>;\r\n  customFields?: Maybe<Scalars['JSON']>;\r\n};\r\n\r\n\r\nexport type CustomerOrdersArgs = {\r\n  options?: Maybe<OrderListOptions>;\r\n};\r\n\r\nexport type CustomerList = PaginatedList & {\r\n  __typename?: 'CustomerList';\r\n  items: Array<Customer>;\r\n  totalItems: Scalars['Int'];\r\n};\r\n\r\nexport type FacetValue = Node & {\r\n  __typename?: 'FacetValue';\r\n  id: Scalars['ID'];\r\n  createdAt: Scalars['DateTime'];\r\n  updatedAt: Scalars['DateTime'];\r\n  languageCode: LanguageCode;\r\n  facet: Facet;\r\n  name: Scalars['String'];\r\n  code: Scalars['String'];\r\n  translations: Array<FacetValueTranslation>;\r\n  customFields?: Maybe<Scalars['JSON']>;\r\n};\r\n\r\nexport type FacetValueTranslation = {\r\n  __typename?: 'FacetValueTranslation';\r\n  id: Scalars['ID'];\r\n  createdAt: Scalars['DateTime'];\r\n  updatedAt: Scalars['DateTime'];\r\n  languageCode: LanguageCode;\r\n  name: Scalars['String'];\r\n};\r\n\r\nexport type Facet = Node & {\r\n  __typename?: 'Facet';\r\n  id: Scalars['ID'];\r\n  createdAt: Scalars['DateTime'];\r\n  updatedAt: Scalars['DateTime'];\r\n  languageCode: LanguageCode;\r\n  name: Scalars['String'];\r\n  code: Scalars['String'];\r\n  values: Array<FacetValue>;\r\n  translations: Array<FacetTranslation>;\r\n  customFields?: Maybe<Scalars['JSON']>;\r\n};\r\n\r\nexport type FacetTranslation = {\r\n  __typename?: 'FacetTranslation';\r\n  id: Scalars['ID'];\r\n  createdAt: Scalars['DateTime'];\r\n  updatedAt: Scalars['DateTime'];\r\n  languageCode: LanguageCode;\r\n  name: Scalars['String'];\r\n};\r\n\r\nexport type FacetList = PaginatedList & {\r\n  __typename?: 'FacetList';\r\n  items: Array<Facet>;\r\n  totalItems: Scalars['Int'];\r\n};\r\n\r\nexport type HistoryEntry = Node & {\r\n  __typename?: 'HistoryEntry';\r\n  id: Scalars['ID'];\r\n  createdAt: Scalars['DateTime'];\r\n  updatedAt: Scalars['DateTime'];\r\n  type: HistoryEntryType;\r\n  data: Scalars['JSON'];\r\n};\r\n\r\nexport enum HistoryEntryType {\r\n  CUSTOMER_REGISTERED = 'CUSTOMER_REGISTERED',\r\n  CUSTOMER_VERIFIED = 'CUSTOMER_VERIFIED',\r\n  CUSTOMER_DETAIL_UPDATED = 'CUSTOMER_DETAIL_UPDATED',\r\n  CUSTOMER_ADDED_TO_GROUP = 'CUSTOMER_ADDED_TO_GROUP',\r\n  CUSTOMER_REMOVED_FROM_GROUP = 'CUSTOMER_REMOVED_FROM_GROUP',\r\n  CUSTOMER_ADDRESS_CREATED = 'CUSTOMER_ADDRESS_CREATED',\r\n  CUSTOMER_ADDRESS_UPDATED = 'CUSTOMER_ADDRESS_UPDATED',\r\n  CUSTOMER_ADDRESS_DELETED = 'CUSTOMER_ADDRESS_DELETED',\r\n  CUSTOMER_PASSWORD_UPDATED = 'CUSTOMER_PASSWORD_UPDATED',\r\n  CUSTOMER_PASSWORD_RESET_REQUESTED = 'CUSTOMER_PASSWORD_RESET_REQUESTED',\r\n  CUSTOMER_PASSWORD_RESET_VERIFIED = 'CUSTOMER_PASSWORD_RESET_VERIFIED',\r\n  CUSTOMER_EMAIL_UPDATE_REQUESTED = 'CUSTOMER_EMAIL_UPDATE_REQUESTED',\r\n  CUSTOMER_EMAIL_UPDATE_VERIFIED = 'CUSTOMER_EMAIL_UPDATE_VERIFIED',\r\n  CUSTOMER_NOTE = 'CUSTOMER_NOTE',\r\n  ORDER_STATE_TRANSITION = 'ORDER_STATE_TRANSITION',\r\n  ORDER_PAYMENT_TRANSITION = 'ORDER_PAYMENT_TRANSITION',\r\n  ORDER_FULFILLMENT = 'ORDER_FULFILLMENT',\r\n  ORDER_CANCELLATION = 'ORDER_CANCELLATION',\r\n  ORDER_REFUND_TRANSITION = 'ORDER_REFUND_TRANSITION',\r\n  ORDER_FULFILLMENT_TRANSITION = 'ORDER_FULFILLMENT_TRANSITION',\r\n  ORDER_NOTE = 'ORDER_NOTE',\r\n  ORDER_COUPON_APPLIED = 'ORDER_COUPON_APPLIED',\r\n  ORDER_COUPON_REMOVED = 'ORDER_COUPON_REMOVED',\r\n  ORDER_MODIFIED = 'ORDER_MODIFIED'\r\n}\r\n\r\nexport type HistoryEntryList = PaginatedList & {\r\n  __typename?: 'HistoryEntryList';\r\n  items: Array<HistoryEntry>;\r\n  totalItems: Scalars['Int'];\r\n};\r\n\r\nexport type HistoryEntryListOptions = {\r\n  skip?: Maybe<Scalars['Int']>;\r\n  take?: Maybe<Scalars['Int']>;\r\n  sort?: Maybe<HistoryEntrySortParameter>;\r\n  filter?: Maybe<HistoryEntryFilterParameter>;\r\n};\r\n\r\n/**\r\n * @description\r\n * Languages in the form of a ISO 639-1 language code with optional\r\n * region or script modifier (e.g. de_AT). The selection available is based\r\n * on the [Unicode CLDR summary list](https://unicode-org.github.io/cldr-staging/charts/37/summary/root.html)\r\n * and includes the major spoken languages of the world and any widely-used variants.\r\n *\r\n * @docsCategory common\r\n */\r\nexport enum LanguageCode {\r\n  /** Afrikaans */\r\n  af = 'af',\r\n  /** Akan */\r\n  ak = 'ak',\r\n  /** Albanian */\r\n  sq = 'sq',\r\n  /** Amharic */\r\n  am = 'am',\r\n  /** Arabic */\r\n  ar = 'ar',\r\n  /** Armenian */\r\n  hy = 'hy',\r\n  /** Assamese */\r\n  as = 'as',\r\n  /** Azerbaijani */\r\n  az = 'az',\r\n  /** Bambara */\r\n  bm = 'bm',\r\n  /** Bangla */\r\n  bn = 'bn',\r\n  /** Basque */\r\n  eu = 'eu',\r\n  /** Belarusian */\r\n  be = 'be',\r\n  /** Bosnian */\r\n  bs = 'bs',\r\n  /** Breton */\r\n  br = 'br',\r\n  /** Bulgarian */\r\n  bg = 'bg',\r\n  /** Burmese */\r\n  my = 'my',\r\n  /** Catalan */\r\n  ca = 'ca',\r\n  /** Chechen */\r\n  ce = 'ce',\r\n  /** Chinese */\r\n  zh = 'zh',\r\n  /** Simplified Chinese */\r\n  zh_Hans = 'zh_Hans',\r\n  /** Traditional Chinese */\r\n  zh_Hant = 'zh_Hant',\r\n  /** Church Slavic */\r\n  cu = 'cu',\r\n  /** Cornish */\r\n  kw = 'kw',\r\n  /** Corsican */\r\n  co = 'co',\r\n  /** Croatian */\r\n  hr = 'hr',\r\n  /** Czech */\r\n  cs = 'cs',\r\n  /** Danish */\r\n  da = 'da',\r\n  /** Dutch */\r\n  nl = 'nl',\r\n  /** Flemish */\r\n  nl_BE = 'nl_BE',\r\n  /** Dzongkha */\r\n  dz = 'dz',\r\n  /** English */\r\n  en = 'en',\r\n  /** Australian English */\r\n  en_AU = 'en_AU',\r\n  /** Canadian English */\r\n  en_CA = 'en_CA',\r\n  /** British English */\r\n  en_GB = 'en_GB',\r\n  /** American English */\r\n  en_US = 'en_US',\r\n  /** Esperanto */\r\n  eo = 'eo',\r\n  /** Estonian */\r\n  et = 'et',\r\n  /** Ewe */\r\n  ee = 'ee',\r\n  /** Faroese */\r\n  fo = 'fo',\r\n  /** Finnish */\r\n  fi = 'fi',\r\n  /** French */\r\n  fr = 'fr',\r\n  /** Canadian French */\r\n  fr_CA = 'fr_CA',\r\n  /** Swiss French */\r\n  fr_CH = 'fr_CH',\r\n  /** Fulah */\r\n  ff = 'ff',\r\n  /** Galician */\r\n  gl = 'gl',\r\n  /** Ganda */\r\n  lg = 'lg',\r\n  /** Georgian */\r\n  ka = 'ka',\r\n  /** German */\r\n  de = 'de',\r\n  /** Austrian German */\r\n  de_AT = 'de_AT',\r\n  /** Swiss High German */\r\n  de_CH = 'de_CH',\r\n  /** Greek */\r\n  el = 'el',\r\n  /** Gujarati */\r\n  gu = 'gu',\r\n  /** Haitian Creole */\r\n  ht = 'ht',\r\n  /** Hausa */\r\n  ha = 'ha',\r\n  /** Hebrew */\r\n  he = 'he',\r\n  /** Hindi */\r\n  hi = 'hi',\r\n  /** Hungarian */\r\n  hu = 'hu',\r\n  /** Icelandic */\r\n  is = 'is',\r\n  /** Igbo */\r\n  ig = 'ig',\r\n  /** Indonesian */\r\n  id = 'id',\r\n  /** Interlingua */\r\n  ia = 'ia',\r\n  /** Irish */\r\n  ga = 'ga',\r\n  /** Italian */\r\n  it = 'it',\r\n  /** Japanese */\r\n  ja = 'ja',\r\n  /** Javanese */\r\n  jv = 'jv',\r\n  /** Kalaallisut */\r\n  kl = 'kl',\r\n  /** Kannada */\r\n  kn = 'kn',\r\n  /** Kashmiri */\r\n  ks = 'ks',\r\n  /** Kazakh */\r\n  kk = 'kk',\r\n  /** Khmer */\r\n  km = 'km',\r\n  /** Kikuyu */\r\n  ki = 'ki',\r\n  /** Kinyarwanda */\r\n  rw = 'rw',\r\n  /** Korean */\r\n  ko = 'ko',\r\n  /** Kurdish */\r\n  ku = 'ku',\r\n  /** Kyrgyz */\r\n  ky = 'ky',\r\n  /** Lao */\r\n  lo = 'lo',\r\n  /** Latin */\r\n  la = 'la',\r\n  /** Latvian */\r\n  lv = 'lv',\r\n  /** Lingala */\r\n  ln = 'ln',\r\n  /** Lithuanian */\r\n  lt = 'lt',\r\n  /** Luba-Katanga */\r\n  lu = 'lu',\r\n  /** Luxembourgish */\r\n  lb = 'lb',\r\n  /** Macedonian */\r\n  mk = 'mk',\r\n  /** Malagasy */\r\n  mg = 'mg',\r\n  /** Malay */\r\n  ms = 'ms',\r\n  /** Malayalam */\r\n  ml = 'ml',\r\n  /** Maltese */\r\n  mt = 'mt',\r\n  /** Manx */\r\n  gv = 'gv',\r\n  /** Maori */\r\n  mi = 'mi',\r\n  /** Marathi */\r\n  mr = 'mr',\r\n  /** Mongolian */\r\n  mn = 'mn',\r\n  /** Nepali */\r\n  ne = 'ne',\r\n  /** North Ndebele */\r\n  nd = 'nd',\r\n  /** Northern Sami */\r\n  se = 'se',\r\n  /** Norwegian Bokmål */\r\n  nb = 'nb',\r\n  /** Norwegian Nynorsk */\r\n  nn = 'nn',\r\n  /** Nyanja */\r\n  ny = 'ny',\r\n  /** Odia */\r\n  or = 'or',\r\n  /** Oromo */\r\n  om = 'om',\r\n  /** Ossetic */\r\n  os = 'os',\r\n  /** Pashto */\r\n  ps = 'ps',\r\n  /** Persian */\r\n  fa = 'fa',\r\n  /** Dari */\r\n  fa_AF = 'fa_AF',\r\n  /** Polish */\r\n  pl = 'pl',\r\n  /** Portuguese */\r\n  pt = 'pt',\r\n  /** Brazilian Portuguese */\r\n  pt_BR = 'pt_BR',\r\n  /** European Portuguese */\r\n  pt_PT = 'pt_PT',\r\n  /** Punjabi */\r\n  pa = 'pa',\r\n  /** Quechua */\r\n  qu = 'qu',\r\n  /** Romanian */\r\n  ro = 'ro',\r\n  /** Moldavian */\r\n  ro_MD = 'ro_MD',\r\n  /** Romansh */\r\n  rm = 'rm',\r\n  /** Rundi */\r\n  rn = 'rn',\r\n  /** Russian */\r\n  ru = 'ru',\r\n  /** Samoan */\r\n  sm = 'sm',\r\n  /** Sango */\r\n  sg = 'sg',\r\n  /** Sanskrit */\r\n  sa = 'sa',\r\n  /** Scottish Gaelic */\r\n  gd = 'gd',\r\n  /** Serbian */\r\n  sr = 'sr',\r\n  /** Shona */\r\n  sn = 'sn',\r\n  /** Sichuan Yi */\r\n  ii = 'ii',\r\n  /** Sindhi */\r\n  sd = 'sd',\r\n  /** Sinhala */\r\n  si = 'si',\r\n  /** Slovak */\r\n  sk = 'sk',\r\n  /** Slovenian */\r\n  sl = 'sl',\r\n  /** Somali */\r\n  so = 'so',\r\n  /** Southern Sotho */\r\n  st = 'st',\r\n  /** Spanish */\r\n  es = 'es',\r\n  /** European Spanish */\r\n  es_ES = 'es_ES',\r\n  /** Mexican Spanish */\r\n  es_MX = 'es_MX',\r\n  /** Sundanese */\r\n  su = 'su',\r\n  /** Swahili */\r\n  sw = 'sw',\r\n  /** Congo Swahili */\r\n  sw_CD = 'sw_CD',\r\n  /** Swedish */\r\n  sv = 'sv',\r\n  /** Tajik */\r\n  tg = 'tg',\r\n  /** Tamil */\r\n  ta = 'ta',\r\n  /** Tatar */\r\n  tt = 'tt',\r\n  /** Telugu */\r\n  te = 'te',\r\n  /** Thai */\r\n  th = 'th',\r\n  /** Tibetan */\r\n  bo = 'bo',\r\n  /** Tigrinya */\r\n  ti = 'ti',\r\n  /** Tongan */\r\n  to = 'to',\r\n  /** Turkish */\r\n  tr = 'tr',\r\n  /** Turkmen */\r\n  tk = 'tk',\r\n  /** Ukrainian */\r\n  uk = 'uk',\r\n  /** Urdu */\r\n  ur = 'ur',\r\n  /** Uyghur */\r\n  ug = 'ug',\r\n  /** Uzbek */\r\n  uz = 'uz',\r\n  /** Vietnamese */\r\n  vi = 'vi',\r\n  /** Volapük */\r\n  vo = 'vo',\r\n  /** Welsh */\r\n  cy = 'cy',\r\n  /** Western Frisian */\r\n  fy = 'fy',\r\n  /** Wolof */\r\n  wo = 'wo',\r\n  /** Xhosa */\r\n  xh = 'xh',\r\n  /** Yiddish */\r\n  yi = 'yi',\r\n  /** Yoruba */\r\n  yo = 'yo',\r\n  /** Zulu */\r\n  zu = 'zu'\r\n}\r\n\r\nexport type Order = Node & {\r\n  __typename?: 'Order';\r\n  id: Scalars['ID'];\r\n  createdAt: Scalars['DateTime'];\r\n  updatedAt: Scalars['DateTime'];\r\n  /**\r\n   * The date & time that the Order was placed, i.e. the Customer\r\n   * completed the checkout and the Order is no longer \"active\"\r\n   */\r\n  orderPlacedAt?: Maybe<Scalars['DateTime']>;\r\n  /** A unique code for the Order */\r\n  code: Scalars['String'];\r\n  state: Scalars['String'];\r\n  /** An order is active as long as the payment process has not been completed */\r\n  active: Scalars['Boolean'];\r\n  customer?: Maybe<Customer>;\r\n  shippingAddress?: Maybe<OrderAddress>;\r\n  billingAddress?: Maybe<OrderAddress>;\r\n  lines: Array<OrderLine>;\r\n  /**\r\n   * Surcharges are arbitrary modifications to the Order total which are neither\r\n   * ProductVariants nor discounts resulting from applied Promotions. For example,\r\n   * one-off discounts based on customer interaction, or surcharges based on payment\r\n   * methods.\r\n   */\r\n  surcharges: Array<Surcharge>;\r\n  discounts: Array<Discount>;\r\n  /** An array of all coupon codes applied to the Order */\r\n  couponCodes: Array<Scalars['String']>;\r\n  /** Promotions applied to the order. Only gets populated after the payment process has completed. */\r\n  promotions: Array<Promotion>;\r\n  payments?: Maybe<Array<Payment>>;\r\n  fulfillments?: Maybe<Array<Fulfillment>>;\r\n  totalQuantity: Scalars['Int'];\r\n  /**\r\n   * The subTotal is the total of all OrderLines in the Order. This figure also includes any Order-level\r\n   * discounts which have been prorated (proportionally distributed) amongst the OrderItems.\r\n   * To get a total of all OrderLines which does not account for prorated discounts, use the\r\n   * sum of `OrderLine.discountedLinePrice` values.\r\n   */\r\n  subTotal: Scalars['Int'];\r\n  /** Same as subTotal, but inclusive of tax */\r\n  subTotalWithTax: Scalars['Int'];\r\n  currencyCode: CurrencyCode;\r\n  shippingLines: Array<ShippingLine>;\r\n  shipping: Scalars['Int'];\r\n  shippingWithTax: Scalars['Int'];\r\n  /** Equal to subTotal plus shipping */\r\n  total: Scalars['Int'];\r\n  /** The final payable amount. Equal to subTotalWithTax plus shippingWithTax */\r\n  totalWithTax: Scalars['Int'];\r\n  /** A summary of the taxes being applied to this Order */\r\n  taxSummary: Array<OrderTaxSummary>;\r\n  history: HistoryEntryList;\r\n  customFields?: Maybe<Scalars['JSON']>;\r\n};\r\n\r\n\r\nexport type OrderHistoryArgs = {\r\n  options?: Maybe<HistoryEntryListOptions>;\r\n};\r\n\r\n/**\r\n * A summary of the taxes being applied to this order, grouped\r\n * by taxRate.\r\n */\r\nexport type OrderTaxSummary = {\r\n  __typename?: 'OrderTaxSummary';\r\n  /** A description of this tax */\r\n  description: Scalars['String'];\r\n  /** The taxRate as a percentage */\r\n  taxRate: Scalars['Float'];\r\n  /** The total net price or OrderItems to which this taxRate applies */\r\n  taxBase: Scalars['Int'];\r\n  /** The total tax being applied to the Order at this taxRate */\r\n  taxTotal: Scalars['Int'];\r\n};\r\n\r\nexport type OrderAddress = {\r\n  __typename?: 'OrderAddress';\r\n  fullName?: Maybe<Scalars['String']>;\r\n  company?: Maybe<Scalars['String']>;\r\n  streetLine1?: Maybe<Scalars['String']>;\r\n  streetLine2?: Maybe<Scalars['String']>;\r\n  city?: Maybe<Scalars['String']>;\r\n  province?: Maybe<Scalars['String']>;\r\n  postalCode?: Maybe<Scalars['String']>;\r\n  country?: Maybe<Scalars['String']>;\r\n  countryCode?: Maybe<Scalars['String']>;\r\n  phoneNumber?: Maybe<Scalars['String']>;\r\n  customFields?: Maybe<Scalars['JSON']>;\r\n};\r\n\r\nexport type OrderList = PaginatedList & {\r\n  __typename?: 'OrderList';\r\n  items: Array<Order>;\r\n  totalItems: Scalars['Int'];\r\n};\r\n\r\nexport type ShippingLine = {\r\n  __typename?: 'ShippingLine';\r\n  shippingMethod: ShippingMethod;\r\n  price: Scalars['Int'];\r\n  priceWithTax: Scalars['Int'];\r\n  discountedPrice: Scalars['Int'];\r\n  discountedPriceWithTax: Scalars['Int'];\r\n  discounts: Array<Discount>;\r\n};\r\n\r\nexport type Discount = {\r\n  __typename?: 'Discount';\r\n  adjustmentSource: Scalars['String'];\r\n  type: AdjustmentType;\r\n  description: Scalars['String'];\r\n  amount: Scalars['Int'];\r\n  amountWithTax: Scalars['Int'];\r\n};\r\n\r\nexport type OrderItem = Node & {\r\n  __typename?: 'OrderItem';\r\n  id: Scalars['ID'];\r\n  createdAt: Scalars['DateTime'];\r\n  updatedAt: Scalars['DateTime'];\r\n  cancelled: Scalars['Boolean'];\r\n  /** The price of a single unit, excluding tax and discounts */\r\n  unitPrice: Scalars['Int'];\r\n  /** The price of a single unit, including tax but excluding discounts */\r\n  unitPriceWithTax: Scalars['Int'];\r\n  /**\r\n   * The price of a single unit including discounts, excluding tax.\r\n   *\r\n   * If Order-level discounts have been applied, this will not be the\r\n   * actual taxable unit price (see `proratedUnitPrice`), but is generally the\r\n   * correct price to display to customers to avoid confusion\r\n   * about the internal handling of distributed Order-level discounts.\r\n   */\r\n  discountedUnitPrice: Scalars['Int'];\r\n  /** The price of a single unit including discounts and tax */\r\n  discountedUnitPriceWithTax: Scalars['Int'];\r\n  /**\r\n   * The actual unit price, taking into account both item discounts _and_ prorated (proportially-distributed)\r\n   * Order-level discounts. This value is the true economic value of the OrderItem, and is used in tax\r\n   * and refund calculations.\r\n   */\r\n  proratedUnitPrice: Scalars['Int'];\r\n  /** The proratedUnitPrice including tax */\r\n  proratedUnitPriceWithTax: Scalars['Int'];\r\n  unitTax: Scalars['Int'];\r\n  taxRate: Scalars['Float'];\r\n  adjustments: Array<Adjustment>;\r\n  taxLines: Array<TaxLine>;\r\n  fulfillment?: Maybe<Fulfillment>;\r\n  refundId?: Maybe<Scalars['ID']>;\r\n};\r\n\r\nexport type OrderLine = Node & {\r\n  __typename?: 'OrderLine';\r\n  id: Scalars['ID'];\r\n  createdAt: Scalars['DateTime'];\r\n  updatedAt: Scalars['DateTime'];\r\n  productVariant: ProductVariant;\r\n  featuredAsset?: Maybe<Asset>;\r\n  /** The price of a single unit, excluding tax and discounts */\r\n  unitPrice: Scalars['Int'];\r\n  /** The price of a single unit, including tax but excluding discounts */\r\n  unitPriceWithTax: Scalars['Int'];\r\n  /** Non-zero if the unitPrice has changed since it was initially added to Order */\r\n  unitPriceChangeSinceAdded: Scalars['Int'];\r\n  /** Non-zero if the unitPriceWithTax has changed since it was initially added to Order */\r\n  unitPriceWithTaxChangeSinceAdded: Scalars['Int'];\r\n  /**\r\n   * The price of a single unit including discounts, excluding tax.\r\n   *\r\n   * If Order-level discounts have been applied, this will not be the\r\n   * actual taxable unit price (see `proratedUnitPrice`), but is generally the\r\n   * correct price to display to customers to avoid confusion\r\n   * about the internal handling of distributed Order-level discounts.\r\n   */\r\n  discountedUnitPrice: Scalars['Int'];\r\n  /** The price of a single unit including discounts and tax */\r\n  discountedUnitPriceWithTax: Scalars['Int'];\r\n  /**\r\n   * The actual unit price, taking into account both item discounts _and_ prorated (proportially-distributed)\r\n   * Order-level discounts. This value is the true economic value of the OrderItem, and is used in tax\r\n   * and refund calculations.\r\n   */\r\n  proratedUnitPrice: Scalars['Int'];\r\n  /** The proratedUnitPrice including tax */\r\n  proratedUnitPriceWithTax: Scalars['Int'];\r\n  quantity: Scalars['Int'];\r\n  items: Array<OrderItem>;\r\n  taxRate: Scalars['Float'];\r\n  /** The total price of the line excluding tax and discounts. */\r\n  linePrice: Scalars['Int'];\r\n  /** The total price of the line including tax bit excluding discounts. */\r\n  linePriceWithTax: Scalars['Int'];\r\n  /** The price of the line including discounts, excluding tax */\r\n  discountedLinePrice: Scalars['Int'];\r\n  /** The price of the line including discounts and tax */\r\n  discountedLinePriceWithTax: Scalars['Int'];\r\n  /**\r\n   * The actual line price, taking into account both item discounts _and_ prorated (proportially-distributed)\r\n   * Order-level discounts. This value is the true economic value of the OrderLine, and is used in tax\r\n   * and refund calculations.\r\n   */\r\n  proratedLinePrice: Scalars['Int'];\r\n  /** The proratedLinePrice including tax */\r\n  proratedLinePriceWithTax: Scalars['Int'];\r\n  /** The total tax on this line */\r\n  lineTax: Scalars['Int'];\r\n  discounts: Array<Discount>;\r\n  taxLines: Array<TaxLine>;\r\n  order: Order;\r\n  customFields?: Maybe<Scalars['JSON']>;\r\n};\r\n\r\nexport type Payment = Node & {\r\n  __typename?: 'Payment';\r\n  id: Scalars['ID'];\r\n  createdAt: Scalars['DateTime'];\r\n  updatedAt: Scalars['DateTime'];\r\n  method: Scalars['String'];\r\n  amount: Scalars['Int'];\r\n  state: Scalars['String'];\r\n  transactionId?: Maybe<Scalars['String']>;\r\n  errorMessage?: Maybe<Scalars['String']>;\r\n  refunds: Array<Refund>;\r\n  metadata?: Maybe<Scalars['JSON']>;\r\n};\r\n\r\nexport type Refund = Node & {\r\n  __typename?: 'Refund';\r\n  id: Scalars['ID'];\r\n  createdAt: Scalars['DateTime'];\r\n  updatedAt: Scalars['DateTime'];\r\n  items: Scalars['Int'];\r\n  shipping: Scalars['Int'];\r\n  adjustment: Scalars['Int'];\r\n  total: Scalars['Int'];\r\n  method?: Maybe<Scalars['String']>;\r\n  state: Scalars['String'];\r\n  transactionId?: Maybe<Scalars['String']>;\r\n  reason?: Maybe<Scalars['String']>;\r\n  orderItems: Array<OrderItem>;\r\n  paymentId: Scalars['ID'];\r\n  metadata?: Maybe<Scalars['JSON']>;\r\n};\r\n\r\nexport type Fulfillment = Node & {\r\n  __typename?: 'Fulfillment';\r\n  id: Scalars['ID'];\r\n  createdAt: Scalars['DateTime'];\r\n  updatedAt: Scalars['DateTime'];\r\n  orderItems: Array<OrderItem>;\r\n  state: Scalars['String'];\r\n  method: Scalars['String'];\r\n  trackingCode?: Maybe<Scalars['String']>;\r\n  customFields?: Maybe<Scalars['JSON']>;\r\n};\r\n\r\nexport type Surcharge = Node & {\r\n  __typename?: 'Surcharge';\r\n  id: Scalars['ID'];\r\n  createdAt: Scalars['DateTime'];\r\n  updatedAt: Scalars['DateTime'];\r\n  description: Scalars['String'];\r\n  sku?: Maybe<Scalars['String']>;\r\n  taxLines: Array<TaxLine>;\r\n  price: Scalars['Int'];\r\n  priceWithTax: Scalars['Int'];\r\n  taxRate: Scalars['Float'];\r\n};\r\n\r\nexport type ProductOptionGroup = Node & {\r\n  __typename?: 'ProductOptionGroup';\r\n  id: Scalars['ID'];\r\n  createdAt: Scalars['DateTime'];\r\n  updatedAt: Scalars['DateTime'];\r\n  languageCode: LanguageCode;\r\n  code: Scalars['String'];\r\n  name: Scalars['String'];\r\n  options: Array<ProductOption>;\r\n  translations: Array<ProductOptionGroupTranslation>;\r\n  customFields?: Maybe<Scalars['JSON']>;\r\n};\r\n\r\nexport type ProductOptionGroupTranslation = {\r\n  __typename?: 'ProductOptionGroupTranslation';\r\n  id: Scalars['ID'];\r\n  createdAt: Scalars['DateTime'];\r\n  updatedAt: Scalars['DateTime'];\r\n  languageCode: LanguageCode;\r\n  name: Scalars['String'];\r\n};\r\n\r\nexport type ProductOption = Node & {\r\n  __typename?: 'ProductOption';\r\n  id: Scalars['ID'];\r\n  createdAt: Scalars['DateTime'];\r\n  updatedAt: Scalars['DateTime'];\r\n  languageCode: LanguageCode;\r\n  code: Scalars['String'];\r\n  name: Scalars['String'];\r\n  groupId: Scalars['ID'];\r\n  group: ProductOptionGroup;\r\n  translations: Array<ProductOptionTranslation>;\r\n  customFields?: Maybe<Scalars['JSON']>;\r\n};\r\n\r\nexport type ProductOptionTranslation = {\r\n  __typename?: 'ProductOptionTranslation';\r\n  id: Scalars['ID'];\r\n  createdAt: Scalars['DateTime'];\r\n  updatedAt: Scalars['DateTime'];\r\n  languageCode: LanguageCode;\r\n  name: Scalars['String'];\r\n};\r\n\r\nexport type SearchReindexResponse = {\r\n  __typename?: 'SearchReindexResponse';\r\n  success: Scalars['Boolean'];\r\n};\r\n\r\nexport type SearchResponse = {\r\n  __typename?: 'SearchResponse';\r\n  items: Array<SearchResult>;\r\n  totalItems: Scalars['Int'];\r\n  facetValues: Array<FacetValueResult>;\r\n  collections: Array<CollectionResult>;\r\n};\r\n\r\n/**\r\n * Which FacetValues are present in the products returned\r\n * by the search, and in what quantity.\r\n */\r\nexport type FacetValueResult = {\r\n  __typename?: 'FacetValueResult';\r\n  facetValue: FacetValue;\r\n  count: Scalars['Int'];\r\n};\r\n\r\n/**\r\n * Which Collections are present in the products returned\r\n * by the search, and in what quantity.\r\n */\r\nexport type CollectionResult = {\r\n  __typename?: 'CollectionResult';\r\n  collection: Collection;\r\n  count: Scalars['Int'];\r\n};\r\n\r\nexport type SearchResultAsset = {\r\n  __typename?: 'SearchResultAsset';\r\n  id: Scalars['ID'];\r\n  preview: Scalars['String'];\r\n  focalPoint?: Maybe<Coordinate>;\r\n};\r\n\r\nexport type SearchResult = {\r\n  __typename?: 'SearchResult';\r\n  sku: Scalars['String'];\r\n  slug: Scalars['String'];\r\n  productId: Scalars['ID'];\r\n  productName: Scalars['String'];\r\n  productAsset?: Maybe<SearchResultAsset>;\r\n  productVariantId: Scalars['ID'];\r\n  productVariantName: Scalars['String'];\r\n  productVariantAsset?: Maybe<SearchResultAsset>;\r\n  price: SearchResultPrice;\r\n  priceWithTax: SearchResultPrice;\r\n  currencyCode: CurrencyCode;\r\n  description: Scalars['String'];\r\n  facetIds: Array<Scalars['ID']>;\r\n  facetValueIds: Array<Scalars['ID']>;\r\n  /** An array of ids of the Collections in which this result appears */\r\n  collectionIds: Array<Scalars['ID']>;\r\n  /** A relevence score for the result. Differs between database implementations */\r\n  score: Scalars['Float'];\r\n};\r\n\r\n/** The price of a search result product, either as a range or as a single price */\r\nexport type SearchResultPrice = PriceRange | SinglePrice;\r\n\r\n/** The price value where the result has a single price */\r\nexport type SinglePrice = {\r\n  __typename?: 'SinglePrice';\r\n  value: Scalars['Int'];\r\n};\r\n\r\n/** The price range where the result has more than one price */\r\nexport type PriceRange = {\r\n  __typename?: 'PriceRange';\r\n  min: Scalars['Int'];\r\n  max: Scalars['Int'];\r\n};\r\n\r\nexport type Product = Node & {\r\n  __typename?: 'Product';\r\n  id: Scalars['ID'];\r\n  createdAt: Scalars['DateTime'];\r\n  updatedAt: Scalars['DateTime'];\r\n  languageCode: LanguageCode;\r\n  name: Scalars['String'];\r\n  slug: Scalars['String'];\r\n  description: Scalars['String'];\r\n  featuredAsset?: Maybe<Asset>;\r\n  assets: Array<Asset>;\r\n  variants: Array<ProductVariant>;\r\n  optionGroups: Array<ProductOptionGroup>;\r\n  facetValues: Array<FacetValue>;\r\n  translations: Array<ProductTranslation>;\r\n  collections: Array<Collection>;\r\n  customFields?: Maybe<Scalars['JSON']>;\r\n};\r\n\r\nexport type ProductTranslation = {\r\n  __typename?: 'ProductTranslation';\r\n  id: Scalars['ID'];\r\n  createdAt: Scalars['DateTime'];\r\n  updatedAt: Scalars['DateTime'];\r\n  languageCode: LanguageCode;\r\n  name: Scalars['String'];\r\n  slug: Scalars['String'];\r\n  description: Scalars['String'];\r\n};\r\n\r\nexport type ProductList = PaginatedList & {\r\n  __typename?: 'ProductList';\r\n  items: Array<Product>;\r\n  totalItems: Scalars['Int'];\r\n};\r\n\r\nexport type ProductVariant = Node & {\r\n  __typename?: 'ProductVariant';\r\n  id: Scalars['ID'];\r\n  product: Product;\r\n  productId: Scalars['ID'];\r\n  createdAt: Scalars['DateTime'];\r\n  updatedAt: Scalars['DateTime'];\r\n  languageCode: LanguageCode;\r\n  sku: Scalars['String'];\r\n  name: Scalars['String'];\r\n  featuredAsset?: Maybe<Asset>;\r\n  assets: Array<Asset>;\r\n  price: Scalars['Int'];\r\n  currencyCode: CurrencyCode;\r\n  priceWithTax: Scalars['Int'];\r\n  stockLevel: Scalars['String'];\r\n  taxRateApplied: TaxRate;\r\n  taxCategory: TaxCategory;\r\n  options: Array<ProductOption>;\r\n  facetValues: Array<FacetValue>;\r\n  translations: Array<ProductVariantTranslation>;\r\n  customFields?: Maybe<Scalars['JSON']>;\r\n};\r\n\r\nexport type ProductVariantTranslation = {\r\n  __typename?: 'ProductVariantTranslation';\r\n  id: Scalars['ID'];\r\n  createdAt: Scalars['DateTime'];\r\n  updatedAt: Scalars['DateTime'];\r\n  languageCode: LanguageCode;\r\n  name: Scalars['String'];\r\n};\r\n\r\nexport type Promotion = Node & {\r\n  __typename?: 'Promotion';\r\n  id: Scalars['ID'];\r\n  createdAt: Scalars['DateTime'];\r\n  updatedAt: Scalars['DateTime'];\r\n  startsAt?: Maybe<Scalars['DateTime']>;\r\n  endsAt?: Maybe<Scalars['DateTime']>;\r\n  couponCode?: Maybe<Scalars['String']>;\r\n  perCustomerUsageLimit?: Maybe<Scalars['Int']>;\r\n  name: Scalars['String'];\r\n  enabled: Scalars['Boolean'];\r\n  conditions: Array<ConfigurableOperation>;\r\n  actions: Array<ConfigurableOperation>;\r\n};\r\n\r\nexport type PromotionList = PaginatedList & {\r\n  __typename?: 'PromotionList';\r\n  items: Array<Promotion>;\r\n  totalItems: Scalars['Int'];\r\n};\r\n\r\nexport type Role = Node & {\r\n  __typename?: 'Role';\r\n  id: Scalars['ID'];\r\n  createdAt: Scalars['DateTime'];\r\n  updatedAt: Scalars['DateTime'];\r\n  code: Scalars['String'];\r\n  description: Scalars['String'];\r\n  permissions: Array<Permission>;\r\n  channels: Array<Channel>;\r\n};\r\n\r\nexport type RoleList = PaginatedList & {\r\n  __typename?: 'RoleList';\r\n  items: Array<Role>;\r\n  totalItems: Scalars['Int'];\r\n};\r\n\r\nexport type ShippingMethod = Node & {\r\n  __typename?: 'ShippingMethod';\r\n  id: Scalars['ID'];\r\n  createdAt: Scalars['DateTime'];\r\n  updatedAt: Scalars['DateTime'];\r\n  code: Scalars['String'];\r\n  name: Scalars['String'];\r\n  description: Scalars['String'];\r\n  fulfillmentHandlerCode: Scalars['String'];\r\n  checker: ConfigurableOperation;\r\n  calculator: ConfigurableOperation;\r\n  translations: Array<ShippingMethodTranslation>;\r\n  customFields?: Maybe<Scalars['JSON']>;\r\n};\r\n\r\nexport type ShippingMethodTranslation = {\r\n  __typename?: 'ShippingMethodTranslation';\r\n  id: Scalars['ID'];\r\n  createdAt: Scalars['DateTime'];\r\n  updatedAt: Scalars['DateTime'];\r\n  languageCode: LanguageCode;\r\n  name: Scalars['String'];\r\n  description: Scalars['String'];\r\n};\r\n\r\nexport type ShippingMethodList = PaginatedList & {\r\n  __typename?: 'ShippingMethodList';\r\n  items: Array<ShippingMethod>;\r\n  totalItems: Scalars['Int'];\r\n};\r\n\r\nexport type Tag = Node & {\r\n  __typename?: 'Tag';\r\n  id: Scalars['ID'];\r\n  createdAt: Scalars['DateTime'];\r\n  updatedAt: Scalars['DateTime'];\r\n  value: Scalars['String'];\r\n};\r\n\r\nexport type TagList = PaginatedList & {\r\n  __typename?: 'TagList';\r\n  items: Array<Tag>;\r\n  totalItems: Scalars['Int'];\r\n};\r\n\r\nexport type TaxCategory = Node & {\r\n  __typename?: 'TaxCategory';\r\n  id: Scalars['ID'];\r\n  createdAt: Scalars['DateTime'];\r\n  updatedAt: Scalars['DateTime'];\r\n  name: Scalars['String'];\r\n  isDefault: Scalars['Boolean'];\r\n};\r\n\r\nexport type TaxRate = Node & {\r\n  __typename?: 'TaxRate';\r\n  id: Scalars['ID'];\r\n  createdAt: Scalars['DateTime'];\r\n  updatedAt: Scalars['DateTime'];\r\n  name: Scalars['String'];\r\n  enabled: Scalars['Boolean'];\r\n  value: Scalars['Float'];\r\n  category: TaxCategory;\r\n  zone: Zone;\r\n  customerGroup?: Maybe<CustomerGroup>;\r\n};\r\n\r\nexport type TaxRateList = PaginatedList & {\r\n  __typename?: 'TaxRateList';\r\n  items: Array<TaxRate>;\r\n  totalItems: Scalars['Int'];\r\n};\r\n\r\nexport type User = Node & {\r\n  __typename?: 'User';\r\n  id: Scalars['ID'];\r\n  createdAt: Scalars['DateTime'];\r\n  updatedAt: Scalars['DateTime'];\r\n  identifier: Scalars['String'];\r\n  verified: Scalars['Boolean'];\r\n  roles: Array<Role>;\r\n  lastLogin?: Maybe<Scalars['DateTime']>;\r\n  authenticationMethods: Array<AuthenticationMethod>;\r\n  customFields?: Maybe<Scalars['JSON']>;\r\n};\r\n\r\nexport type AuthenticationMethod = Node & {\r\n  __typename?: 'AuthenticationMethod';\r\n  id: Scalars['ID'];\r\n  createdAt: Scalars['DateTime'];\r\n  updatedAt: Scalars['DateTime'];\r\n  strategy: Scalars['String'];\r\n};\r\n\r\nexport type Zone = Node & {\r\n  __typename?: 'Zone';\r\n  id: Scalars['ID'];\r\n  createdAt: Scalars['DateTime'];\r\n  updatedAt: Scalars['DateTime'];\r\n  name: Scalars['String'];\r\n  members: Array<Country>;\r\n};\r\n\r\n/** Returned when attempting to modify the contents of an Order that is not in the `AddingItems` state. */\r\nexport type OrderModificationError = ErrorResult & {\r\n  __typename?: 'OrderModificationError';\r\n  errorCode: ErrorCode;\r\n  message: Scalars['String'];\r\n};\r\n\r\n/** Returned when attempting to set a ShippingMethod for which the Order is not eligible */\r\nexport type IneligibleShippingMethodError = ErrorResult & {\r\n  __typename?: 'IneligibleShippingMethodError';\r\n  errorCode: ErrorCode;\r\n  message: Scalars['String'];\r\n};\r\n\r\n/** Returned when attempting to add a Payment to an Order that is not in the `ArrangingPayment` state. */\r\nexport type OrderPaymentStateError = ErrorResult & {\r\n  __typename?: 'OrderPaymentStateError';\r\n  errorCode: ErrorCode;\r\n  message: Scalars['String'];\r\n};\r\n\r\n/** Returned when attempting to add a Payment using a PaymentMethod for which the Order is not eligible. */\r\nexport type IneligiblePaymentMethodError = ErrorResult & {\r\n  __typename?: 'IneligiblePaymentMethodError';\r\n  errorCode: ErrorCode;\r\n  message: Scalars['String'];\r\n  eligibilityCheckerMessage?: Maybe<Scalars['String']>;\r\n};\r\n\r\n/** Returned when a Payment fails due to an error. */\r\nexport type PaymentFailedError = ErrorResult & {\r\n  __typename?: 'PaymentFailedError';\r\n  errorCode: ErrorCode;\r\n  message: Scalars['String'];\r\n  paymentErrorMessage: Scalars['String'];\r\n};\r\n\r\n/** Returned when a Payment is declined by the payment provider. */\r\nexport type PaymentDeclinedError = ErrorResult & {\r\n  __typename?: 'PaymentDeclinedError';\r\n  errorCode: ErrorCode;\r\n  message: Scalars['String'];\r\n  paymentErrorMessage: Scalars['String'];\r\n};\r\n\r\n/** Returned if the provided coupon code is invalid */\r\nexport type CouponCodeInvalidError = ErrorResult & {\r\n  __typename?: 'CouponCodeInvalidError';\r\n  errorCode: ErrorCode;\r\n  message: Scalars['String'];\r\n  couponCode: Scalars['String'];\r\n};\r\n\r\n/** Returned if the provided coupon code is invalid */\r\nexport type CouponCodeExpiredError = ErrorResult & {\r\n  __typename?: 'CouponCodeExpiredError';\r\n  errorCode: ErrorCode;\r\n  message: Scalars['String'];\r\n  couponCode: Scalars['String'];\r\n};\r\n\r\n/** Returned if the provided coupon code is invalid */\r\nexport type CouponCodeLimitError = ErrorResult & {\r\n  __typename?: 'CouponCodeLimitError';\r\n  errorCode: ErrorCode;\r\n  message: Scalars['String'];\r\n  couponCode: Scalars['String'];\r\n  limit: Scalars['Int'];\r\n};\r\n\r\n/** Retured when attemting to set the Customer for an Order when already logged in. */\r\nexport type AlreadyLoggedInError = ErrorResult & {\r\n  __typename?: 'AlreadyLoggedInError';\r\n  errorCode: ErrorCode;\r\n  message: Scalars['String'];\r\n};\r\n\r\n/** Retured when attemting to register or verify a customer account without a password, when one is required. */\r\nexport type MissingPasswordError = ErrorResult & {\r\n  __typename?: 'MissingPasswordError';\r\n  errorCode: ErrorCode;\r\n  message: Scalars['String'];\r\n};\r\n\r\n/** Retured when attemting to verify a customer account with a password, when a password has already been set. */\r\nexport type PasswordAlreadySetError = ErrorResult & {\r\n  __typename?: 'PasswordAlreadySetError';\r\n  errorCode: ErrorCode;\r\n  message: Scalars['String'];\r\n};\r\n\r\n/**\r\n * Retured if the verification token (used to verify a Customer's email address) is either\r\n * invalid or does not match any expected tokens.\r\n */\r\nexport type VerificationTokenInvalidError = ErrorResult & {\r\n  __typename?: 'VerificationTokenInvalidError';\r\n  errorCode: ErrorCode;\r\n  message: Scalars['String'];\r\n};\r\n\r\n/**\r\n * Returned if the verification token (used to verify a Customer's email address) is valid, but has\r\n * expired according to the `verificationTokenDuration` setting in the AuthOptions.\r\n */\r\nexport type VerificationTokenExpiredError = ErrorResult & {\r\n  __typename?: 'VerificationTokenExpiredError';\r\n  errorCode: ErrorCode;\r\n  message: Scalars['String'];\r\n};\r\n\r\n/**\r\n * Retured if the token used to change a Customer's email address is either\r\n * invalid or does not match any expected tokens.\r\n */\r\nexport type IdentifierChangeTokenInvalidError = ErrorResult & {\r\n  __typename?: 'IdentifierChangeTokenInvalidError';\r\n  errorCode: ErrorCode;\r\n  message: Scalars['String'];\r\n};\r\n\r\n/**\r\n * Retured if the token used to change a Customer's email address is valid, but has\r\n * expired according to the `verificationTokenDuration` setting in the AuthOptions.\r\n */\r\nexport type IdentifierChangeTokenExpiredError = ErrorResult & {\r\n  __typename?: 'IdentifierChangeTokenExpiredError';\r\n  errorCode: ErrorCode;\r\n  message: Scalars['String'];\r\n};\r\n\r\n/**\r\n * Retured if the token used to reset a Customer's password is either\r\n * invalid or does not match any expected tokens.\r\n */\r\nexport type PasswordResetTokenInvalidError = ErrorResult & {\r\n  __typename?: 'PasswordResetTokenInvalidError';\r\n  errorCode: ErrorCode;\r\n  message: Scalars['String'];\r\n};\r\n\r\n/**\r\n * Retured if the token used to reset a Customer's password is valid, but has\r\n * expired according to the `verificationTokenDuration` setting in the AuthOptions.\r\n */\r\nexport type PasswordResetTokenExpiredError = ErrorResult & {\r\n  __typename?: 'PasswordResetTokenExpiredError';\r\n  errorCode: ErrorCode;\r\n  message: Scalars['String'];\r\n};\r\n\r\n/**\r\n * Returned if `authOptions.requireVerification` is set to `true` (which is the default)\r\n * and an unverified user attempts to authenticate.\r\n */\r\nexport type NotVerifiedError = ErrorResult & {\r\n  __typename?: 'NotVerifiedError';\r\n  errorCode: ErrorCode;\r\n  message: Scalars['String'];\r\n};\r\n\r\n/**\r\n * Returned when invoking a mutation which depends on there being an active Order on the\r\n * current session.\r\n */\r\nexport type NoActiveOrderError = ErrorResult & {\r\n  __typename?: 'NoActiveOrderError';\r\n  errorCode: ErrorCode;\r\n  message: Scalars['String'];\r\n};\r\n\r\nexport type AuthenticationInput = {\r\n  native?: Maybe<NativeAuthInput>;\r\n};\r\n\r\nexport type RegisterCustomerInput = {\r\n  emailAddress: Scalars['String'];\r\n  title?: Maybe<Scalars['String']>;\r\n  firstName?: Maybe<Scalars['String']>;\r\n  lastName?: Maybe<Scalars['String']>;\r\n  phoneNumber?: Maybe<Scalars['String']>;\r\n  password?: Maybe<Scalars['String']>;\r\n};\r\n\r\nexport type UpdateCustomerInput = {\r\n  title?: Maybe<Scalars['String']>;\r\n  firstName?: Maybe<Scalars['String']>;\r\n  lastName?: Maybe<Scalars['String']>;\r\n  phoneNumber?: Maybe<Scalars['String']>;\r\n  customFields?: Maybe<Scalars['JSON']>;\r\n};\r\n\r\nexport type UpdateOrderInput = {\r\n  customFields?: Maybe<Scalars['JSON']>;\r\n};\r\n\r\n/** Passed as input to the `addPaymentToOrder` mutation. */\r\nexport type PaymentInput = {\r\n  /** This field should correspond to the `code` property of a PaymentMethodHandler. */\r\n  method: Scalars['String'];\r\n  /**\r\n   * This field should contain arbitrary data passed to the specified PaymentMethodHandler's `createPayment()` method\r\n   * as the \"metadata\" argument. For example, it could contain an ID for the payment and other\r\n   * data generated by the payment provider.\r\n   */\r\n  metadata: Scalars['JSON'];\r\n};\r\n\r\nexport type CollectionListOptions = {\r\n  skip?: Maybe<Scalars['Int']>;\r\n  take?: Maybe<Scalars['Int']>;\r\n  sort?: Maybe<CollectionSortParameter>;\r\n  filter?: Maybe<CollectionFilterParameter>;\r\n};\r\n\r\nexport type OrderListOptions = {\r\n  skip?: Maybe<Scalars['Int']>;\r\n  take?: Maybe<Scalars['Int']>;\r\n  sort?: Maybe<OrderSortParameter>;\r\n  filter?: Maybe<OrderFilterParameter>;\r\n};\r\n\r\nexport type ProductListOptions = {\r\n  skip?: Maybe<Scalars['Int']>;\r\n  take?: Maybe<Scalars['Int']>;\r\n  sort?: Maybe<ProductSortParameter>;\r\n  filter?: Maybe<ProductFilterParameter>;\r\n};\r\n\r\nexport type UpdateOrderItemsResult = Order | OrderModificationError | OrderLimitError | NegativeQuantityError | InsufficientStockError;\r\n\r\nexport type RemoveOrderItemsResult = Order | OrderModificationError;\r\n\r\nexport type SetOrderShippingMethodResult = Order | OrderModificationError | IneligibleShippingMethodError | NoActiveOrderError;\r\n\r\nexport type ApplyCouponCodeResult = Order | CouponCodeExpiredError | CouponCodeInvalidError | CouponCodeLimitError;\r\n\r\nexport type AddPaymentToOrderResult = Order | OrderPaymentStateError | IneligiblePaymentMethodError | PaymentFailedError | PaymentDeclinedError | OrderStateTransitionError | NoActiveOrderError;\r\n\r\nexport type TransitionOrderToStateResult = Order | OrderStateTransitionError;\r\n\r\nexport type SetCustomerForOrderResult = Order | AlreadyLoggedInError | EmailAddressConflictError | NoActiveOrderError;\r\n\r\nexport type RegisterCustomerAccountResult = Success | MissingPasswordError | NativeAuthStrategyError;\r\n\r\nexport type RefreshCustomerVerificationResult = Success | NativeAuthStrategyError;\r\n\r\nexport type VerifyCustomerAccountResult = CurrentUser | VerificationTokenInvalidError | VerificationTokenExpiredError | MissingPasswordError | PasswordAlreadySetError | NativeAuthStrategyError;\r\n\r\nexport type UpdateCustomerPasswordResult = Success | InvalidCredentialsError | NativeAuthStrategyError;\r\n\r\nexport type RequestUpdateCustomerEmailAddressResult = Success | InvalidCredentialsError | EmailAddressConflictError | NativeAuthStrategyError;\r\n\r\nexport type UpdateCustomerEmailAddressResult = Success | IdentifierChangeTokenInvalidError | IdentifierChangeTokenExpiredError | NativeAuthStrategyError;\r\n\r\nexport type RequestPasswordResetResult = Success | NativeAuthStrategyError;\r\n\r\nexport type ResetPasswordResult = CurrentUser | PasswordResetTokenInvalidError | PasswordResetTokenExpiredError | NativeAuthStrategyError;\r\n\r\nexport type NativeAuthenticationResult = CurrentUser | InvalidCredentialsError | NotVerifiedError | NativeAuthStrategyError;\r\n\r\nexport type AuthenticationResult = CurrentUser | InvalidCredentialsError | NotVerifiedError;\r\n\r\nexport type ActiveOrderResult = Order | NoActiveOrderError;\r\n\r\nexport type ProductVariantFilterParameter = {\r\n  createdAt?: Maybe<DateOperators>;\r\n  updatedAt?: Maybe<DateOperators>;\r\n  languageCode?: Maybe<StringOperators>;\r\n  sku?: Maybe<StringOperators>;\r\n  name?: Maybe<StringOperators>;\r\n  price?: Maybe<NumberOperators>;\r\n  currencyCode?: Maybe<StringOperators>;\r\n  priceWithTax?: Maybe<NumberOperators>;\r\n  stockLevel?: Maybe<StringOperators>;\r\n};\r\n\r\nexport type ProductVariantSortParameter = {\r\n  id?: Maybe<SortOrder>;\r\n  productId?: Maybe<SortOrder>;\r\n  createdAt?: Maybe<SortOrder>;\r\n  updatedAt?: Maybe<SortOrder>;\r\n  sku?: Maybe<SortOrder>;\r\n  name?: Maybe<SortOrder>;\r\n  price?: Maybe<SortOrder>;\r\n  priceWithTax?: Maybe<SortOrder>;\r\n  stockLevel?: Maybe<SortOrder>;\r\n};\r\n\r\nexport type CustomerFilterParameter = {\r\n  createdAt?: Maybe<DateOperators>;\r\n  updatedAt?: Maybe<DateOperators>;\r\n  title?: Maybe<StringOperators>;\r\n  firstName?: Maybe<StringOperators>;\r\n  lastName?: Maybe<StringOperators>;\r\n  phoneNumber?: Maybe<StringOperators>;\r\n  emailAddress?: Maybe<StringOperators>;\r\n};\r\n\r\nexport type CustomerSortParameter = {\r\n  id?: Maybe<SortOrder>;\r\n  createdAt?: Maybe<SortOrder>;\r\n  updatedAt?: Maybe<SortOrder>;\r\n  title?: Maybe<SortOrder>;\r\n  firstName?: Maybe<SortOrder>;\r\n  lastName?: Maybe<SortOrder>;\r\n  phoneNumber?: Maybe<SortOrder>;\r\n  emailAddress?: Maybe<SortOrder>;\r\n};\r\n\r\nexport type OrderFilterParameter = {\r\n  createdAt?: Maybe<DateOperators>;\r\n  updatedAt?: Maybe<DateOperators>;\r\n  orderPlacedAt?: Maybe<DateOperators>;\r\n  code?: Maybe<StringOperators>;\r\n  state?: Maybe<StringOperators>;\r\n  active?: Maybe<BooleanOperators>;\r\n  totalQuantity?: Maybe<NumberOperators>;\r\n  subTotal?: Maybe<NumberOperators>;\r\n  subTotalWithTax?: Maybe<NumberOperators>;\r\n  currencyCode?: Maybe<StringOperators>;\r\n  shipping?: Maybe<NumberOperators>;\r\n  shippingWithTax?: Maybe<NumberOperators>;\r\n  total?: Maybe<NumberOperators>;\r\n  totalWithTax?: Maybe<NumberOperators>;\r\n};\r\n\r\nexport type OrderSortParameter = {\r\n  id?: Maybe<SortOrder>;\r\n  createdAt?: Maybe<SortOrder>;\r\n  updatedAt?: Maybe<SortOrder>;\r\n  orderPlacedAt?: Maybe<SortOrder>;\r\n  code?: Maybe<SortOrder>;\r\n  state?: Maybe<SortOrder>;\r\n  totalQuantity?: Maybe<SortOrder>;\r\n  subTotal?: Maybe<SortOrder>;\r\n  subTotalWithTax?: Maybe<SortOrder>;\r\n  shipping?: Maybe<SortOrder>;\r\n  shippingWithTax?: Maybe<SortOrder>;\r\n  total?: Maybe<SortOrder>;\r\n  totalWithTax?: Maybe<SortOrder>;\r\n};\r\n\r\nexport type HistoryEntryFilterParameter = {\r\n  createdAt?: Maybe<DateOperators>;\r\n  updatedAt?: Maybe<DateOperators>;\r\n  type?: Maybe<StringOperators>;\r\n};\r\n\r\nexport type HistoryEntrySortParameter = {\r\n  id?: Maybe<SortOrder>;\r\n  createdAt?: Maybe<SortOrder>;\r\n  updatedAt?: Maybe<SortOrder>;\r\n};\r\n\r\nexport type CollectionFilterParameter = {\r\n  createdAt?: Maybe<DateOperators>;\r\n  updatedAt?: Maybe<DateOperators>;\r\n  languageCode?: Maybe<StringOperators>;\r\n  name?: Maybe<StringOperators>;\r\n  slug?: Maybe<StringOperators>;\r\n  position?: Maybe<NumberOperators>;\r\n  description?: Maybe<StringOperators>;\r\n};\r\n\r\nexport type CollectionSortParameter = {\r\n  id?: Maybe<SortOrder>;\r\n  createdAt?: Maybe<SortOrder>;\r\n  updatedAt?: Maybe<SortOrder>;\r\n  name?: Maybe<SortOrder>;\r\n  slug?: Maybe<SortOrder>;\r\n  position?: Maybe<SortOrder>;\r\n  description?: Maybe<SortOrder>;\r\n};\r\n\r\nexport type ProductFilterParameter = {\r\n  createdAt?: Maybe<DateOperators>;\r\n  updatedAt?: Maybe<DateOperators>;\r\n  languageCode?: Maybe<StringOperators>;\r\n  name?: Maybe<StringOperators>;\r\n  slug?: Maybe<StringOperators>;\r\n  description?: Maybe<StringOperators>;\r\n};\r\n\r\nexport type ProductSortParameter = {\r\n  id?: Maybe<SortOrder>;\r\n  createdAt?: Maybe<SortOrder>;\r\n  updatedAt?: Maybe<SortOrder>;\r\n  name?: Maybe<SortOrder>;\r\n  slug?: Maybe<SortOrder>;\r\n  description?: Maybe<SortOrder>;\r\n};\r\n\r\nexport type NativeAuthInput = {\r\n  username: Scalars['String'];\r\n  password: Scalars['String'];\r\n};\r\n","<input\r\n    type=\"text\"\r\n    name=\"searchTerm\"\r\n    [formControl]=\"filterTermControl\"\r\n    [placeholder]=\"'customer.search-customers-by-email' | translate\"\r\n    class=\"search-input\"\r\n/>\r\n\r\n<vdr-data-table\r\n    [items]=\"members\"\r\n    [itemsPerPage]=\"membersItemsPerPage$ | async\"\r\n    [totalItems]=\"totalItems\"\r\n    [currentPage]=\"membersCurrentPage$ | async\"\r\n    (pageChange)=\"setContentsPageNumber($event)\"\r\n    (itemsPerPageChange)=\"setContentsItemsPerPage($event)\"\r\n    [allSelected]=\"areAllSelected()\"\r\n    [isRowSelectedFn]=\"('UpdateCustomerGroup' | hasPermission) && isMemberSelected\"\r\n    (rowSelectChange)=\"toggleSelectMember($event)\"\r\n    (allSelectChange)=\"toggleSelectAll()\"\r\n>\r\n    <vdr-dt-column [expand]=\"true\">{{ 'customer.name' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column [expand]=\"true\">{{ 'customer.email-address' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <ng-template let-customer=\"item\">\r\n        <td class=\"left align-middle\">\r\n            {{ customer.title }} {{ customer.firstName }} {{ customer.lastName }}\r\n        </td>\r\n        <td class=\"left align-middle\">{{ customer.emailAddress }}</td>\r\n        <td class=\"right align-middle\">\r\n            <vdr-table-row-action\r\n                iconShape=\"edit\"\r\n                [label]=\"'common.edit' | translate\"\r\n                [linkTo]=\"['/customer', 'customers', customer.id]\"\r\n            ></vdr-table-row-action>\r\n        </td>\r\n    </ng-template>\r\n</vdr-data-table>\r\n","import {\r\n    ChangeDetectionStrategy,\r\n    Component,\r\n    EventEmitter,\r\n    Input,\r\n    OnDestroy,\r\n    OnInit,\r\n    Output,\r\n} from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Customer, DataService, GetCustomerGroupWithCustomers } from '@vendure/admin-ui/core';\r\nimport { ZoneMember } from '@vendure/admin-ui/settings';\r\nimport { BehaviorSubject, combineLatest, Observable, Subject } from 'rxjs';\r\nimport { debounceTime, distinctUntilChanged, map, startWith, takeUntil, tap } from 'rxjs/operators';\r\n\r\nexport interface CustomerGroupMemberFetchParams {\r\n    skip: number;\r\n    take: number;\r\n    filterTerm: string;\r\n}\r\n\r\n@Component({\r\n    selector: 'vdr-customer-group-member-list',\r\n    templateUrl: './customer-group-member-list.component.html',\r\n    styleUrls: ['./customer-group-member-list.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CustomerGroupMemberListComponent implements OnInit, OnDestroy {\r\n    @Input() members: Array<\r\n        Pick<Customer, 'id' | 'createdAt' | 'updatedAt' | 'title' | 'firstName' | 'lastName' | 'emailAddress'>\r\n    >;\r\n    @Input() totalItems: number;\r\n    @Input() route: ActivatedRoute;\r\n    @Input() selectedMemberIds: string[] = [];\r\n    @Output() selectionChange = new EventEmitter<string[]>();\r\n    @Output() fetchParamsChange = new EventEmitter<CustomerGroupMemberFetchParams>();\r\n\r\n    membersItemsPerPage$: Observable<number>;\r\n    membersCurrentPage$: Observable<number>;\r\n    filterTermControl = new FormControl('');\r\n    private refresh$ = new BehaviorSubject<boolean>(true);\r\n    private destroy$ = new Subject<void>();\r\n\r\n    constructor(private router: Router, private dataService: DataService) {}\r\n\r\n    ngOnInit() {\r\n        this.membersCurrentPage$ = this.route.paramMap.pipe(\r\n            map((qpm) => qpm.get('membersPage')),\r\n            map((page) => (!page ? 1 : +page)),\r\n            startWith(1),\r\n            distinctUntilChanged(),\r\n        );\r\n\r\n        this.membersItemsPerPage$ = this.route.paramMap.pipe(\r\n            map((qpm) => qpm.get('membersPerPage')),\r\n            map((perPage) => (!perPage ? 10 : +perPage)),\r\n            startWith(10),\r\n            distinctUntilChanged(),\r\n        );\r\n\r\n        const filterTerm$ = this.filterTermControl.valueChanges.pipe(\r\n            debounceTime(250),\r\n            tap(() => this.setContentsPageNumber(1)),\r\n            startWith(''),\r\n        );\r\n\r\n        combineLatest(this.membersCurrentPage$, this.membersItemsPerPage$, filterTerm$, this.refresh$)\r\n            .pipe(takeUntil(this.destroy$))\r\n            .subscribe(([currentPage, itemsPerPage, filterTerm]) => {\r\n                const take = itemsPerPage;\r\n                const skip = (currentPage - 1) * itemsPerPage;\r\n                this.fetchParamsChange.emit({\r\n                    filterTerm,\r\n                    skip,\r\n                    take,\r\n                });\r\n            });\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.destroy$.next();\r\n        this.destroy$.complete();\r\n    }\r\n\r\n    setContentsPageNumber(page: number) {\r\n        this.setParam('membersPage', page);\r\n    }\r\n\r\n    setContentsItemsPerPage(perPage: number) {\r\n        this.setParam('membersPerPage', perPage);\r\n    }\r\n\r\n    refresh() {\r\n        this.refresh$.next(true);\r\n    }\r\n\r\n    private setParam(key: string, value: any) {\r\n        this.router.navigate(['./', { ...this.route.snapshot.params, [key]: value }], {\r\n            relativeTo: this.route,\r\n            queryParamsHandling: 'merge',\r\n        });\r\n    }\r\n\r\n    areAllSelected(): boolean {\r\n        if (this.members) {\r\n            return this.selectedMemberIds.length === this.members.length;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    toggleSelectAll() {\r\n        if (this.areAllSelected()) {\r\n            this.selectionChange.emit([]);\r\n        } else {\r\n            this.selectionChange.emit(this.members.map((v) => v.id));\r\n        }\r\n    }\r\n\r\n    toggleSelectMember(member: ZoneMember) {\r\n        if (this.selectedMemberIds.includes(member.id)) {\r\n            this.selectionChange.emit(this.selectedMemberIds.filter((id) => id !== member.id));\r\n        } else {\r\n            this.selectionChange.emit([...this.selectedMemberIds, member.id]);\r\n        }\r\n    }\r\n\r\n    isMemberSelected = (member: ZoneMember): boolean => {\r\n        return -1 < this.selectedMemberIds.indexOf(member.id);\r\n    };\r\n}\r\n","<ng-template vdrDialogTitle>\r\n    {{ 'customer.add-customers-to-group-with-name' | translate: {groupName: group.name} }}\r\n</ng-template>\r\n\r\n<vdr-customer-group-member-list\r\n    [members]=\"customers$ | async\"\r\n    [totalItems]=\"customersTotal$ | async\"\r\n    [route]=\"route\"\r\n    [selectedMemberIds]=\"selectedCustomerIds\"\r\n    (fetchParamsChange)=\"fetchGroupMembers$.next($event)\"\r\n    (selectionChange)=\"selectedCustomerIds = $event\"\r\n>\r\n\r\n</vdr-customer-group-member-list>\r\n\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button type=\"submit\" (click)=\"add()\" [disabled]=\"!selectedCustomerIds.length\" class=\"btn btn-primary\">\r\n        {{ 'customer.add-customers-to-group-with-count' | translate: {count: selectedCustomerIds.length} }}\r\n    </button>\r\n</ng-template>\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { DataService, Dialog, GetCustomerGroups, GetCustomerList } from '@vendure/admin-ui/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { map, switchMap } from 'rxjs/operators';\r\n\r\nimport { CustomerGroupMemberFetchParams } from '../customer-group-member-list/customer-group-member-list.component';\r\n\r\n@Component({\r\n    selector: 'vdr-add-customer-to-group-dialog',\r\n    templateUrl: './add-customer-to-group-dialog.component.html',\r\n    styleUrls: ['./add-customer-to-group-dialog.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class AddCustomerToGroupDialogComponent implements Dialog<string[]>, OnInit {\r\n    resolveWith: (result?: string[]) => void;\r\n    group: GetCustomerGroups.Items;\r\n    route: ActivatedRoute;\r\n    selectedCustomerIds: string[] = [];\r\n    customers$: Observable<GetCustomerList.Items[]>;\r\n    customersTotal$: Observable<number>;\r\n    fetchGroupMembers$ = new BehaviorSubject<CustomerGroupMemberFetchParams>({\r\n        skip: 0,\r\n        take: 10,\r\n        filterTerm: '',\r\n    });\r\n\r\n    constructor(private dataService: DataService) {}\r\n\r\n    ngOnInit() {\r\n        const customerResult$ = this.fetchGroupMembers$.pipe(\r\n            switchMap(({ skip, take, filterTerm }) => {\r\n                return this.dataService.customer\r\n                    .getCustomerList(take, skip, filterTerm)\r\n                    .mapStream((res) => res.customers);\r\n            }),\r\n        );\r\n\r\n        this.customers$ = customerResult$.pipe(map((res) => res.items));\r\n        this.customersTotal$ = customerResult$.pipe(map((res) => res.totalItems));\r\n    }\r\n\r\n    cancel() {\r\n        this.resolveWith();\r\n    }\r\n\r\n    add() {\r\n        this.resolveWith(this.selectedCustomerIds);\r\n    }\r\n}\r\n","<ng-template vdrDialogTitle>\r\n    <span *ngIf=\"addressForm.get('streetLine1')?.value as streetLine1\">{{ streetLine1 }},</span>\r\n    <span *ngIf=\"addressForm.get('countryCode')?.value as countryCode\"> {{ countryCode }}</span>\r\n</ng-template>\r\n\r\n<vdr-address-form\r\n    [formGroup]=\"addressForm\"\r\n    [availableCountries]=\"availableCountries\"\r\n    [customFields]=\"customFields\"\r\n></vdr-address-form>\r\n\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button\r\n        type=\"submit\"\r\n        (click)=\"save()\"\r\n        [disabled]=\"!addressForm.valid || !addressForm.touched\"\r\n        class=\"btn btn-primary\"\r\n    >\r\n        {{ 'common.update' | translate }}\r\n    </button>\r\n</ng-template>\r\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { CustomFieldConfig, Dialog, GetAvailableCountries } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-address-detail-dialog',\r\n    templateUrl: './address-detail-dialog.component.html',\r\n    styleUrls: ['./address-detail-dialog.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class AddressDetailDialogComponent implements Dialog<FormGroup>, OnInit {\r\n    addressForm: FormGroup;\r\n    customFields: CustomFieldConfig;\r\n    availableCountries: GetAvailableCountries.Items[] = [];\r\n    resolveWith: (result?: FormGroup) => void;\r\n\r\n    constructor(private changeDetector: ChangeDetectorRef) {}\r\n\r\n    ngOnInit() {\r\n        this.addressForm.valueChanges.subscribe(() => this.changeDetector.markForCheck());\r\n    }\r\n\r\n    cancel() {\r\n        this.resolveWith();\r\n    }\r\n\r\n    save() {\r\n        this.resolveWith(this.addressForm);\r\n    }\r\n}\r\n","<div class=\"card\" *ngIf=\"addressForm.value as address\">\r\n    <div class=\"card-header\">\r\n        <div class=\"address-title\">\r\n            <span class=\"street-line\" *ngIf=\"address.streetLine1\">{{ address.streetLine1 }},</span>\r\n            {{ address.countryCode }}\r\n        </div>\r\n        <div class=\"default-controls\">\r\n            <vdr-chip class=\"is-default p8\" *ngIf=\"isDefaultShipping\">\r\n                <clr-icon shape=\"truck\"></clr-icon>\r\n                {{ 'customer.default-shipping-address' | translate }}\r\n            </vdr-chip>\r\n            <vdr-chip class=\"is-default p8\" *ngIf=\"isDefaultBilling\">\r\n                <clr-icon shape=\"credit-card\"></clr-icon>\r\n                {{ 'customer.default-billing-address' | translate }}\r\n            </vdr-chip>\r\n        </div>\r\n    </div>\r\n    <div class=\"card-block\">\r\n        <div class=\"card-text\">\r\n            <vdr-formatted-address [address]=\"address\"></vdr-formatted-address>\r\n        </div>\r\n    </div>\r\n    <div class=\"card-footer\">\r\n        <vdr-entity-info [entity]=\"address\"></vdr-entity-info>\r\n        <ng-container *ngIf=\"editable\">\r\n            <button class=\"btn btn-sm btn-link\" (click)=\"editAddress()\">\r\n                {{ 'common.edit' | translate }}\r\n            </button>\r\n            <vdr-dropdown>\r\n                <button type=\"button\" class=\"btn btn-sm btn-link\" vdrDropdownTrigger>\r\n                    {{ 'common.more' | translate }}\r\n                    <clr-icon shape=\"caret down\"></clr-icon>\r\n                </button>\r\n                <vdr-dropdown-menu>\r\n                    <button\r\n                        vdrDropdownItem\r\n                        class=\"button\"\r\n                        [disabled]=\"isDefaultShipping\"\r\n                        (click)=\"setAsDefaultShippingAddress()\"\r\n                    >\r\n                        {{ 'customer.set-as-default-shipping-address' | translate }}\r\n                    </button>\r\n                    <button\r\n                        vdrDropdownItem\r\n                        class=\"button\"\r\n                        [disabled]=\"isDefaultBilling\"\r\n                        (click)=\"setAsDefaultBillingAddress()\"\r\n                    >\r\n                        {{ 'customer.set-as-default-billing-address' | translate }}\r\n                    </button>\r\n                </vdr-dropdown-menu>\r\n            </vdr-dropdown>\r\n        </ng-container>\r\n    </div>\r\n</div>\r\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    Input,\n    OnChanges,\n    OnInit,\n    Output,\n    SimpleChanges,\n} from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { CustomFieldConfig, GetAvailableCountries, ModalService } from '@vendure/admin-ui/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { filter, take } from 'rxjs/operators';\n\nimport { AddressDetailDialogComponent } from '../address-detail-dialog/address-detail-dialog.component';\n\n@Component({\n    selector: 'vdr-address-card',\n    templateUrl: './address-card.component.html',\n    styleUrls: ['./address-card.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddressCardComponent implements OnInit, OnChanges {\n    @Input() addressForm: FormGroup;\n    @Input() customFields: CustomFieldConfig;\n    @Input() availableCountries: GetAvailableCountries.Items[] = [];\n    @Input() isDefaultBilling: string;\n    @Input() isDefaultShipping: string;\n    @Input() editable = true;\n    @Output() setAsDefaultShipping = new EventEmitter<string>();\n    @Output() setAsDefaultBilling = new EventEmitter<string>();\n    private dataDependenciesPopulated = new BehaviorSubject<boolean>(false);\n\n    constructor(private modalService: ModalService, private changeDetector: ChangeDetectorRef) {}\n\n    ngOnInit(): void {\n        const streetLine1 = this.addressForm.get('streetLine1') as FormControl;\n        // Make the address dialog display automatically if there is no address line\n        // as is the case when adding a new address.\n        if (!streetLine1.value) {\n            this.dataDependenciesPopulated\n                .pipe(\n                    filter(value => value),\n                    take(1),\n                )\n                .subscribe(() => {\n                    this.editAddress();\n                });\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (this.customFields != null && this.availableCountries != null) {\n            this.dataDependenciesPopulated.next(true);\n        }\n    }\n\n    getCountryName(countryCode: string) {\n        if (!this.availableCountries) {\n            return '';\n        }\n        const match = this.availableCountries.find(c => c.code === countryCode);\n        return match ? match.name : '';\n    }\n\n    setAsDefaultBillingAddress() {\n        this.setAsDefaultBilling.emit(this.addressForm.value.id);\n        this.addressForm.markAsDirty();\n    }\n\n    setAsDefaultShippingAddress() {\n        this.setAsDefaultShipping.emit(this.addressForm.value.id);\n        this.addressForm.markAsDirty();\n    }\n\n    editAddress() {\n        this.modalService\n            .fromComponent(AddressDetailDialogComponent, {\n                locals: {\n                    addressForm: this.addressForm,\n                    customFields: this.customFields,\n                    availableCountries: this.availableCountries,\n                },\n                size: 'md',\n                closable: true,\n            })\n            .subscribe(() => {\n                this.changeDetector.markForCheck();\n            });\n    }\n}\n","<ng-template vdrDialogTitle>\r\n    {{ 'customer.add-customer-to-group' | translate }}\r\n</ng-template>\r\n\r\n<ng-select\r\n    [items]=\"groups$ | async\"\r\n    appendTo=\"body\"\r\n    [addTag]=\"false\"\r\n    [multiple]=\"true\"\r\n    bindValue=\"id\"\r\n    [(ngModel)]=\"selectedGroupIds\"\r\n    [clearable]=\"true\"\r\n    [searchable]=\"false\"\r\n>\r\n    <ng-template ng-label-tmp let-item=\"item\" let-clear=\"clear\">\r\n        <span aria-hidden=\"true\" class=\"ng-value-icon left\" (click)=\"clear(item)\"> × </span>\r\n        <vdr-chip [colorFrom]=\"item.id\">{{ item.name }}</vdr-chip>\r\n    </ng-template>\r\n    <ng-template ng-option-tmp let-item=\"item\">\r\n        <vdr-chip [colorFrom]=\"item.id\">{{ item.name }}</vdr-chip>\r\n    </ng-template>\r\n</ng-select>\r\n\r\n\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button type=\"submit\" (click)=\"add()\" [disabled]=\"!selectedGroupIds.length\" class=\"btn btn-primary\">\r\n        {{ 'customer.add-customer-to-groups-with-count' | translate: {count: selectedGroupIds.length} }}\r\n    </button>\r\n</ng-template>\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { DataService, Dialog, GetCustomerGroups, GetCustomerList } from '@vendure/admin-ui/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { map, switchMap } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'vdr-select-customer-group-dialog',\r\n    templateUrl: './select-customer-group-dialog.component.html',\r\n    styleUrls: ['./select-customer-group-dialog.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class SelectCustomerGroupDialogComponent implements Dialog<string[]>, OnInit {\r\n    resolveWith: (result?: string[]) => void;\r\n    groups$: Observable<GetCustomerGroups.Items[]>;\r\n    selectedGroupIds: string[] = [];\r\n\r\n    constructor(private dataService: DataService) {}\r\n\r\n    ngOnInit() {\r\n        this.groups$ = this.dataService.customer\r\n            .getCustomerGroupList()\r\n            .mapStream((res) => res.customerGroups.items);\r\n    }\r\n\r\n    cancel() {\r\n        this.resolveWith();\r\n    }\r\n\r\n    add() {\r\n        this.resolveWith(this.selectedGroupIds);\r\n    }\r\n}\r\n","<vdr-chip *ngIf=\"customer.user?.id\">\r\n    <ng-container *ngIf=\"customer.user?.verified\">\r\n        <clr-icon shape=\"check-circle\" class=\"verified-user-icon\"></clr-icon>\r\n        {{ 'customer.verified' | translate }}\r\n    </ng-container>\r\n    <ng-container *ngIf=\"!customer.user?.verified\">\r\n        <clr-icon shape=\"check-circle\" class=\"registered-user-icon\"></clr-icon>\r\n        {{ 'customer.registered' | translate }}\r\n    </ng-container>\r\n</vdr-chip>\r\n<vdr-chip *ngIf=\"!customer.user?.id\">{{ 'customer.guest' | translate }}</vdr-chip>\r\n","import { ChangeDetectionStrategy, Component, Input, OnInit } from '@angular/core';\r\n\r\nimport { Customer } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-customer-status-label',\r\n    templateUrl: './customer-status-label.component.html',\r\n    styleUrls: ['./customer-status-label.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CustomerStatusLabelComponent {\r\n    @Input() customer: Customer.Fragment;\r\n}\r\n","<h4>{{ 'customer.customer-history' | translate }}</h4>\r\n<div class=\"entry-list\">\r\n    <vdr-timeline-entry iconShape=\"note\" displayType=\"muted\" *vdrIfPermissions=\"'UpdateCustomer'\">\r\n        <div class=\"note-entry\">\r\n            <textarea [(ngModel)]=\"note\" name=\"note\" class=\"note\"></textarea>\r\n            <button class=\"btn btn-secondary\" [disabled]=\"!note\" (click)=\"addNoteToCustomer()\">\r\n                {{ 'order.add-note' | translate }}\r\n            </button>\r\n        </div>\r\n    </vdr-timeline-entry>\r\n    <vdr-timeline-entry\r\n        *ngFor=\"let entry of history\"\r\n        [displayType]=\"getDisplayType(entry)\"\r\n        [iconShape]=\"getTimelineIcon(entry)\"\r\n        [createdAt]=\"entry.createdAt\"\r\n        [name]=\"getName(entry)\"\r\n        [featured]=\"isFeatured(entry)\"\r\n    >\r\n        <ng-container [ngSwitch]=\"entry.type\">\r\n            <ng-container *ngSwitchCase=\"type.CUSTOMER_REGISTERED\">\r\n                <div class=\"title\">\r\n                    {{ 'customer.history-customer-registered' | translate }}\r\n                </div>\r\n                <ng-container *ngIf=\"entry.data.strategy === 'native'; else namedStrategy\">\r\n                    {{ 'customer.history-using-native-auth-strategy' | translate }}\r\n                </ng-container>\r\n                <ng-template #namedStrategy>\r\n                    {{\r\n                    'customer.history-using-external-auth-strategy'\r\n                        | translate: { strategy: entry.data.strategy }\r\n                    }}\r\n                </ng-template>\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"type.CUSTOMER_VERIFIED\">\r\n                <div class=\"title\">\r\n                    {{ 'customer.history-customer-verified' | translate }}\r\n                </div>\r\n                <ng-container *ngIf=\"entry.data.strategy === 'native'; else namedStrategy\">\r\n                    {{ 'customer.history-using-native-auth-strategy' | translate }}\r\n                </ng-container>\r\n                <ng-template #namedStrategy>\r\n                    {{\r\n                        'customer.history-using-external-auth-strategy'\r\n                            | translate: { strategy: entry.data.strategy }\r\n                    }}\r\n                </ng-template>\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"type.CUSTOMER_DETAIL_UPDATED\">\r\n                <div class=\"flex\">\r\n                    {{ 'customer.history-customer-detail-updated' | translate }}\r\n                    <vdr-history-entry-detail>\r\n                        <vdr-object-tree [value]=\"entry.data.input\"></vdr-object-tree>\r\n                    </vdr-history-entry-detail>\r\n                </div>\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"type.CUSTOMER_ADDED_TO_GROUP\">\r\n                {{\r\n                    'customer.history-customer-added-to-group'\r\n                        | translate: { groupName: entry.data.groupName }\r\n                }}\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"type.CUSTOMER_REMOVED_FROM_GROUP\">\r\n                {{\r\n                    'customer.history-customer-removed-from-group'\r\n                        | translate: { groupName: entry.data.groupName }\r\n                }}\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"type.CUSTOMER_ADDRESS_CREATED\">\r\n                {{ 'customer.history-customer-address-created' | translate }}\r\n                <div class=\"flex\">\r\n                    <div class=\"address-string\">{{ entry.data.address }}</div>\r\n                </div>\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"type.CUSTOMER_ADDRESS_UPDATED\">\r\n                {{ 'customer.history-customer-address-updated' | translate }}\r\n                <div class=\"flex\">\r\n                    <div class=\"address-string\">{{ entry.data.address }}</div>\r\n                    <vdr-history-entry-detail>\r\n                        <vdr-object-tree [value]=\"entry.data.input\"></vdr-object-tree>\r\n                    </vdr-history-entry-detail>\r\n                </div>\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"type.CUSTOMER_ADDRESS_DELETED\">\r\n                {{ 'customer.history-customer-address-deleted' | translate }}\r\n                <div class=\"address-string\">{{ entry.data.address }}</div>\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"type.CUSTOMER_PASSWORD_UPDATED\">\r\n                {{ 'customer.history-customer-password-updated' | translate }}\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"type.CUSTOMER_PASSWORD_RESET_REQUESTED\">\r\n                {{ 'customer.history-customer-password-reset-requested' | translate }}\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"type.CUSTOMER_PASSWORD_RESET_VERIFIED\">\r\n                {{ 'customer.history-customer-password-reset-verified' | translate }}\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"type.CUSTOMER_EMAIL_UPDATE_REQUESTED\">\r\n                <div class=\"flex\">\r\n                    {{ 'customer.history-customer-email-update-requested' | translate }}\r\n                    <vdr-history-entry-detail>\r\n                        <vdr-labeled-data [label]=\"'customer.old-email-address' | translate\">{{\r\n                            entry.data.oldEmailAddress\r\n                        }}</vdr-labeled-data>\r\n                        <vdr-labeled-data [label]=\"'customer.new-email-address' | translate\">{{\r\n                            entry.data.newEmailAddress\r\n                        }}</vdr-labeled-data>\r\n                    </vdr-history-entry-detail>\r\n                </div>\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"type.CUSTOMER_EMAIL_UPDATE_VERIFIED\">\r\n                <div class=\"flex\">\r\n                    {{ 'customer.history-customer-email-update-verified' | translate }}\r\n                    <vdr-history-entry-detail>\r\n                        <vdr-labeled-data [label]=\"'customer.old-email-address' | translate\">{{\r\n                            entry.data.oldEmailAddress\r\n                        }}</vdr-labeled-data>\r\n                        <vdr-labeled-data [label]=\"'customer.new-email-address' | translate\">{{\r\n                            entry.data.newEmailAddress\r\n                        }}</vdr-labeled-data>\r\n                    </vdr-history-entry-detail>\r\n                </div>\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"type.CUSTOMER_NOTE\">\r\n                <div class=\"flex\">\r\n                    <div class=\"note-text\">\r\n                        {{ entry.data.note }}\r\n                    </div>\r\n                    <div class=\"flex-spacer\"></div>\r\n                    <vdr-dropdown>\r\n                        <button class=\"icon-button\" vdrDropdownTrigger>\r\n                            <clr-icon shape=\"ellipsis-vertical\"></clr-icon>\r\n                        </button>\r\n                        <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                            <button\r\n                                class=\"button\"\r\n                                vdrDropdownItem\r\n                                (click)=\"updateNote.emit(entry)\"\r\n                                [disabled]=\"!('UpdateCustomer' | hasPermission)\"\r\n                            >\r\n                                <clr-icon shape=\"edit\"></clr-icon>\r\n                                {{ 'common.edit' | translate }}\r\n                            </button>\r\n                            <div class=\"dropdown-divider\"></div>\r\n                            <button\r\n                                class=\"button\"\r\n                                vdrDropdownItem\r\n                                (click)=\"deleteNote.emit(entry)\"\r\n                                [disabled]=\"!('UpdateCustomer' | hasPermission)\"\r\n                            >\r\n                                <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                                {{ 'common.delete' | translate }}\r\n                            </button>\r\n                        </vdr-dropdown-menu>\r\n                    </vdr-dropdown>\r\n                </div>\r\n            </ng-container>\r\n        </ng-container>\r\n    </vdr-timeline-entry>\r\n    <vdr-timeline-entry [isLast]=\"true\"></vdr-timeline-entry>\r\n</div>\r\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport {\r\n    Customer,\r\n    GetCustomerHistory,\r\n    HistoryEntry,\r\n    HistoryEntryType,\r\n    TimelineDisplayType,\r\n} from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-customer-history',\r\n    templateUrl: './customer-history.component.html',\r\n    styleUrls: ['./customer-history.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CustomerHistoryComponent {\r\n    @Input() customer: Customer.Fragment;\r\n    @Input() history: GetCustomerHistory.Items[];\r\n    @Output() addNote = new EventEmitter<{ note: string }>();\r\n    @Output() updateNote = new EventEmitter<HistoryEntry>();\r\n    @Output() deleteNote = new EventEmitter<HistoryEntry>();\r\n    note = '';\r\n    readonly type = HistoryEntryType;\r\n\r\n    getDisplayType(entry: GetCustomerHistory.Items): TimelineDisplayType {\r\n        switch (entry.type) {\r\n            case HistoryEntryType.CUSTOMER_VERIFIED:\r\n            case HistoryEntryType.CUSTOMER_EMAIL_UPDATE_VERIFIED:\r\n            case HistoryEntryType.CUSTOMER_PASSWORD_RESET_VERIFIED:\r\n                return 'success';\r\n            case HistoryEntryType.CUSTOMER_REGISTERED:\r\n                return 'muted';\r\n            case HistoryEntryType.CUSTOMER_REMOVED_FROM_GROUP:\r\n                return 'error';\r\n            default:\r\n                return 'default';\r\n        }\r\n    }\r\n\r\n    getTimelineIcon(entry: GetCustomerHistory.Items): string | [string, string] | undefined {\r\n        switch (entry.type) {\r\n            case HistoryEntryType.CUSTOMER_REGISTERED:\r\n                return 'user';\r\n            case HistoryEntryType.CUSTOMER_VERIFIED:\r\n                return ['assign-user', 'is-solid'];\r\n            case HistoryEntryType.CUSTOMER_NOTE:\r\n                return 'note';\r\n            case HistoryEntryType.CUSTOMER_ADDED_TO_GROUP:\r\n            case HistoryEntryType.CUSTOMER_REMOVED_FROM_GROUP:\r\n                return 'users';\r\n        }\r\n    }\r\n\r\n    isFeatured(entry: GetCustomerHistory.Items): boolean {\r\n        switch (entry.type) {\r\n            case HistoryEntryType.CUSTOMER_REGISTERED:\r\n            case HistoryEntryType.CUSTOMER_VERIFIED:\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n\r\n    getName(entry: GetCustomerHistory.Items): string {\r\n        const { administrator } = entry;\r\n        if (administrator) {\r\n            return `${administrator.firstName} ${administrator.lastName}`;\r\n        } else {\r\n            return `${this.customer.firstName} ${this.customer.lastName}`;\r\n        }\r\n    }\r\n\r\n    addNoteToCustomer() {\r\n        this.addNote.emit({ note: this.note });\r\n        this.note = '';\r\n    }\r\n}\r\n","<vdr-action-bar>\r\n    <vdr-ab-left>\r\n        <div class=\"flex clr-align-items-center\">\r\n            <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\r\n            <vdr-customer-status-label [customer]=\"entity$ | async\"></vdr-customer-status-label>\r\n            <div class=\"last-login\" *ngIf=\"(entity$ | async)?.user?.lastLogin as lastLogin\" [title]=\"lastLogin | localeDate:'medium'\">\r\n                {{ 'customer.last-login' | translate }}: {{ lastLogin | timeAgo }}\r\n            </div>\r\n        </div>\r\n    </vdr-ab-left>\r\n\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"customer-detail\"></vdr-action-bar-items>\r\n        <button\r\n            class=\"btn btn-primary\"\r\n            *ngIf=\"isNew$ | async; else updateButton\"\r\n            (click)=\"create()\"\r\n            [disabled]=\"!(addressDefaultsUpdated || (detailForm.valid && detailForm.dirty))\"\r\n        >\r\n            {{ 'common.create' | translate }}\r\n        </button>\r\n        <ng-template #updateButton>\r\n            <button\r\n                *vdrIfPermissions=\"'UpdateCustomer'\"\r\n                class=\"btn btn-primary\"\r\n                (click)=\"save()\"\r\n                [disabled]=\"!(addressDefaultsUpdated || (detailForm.valid && detailForm.dirty))\"\r\n            >\r\n                {{ 'common.update' | translate }}\r\n            </button>\r\n        </ng-template>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<form class=\"form\" [formGroup]=\"detailForm.get('customer')\">\r\n    <vdr-form-field [label]=\"'customer.title' | translate\" for=\"title\" [readOnlyToggle]=\"!(isNew$ | async)\">\r\n        <input id=\"title\" type=\"text\" formControlName=\"title\" />\r\n    </vdr-form-field>\r\n    <vdr-form-field\r\n        [label]=\"'customer.first-name' | translate\"\r\n        for=\"firstName\"\r\n        [readOnlyToggle]=\"!(isNew$ | async)\"\r\n    >\r\n        <input id=\"firstName\" type=\"text\" formControlName=\"firstName\" />\r\n    </vdr-form-field>\r\n    <vdr-form-field\r\n        [label]=\"'customer.last-name' | translate\"\r\n        for=\"lastName\"\r\n        [readOnlyToggle]=\"!(isNew$ | async)\"\r\n    >\r\n        <input id=\"lastName\" type=\"text\" formControlName=\"lastName\" />\r\n    </vdr-form-field>\r\n    <vdr-form-field\r\n        [label]=\"'customer.email-address' | translate\"\r\n        for=\"emailAddress\"\r\n        [readOnlyToggle]=\"!(isNew$ | async)\"\r\n    >\r\n        <input id=\"emailAddress\" type=\"text\" formControlName=\"emailAddress\" />\r\n    </vdr-form-field>\r\n    <vdr-form-field\r\n           [label]=\"'customer.phone-number' | translate\"\r\n           for=\"phoneNumber\"\r\n           [readOnlyToggle]=\"!(isNew$ | async)\"\r\n       >\r\n           <input id=\"phoneNumber\" type=\"text\" formControlName=\"phoneNumber\" />\r\n       </vdr-form-field>\r\n    <vdr-form-field [label]=\"'customer.password' | translate\" for=\"password\" *ngIf=\"isNew$ | async\">\r\n        <input id=\"password\" type=\"password\" formControlName=\"password\" />\r\n    </vdr-form-field>\r\n\r\n    <section formGroupName=\"customFields\" *ngIf=\"customFields.length\">\r\n        <label>{{ 'common.custom-fields' | translate }}</label>\r\n        <ng-container *ngFor=\"let customField of customFields\">\r\n            <vdr-custom-field-control\r\n                *ngIf=\"customFieldIsSet(customField.name)\"\r\n                entityName=\"Customer\"\r\n                [customFieldsFormGroup]=\"detailForm.get(['customer', 'customFields'])\"\r\n                [customField]=\"customField\"\r\n            ></vdr-custom-field-control>\r\n        </ng-container>\r\n    </section>\r\n</form>\r\n\r\n<div class=\"groups\" *ngIf=\"(entity$ | async)?.groups as groups\">\r\n    <label class=\"clr-control-label\">{{ 'customer.customer-groups' | translate }}</label>\r\n    <ng-container *ngIf=\"groups.length; else noGroups\">\r\n        <vdr-chip\r\n            *ngFor=\"let group of groups\"\r\n            [colorFrom]=\"group.id\"\r\n            icon=\"times\"\r\n            (iconClick)=\"removeFromGroup(group)\"\r\n            >{{ group.name }}</vdr-chip\r\n        >\r\n    </ng-container>\r\n    <ng-template #noGroups>\r\n        {{ 'customer.not-a-member-of-any-groups' | translate }}\r\n    </ng-template>\r\n    <div>\r\n        <button class=\"btn btn-sm btn-secondary\" (click)=\"addToGroup()\" *vdrIfPermissions=\"'UpdateCustomerGroup'\">\r\n            <clr-icon shape=\"plus\"></clr-icon>\r\n            {{ 'customer.add-customer-to-group' | translate }}\r\n        </button>\r\n    </div>\r\n</div>\r\n\r\n<div class=\"clr-row\" *ngIf=\"!(isNew$ | async)\">\r\n    <div class=\"clr-col-md-4\">\r\n        <h3>{{ 'customer.addresses' | translate }}</h3>\r\n        <vdr-address-card\r\n            *ngFor=\"let addressForm of getAddressFormControls()\"\r\n            [availableCountries]=\"availableCountries$ | async\"\r\n            [isDefaultBilling]=\"defaultBillingAddressId === addressForm.value.id\"\r\n            [isDefaultShipping]=\"defaultShippingAddressId === addressForm.value.id\"\r\n            [addressForm]=\"addressForm\"\r\n            [customFields]=\"addressCustomFields\"\r\n            [editable]=\"['UpdateCustomer'] | hasPermission\"\r\n            (setAsDefaultBilling)=\"setDefaultBillingAddressId($event)\"\r\n            (setAsDefaultShipping)=\"setDefaultShippingAddressId($event)\"\r\n        ></vdr-address-card>\r\n        <button class=\"btn btn-secondary\" (click)=\"addAddress()\" *vdrIfPermissions=\"'UpdateCustomer'\">\r\n            <clr-icon shape=\"plus\"></clr-icon>\r\n            {{ 'customer.create-new-address' | translate }}\r\n        </button>\r\n    </div>\r\n    <div class=\"clr-col-md-8\">\r\n        <h3>{{ 'customer.orders' | translate }}</h3>\r\n        <vdr-data-table\r\n            [items]=\"orders$ | async\"\r\n            [itemsPerPage]=\"ordersPerPage\"\r\n            [totalItems]=\"ordersCount$ | async\"\r\n            [currentPage]=\"currentOrdersPage\"\r\n            [emptyStateLabel]=\"'customer.no-orders-placed' | translate\"\r\n            (itemsPerPageChange)=\"setOrderItemsPerPage($event)\"\r\n            (pageChange)=\"setOrderCurrentPage($event)\"\r\n        >\r\n            <vdr-dt-column>{{ 'common.code' | translate }}</vdr-dt-column>\r\n            <vdr-dt-column>{{ 'order.state' | translate }}</vdr-dt-column>\r\n            <vdr-dt-column>{{ 'order.total' | translate }}</vdr-dt-column>\r\n            <vdr-dt-column>{{ 'common.updated-at' | translate }}</vdr-dt-column>\r\n            <vdr-dt-column></vdr-dt-column>\r\n            <ng-template let-order=\"item\">\r\n                <td class=\"left\">{{ order.code }}</td>\r\n                <td class=\"left\">{{ order.state }}</td>\r\n                <td class=\"left\">{{ order.total | localeCurrency: order.currencyCode }}</td>\r\n                <td class=\"left\">{{ order.updatedAt | localeDate: 'medium' }}</td>\r\n                <td class=\"right\">\r\n                    <vdr-table-row-action\r\n                        iconShape=\"shopping-cart\"\r\n                        [label]=\"'common.open' | translate\"\r\n                        [linkTo]=\"['/orders/', order.id]\"\r\n                    ></vdr-table-row-action>\r\n                </td>\r\n            </ng-template>\r\n        </vdr-data-table>\r\n    </div>\r\n</div>\r\n<div class=\"clr-row\" *ngIf=\"!(isNew$ | async)\">\r\n    <div class=\"clr-col-md-6\">\r\n        <vdr-customer-history\r\n            [customer]=\"entity$ | async\"\r\n            [history]=\"history$ | async\"\r\n            (addNote)=\"addNoteToCustomer($event)\"\r\n            (updateNote)=\"updateNote($event)\"\r\n            (deleteNote)=\"deleteNote($event)\"\r\n        ></vdr-customer-history>\r\n    </div>\r\n</div>\r\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormArray, FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    BaseDetailComponent,\r\n    CreateAddressInput,\r\n    CreateCustomerAddress,\r\n    CreateCustomerAddressMutation,\r\n    CreateCustomerInput,\r\n    Customer,\r\n    CustomFieldConfig,\r\n    DataService,\r\n    EditNoteDialogComponent,\r\n    GetAvailableCountries,\r\n    GetCustomer,\r\n    GetCustomerHistory,\r\n    GetCustomerQuery,\r\n    HistoryEntry,\r\n    ModalService,\r\n    NotificationService,\r\n    ServerConfigService,\r\n    SortOrder,\r\n    UpdateCustomer,\r\n    UpdateCustomerAddress,\r\n    UpdateCustomerAddressMutation,\r\n    UpdateCustomerInput,\r\n    UpdateCustomerMutation,\r\n} from '@vendure/admin-ui/core';\r\nimport { notNullOrUndefined } from '@vendure/common/lib/shared-utils';\r\nimport { EMPTY, forkJoin, from, Observable, Subject } from 'rxjs';\r\nimport {\r\n    concatMap,\r\n    filter,\r\n    map,\r\n    merge,\r\n    mergeMap,\r\n    shareReplay,\r\n    startWith,\r\n    switchMap,\r\n    take,\r\n} from 'rxjs/operators';\r\n\r\nimport { SelectCustomerGroupDialogComponent } from '../select-customer-group-dialog/select-customer-group-dialog.component';\r\n\r\ntype CustomerWithOrders = NonNullable<GetCustomerQuery['customer']>;\r\n\r\n@Component({\r\n    selector: 'vdr-customer-detail',\r\n    templateUrl: './customer-detail.component.html',\r\n    styleUrls: ['./customer-detail.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CustomerDetailComponent extends BaseDetailComponent<CustomerWithOrders>\r\n    implements OnInit, OnDestroy {\r\n    detailForm: FormGroup;\r\n    customFields: CustomFieldConfig[];\r\n    addressCustomFields: CustomFieldConfig[];\r\n    availableCountries$: Observable<GetAvailableCountries.Items[]>;\r\n    orders$: Observable<GetCustomer.Items[]>;\r\n    ordersCount$: Observable<number>;\r\n    history$: Observable<GetCustomerHistory.Items[] | undefined>;\r\n    fetchHistory = new Subject<void>();\r\n    defaultShippingAddressId: string;\r\n    defaultBillingAddressId: string;\r\n    addressDefaultsUpdated = false;\r\n    ordersPerPage = 10;\r\n    currentOrdersPage = 1;\r\n    private orderListUpdates$ = new Subject<CustomerWithOrders>();\r\n\r\n    constructor(\r\n        route: ActivatedRoute,\r\n        router: Router,\r\n        serverConfigService: ServerConfigService,\r\n        private changeDetector: ChangeDetectorRef,\r\n        private formBuilder: FormBuilder,\r\n        protected dataService: DataService,\r\n        private modalService: ModalService,\r\n        private notificationService: NotificationService,\r\n    ) {\r\n        super(route, router, serverConfigService, dataService);\r\n\r\n        this.customFields = this.getCustomFieldConfig('Customer');\r\n        this.addressCustomFields = this.getCustomFieldConfig('Address');\r\n        this.detailForm = this.formBuilder.group({\r\n            customer: this.formBuilder.group({\r\n                title: '',\r\n                firstName: ['', Validators.required],\r\n                lastName: ['', Validators.required],\r\n                phoneNumber: '',\r\n                emailAddress: ['', [Validators.required, Validators.email]],\r\n                password: '',\r\n                customFields: this.formBuilder.group(\r\n                    this.customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\r\n                ),\r\n            }),\r\n            addresses: new FormArray([]),\r\n        });\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.init();\r\n        this.availableCountries$ = this.dataService.settings\r\n            .getAvailableCountries()\r\n            .mapSingle(result => result.countries.items)\r\n            .pipe(shareReplay(1));\r\n\r\n        const customerWithUpdates$ = this.entity$.pipe(merge(this.orderListUpdates$));\r\n        this.orders$ = customerWithUpdates$.pipe(map(customer => customer.orders.items));\r\n        this.ordersCount$ = this.entity$.pipe(map(customer => customer.orders.totalItems));\r\n        this.history$ = this.fetchHistory.pipe(\r\n            startWith(null),\r\n            switchMap(() => {\r\n                return this.dataService.customer\r\n                    .getCustomerHistory(this.id, {\r\n                        sort: {\r\n                            createdAt: SortOrder.DESC,\r\n                        },\r\n                    })\r\n                    .mapStream(data => data.customer?.history.items);\r\n            }),\r\n        );\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.destroy();\r\n        this.orderListUpdates$.complete();\r\n    }\r\n\r\n    customFieldIsSet(name: string): boolean {\r\n        return !!this.detailForm.get(['customer', 'customFields', name]);\r\n    }\r\n\r\n    getAddressFormControls(): FormControl[] {\r\n        const formArray = this.detailForm.get(['addresses']) as FormArray;\r\n        return formArray.controls as FormControl[];\r\n    }\r\n\r\n    setDefaultBillingAddressId(id: string) {\r\n        this.defaultBillingAddressId = id;\r\n        this.addressDefaultsUpdated = true;\r\n    }\r\n\r\n    setDefaultShippingAddressId(id: string) {\r\n        this.defaultShippingAddressId = id;\r\n        this.addressDefaultsUpdated = true;\r\n    }\r\n\r\n    addAddress() {\r\n        const addressFormArray = this.detailForm.get('addresses') as FormArray;\r\n        const newAddress = this.formBuilder.group({\r\n            fullName: '',\r\n            company: '',\r\n            streetLine1: ['', Validators.required],\r\n            streetLine2: '',\r\n            city: '',\r\n            province: '',\r\n            postalCode: '',\r\n            countryCode: ['', Validators.required],\r\n            phoneNumber: '',\r\n            defaultShippingAddress: false,\r\n            defaultBillingAddress: false,\r\n        });\r\n        if (this.addressCustomFields.length) {\r\n            const customFieldsGroup = this.formBuilder.group({});\r\n            for (const fieldDef of this.addressCustomFields) {\r\n                customFieldsGroup.addControl(fieldDef.name, new FormControl(''));\r\n            }\r\n            newAddress.addControl('customFields', customFieldsGroup);\r\n        }\r\n        addressFormArray.push(newAddress);\r\n    }\r\n\r\n    setOrderItemsPerPage(itemsPerPage: number) {\r\n        this.ordersPerPage = +itemsPerPage;\r\n        this.fetchOrdersList();\r\n    }\r\n\r\n    setOrderCurrentPage(page: number) {\r\n        this.currentOrdersPage = +page;\r\n        this.fetchOrdersList();\r\n    }\r\n\r\n    create() {\r\n        const customerForm = this.detailForm.get('customer');\r\n        if (!customerForm) {\r\n            return;\r\n        }\r\n        const formValue = customerForm.value;\r\n        const customFields = customerForm.get('customFields')?.value;\r\n        const customer: CreateCustomerInput = {\r\n            title: formValue.title,\r\n            emailAddress: formValue.emailAddress,\r\n            firstName: formValue.firstName,\r\n            lastName: formValue.lastName,\r\n            phoneNumber: formValue.phoneNumber,\r\n            customFields,\r\n        };\r\n        this.dataService.customer\r\n            .createCustomer(customer, formValue.password)\r\n            .subscribe(({ createCustomer }) => {\r\n                switch (createCustomer.__typename) {\r\n                    case 'Customer':\r\n                        this.notificationService.success(_('common.notify-create-success'), {\r\n                            entity: 'Customer',\r\n                        });\r\n                        if (createCustomer.emailAddress && !formValue.password) {\r\n                            this.notificationService.notify({\r\n                                message: _('customer.email-verification-sent'),\r\n                                translationVars: { emailAddress: formValue.emailAddress },\r\n                                type: 'info',\r\n                                duration: 10000,\r\n                            });\r\n                        }\r\n                        this.detailForm.markAsPristine();\r\n                        this.addressDefaultsUpdated = false;\r\n                        this.changeDetector.markForCheck();\r\n                        this.router.navigate(['../', createCustomer.id], { relativeTo: this.route });\r\n                        break;\r\n                    case 'EmailAddressConflictError':\r\n                        this.notificationService.error(createCustomer.message);\r\n                }\r\n            });\r\n    }\r\n\r\n    save() {\r\n        this.entity$\r\n            .pipe(\r\n                take(1),\r\n                mergeMap(({ id }) => {\r\n                    const saveOperations: Array<Observable<\r\n                        | UpdateCustomer.UpdateCustomer\r\n                        | CreateCustomerAddress.CreateCustomerAddress\r\n                        | UpdateCustomerAddress.UpdateCustomerAddress\r\n                    >> = [];\r\n                    const customerForm = this.detailForm.get('customer');\r\n                    if (customerForm && customerForm.dirty) {\r\n                        const formValue = customerForm.value;\r\n                        const customFields = customerForm.get('customFields')?.value;\r\n                        const customer: UpdateCustomerInput = {\r\n                            id,\r\n                            title: formValue.title,\r\n                            emailAddress: formValue.emailAddress,\r\n                            firstName: formValue.firstName,\r\n                            lastName: formValue.lastName,\r\n                            phoneNumber: formValue.phoneNumber,\r\n                            customFields,\r\n                        };\r\n                        saveOperations.push(\r\n                            this.dataService.customer\r\n                                .updateCustomer(customer)\r\n                                .pipe(map(res => res.updateCustomer)),\r\n                        );\r\n                    }\r\n                    const addressFormArray = this.detailForm.get('addresses') as FormArray;\r\n                    if ((addressFormArray && addressFormArray.dirty) || this.addressDefaultsUpdated) {\r\n                        for (const addressControl of addressFormArray.controls) {\r\n                            if (addressControl.dirty || this.addressDefaultsUpdated) {\r\n                                const address = addressControl.value;\r\n                                const input: CreateAddressInput = {\r\n                                    fullName: address.fullName,\r\n                                    company: address.company,\r\n                                    streetLine1: address.streetLine1,\r\n                                    streetLine2: address.streetLine2,\r\n                                    city: address.city,\r\n                                    province: address.province,\r\n                                    postalCode: address.postalCode,\r\n                                    countryCode: address.countryCode,\r\n                                    phoneNumber: address.phoneNumber,\r\n                                    defaultShippingAddress: this.defaultShippingAddressId === address.id,\r\n                                    defaultBillingAddress: this.defaultBillingAddressId === address.id,\r\n                                    customFields: address.customFields,\r\n                                };\r\n                                if (!address.id) {\r\n                                    saveOperations.push(\r\n                                        this.dataService.customer\r\n                                            .createCustomerAddress(id, input)\r\n                                            .pipe(map(res => res.createCustomerAddress)),\r\n                                    );\r\n                                } else {\r\n                                    saveOperations.push(\r\n                                        this.dataService.customer\r\n                                            .updateCustomerAddress({\r\n                                                ...input,\r\n                                                id: address.id,\r\n                                            })\r\n                                            .pipe(map(res => res.updateCustomerAddress)),\r\n                                    );\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    return forkJoin(saveOperations);\r\n                }),\r\n            )\r\n            .subscribe(\r\n                data => {\r\n                    for (const result of data) {\r\n                        switch (result.__typename) {\r\n                            case 'Customer':\r\n                            case 'Address':\r\n                                this.notificationService.success(_('common.notify-update-success'), {\r\n                                    entity: 'Customer',\r\n                                });\r\n                                this.detailForm.markAsPristine();\r\n                                this.addressDefaultsUpdated = false;\r\n                                this.changeDetector.markForCheck();\r\n                                this.fetchHistory.next();\r\n                                break;\r\n                            case 'EmailAddressConflictError':\r\n                                this.notificationService.error(result.message);\r\n                                break;\r\n                        }\r\n                    }\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-update-error'), {\r\n                        entity: 'Customer',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    addToGroup() {\r\n        this.modalService\r\n            .fromComponent(SelectCustomerGroupDialogComponent, {\r\n                size: 'md',\r\n            })\r\n            .pipe(\r\n                switchMap(groupIds => (groupIds ? from(groupIds) : EMPTY)),\r\n                concatMap(groupId => this.dataService.customer.addCustomersToGroup(groupId, [this.id])),\r\n            )\r\n            .subscribe({\r\n                next: res => {\r\n                    this.notificationService.success(_(`customer.add-customers-to-group-success`), {\r\n                        customerCount: 1,\r\n                        groupName: res.addCustomersToGroup.name,\r\n                    });\r\n                },\r\n                complete: () => {\r\n                    this.dataService.customer.getCustomer(this.id, { take: 0 }).single$.subscribe();\r\n                    this.fetchHistory.next();\r\n                },\r\n            });\r\n    }\r\n\r\n    removeFromGroup(group: GetCustomer.Groups) {\r\n        this.modalService\r\n            .dialog({\r\n                title: _('customer.confirm-remove-customer-from-group'),\r\n                buttons: [\r\n                    { type: 'secondary', label: _('common.cancel') },\r\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\r\n                ],\r\n            })\r\n            .pipe(\r\n                switchMap(response =>\r\n                    response\r\n                        ? this.dataService.customer.removeCustomersFromGroup(group.id, [this.id])\r\n                        : EMPTY,\r\n                ),\r\n                switchMap(() => this.dataService.customer.getCustomer(this.id, { take: 0 }).single$),\r\n            )\r\n            .subscribe(result => {\r\n                this.notificationService.success(_(`customer.remove-customers-from-group-success`), {\r\n                    customerCount: 1,\r\n                    groupName: group.name,\r\n                });\r\n                this.fetchHistory.next();\r\n            });\r\n    }\r\n\r\n    addNoteToCustomer({ note }: { note: string }) {\r\n        this.dataService.customer.addNoteToCustomer(this.id, note).subscribe(() => {\r\n            this.fetchHistory.next();\r\n            this.notificationService.success(_('common.notify-create-success'), {\r\n                entity: 'Note',\r\n            });\r\n        });\r\n    }\r\n\r\n    updateNote(entry: HistoryEntry) {\r\n        this.modalService\r\n            .fromComponent(EditNoteDialogComponent, {\r\n                closable: true,\r\n                locals: {\r\n                    displayPrivacyControls: false,\r\n                    note: entry.data.note,\r\n                },\r\n            })\r\n            .pipe(\r\n                switchMap(result => {\r\n                    if (result) {\r\n                        return this.dataService.customer.updateCustomerNote({\r\n                            noteId: entry.id,\r\n                            note: result.note,\r\n                        });\r\n                    } else {\r\n                        return EMPTY;\r\n                    }\r\n                }),\r\n            )\r\n            .subscribe(result => {\r\n                this.fetchHistory.next();\r\n                this.notificationService.success(_('common.notify-update-success'), {\r\n                    entity: 'Note',\r\n                });\r\n            });\r\n    }\r\n\r\n    deleteNote(entry: HistoryEntry) {\r\n        return this.modalService\r\n            .dialog({\r\n                title: _('common.confirm-delete-note'),\r\n                body: entry.data.note,\r\n                buttons: [\r\n                    { type: 'secondary', label: _('common.cancel') },\r\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\r\n                ],\r\n            })\r\n            .pipe(switchMap(res => (res ? this.dataService.customer.deleteCustomerNote(entry.id) : EMPTY)))\r\n            .subscribe(() => {\r\n                this.fetchHistory.next();\r\n                this.notificationService.success(_('common.notify-delete-success'), {\r\n                    entity: 'Note',\r\n                });\r\n            });\r\n    }\r\n\r\n    protected setFormValues(entity: Customer.Fragment): void {\r\n        const customerGroup = this.detailForm.get('customer');\r\n        if (customerGroup) {\r\n            customerGroup.patchValue({\r\n                title: entity.title,\r\n                firstName: entity.firstName,\r\n                lastName: entity.lastName,\r\n                phoneNumber: entity.phoneNumber,\r\n                emailAddress: entity.emailAddress,\r\n            });\r\n        }\r\n\r\n        if (entity.addresses) {\r\n            const addressesArray = new FormArray([]);\r\n            for (const address of entity.addresses) {\r\n                const { customFields, ...rest } = address as any;\r\n                const addressGroup = this.formBuilder.group({\r\n                    ...rest,\r\n                    countryCode: address.country.code,\r\n                });\r\n                addressesArray.push(addressGroup);\r\n                if (address.defaultShippingAddress) {\r\n                    this.defaultShippingAddressId = address.id;\r\n                }\r\n                if (address.defaultBillingAddress) {\r\n                    this.defaultBillingAddressId = address.id;\r\n                }\r\n\r\n                if (this.addressCustomFields.length) {\r\n                    const customFieldsGroup = this.formBuilder.group({});\r\n                    for (const fieldDef of this.addressCustomFields) {\r\n                        const key = fieldDef.name;\r\n                        const value = (address as any).customFields?.[key];\r\n                        const control = new FormControl(value);\r\n                        customFieldsGroup.addControl(key, control);\r\n                    }\r\n                    addressGroup.addControl('customFields', customFieldsGroup);\r\n                }\r\n            }\r\n            this.detailForm.setControl('addresses', addressesArray);\r\n        }\r\n\r\n        if (this.customFields.length) {\r\n            const customFieldsGroup = this.detailForm.get(['customer', 'customFields']) as FormGroup;\r\n\r\n            for (const fieldDef of this.customFields) {\r\n                const key = fieldDef.name;\r\n                const value = (entity as any).customFields?.[key];\r\n                const control = customFieldsGroup.get(key);\r\n                if (control) {\r\n                    control.patchValue(value);\r\n                }\r\n            }\r\n        }\r\n        this.changeDetector.markForCheck();\r\n    }\r\n\r\n    /**\r\n     * Refetch the customer with the current order list settings.\r\n     */\r\n    private fetchOrdersList() {\r\n        this.dataService.customer\r\n            .getCustomer(this.id, {\r\n                take: this.ordersPerPage,\r\n                skip: (this.currentOrdersPage - 1) * this.ordersPerPage,\r\n            })\r\n            .single$.pipe(\r\n                map(data => data.customer),\r\n                filter(notNullOrUndefined),\r\n            )\r\n            .subscribe(result => this.orderListUpdates$.next(result));\r\n    }\r\n}\r\n","import { merge as mergeStatic } from '../observable/merge';\nexport function merge(...observables) {\n    return (source) => source.lift.call(mergeStatic(source, ...observables));\n}\n//# sourceMappingURL=merge.js.map","<ng-template vdrDialogTitle>\r\n    <span *ngIf=\"group.id\">{{ 'customer.update-customer-group' | translate }}</span>\r\n    <span *ngIf=\"!group.id\">{{ 'customer.create-customer-group' | translate }}</span>\r\n</ng-template>\r\n\r\n<vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\r\n    <input id=\"name\" type=\"text\" [(ngModel)]=\"group.name\" [readonly]=\"!(['CreateCustomerGroup', 'UpdateCustomerGroup'] | hasPermission)\" />\r\n</vdr-form-field>\r\n\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button type=\"submit\" (click)=\"save()\" [disabled]=\"!group.name\" class=\"btn btn-primary\">\r\n        <span *ngIf=\"group.id\">{{ 'customer.update-customer-group' | translate }}</span>\r\n        <span *ngIf=\"!group.id\">{{ 'customer.create-customer-group' | translate }}</span>\r\n    </button>\r\n</ng-template>\r\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { Dialog } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-customer-group-detail-dialog',\r\n    templateUrl: './customer-group-detail-dialog.component.html',\r\n    styleUrls: ['./customer-group-detail-dialog.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CustomerGroupDetailDialogComponent implements Dialog<string> {\r\n    group: { id?: string; name: string };\r\n    resolveWith: (result?: string) => void;\r\n\r\n    cancel() {\r\n        this.resolveWith();\r\n    }\r\n\r\n    save() {\r\n        this.resolveWith(this.group.name);\r\n    }\r\n}\r\n","<vdr-action-bar>\r\n    <vdr-ab-left> </vdr-ab-left>\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"customer-group-list\"></vdr-action-bar-items>\r\n        <button class=\"btn btn-primary\" *vdrIfPermissions=\"'CreateCustomerGroup'\" (click)=\"create()\">\r\n            <clr-icon shape=\"plus\"></clr-icon>\r\n            {{ 'customer.create-new-customer-group' | translate }}\r\n        </button>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n<div class=\"group-wrapper\">\r\n    <table class=\"table group-list\" [class.expanded]=\"activeGroup$ | async\" *ngIf=\"!(listIsEmpty$ | async); else emptyPlaceholder\">\r\n        <tbody>\r\n            <tr *ngFor=\"let group of groups$ | async\" [class.active]=\"group.id === (activeGroup$ | async)?.id\">\r\n                <td class=\"left align-middle\"><vdr-entity-info [entity]=\"group\"></vdr-entity-info></td>\r\n                <td class=\"left align-middle\"><vdr-chip [colorFrom]=\"group.id\">{{ group.name }}</vdr-chip></td>\r\n                <td class=\"text-right align-middle\">\r\n                    <a\r\n                        class=\"btn btn-link btn-sm\"\r\n                        [routerLink]=\"['./', { contents: group.id }]\"\r\n                        queryParamsHandling=\"preserve\"\r\n                    >\r\n                        <clr-icon shape=\"view-list\"></clr-icon>\r\n                        {{ 'customer.view-group-members' | translate }}\r\n                    </a>\r\n                </td>\r\n                <td class=\"align-middle\">\r\n                    <button class=\"btn btn-link btn-sm\" (click)=\"update(group)\">\r\n                        <clr-icon shape=\"edit\"></clr-icon>\r\n                        {{ 'common.edit' | translate }}\r\n                    </button>\r\n                </td>\r\n                <td class=\"align-middle\">\r\n                    <vdr-dropdown>\r\n                        <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger>\r\n                            {{ 'common.actions' | translate }}\r\n                            <clr-icon shape=\"caret down\"></clr-icon>\r\n                        </button>\r\n                        <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                            <button\r\n                                class=\"button\"\r\n                                vdrDropdownItem\r\n                                (click)=\"delete(group.id)\"\r\n                                [disabled]=\"!('DeleteCustomerGroup' | hasPermission)\"\r\n                            >\r\n                                <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                                {{ 'common.delete' | translate }}\r\n                            </button>\r\n                        </vdr-dropdown-menu>\r\n                    </vdr-dropdown>\r\n                </td>\r\n            </tr>\r\n        </tbody>\r\n    </table>\r\n    <ng-template #emptyPlaceholder>\r\n        <vdr-empty-placeholder></vdr-empty-placeholder>\r\n    </ng-template>\r\n    <div class=\"group-members\" [class.expanded]=\"activeGroup$ | async\">\r\n        <ng-container *ngIf=\"activeGroup$ | async as activeGroup\">\r\n            <div class=\"flex\">\r\n                <div class=\"header-title-row\">\r\n                    {{ activeGroup.name }} ({{ membersTotal$ | async }})\r\n                </div>\r\n                <div class=\"flex-spacer\"></div>\r\n                <button type=\"button\" class=\"close-button\" (click)=\"closeMembers()\">\r\n                    <clr-icon shape=\"close\"></clr-icon>\r\n                </button>\r\n            </div>\r\n            <div class=\"controls\">\r\n                <vdr-dropdown>\r\n                    <button\r\n                        type=\"button\"\r\n                        class=\"btn btn-secondary btn-sm\"\r\n                        vdrDropdownTrigger\r\n                        [disabled]=\"selectedCustomerIds.length === 0\"\r\n                    >\r\n                        {{ 'common.with-selected' | translate }}\r\n                        <clr-icon shape=\"caret down\"></clr-icon>\r\n                    </button>\r\n                    <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                        <button\r\n                            type=\"button\"\r\n                            class=\"delete-button\"\r\n                            (click)=\"removeFromGroup(activeGroup, selectedCustomerIds)\"\r\n                            vdrDropdownItem\r\n                            [disabled]=\"!('UpdateCustomerGroup' | hasPermission)\"\r\n                        >\r\n                            <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                            {{ 'customer.remove-from-group' | translate }}\r\n                        </button>\r\n                    </vdr-dropdown-menu>\r\n                </vdr-dropdown>\r\n                <button class=\"btn btn-secondary btn-sm\" (click)=\"addToGroup(activeGroup)\">\r\n                    {{ 'customer.add-customers-to-group' | translate: { groupName: activeGroup.name } }}\r\n                </button>\r\n            </div>\r\n            <vdr-customer-group-member-list\r\n                [members]=\"members$ | async\"\r\n                [route]=\"route\"\r\n                [totalItems]=\"membersTotal$ | async\"\r\n                [selectedMemberIds]=\"selectedCustomerIds\"\r\n                (selectionChange)=\"selectedCustomerIds = $event\"\r\n                (fetchParamsChange)=\"fetchGroupMembers$.next($event)\"\r\n            ></vdr-customer-group-member-list>\r\n        </ng-container>\r\n    </div>\r\n</div>\r\n\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    DataService,\r\n    DeletionResult,\r\n    GetCustomerGroups,\r\n    GetCustomerGroupWithCustomers,\r\n    GetZones,\r\n    ModalService,\r\n    NotificationService,\r\n} from '@vendure/admin-ui/core';\r\nimport { BehaviorSubject, combineLatest, EMPTY, Observable, of } from 'rxjs';\r\nimport { distinctUntilChanged, map, mapTo, switchMap, tap } from 'rxjs/operators';\r\n\r\nimport { AddCustomerToGroupDialogComponent } from '../add-customer-to-group-dialog/add-customer-to-group-dialog.component';\r\nimport { CustomerGroupDetailDialogComponent } from '../customer-group-detail-dialog/customer-group-detail-dialog.component';\r\nimport { CustomerGroupMemberFetchParams } from '../customer-group-member-list/customer-group-member-list.component';\r\n\r\n@Component({\r\n    selector: 'vdr-customer-group-list',\r\n    templateUrl: './customer-group-list.component.html',\r\n    styleUrls: ['./customer-group-list.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CustomerGroupListComponent implements OnInit {\r\n    activeGroup$: Observable<GetCustomerGroups.Items | undefined>;\r\n    groups$: Observable<GetCustomerGroups.Items[]>;\r\n    listIsEmpty$: Observable<boolean>;\r\n    members$: Observable<GetCustomerGroupWithCustomers.Items[]>;\r\n    membersTotal$: Observable<number>;\r\n    selectedCustomerIds: string[] = [];\r\n    fetchGroupMembers$ = new BehaviorSubject<CustomerGroupMemberFetchParams>({\r\n        skip: 0,\r\n        take: 0,\r\n        filterTerm: '',\r\n    });\r\n    private refreshActiveGroupMembers$ = new BehaviorSubject<void>(undefined);\r\n\r\n    constructor(\r\n        private dataService: DataService,\r\n        private notificationService: NotificationService,\r\n        private modalService: ModalService,\r\n        public route: ActivatedRoute,\r\n        private router: Router,\r\n    ) {}\r\n\r\n    ngOnInit(): void {\r\n        this.groups$ = this.dataService.customer\r\n            .getCustomerGroupList()\r\n            .mapStream((data) => data.customerGroups.items);\r\n        const activeGroupId$ = this.route.paramMap.pipe(\r\n            map((pm) => pm.get('contents')),\r\n            distinctUntilChanged(),\r\n            tap(() => (this.selectedCustomerIds = [])),\r\n        );\r\n        this.listIsEmpty$ = this.groups$.pipe(map((groups) => groups.length === 0));\r\n        this.activeGroup$ = combineLatest(this.groups$, activeGroupId$).pipe(\r\n            map(([groups, activeGroupId]) => {\r\n                if (activeGroupId) {\r\n                    return groups.find((g) => g.id === activeGroupId);\r\n                }\r\n            }),\r\n        );\r\n        const membersResult$ = combineLatest(\r\n            this.activeGroup$,\r\n            this.fetchGroupMembers$,\r\n            this.refreshActiveGroupMembers$,\r\n        ).pipe(\r\n            switchMap(([activeGroup, { skip, take, filterTerm }]) => {\r\n                if (activeGroup) {\r\n                    return this.dataService.customer\r\n                        .getCustomerGroupWithCustomers(activeGroup.id, {\r\n                            skip,\r\n                            take,\r\n                            filter: {\r\n                                emailAddress: {\r\n                                    contains: filterTerm,\r\n                                },\r\n                            },\r\n                        })\r\n                        .mapStream((res) => res.customerGroup?.customers);\r\n                } else {\r\n                    return of(undefined);\r\n                }\r\n            }),\r\n        );\r\n\r\n        this.members$ = membersResult$.pipe(map((res) => res?.items ?? []));\r\n        this.membersTotal$ = membersResult$.pipe(map((res) => res?.totalItems ?? 0));\r\n    }\r\n\r\n    create() {\r\n        this.modalService\r\n            .fromComponent(CustomerGroupDetailDialogComponent, { locals: { group: { name: '' } } })\r\n            .pipe(\r\n                switchMap((name) =>\r\n                    name ? this.dataService.customer.createCustomerGroup({ name, customerIds: [] }) : EMPTY,\r\n                ),\r\n                // refresh list\r\n                switchMap(() => this.dataService.customer.getCustomerGroupList().single$),\r\n            )\r\n            .subscribe(\r\n                () => {\r\n                    this.notificationService.success(_('common.notify-create-success'), {\r\n                        entity: 'CustomerGroup',\r\n                    });\r\n                },\r\n                (err) => {\r\n                    this.notificationService.error(_('common.notify-create-error'), {\r\n                        entity: 'CustomerGroup',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    delete(groupId: string) {\r\n        this.modalService\r\n            .dialog({\r\n                title: _('customer.confirm-delete-customer-group'),\r\n                buttons: [\r\n                    { type: 'secondary', label: _('common.cancel') },\r\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\r\n                ],\r\n            })\r\n            .pipe(\r\n                switchMap((response) =>\r\n                    response ? this.dataService.customer.deleteCustomerGroup(groupId) : EMPTY,\r\n                ),\r\n\r\n                switchMap((result) => {\r\n                    if (result.deleteCustomerGroup.result === DeletionResult.DELETED) {\r\n                        // refresh list\r\n                        return this.dataService.customer\r\n                            .getCustomerGroupList()\r\n                            .mapSingle(() => ({ errorMessage: false }));\r\n                    } else {\r\n                        return of({ errorMessage: result.deleteCustomerGroup.message });\r\n                    }\r\n                }),\r\n            )\r\n            .subscribe(\r\n                (result) => {\r\n                    if (typeof result.errorMessage === 'string') {\r\n                        this.notificationService.error(result.errorMessage);\r\n                    } else {\r\n                        this.notificationService.success(_('common.notify-delete-success'), {\r\n                            entity: 'CustomerGroup',\r\n                        });\r\n                    }\r\n                },\r\n                (err) => {\r\n                    this.notificationService.error(_('common.notify-delete-error'), {\r\n                        entity: 'CustomerGroup',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    update(group: GetCustomerGroups.Items) {\r\n        this.modalService\r\n            .fromComponent(CustomerGroupDetailDialogComponent, { locals: { group } })\r\n            .pipe(\r\n                switchMap((name) =>\r\n                    name ? this.dataService.customer.updateCustomerGroup({ id: group.id, name }) : EMPTY,\r\n                ),\r\n            )\r\n            .subscribe(\r\n                () => {\r\n                    this.notificationService.success(_('common.notify-update-success'), {\r\n                        entity: 'CustomerGroup',\r\n                    });\r\n                },\r\n                (err) => {\r\n                    this.notificationService.error(_('common.notify-update-error'), {\r\n                        entity: 'CustomerGroup',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    closeMembers() {\r\n        const params = { ...this.route.snapshot.params };\r\n        delete params.contents;\r\n        this.router.navigate(['./', params], { relativeTo: this.route, queryParamsHandling: 'preserve' });\r\n    }\r\n\r\n    addToGroup(group: GetCustomerGroupWithCustomers.CustomerGroup) {\r\n        this.modalService\r\n            .fromComponent(AddCustomerToGroupDialogComponent, {\r\n                locals: {\r\n                    group,\r\n                    route: this.route,\r\n                },\r\n                size: 'md',\r\n                verticalAlign: 'top',\r\n            })\r\n            .pipe(\r\n                switchMap((customerIds) =>\r\n                    customerIds\r\n                        ? this.dataService.customer\r\n                              .addCustomersToGroup(group.id, customerIds)\r\n                              .pipe(mapTo(customerIds))\r\n                        : EMPTY,\r\n                ),\r\n            )\r\n            .subscribe({\r\n                next: (result) => {\r\n                    this.notificationService.success(_(`customer.add-customers-to-group-success`), {\r\n                        customerCount: result.length,\r\n                        groupName: group.name,\r\n                    });\r\n                    this.refreshActiveGroupMembers$.next();\r\n                    this.selectedCustomerIds = [];\r\n                },\r\n            });\r\n    }\r\n\r\n    removeFromGroup(group: GetZones.Zones, customerIds: string[]) {\r\n        this.dataService.customer.removeCustomersFromGroup(group.id, customerIds).subscribe({\r\n            complete: () => {\r\n                this.notificationService.success(_(`customer.remove-customers-from-group-success`), {\r\n                    customerCount: customerIds.length,\r\n                    groupName: group.name,\r\n                });\r\n                this.refreshActiveGroupMembers$.next();\r\n                this.selectedCustomerIds = [];\r\n            },\r\n        });\r\n    }\r\n}\r\n","<vdr-action-bar>\r\n    <vdr-ab-left>\r\n        <input\r\n            type=\"text\"\r\n            name=\"emailSearchTerm\"\r\n            [formControl]=\"emailSearchTerm\"\r\n            [placeholder]=\"'customer.search-customers-by-email' | translate\"\r\n            class=\"search-input ml3\"\r\n        />\r\n        <input\r\n            type=\"text\"\r\n            name=\"lastNameSearchTerm\"\r\n            [formControl]=\"lastNameSearchTerm\"\r\n            [placeholder]=\"'customer.search-customers-by-last-name' | translate\"\r\n            class=\"search-input ml3\"\r\n        />\r\n    </vdr-ab-left>\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"customer-list\"></vdr-action-bar-items>\r\n        <a class=\"btn btn-primary\" [routerLink]=\"['./create']\" *vdrIfPermissions=\"'CreateCustomer'\">\r\n            <clr-icon shape=\"plus\"></clr-icon>\r\n            {{ 'customer.create-new-customer' | translate }}\r\n        </a>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<vdr-data-table\r\n    [items]=\"items$ | async\"\r\n    [itemsPerPage]=\"itemsPerPage$ | async\"\r\n    [totalItems]=\"totalItems$ | async\"\r\n    [currentPage]=\"currentPage$ | async\"\r\n    (pageChange)=\"setPageNumber($event)\"\r\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\r\n>\r\n    <vdr-dt-column [expand]=\"true\">{{ 'customer.name' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column [expand]=\"true\">{{ 'customer.email-address' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'customer.customer-type' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <ng-template let-customer=\"item\">\r\n        <td class=\"left align-middle\">\r\n            {{ customer.title }} {{ customer.firstName }} {{ customer.lastName }}\r\n        </td>\r\n        <td class=\"left align-middle\">{{ customer.emailAddress }}</td>\r\n        <td class=\"left align-middle\">\r\n            <vdr-customer-status-label [customer]=\"customer\"></vdr-customer-status-label>\r\n        </td>\r\n        <td class=\"right align-middle\">\r\n            <vdr-table-row-action\r\n                iconShape=\"edit\"\r\n                [label]=\"'common.edit' | translate\"\r\n                [linkTo]=\"['./', customer.id]\"\r\n            ></vdr-table-row-action>\r\n        </td>\r\n        <td>\r\n            <vdr-dropdown>\r\n                <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger>\r\n                    {{ 'common.actions' | translate }}\r\n                    <clr-icon shape=\"caret down\"></clr-icon>\r\n                </button>\r\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                    <button\r\n                        type=\"button\"\r\n                        class=\"delete-button\"\r\n                        (click)=\"deleteCustomer(customer)\"\r\n                        [disabled]=\"!('DeleteCustomer' | hasPermission)\"\r\n                        vdrDropdownItem\r\n                    >\r\n                        <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                        {{ 'common.delete' | translate }}\r\n                    </button>\r\n                </vdr-dropdown-menu>\r\n            </vdr-dropdown>\r\n        </td>\r\n    </ng-template>\r\n</vdr-data-table>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    BaseListComponent,\r\n    DataService,\r\n    GetCustomerList,\r\n    ModalService,\r\n    NotificationService,\r\n} from '@vendure/admin-ui/core';\r\nimport { SortOrder } from '@vendure/common/lib/generated-shop-types';\r\nimport { EMPTY, merge } from 'rxjs';\r\nimport { debounceTime, filter, switchMap, takeUntil } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'vdr-customer-list',\r\n    templateUrl: './customer-list.component.html',\r\n    styleUrls: ['./customer-list.component.scss'],\r\n})\r\nexport class CustomerListComponent\r\n    extends BaseListComponent<GetCustomerList.Query, GetCustomerList.Items>\r\n    implements OnInit {\r\n    emailSearchTerm = new FormControl('');\r\n    lastNameSearchTerm = new FormControl('');\r\n    constructor(\r\n        private dataService: DataService,\r\n        router: Router,\r\n        route: ActivatedRoute,\r\n        private modalService: ModalService,\r\n        private notificationService: NotificationService,\r\n    ) {\r\n        super(router, route);\r\n        super.setQueryFn(\r\n            (...args: any[]) => this.dataService.customer.getCustomerList(...args).refetchOnChannelChange(),\r\n            data => data.customers,\r\n            (skip, take) => ({\r\n                options: {\r\n                    skip,\r\n                    take,\r\n                    filter: {\r\n                        emailAddress: {\r\n                            contains: this.emailSearchTerm.value,\r\n                        },\r\n                        lastName: {\r\n                            contains: this.lastNameSearchTerm.value,\r\n                        },\r\n                    },\r\n                    sort: {\r\n                        createdAt: SortOrder.DESC,\r\n                    },\r\n                },\r\n            }),\r\n        );\r\n    }\r\n\r\n    ngOnInit() {\r\n        super.ngOnInit();\r\n        merge(this.emailSearchTerm.valueChanges, this.lastNameSearchTerm.valueChanges)\r\n            .pipe(\r\n                filter(value => 2 < value.length || value.length === 0),\r\n                debounceTime(250),\r\n                takeUntil(this.destroy$),\r\n            )\r\n            .subscribe(() => this.refresh());\r\n    }\r\n\r\n    deleteCustomer(customer: GetCustomerList.Items) {\r\n        return this.modalService\r\n            .dialog({\r\n                title: _('catalog.confirm-delete-customer'),\r\n                body: `${customer.firstName} ${customer.lastName}`,\r\n                buttons: [\r\n                    { type: 'secondary', label: _('common.cancel') },\r\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\r\n                ],\r\n            })\r\n            .pipe(switchMap(res => (res ? this.dataService.customer.deleteCustomer(customer.id) : EMPTY)))\r\n            .subscribe(\r\n                () => {\r\n                    this.notificationService.success(_('common.notify-delete-success'), {\r\n                        entity: 'Customer',\r\n                    });\r\n                    this.refresh();\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-delete-error'), {\r\n                        entity: 'Customer',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { BaseEntityResolver } from '@vendure/admin-ui/core';\r\nimport { Customer } from '@vendure/admin-ui/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class CustomerResolver extends BaseEntityResolver<Customer.Fragment> {\r\n    constructor(router: Router, dataService: DataService) {\r\n        super(\r\n            router,\r\n            {\r\n                __typename: 'Customer',\r\n                id: '',\r\n                createdAt: '',\r\n                updatedAt: '',\r\n                title: '',\r\n                firstName: '',\r\n                lastName: '',\r\n                emailAddress: '',\r\n                phoneNumber: null,\r\n                addresses: null,\r\n                user: null,\r\n            },\r\n            id => dataService.customer.getCustomer(id).mapStream(data => data.customer),\r\n        );\r\n    }\r\n}\r\n","import { Route } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    CanDeactivateDetailGuard,\r\n    createResolveData,\r\n    Customer,\r\n    detailBreadcrumb,\r\n} from '@vendure/admin-ui/core';\r\n\r\nimport { CustomerDetailComponent } from './components/customer-detail/customer-detail.component';\r\nimport { CustomerGroupListComponent } from './components/customer-group-list/customer-group-list.component';\r\nimport { CustomerListComponent } from './components/customer-list/customer-list.component';\r\nimport { CustomerResolver } from './providers/routing/customer-resolver';\r\n\r\nexport const customerRoutes: Route[] = [\r\n    {\r\n        path: 'customers',\r\n        component: CustomerListComponent,\r\n        pathMatch: '',\r\n        data: {\r\n            breadcrumb: _('breadcrumb.customers'),\r\n        },\r\n    },\r\n    {\r\n        path: 'customers/:id',\r\n        component: CustomerDetailComponent,\r\n        resolve: createResolveData(CustomerResolver),\r\n        canDeactivate: [CanDeactivateDetailGuard],\r\n        data: {\r\n            breadcrumb: customerBreadcrumb,\r\n        },\r\n    },\r\n    {\r\n        path: 'groups',\r\n        component: CustomerGroupListComponent,\r\n        data: {\r\n            breadcrumb: _('breadcrumb.customer-groups'),\r\n        },\r\n    },\r\n];\r\n\r\nexport function customerBreadcrumb(data: any, params: any) {\r\n    return detailBreadcrumb<Customer.Fragment>({\r\n        entity: data.entity,\r\n        id: params.id,\r\n        breadcrumbKey: 'breadcrumb.customers',\r\n        getName: (customer) => `${customer.firstName} ${customer.lastName}`,\r\n        route: 'customers',\r\n    });\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { SharedModule } from '@vendure/admin-ui/core';\r\n\r\nimport { AddCustomerToGroupDialogComponent } from './components/add-customer-to-group-dialog/add-customer-to-group-dialog.component';\r\nimport { AddressCardComponent } from './components/address-card/address-card.component';\r\nimport { AddressDetailDialogComponent } from './components/address-detail-dialog/address-detail-dialog.component';\r\nimport { CustomerDetailComponent } from './components/customer-detail/customer-detail.component';\r\nimport { CustomerGroupDetailDialogComponent } from './components/customer-group-detail-dialog/customer-group-detail-dialog.component';\r\nimport { CustomerGroupListComponent } from './components/customer-group-list/customer-group-list.component';\r\nimport { CustomerGroupMemberListComponent } from './components/customer-group-member-list/customer-group-member-list.component';\r\nimport { CustomerHistoryComponent } from './components/customer-history/customer-history.component';\r\nimport { CustomerListComponent } from './components/customer-list/customer-list.component';\r\nimport { CustomerStatusLabelComponent } from './components/customer-status-label/customer-status-label.component';\r\nimport { SelectCustomerGroupDialogComponent } from './components/select-customer-group-dialog/select-customer-group-dialog.component';\r\nimport { customerRoutes } from './customer.routes';\r\n\r\n@NgModule({\r\n    imports: [SharedModule, RouterModule.forChild(customerRoutes)],\r\n    declarations: [\r\n        CustomerListComponent,\r\n        CustomerDetailComponent,\r\n        CustomerStatusLabelComponent,\r\n        AddressCardComponent,\r\n        CustomerGroupListComponent,\r\n        CustomerGroupDetailDialogComponent,\r\n        AddCustomerToGroupDialogComponent,\r\n        CustomerGroupMemberListComponent,\r\n        SelectCustomerGroupDialogComponent,\r\n        CustomerHistoryComponent,\r\n        AddressDetailDialogComponent,\r\n    ],\r\n    exports: [AddressCardComponent],\r\n})\r\nexport class CustomerModule {}\r\n"]}