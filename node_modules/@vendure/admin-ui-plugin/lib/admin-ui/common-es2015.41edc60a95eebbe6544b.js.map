{"version":3,"sources":["webpack:///common/src/normalize-string.ts","webpack:///common/src/unique.ts","webpack:///node_modules/rxjs/_esm2015/internal/operators/withLatestFrom.js"],"names":["input","spaceReplacer","normalize","replace","toLowerCase","arr","byKey","filter","item","index","self","findIndex","i","undefined","withLatestFrom","args","source","project","length","pop","observables","lift","WithLatestFromOperator","this","subscriber","subscribe","WithLatestFromSubscriber","destination","super","toRespond","len","values","Array","push","observable","add","_outerValue","innerValue","outerIndex","found","indexOf","splice","value","_tryProject","next","result","apply","err","error"],"mappings":"qKAKA,2BAAgCA,EAAeC,EAAgB,KAC3D,OAAQD,GAAS,IACZE,UAAU,OACVC,QAAQ,mBAAoB,IAC5BC,cACAD,QAAQ,yDAA0C,IAClDA,QAAQ,OAAQF,K,mGCNzB,kBAA0BI,EAAUC,GAChC,OAAOD,EAAIE,OAAO,CAACC,EAAMC,EAAOC,IAExBD,IACAC,EAAKC,UAAUC,QACGC,IAAVP,EACOM,IAAMJ,EAENI,EAAEN,KAAWE,EAAKF,O,kCCb7C,4DAEO,SAASQ,KAAkBC,GAC9B,OAAQC,IACJ,IAAIC,EACiC,mBAA1BF,EAAKA,EAAKG,OAAS,KAC1BD,EAAUF,EAAKI,OAEnB,MAAMC,EAAcL,EACpB,OAAOC,EAAOK,KAAK,IAAIC,EAAuBF,EAAaH,KAGnE,MAAMK,EACF,YAAYF,EAAaH,GACrBM,KAAKH,YAAcA,EACnBG,KAAKN,QAAUA,EAEnB,KAAKO,EAAYR,GACb,OAAOA,EAAOS,UAAU,IAAIC,EAAyBF,EAAYD,KAAKH,YAAaG,KAAKN,WAGhG,MAAMS,UAAiC,IACnC,YAAYC,EAAaP,EAAaH,GAClCW,MAAMD,GACNJ,KAAKH,YAAcA,EACnBG,KAAKN,QAAUA,EACfM,KAAKM,UAAY,GACjB,MAAMC,EAAMV,EAAYF,OACxBK,KAAKQ,OAAS,IAAIC,MAAMF,GACxB,IAAK,IAAIlB,EAAI,EAAGA,EAAIkB,EAAKlB,IACrBW,KAAKM,UAAUI,KAAKrB,GAExB,IAAK,IAAIA,EAAI,EAAGA,EAAIkB,EAAKlB,IAAK,CAC1B,IAAIsB,EAAad,EAAYR,GAC7BW,KAAKY,IAAI,YAAkBZ,KAAMW,OAAYrB,EAAWD,KAGhE,WAAWwB,EAAaC,EAAYC,GAChCf,KAAKQ,OAAOO,GAAcD,EAC1B,MAAMR,EAAYN,KAAKM,UACvB,GAAIA,EAAUX,OAAS,EAAG,CACtB,MAAMqB,EAAQV,EAAUW,QAAQF,IACjB,IAAXC,GACAV,EAAUY,OAAOF,EAAO,IAIpC,kBAEA,MAAMG,GACF,GAA8B,IAA1BnB,KAAKM,UAAUX,OAAc,CAC7B,MAAMH,EAAO,CAAC2B,KAAUnB,KAAKQ,QACzBR,KAAKN,QACLM,KAAKoB,YAAY5B,GAGjBQ,KAAKI,YAAYiB,KAAK7B,IAIlC,YAAYA,GACR,IAAI8B,EACJ,IACIA,EAAStB,KAAKN,QAAQ6B,MAAMvB,KAAMR,GAEtC,MAAOgC,GAEH,YADAxB,KAAKI,YAAYqB,MAAMD,GAG3BxB,KAAKI,YAAYiB,KAAKC","file":"x","sourcesContent":["/**\n * Normalizes a string to replace non-alphanumeric and diacritical marks with\n * plain equivalents.\n * Based on https://stackoverflow.com/a/37511463/772859\n */\nexport function normalizeString(input: string, spaceReplacer = ' '): string {\n    return (input || '')\n        .normalize('NFD')\n        .replace(/[\\u0300-\\u036f]/g, '')\n        .toLowerCase()\n        .replace(/[!\"£$%^&*()+[\\]{};:@#~?\\\\/,|><`¬'=‘’]/g, '')\n        .replace(/\\s+/g, spaceReplacer);\n}\n","/**\r\n * Returns an array with only unique values. Objects are compared by reference,\r\n * unless the `byKey` argument is supplied, in which case matching properties will\r\n * be used to check duplicates\r\n */\r\nexport function unique<T>(arr: T[], byKey?: keyof T): T[] {\r\n    return arr.filter((item, index, self) => {\r\n        return (\r\n            index ===\r\n            self.findIndex(i => {\r\n                if (byKey === undefined) {\r\n                    return i === item;\r\n                } else {\r\n                    return i[byKey] === item[byKey];\r\n                }\r\n            })\r\n        );\r\n    });\r\n}\r\n","import { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function withLatestFrom(...args) {\n    return (source) => {\n        let project;\n        if (typeof args[args.length - 1] === 'function') {\n            project = args.pop();\n        }\n        const observables = args;\n        return source.lift(new WithLatestFromOperator(observables, project));\n    };\n}\nclass WithLatestFromOperator {\n    constructor(observables, project) {\n        this.observables = observables;\n        this.project = project;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));\n    }\n}\nclass WithLatestFromSubscriber extends OuterSubscriber {\n    constructor(destination, observables, project) {\n        super(destination);\n        this.observables = observables;\n        this.project = project;\n        this.toRespond = [];\n        const len = observables.length;\n        this.values = new Array(len);\n        for (let i = 0; i < len; i++) {\n            this.toRespond.push(i);\n        }\n        for (let i = 0; i < len; i++) {\n            let observable = observables[i];\n            this.add(subscribeToResult(this, observable, undefined, i));\n        }\n    }\n    notifyNext(_outerValue, innerValue, outerIndex) {\n        this.values[outerIndex] = innerValue;\n        const toRespond = this.toRespond;\n        if (toRespond.length > 0) {\n            const found = toRespond.indexOf(outerIndex);\n            if (found !== -1) {\n                toRespond.splice(found, 1);\n            }\n        }\n    }\n    notifyComplete() {\n    }\n    _next(value) {\n        if (this.toRespond.length === 0) {\n            const args = [value, ...this.values];\n            if (this.project) {\n                this._tryProject(args);\n            }\n            else {\n                this.destination.next(args);\n            }\n        }\n    }\n    _tryProject(args) {\n        let result;\n        try {\n            result = this.project.apply(this, args);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    }\n}\n//# sourceMappingURL=withLatestFrom.js.map"]}