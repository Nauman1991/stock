{"version":3,"sources":["webpack:///src/lib/settings/src/components/zone-member-list/zone-member-controls.directive.ts","webpack:///src/lib/settings/src/components/zone-member-list/zone-member-list-header.directive.ts","webpack:///src/lib/settings/src/components/zone-member-list/zone-member-list.component.html","webpack:///src/lib/settings/src/components/zone-member-list/zone-member-list.component.ts","webpack:///src/lib/settings/src/components/add-country-to-zone-dialog/add-country-to-zone-dialog.component.html","webpack:///src/lib/settings/src/components/add-country-to-zone-dialog/add-country-to-zone-dialog.component.ts","webpack:///src/lib/settings/src/components/permission-grid/permission-grid.component.html","webpack:///src/lib/settings/src/components/permission-grid/permission-grid.component.ts","webpack:///src/lib/settings/src/components/admin-detail/admin-detail.component.html","webpack:///src/lib/settings/src/components/admin-detail/admin-detail.component.ts","webpack:///src/lib/settings/src/components/administrator-list/administrator-list.component.html","webpack:///src/lib/settings/src/components/administrator-list/administrator-list.component.ts","webpack:///src/lib/settings/src/components/channel-detail/channel-detail.component.html","webpack:///src/lib/settings/src/components/channel-detail/channel-detail.component.ts","webpack:///src/lib/settings/src/components/channel-list/channel-list.component.html","webpack:///src/lib/settings/src/components/channel-list/channel-list.component.ts","webpack:///src/lib/settings/src/components/country-detail/country-detail.component.html","webpack:///src/lib/settings/src/components/country-detail/country-detail.component.ts","webpack:///src/lib/settings/src/components/country-list/country-list.component.html","webpack:///src/lib/settings/src/components/country-list/country-list.component.ts","webpack:///src/lib/settings/src/components/global-settings/global-settings.component.html","webpack:///src/lib/settings/src/components/global-settings/global-settings.component.ts","webpack:///src/lib/settings/src/components/payment-method-detail/payment-method-detail.component.html","webpack:///src/lib/settings/src/components/payment-method-detail/payment-method-detail.component.ts","webpack:///src/lib/settings/src/components/payment-method-list/payment-method-list.component.html","webpack:///src/lib/settings/src/components/payment-method-list/payment-method-list.component.ts","webpack:///src/lib/settings/src/components/profile/profile.component.html","webpack:///src/lib/settings/src/components/profile/profile.component.ts","webpack:///src/lib/settings/src/components/role-detail/role-detail.component.html","webpack:///src/lib/settings/src/components/role-detail/role-detail.component.ts","webpack:///src/lib/settings/src/components/role-list/role-list.component.html","webpack:///src/lib/settings/src/components/role-list/role-list.component.ts","webpack:///src/lib/settings/src/components/shipping-eligibility-test-result/shipping-eligibility-test-result.component.html","webpack:///src/lib/settings/src/components/shipping-eligibility-test-result/shipping-eligibility-test-result.component.ts","webpack:///src/lib/settings/src/components/test-order-builder/test-order-builder.component.html","webpack:///src/lib/settings/src/components/test-order-builder/test-order-builder.component.ts","webpack:///src/lib/settings/src/components/test-address-form/test-address-form.component.html","webpack:///src/lib/settings/src/components/test-address-form/test-address-form.component.ts","webpack:///src/lib/settings/src/components/shipping-method-test-result/shipping-method-test-result.component.html","webpack:///src/lib/settings/src/components/shipping-method-test-result/shipping-method-test-result.component.ts","webpack:///src/lib/settings/src/components/shipping-method-detail/shipping-method-detail.component.html","webpack:///src/lib/settings/src/components/shipping-method-detail/shipping-method-detail.component.ts","webpack:///src/lib/settings/src/components/shipping-method-list/shipping-method-list.component.html","webpack:///src/lib/settings/src/components/shipping-method-list/shipping-method-list.component.ts","webpack:///src/lib/settings/src/components/tax-category-detail/tax-category-detail.component.html","webpack:///src/lib/settings/src/components/tax-category-detail/tax-category-detail.component.ts","webpack:///src/lib/settings/src/components/tax-category-list/tax-category-list.component.html","webpack:///src/lib/settings/src/components/tax-category-list/tax-category-list.component.ts","webpack:///src/lib/settings/src/components/tax-rate-detail/tax-rate-detail.component.html","webpack:///src/lib/settings/src/components/tax-rate-detail/tax-rate-detail.component.ts","webpack:///src/lib/settings/src/components/tax-rate-list/tax-rate-list.component.html","webpack:///src/lib/settings/src/components/tax-rate-list/tax-rate-list.component.ts","webpack:///src/lib/settings/src/components/zone-detail-dialog/zone-detail-dialog.component.html","webpack:///src/lib/settings/src/components/zone-detail-dialog/zone-detail-dialog.component.ts","webpack:///src/lib/settings/src/components/zone-list/zone-list.component.html","webpack:///src/lib/settings/src/components/zone-list/zone-list.component.ts","webpack:///src/lib/settings/src/providers/routing/administrator-resolver.ts","webpack:///src/lib/settings/src/providers/routing/channel-resolver.ts","webpack:///src/lib/settings/src/providers/routing/country-resolver.ts","webpack:///src/lib/settings/src/providers/routing/global-settings-resolver.ts","webpack:///src/lib/settings/src/providers/routing/payment-method-resolver.ts","webpack:///src/lib/settings/src/providers/routing/profile-resolver.ts","webpack:///src/lib/settings/src/providers/routing/role-resolver.ts","webpack:///src/lib/settings/src/providers/routing/shipping-method-resolver.ts","webpack:///src/lib/settings/src/providers/routing/tax-category-resolver.ts","webpack:///src/lib/settings/src/providers/routing/tax-rate-resolver.ts","webpack:///src/lib/settings/src/settings.routes.ts","webpack:///src/lib/settings/src/settings.module.ts"],"names":["ZoneMemberControlsDirective","templateRef","ZoneMemberListHeaderDirective","members","selectedMemberIds","selectionChange","filterTerm","isMemberSelected","member","this","indexOf","id","term","toLocaleLowerCase","filter","m","name","includes","code","length","areAllSelected","emit","map","v","toggleSelectMember","toggleSelectAll","dataService","currentMembers","currentMemberIds","availableCountries$","settings","getCountries","mapStream","data","countries","items","pipe","c","resolveWith","readonly","permissionChange","buildGrid","permission","value","defs","some","d","activePermissions","def","crudGroups","Map","nonCrud","crudRe","permissionDefinitions","test","groupName","match","existing","get","push","set","assignable","gridData","label","description","permissions","Array","from","entries","extractCrudDescription","replace","router","route","serverConfigService","changeDetector","formBuilder","notificationService","super","selectedRoles","selectedRolePermissions","selectedChannelId","customFields","getCustomFieldConfig","detailForm","group","emailAddress","required","firstName","lastName","password","roles","reduce","hash","field","Object","values","init","administrator$","entity$","allRoles$","administrator","getRoles","item","i","CUSTOMER_ROLE_CODE","client","userStatus","single$","subscribe","UpdateAdministrator","rolesSelect","disable","getPermissionDefinitions","destroy","buildPermissionsMap","getActivePermissions","input","channels","channelId","formValue","roleIds","role","createAdministrator","success","entity","markAsPristine","markForCheck","navigate","relativeTo","err","error","take","mergeMap","updateAdministrator","languageCode","patchValue","user","customFieldsGroup","key","control","passwordControl","setValidators","permissionsControl","channelIdPermissionsMap","channelIdCodeMap","channel","permissionSet","Set","forEach","p","add","f","keys","permissionsHash","has","channelCode","rolesChanged","modalService","getAdministrators","administrators","dialog","title","body","buttons","type","returnValue","switchMap","res","deleteAdministrator","refresh","setPageNumber","setItemsPerPage","currencyCodes","updatePermission","SuperAdmin","UpdateChannel","CreateChannel","token","pricesIncludeTax","currencyCode","defaultShippingZoneId","defaultLanguageCode","defaultTaxZoneId","zones$","getZones","mapSingle","zones","availableLanguageCodes$","getAvailableLanguages","dirty","valid","createChannel","auth","currentUser","me","updateUserChannels","__typename","message","updateChannel","generateToken","defaultShippingZone","defaultTaxZone","DEFAULT_CHANNEL_CODE","codeControl","randomString","Math","random","toString","substr","refresh$","Subject","channels$","startWith","getChannels","response","deleteChannel","next","UpdateSettings","UpdateCountry","enabled","country$","combineLatest","languageCode$","country","translatable","updatedFields","defaultTranslation","createCountry","updateCountry","currentTranslation","setLanguage","searchTerm","destroy$","countries$","valueChanges","stream$","tap","countriesWithZones$","z","find","complete","countryId","deleteCountry","result","DELETED","hasOwnProperty","languageCodes","UpdateGlobalSettings","availableLanguages","trackInventory","outOfStockThreshold","languagesSelect","updateGlobalSettings","refreshGlobalSettings","withLatestFrom","uiState","globalSettings","availableLangs","contentLanguage","setContentLanguage","checkers","handlers","UpdatePaymentMethod","checker","handler","getPaymentMethodOperations","paymentMethodEligibilityCheckers","paymentMethodHandlers","selectedCheckerDefinition","selectedHandlerDefinition","currentCode","nameValue","pristine","setValue","normalizeString","configArgsGroup","controls","selectedChecker","formControl","clearValidators","updateValueAndValidity","onlySelf","markAsDirty","selectedHandler","createPaymentMethod","updatePaymentMethod","paymentMethod","args","a","getPaymentMethods","refetchOnChannelChange","paymentMethods","paymentMethodId","showModalAndDelete","r","deletePaymentMethod","updateActiveAdministrator","save","channelIds","role$","change","currentPermissions","newValue","unique","createRole","updateRole","detectChanges","updateCode","setPermission","initialLimit","displayLimit","visibleRoles$","items$","SUPER_ADMIN_ROLE_CODE","deleteRole","okToRun","testDataUpdated","runTest","localStorageService","orderLinesChange","lines","sum","l","unitPriceWithTax","quantity","loadFromLocalStorage","getActiveChannel","activeChannel","addToLines","productVariantId","productVariantName","preview","productAsset","sku","priceWithTax","persistToLocalStorage","line","setForCurrentLocation","getForCurrentLocation","selectResult","addressChange","getAvailableCountries","initialValue","city","countryCode","postalCode","province","form","subscription","unsubscribe","calculators","fulfillmentHandlers","UpdateShippingMethod","fetchTestResult$","fulfillmentHandler","calculator","shippingMethod","getShippingMethodOperations","shippingEligibilityCheckers","shippingCalculators","selectedCalculatorDefinition","activeChannel$","testResult$","address","selectedCalculator","of","shippingAddress","streetLine1","testShippingMethod","merge","takeUntil","getUpdatedShippingMethod","createShippingMethod","updateShippingMethod","event","testOrderLines","testAddress","formGroup","customFieldConfig","fulfillmentHandlerCode","fieldDef","getShippingMethods","shippingMethods","testEligibleShippingMethods","availableLanguages$","contentLanguage$","deleteShippingMethod","UpdateTaxCategory","isDefault","taxCategory$","createTaxCategory","taxCategory","updateTaxCategory","queryResult","getTaxCategories","taxCategories$","taxCategories","deleteTaxCategory","ref","refetch","UpdateTaxRate","taxCategoryId","zoneId","customerGroupId","categoryId","createTaxRate","taxRate","updateTaxRate","category","zone","customerGroup","getTaxRates","taxRates","deleteTaxRate","ZoneDetailDialogComponent","activeZoneId$","paramMap","pm","distinctUntilChanged","activeZone$","activeZoneId","fromComponent","locals","createZone","memberIds","deleteZone","errorMessage","updateZone","params","snapshot","contents","queryParamsHandling","zoneName","size","addMembersToZone","mapTo","countryCount","removeMembersFromZone","createdAt","updatedAt","getAdministrator","USD","getChannel","translations","getCountry","getGlobalSettings","getPaymentMethod","getActiveAdministrator","activeAdministrator","getRole","getShippingMethod","getTaxCategory","getTaxRate","settingsRoutes","path","component","resolve","canDeactivate","breadcrumb","administratorBreadcrumb","channelBreadcrumb","roleBreadcrumb","taxCategoryBreadcrumb","taxRateBreadcrumb","countryBreadcrumb","shippingMethodBreadcrumb","paymentMethodBreadcrumb","breadcrumbKey","getName","admin","promotion","method","SettingsModule","forChild"],"mappings":"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","file":"x","sourcesContent":["import { Directive, TemplateRef } from '@angular/core';\r\n\r\n@Directive({\r\n    selector: '[vdrZoneMemberControls]',\r\n})\r\nexport class ZoneMemberControlsDirective {\r\n    constructor(public templateRef: TemplateRef<any>) {}\r\n}\r\n","import { Directive, TemplateRef } from '@angular/core';\r\n\r\n@Directive({\r\n    selector: '[vdrZoneMemberListHeader]',\r\n})\r\nexport class ZoneMemberListHeaderDirective {\r\n    constructor(public templateRef: TemplateRef<any>) {}\r\n}\r\n","<div class=\"members-header\">\r\n    <ng-container *ngIf=\"headerTemplate\">\r\n        <ng-container *ngTemplateOutlet=\"headerTemplate.templateRef\"></ng-container>\r\n    </ng-container>\r\n    <input\r\n        type=\"text\"\r\n        [placeholder]=\"'settings.filter-by-member-name' | translate\"\r\n        [(ngModel)]=\"filterTerm\"\r\n    />\r\n</div>\r\n<vdr-data-table\r\n    [items]=\"filteredMembers()\"\r\n    [allSelected]=\"areAllSelected()\"\r\n    [isRowSelectedFn]=\"(['UpdateSettings', 'UpdateZone'] | hasPermission) && isMemberSelected\"\r\n    (rowSelectChange)=\"toggleSelectMember($event)\"\r\n    (allSelectChange)=\"toggleSelectAll()\"\r\n>\r\n    <vdr-dt-column>{{ 'common.code' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'common.name' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'common.enabled' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <ng-template let-member=\"item\">\r\n        <td class=\"left align-middle\">{{ member.code }}</td>\r\n        <td class=\"left align-middle\">{{ member.name }}</td>\r\n        <td class=\"left align-middle\">\r\n            <clr-icon\r\n                [class.is-success]=\"member.enabled\"\r\n                [attr.shape]=\"member.enabled ? 'check' : 'times'\"\r\n            ></clr-icon>\r\n        </td>\r\n        <td class=\"right align-middle\">\r\n            <ng-container *ngIf=\"controlsTemplate\">\r\n                <ng-container\r\n                    *ngTemplateOutlet=\"controlsTemplate.templateRef; context: { member: member }\"\r\n                ></ng-container>\r\n            </ng-container>\r\n        </td>\r\n    </ng-template>\r\n</vdr-data-table>\r\n","import { ChangeDetectionStrategy, Component, ContentChild, EventEmitter, Input, Output } from '@angular/core';\r\nimport { GetZones } from '@vendure/admin-ui/core';\r\n\r\nimport { ZoneMemberControlsDirective } from './zone-member-controls.directive';\r\nimport { ZoneMemberListHeaderDirective } from './zone-member-list-header.directive';\r\n\r\nexport type ZoneMember = { id: string; name: string; code: string };\r\n\r\n@Component({\r\n    selector: 'vdr-zone-member-list',\r\n    templateUrl: './zone-member-list.component.html',\r\n    styleUrls: ['./zone-member-list.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ZoneMemberListComponent {\r\n    @Input() members: ZoneMember[] = [];\r\n    @Input() selectedMemberIds: string[] = [];\r\n    @Output() selectionChange = new EventEmitter<string[]>();\r\n    @ContentChild(ZoneMemberListHeaderDirective) headerTemplate: ZoneMemberListHeaderDirective;\r\n    @ContentChild(ZoneMemberControlsDirective) controlsTemplate: ZoneMemberControlsDirective;\r\n    filterTerm = '';\r\n\r\n    filteredMembers(): ZoneMember[] {\r\n        if (this.filterTerm !== '') {\r\n            const term = this.filterTerm.toLocaleLowerCase();\r\n            return this.members.filter(\r\n                m => m.name.toLocaleLowerCase().includes(term) || m.code.toLocaleLowerCase().includes(term),\r\n            );\r\n        } else {\r\n            return this.members;\r\n        }\r\n    }\r\n\r\n    areAllSelected(): boolean {\r\n        if (this.members) {\r\n            return this.selectedMemberIds.length === this.members.length;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    toggleSelectAll() {\r\n        if (this.areAllSelected()) {\r\n            this.selectionChange.emit([]);\r\n        } else {\r\n            this.selectionChange.emit(this.members.map(v => v.id));\r\n        }\r\n    }\r\n\r\n    toggleSelectMember(member: ZoneMember) {\r\n        if (this.selectedMemberIds.includes(member.id)) {\r\n            this.selectionChange.emit(this.selectedMemberIds.filter(id => id !== member.id));\r\n        } else {\r\n            this.selectionChange.emit([...this.selectedMemberIds, member.id]);\r\n        }\r\n    }\r\n\r\n    isMemberSelected = (member: ZoneMember): boolean => {\r\n        return -1 < this.selectedMemberIds.indexOf(member.id);\r\n    };\r\n}\r\n","<ng-template vdrDialogTitle>{{ 'settings.add-countries-to-zone' | translate: { zoneName: zoneName } }}</ng-template>\r\n\r\n<vdr-zone-member-list\r\n    [members]=\"availableCountries$ | async\"\r\n    [selectedMemberIds]=\"selectedMemberIds\"\r\n    (selectionChange)=\"selectedMemberIds = $event\"\r\n>\r\n</vdr-zone-member-list>\r\n\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button type=\"submit\" (click)=\"add()\" [disabled]=\"!selectedMemberIds.length\" class=\"btn btn-primary\">\r\n        {{ 'settings.add-countries-to-zone' | translate: { zoneName: zoneName } }}\r\n    </button>\r\n</ng-template>\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { DataService, Dialog, GetCountryList, GetZones } from '@vendure/admin-ui/core';\r\nimport { Observable } from 'rxjs';\r\nimport { filter, map } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'vdr-add-country-to-zone-dialog',\r\n    templateUrl: './add-country-to-zone-dialog.component.html',\r\n    styleUrls: ['./add-country-to-zone-dialog.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class AddCountryToZoneDialogComponent implements Dialog<string[]>, OnInit {\r\n    resolveWith: (result?: string[]) => void;\r\n    zoneName: string;\r\n    currentMembers: GetZones.Members[] = [];\r\n    availableCountries$: Observable<GetCountryList.Items[]>;\r\n    selectedMemberIds: string[] = [];\r\n\r\n    constructor(private dataService: DataService) {}\r\n\r\n    ngOnInit(): void {\r\n        const currentMemberIds = this.currentMembers.map(m => m.id);\r\n        this.availableCountries$ = this.dataService.settings\r\n            .getCountries(999)\r\n            .mapStream(data => data.countries.items)\r\n            .pipe(map(countries => countries.filter(c => !currentMemberIds.includes(c.id))));\r\n    }\r\n\r\n    cancel() {\r\n        this.resolveWith();\r\n    }\r\n\r\n    add() {\r\n        this.resolveWith(this.selectedMemberIds);\r\n    }\r\n}\r\n","<table class=\"table\">\r\n    <tbody>\r\n        <tr *ngFor=\"let section of gridData\">\r\n            <td class=\"permission-group left\">\r\n                <div><strong>{{ section.label | translate }}</strong></div>\r\n                <small>{{ section.description | translate }}</small><br>\r\n                <button *ngIf=\"1 < section.permissions.length && !readonly\" class=\"btn btn-sm btn-link\" (click)=\"toggleAll(section.permissions)\">\r\n                    {{ 'common.toggle-all' | translate }}\r\n                </button>\r\n            </td>\r\n            <td *ngFor=\"let permission of section.permissions\" [attr.colspan]=\"section.permissions.length === 1 ? 4 : 1\">\r\n                <vdr-select-toggle\r\n                    size=\"small\"\r\n                    [title]=\"permission.description\"\r\n                    [label]=\"permission.name\"\r\n                    [disabled]=\"readonly\"\r\n                    [selected]=\"activePermissions?.includes(permission.name)\"\r\n                    (selectedChange)=\"setPermission(permission.name, $event)\"\r\n                ></vdr-select-toggle>\r\n            </td>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport { PermissionDefinition } from '@vendure/admin-ui/core';\n\nexport interface PermissionGridRow {\n    label: string;\n    description: string;\n    permissions: PermissionDefinition[];\n}\n\n/**\n * A table showing and allowing the setting of all possible CRUD permissions.\n */\n@Component({\n    selector: 'vdr-permission-grid',\n    templateUrl: './permission-grid.component.html',\n    styleUrls: ['./permission-grid.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PermissionGridComponent implements OnInit {\n    @Input() permissionDefinitions: PermissionDefinition[];\n    @Input() activePermissions: string[];\n    @Input() readonly = false;\n    @Output() permissionChange = new EventEmitter<{ permission: string; value: boolean }>();\n    gridData: PermissionGridRow[];\n\n    ngOnInit() {\n        this.buildGrid();\n    }\n\n    setPermission(permission: string, value: boolean) {\n        if (!this.readonly) {\n            this.permissionChange.emit({ permission, value });\n        }\n    }\n\n    toggleAll(defs: PermissionDefinition[]) {\n        const value = defs.some(d => !this.activePermissions.includes(d.name));\n        for (const def of defs) {\n            this.permissionChange.emit({ permission: def.name, value });\n        }\n    }\n\n    private buildGrid() {\n        const crudGroups = new Map<string, PermissionDefinition[]>();\n        const nonCrud: PermissionDefinition[] = [];\n        const crudRe = /^(Create|Read|Update|Delete)([a-zA-Z]+)$/;\n        for (const def of this.permissionDefinitions) {\n            const isCrud = crudRe.test(def.name);\n            if (isCrud) {\n                const groupName = def.name.match(crudRe)?.[2];\n                if (groupName) {\n                    const existing = crudGroups.get(groupName);\n                    if (existing) {\n                        existing.push(def);\n                    } else {\n                        crudGroups.set(groupName, [def]);\n                    }\n                }\n            } else if (def.assignable) {\n                nonCrud.push(def);\n            }\n        }\n        this.gridData = [\n            ...nonCrud.map(d => ({\n                label: d.name,\n                description: d.description,\n                permissions: [d],\n            })),\n            ...Array.from(crudGroups.entries()).map(([label, defs]) => {\n                return {\n                    label,\n                    description: this.extractCrudDescription(defs[0]),\n                    permissions: defs,\n                };\n            }),\n        ];\n    }\n\n    private extractCrudDescription(def: PermissionDefinition): string {\n        return def.description.replace(/Grants permission to [\\w]+/, 'Grants permissions on');\n    }\n}\n","<vdr-action-bar>\r\n    <vdr-ab-left>\r\n        <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\r\n    </vdr-ab-left>\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"administrator-detail\"></vdr-action-bar-items>\r\n        <button\r\n            class=\"btn btn-primary\"\r\n            *ngIf=\"isNew$ | async; else updateButton\"\r\n            (click)=\"create()\"\r\n            [disabled]=\"detailForm.invalid || detailForm.pristine\"\r\n        >\r\n            {{ 'common.create' | translate }}\r\n        </button>\r\n        <ng-template #updateButton>\r\n            <button\r\n                class=\"btn btn-primary\"\r\n                (click)=\"save()\"\r\n                *vdrIfPermissions=\"'UpdateAdministrator'\"\r\n                [disabled]=\"detailForm.invalid || detailForm.pristine\"\r\n            >\r\n                {{ 'common.update' | translate }}\r\n            </button>\r\n        </ng-template>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<form class=\"form\" [formGroup]=\"detailForm\">\r\n    <vdr-form-field [label]=\"'settings.email-address' | translate\" for=\"emailAddress\">\r\n        <input\r\n            id=\"emailAddress\"\r\n            type=\"text\"\r\n            formControlName=\"emailAddress\"\r\n            [readonly]=\"!('UpdateAdministrator' | hasPermission)\"\r\n        />\r\n    </vdr-form-field>\r\n    <vdr-form-field [label]=\"'settings.first-name' | translate\" for=\"firstName\">\r\n        <input\r\n            id=\"firstName\"\r\n            type=\"text\"\r\n            formControlName=\"firstName\"\r\n            [readonly]=\"!('UpdateAdministrator' | hasPermission)\"\r\n        />\r\n    </vdr-form-field>\r\n    <vdr-form-field [label]=\"'settings.last-name' | translate\" for=\"lastName\">\r\n        <input\r\n            id=\"lastName\"\r\n            type=\"text\"\r\n            formControlName=\"lastName\"\r\n            [readonly]=\"!('UpdateAdministrator' | hasPermission)\"\r\n        />\r\n    </vdr-form-field>\r\n    <vdr-form-field *ngIf=\"isNew$ | async\" [label]=\"'settings.password' | translate\" for=\"password\">\r\n        <input id=\"password\" type=\"password\" formControlName=\"password\" />\r\n    </vdr-form-field>\r\n    <vdr-form-field\r\n        *ngIf=\"!(isNew$ | async) && ('UpdateAdministrator' | hasPermission)\"\r\n        [label]=\"'settings.password' | translate\"\r\n        for=\"password\"\r\n        [readOnlyToggle]=\"true\"\r\n    >\r\n        <input id=\"password\" type=\"password\" formControlName=\"password\" />\r\n    </vdr-form-field>\r\n    <section formGroupName=\"customFields\" *ngIf=\"customFields.length\">\r\n        <label>{{ 'common.custom-fields' | translate }}</label>\r\n        <ng-container *ngFor=\"let customField of customFields\">\r\n            <vdr-custom-field-control\r\n                *ngIf=\"customFieldIsSet(customField.name)\"\r\n                entityName=\"Administrator\"\r\n                [customFieldsFormGroup]=\"detailForm.get('customFields')\"\r\n                [customField]=\"customField\"\r\n            ></vdr-custom-field-control>\r\n        </ng-container>\r\n    </section>\r\n    <label class=\"clr-control-label\">{{ 'settings.roles' | translate }}</label>\r\n    <ng-select\r\n        [items]=\"allRoles$ | async\"\r\n        [multiple]=\"true\"\r\n        [hideSelected]=\"true\"\r\n        formControlName=\"roles\"\r\n        (change)=\"rolesChanged($event)\"\r\n        bindLabel=\"description\"\r\n    ></ng-select>\r\n\r\n    <ul class=\"nav\" role=\"tablist\">\r\n        <li role=\"presentation\" class=\"nav-item\" *ngFor=\"let channel of getAvailableChannels()\">\r\n            <button\r\n                [id]=\"channel.channelId\"\r\n                (click)=\"selectedChannelId = channel.channelId\"\r\n                class=\"btn btn-link nav-link\"\r\n                [class.active]=\"selectedChannelId === channel.channelId\"\r\n                [attr.aria-selected]=\"selectedChannelId === channel.channelId\"\r\n                type=\"button\"\r\n            >\r\n                {{ channel.channelCode | channelCodeToLabel | translate }}\r\n            </button>\r\n        </li>\r\n    </ul>\r\n    <vdr-permission-grid\r\n        [activePermissions]=\"getPermissionsForSelectedChannel()\"\r\n        [permissionDefinitions]=\"permissionDefinitions\"\r\n        [readonly]=\"true\"\r\n    ></vdr-permission-grid>\r\n</form>\r\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport { BaseDetailComponent, CustomFieldConfig, PermissionDefinition } from '@vendure/admin-ui/core';\nimport {\n    Administrator,\n    CreateAdministratorInput,\n    GetAdministrator,\n    LanguageCode,\n    Permission,\n    Role,\n    RoleFragment,\n    UpdateAdministratorInput,\n} from '@vendure/admin-ui/core';\nimport { NotificationService } from '@vendure/admin-ui/core';\nimport { DataService } from '@vendure/admin-ui/core';\nimport { ServerConfigService } from '@vendure/admin-ui/core';\nimport { CUSTOMER_ROLE_CODE } from '@vendure/common/lib/shared-constants';\nimport { Observable } from 'rxjs';\nimport { mergeMap, take } from 'rxjs/operators';\n\nexport interface PermissionsByChannel {\n    channelId: string;\n    channelCode: string;\n    permissions: { [K in Permission]: boolean };\n}\n\n@Component({\n    selector: 'vdr-admin-detail',\n    templateUrl: './admin-detail.component.html',\n    styleUrls: ['./admin-detail.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AdminDetailComponent\n    extends BaseDetailComponent<GetAdministrator.Administrator>\n    implements OnInit, OnDestroy {\n    customFields: CustomFieldConfig[];\n    administrator$: Observable<GetAdministrator.Administrator>;\n    permissionDefinitions: PermissionDefinition[];\n    allRoles$: Observable<Role.Fragment[]>;\n    selectedRoles: Role.Fragment[] = [];\n    detailForm: FormGroup;\n    selectedRolePermissions: { [channelId: string]: PermissionsByChannel } = {} as any;\n    selectedChannelId: string | null = null;\n\n    getAvailableChannels(): PermissionsByChannel[] {\n        return Object.values(this.selectedRolePermissions);\n    }\n\n    constructor(\n        router: Router,\n        route: ActivatedRoute,\n        serverConfigService: ServerConfigService,\n        private changeDetector: ChangeDetectorRef,\n        protected dataService: DataService,\n        private formBuilder: FormBuilder,\n        private notificationService: NotificationService,\n    ) {\n        super(route, router, serverConfigService, dataService);\n        this.customFields = this.getCustomFieldConfig('Administrator');\n        this.detailForm = this.formBuilder.group({\n            emailAddress: ['', Validators.required],\n            firstName: ['', Validators.required],\n            lastName: ['', Validators.required],\n            password: [''],\n            roles: [[]],\n            customFields: this.formBuilder.group(\n                this.customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\n            ),\n        });\n    }\n\n    ngOnInit() {\n        this.init();\n        this.administrator$ = this.entity$;\n        this.allRoles$ = this.dataService.administrator\n            .getRoles(999)\n            .mapStream(item => item.roles.items.filter(i => i.code !== CUSTOMER_ROLE_CODE));\n        this.dataService.client.userStatus().single$.subscribe(({ userStatus }) => {\n            if (!userStatus.permissions.includes(Permission.UpdateAdministrator)) {\n                const rolesSelect = this.detailForm.get('roles');\n                if (rolesSelect) {\n                    rolesSelect.disable();\n                }\n            }\n        });\n        this.permissionDefinitions = this.serverConfigService.getPermissionDefinitions();\n    }\n\n    ngOnDestroy(): void {\n        this.destroy();\n    }\n\n    customFieldIsSet(name: string): boolean {\n        return !!this.detailForm.get(['customFields', name]);\n    }\n\n    rolesChanged(roles: Role[]) {\n        this.buildPermissionsMap();\n    }\n\n    getPermissionsForSelectedChannel(): string[] {\n        function getActivePermissions(input: PermissionsByChannel['permissions']): string[] {\n            return Object.entries(input)\n                .filter(([permission, active]) => active)\n                .map(([permission, active]) => permission);\n        }\n        if (this.selectedChannelId) {\n            const selectedChannel = this.selectedRolePermissions[this.selectedChannelId];\n            if (selectedChannel) {\n                const permissionMap = this.selectedRolePermissions[this.selectedChannelId].permissions;\n                return getActivePermissions(permissionMap);\n            }\n        }\n        const channels = Object.values(this.selectedRolePermissions);\n        if (0 < channels.length) {\n            this.selectedChannelId = channels[0].channelId;\n            return getActivePermissions(channels[0].permissions);\n        }\n        return [];\n    }\n\n    create() {\n        const formValue = this.detailForm.value;\n        const administrator: CreateAdministratorInput = {\n            emailAddress: formValue.emailAddress,\n            firstName: formValue.firstName,\n            lastName: formValue.lastName,\n            password: formValue.password,\n            customFields: formValue.customFields,\n            roleIds: formValue.roles.map(role => role.id),\n        };\n        this.dataService.administrator.createAdministrator(administrator).subscribe(\n            data => {\n                this.notificationService.success(_('common.notify-create-success'), {\n                    entity: 'Administrator',\n                });\n                this.detailForm.markAsPristine();\n                this.changeDetector.markForCheck();\n                this.router.navigate(['../', data.createAdministrator.id], { relativeTo: this.route });\n            },\n            err => {\n                this.notificationService.error(_('common.notify-create-error'), {\n                    entity: 'Administrator',\n                });\n            },\n        );\n    }\n\n    save() {\n        this.administrator$\n            .pipe(\n                take(1),\n                mergeMap(({ id }) => {\n                    const formValue = this.detailForm.value;\n                    const administrator: UpdateAdministratorInput = {\n                        id,\n                        emailAddress: formValue.emailAddress,\n                        firstName: formValue.firstName,\n                        lastName: formValue.lastName,\n                        password: formValue.password,\n                        customFields: formValue.customFields,\n                        roleIds: formValue.roles.map(role => role.id),\n                    };\n                    return this.dataService.administrator.updateAdministrator(administrator);\n                }),\n            )\n            .subscribe(\n                data => {\n                    this.notificationService.success(_('common.notify-update-success'), {\n                        entity: 'Administrator',\n                    });\n                    this.detailForm.markAsPristine();\n                    this.changeDetector.markForCheck();\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-update-error'), {\n                        entity: 'Administrator',\n                    });\n                },\n            );\n    }\n\n    protected setFormValues(administrator: Administrator, languageCode: LanguageCode): void {\n        this.detailForm.patchValue({\n            emailAddress: administrator.emailAddress,\n            firstName: administrator.firstName,\n            lastName: administrator.lastName,\n            roles: administrator.user.roles,\n        });\n        if (this.customFields.length) {\n            const customFieldsGroup = this.detailForm.get('customFields') as FormGroup;\n\n            for (const fieldDef of this.customFields) {\n                const key = fieldDef.name;\n                const value = (administrator as any).customFields[key];\n                const control = customFieldsGroup.get(key);\n                if (control) {\n                    control.patchValue(value);\n                }\n            }\n        }\n        const passwordControl = this.detailForm.get('password');\n        if (passwordControl) {\n            if (!administrator.id) {\n                passwordControl.setValidators([Validators.required]);\n            } else {\n                passwordControl.setValidators([]);\n            }\n        }\n        this.buildPermissionsMap();\n    }\n\n    private buildPermissionsMap() {\n        const permissionsControl = this.detailForm.get('roles');\n        if (permissionsControl) {\n            const roles: RoleFragment[] = permissionsControl.value;\n            const channelIdPermissionsMap = new Map<string, Set<Permission>>();\n            const channelIdCodeMap = new Map<string, string>();\n\n            for (const role of roles) {\n                for (const channel of role.channels) {\n                    const channelPermissions = channelIdPermissionsMap.get(channel.id);\n                    const permissionSet = channelPermissions || new Set<Permission>();\n\n                    role.permissions.forEach(p => permissionSet.add(p));\n                    channelIdPermissionsMap.set(channel.id, permissionSet);\n                    channelIdCodeMap.set(channel.id, channel.code);\n                }\n            }\n\n            this.selectedRolePermissions = {} as any;\n            for (const channelId of Array.from(channelIdPermissionsMap.keys())) {\n                // tslint:disable-next-line:no-non-null-assertion\n                const permissionSet = channelIdPermissionsMap.get(channelId)!;\n                const permissionsHash: { [K in Permission]: boolean } = {} as any;\n                for (const def of this.serverConfigService.getPermissionDefinitions()) {\n                    permissionsHash[def.name] = permissionSet.has(def.name as Permission);\n                }\n                this.selectedRolePermissions[channelId] = {\n                    // tslint:disable:no-non-null-assertion\n                    channelId,\n                    channelCode: channelIdCodeMap.get(channelId)!,\n                    permissions: permissionsHash,\n                    // tslint:enable:no-non-null-assertion\n                };\n            }\n        }\n    }\n}\n","<vdr-action-bar>\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"administrator-list\"></vdr-action-bar-items>\r\n        <a class=\"btn btn-primary\" [routerLink]=\"['./create']\" *vdrIfPermissions=\"'CreateAdministrator'\">\r\n            <clr-icon shape=\"plus\"></clr-icon>\r\n            {{ 'admin.create-new-administrator' | translate }}\r\n        </a>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<vdr-data-table\r\n    [items]=\"items$ | async\"\r\n    [itemsPerPage]=\"itemsPerPage$ | async\"\r\n    [totalItems]=\"totalItems$ | async\"\r\n    [currentPage]=\"currentPage$ | async\"\r\n    (pageChange)=\"setPageNumber($event)\"\r\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\r\n>\r\n    <vdr-dt-column>{{ 'settings.first-name' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'settings.last-name' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'settings.email-address' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <ng-template let-administrator=\"item\">\r\n        <td class=\"left align-middle\">{{ administrator.firstName }}</td>\r\n        <td class=\"left align-middle\">{{ administrator.lastName }}</td>\r\n        <td class=\"left align-middle\">{{ administrator.emailAddress }}</td>\r\n        <td class=\"right align-middle\">\r\n            <vdr-table-row-action\r\n                iconShape=\"edit\"\r\n                [label]=\"'common.edit' | translate\"\r\n                [linkTo]=\"['./', administrator.id]\"\r\n            ></vdr-table-row-action>\r\n        </td>\r\n        <td>\r\n            <vdr-dropdown>\r\n                <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger>\r\n                    {{ 'common.actions' | translate }}\r\n                    <clr-icon shape=\"caret down\"></clr-icon>\r\n                </button>\r\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                    <button\r\n                        type=\"button\"\r\n                        class=\"delete-button\"\r\n                        (click)=\"deleteAdministrator(administrator)\"\r\n                        [disabled]=\"!('DeleteAdministrator' | hasPermission)\"\r\n                        vdrDropdownItem\r\n                    >\r\n                        <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                        {{ 'common.delete' | translate }}\r\n                    </button>\r\n                </vdr-dropdown-menu>\r\n            </vdr-dropdown>\r\n        </td>\r\n    </ng-template>\r\n</vdr-data-table>\r\n","import { Component } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    BaseListComponent,\r\n    DataService,\r\n    GetAdministrators,\r\n    ModalService,\r\n    NotificationService,\r\n} from '@vendure/admin-ui/core';\r\nimport { EMPTY } from 'rxjs';\r\nimport { switchMap } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'vdr-administrator-list',\r\n    templateUrl: './administrator-list.component.html',\r\n    styleUrls: ['./administrator-list.component.scss'],\r\n})\r\nexport class AdministratorListComponent extends BaseListComponent<\r\n    GetAdministrators.Query,\r\n    GetAdministrators.Items\r\n> {\r\n    constructor(\r\n        private dataService: DataService,\r\n        router: Router,\r\n        route: ActivatedRoute,\r\n        private modalService: ModalService,\r\n        private notificationService: NotificationService,\r\n    ) {\r\n        super(router, route);\r\n        super.setQueryFn(\r\n            (...args: any[]) => this.dataService.administrator.getAdministrators(...args),\r\n            (data) => data.administrators,\r\n        );\r\n    }\r\n\r\n    deleteAdministrator(administrator: GetAdministrators.Items) {\r\n        return this.modalService\r\n            .dialog({\r\n                title: _('catalog.confirm-delete-administrator'),\r\n                body: `${administrator.firstName} ${administrator.lastName}`,\r\n                buttons: [\r\n                    { type: 'secondary', label: _('common.cancel') },\r\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\r\n                ],\r\n            })\r\n            .pipe(\r\n                switchMap((res) =>\r\n                    res ? this.dataService.administrator.deleteAdministrator(administrator.id) : EMPTY,\r\n                ),\r\n            )\r\n            .subscribe(\r\n                () => {\r\n                    this.notificationService.success(_('common.notify-delete-success'), {\r\n                        entity: 'Administrator',\r\n                    });\r\n                    this.refresh();\r\n                },\r\n                (err) => {\r\n                    this.notificationService.error(_('common.notify-delete-error'), {\r\n                        entity: 'Administrator',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n}\r\n","<vdr-action-bar>\r\n    <vdr-ab-left>\r\n        <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\r\n    </vdr-ab-left>\r\n\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"channel-detail\"></vdr-action-bar-items>\r\n        <button\r\n            class=\"btn btn-primary\"\r\n            *ngIf=\"isNew$ | async; else updateButton\"\r\n            (click)=\"create()\"\r\n            [disabled]=\"!saveButtonEnabled()\"\r\n        >\r\n            {{ 'common.create' | translate }}\r\n        </button>\r\n        <ng-template #updateButton>\r\n            <button\r\n                class=\"btn btn-primary\"\r\n                (click)=\"save()\"\r\n                *vdrIfPermissions=\"['SuperAdmin', 'UpdateChannel']\"\r\n                [disabled]=\"!saveButtonEnabled()\"\r\n            >\r\n                {{ 'common.update' | translate }}\r\n            </button>\r\n        </ng-template>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<form class=\"form\" [formGroup]=\"detailForm\">\r\n    <vdr-form-field [label]=\"'common.code' | translate\" for=\"code\">\r\n        <input id=\"code\" type=\"text\" [readonly]=\"!(updatePermission | hasPermission)\" formControlName=\"code\" />\r\n    </vdr-form-field>\r\n    <vdr-form-field [label]=\"'settings.channel-token' | translate\" for=\"token\">\r\n        <input id=\"token\" type=\"text\" [readonly]=\"!(updatePermission | hasPermission)\" formControlName=\"token\" />\r\n    </vdr-form-field>\r\n    <vdr-form-field [label]=\"'settings.currency' | translate\" for=\"defaultTaxZoneId\">\r\n        <select\r\n            clrSelect\r\n            name=\"currencyCode\"\r\n            formControlName=\"currencyCode\"\r\n            [vdrDisabled]=\"!(updatePermission | hasPermission)\"\r\n        >\r\n            <option *ngFor=\"let code of currencyCodes\" [value]=\"code\">{{ code | localeCurrencyName }}</option>\r\n        </select>\r\n    </vdr-form-field>\r\n    <vdr-form-field [label]=\"'common.default-language' | translate\" for=\"defaultLanguage\">\r\n        <select\r\n            clrSelect\r\n            name=\"defaultLanguageCode\"\r\n            formControlName=\"defaultLanguageCode\"\r\n            [vdrDisabled]=\"!(updatePermission | hasPermission)\"\r\n        >\r\n            <option *ngFor=\"let languageCode of availableLanguageCodes$ | async\" [value]=\"languageCode\">\r\n                {{ languageCode | localeLanguageName }} ({{ languageCode | uppercase }})\r\n            </option>\r\n        </select>\r\n    </vdr-form-field>\r\n    <vdr-form-field [label]=\"'settings.prices-include-tax' | translate\" for=\"pricesIncludeTax\">\r\n        <clr-toggle-wrapper>\r\n            <input\r\n                type=\"checkbox\"\r\n                clrToggle\r\n                id=\"pricesIncludeTax\"\r\n                formControlName=\"pricesIncludeTax\"\r\n                [vdrDisabled]=\"!(updatePermission | hasPermission)\"\r\n            />\r\n        </clr-toggle-wrapper>\r\n    </vdr-form-field>\r\n    <vdr-form-field [label]=\"'settings.default-tax-zone' | translate\" for=\"defaultTaxZoneId\">\r\n        <select\r\n            clrSelect\r\n            name=\"defaultTaxZoneId\"\r\n            formControlName=\"defaultTaxZoneId\"\r\n            [vdrDisabled]=\"!(updatePermission | hasPermission)\"\r\n        >\r\n            <option selected value style=\"display: none\"></option>\r\n            <option *ngFor=\"let zone of zones$ | async\" [value]=\"zone.id\">{{ zone.name }}</option>\r\n        </select>\r\n    </vdr-form-field>\r\n    <clr-alert\r\n        *ngIf=\"detailForm.value.code && !detailForm.value.defaultTaxZoneId\"\r\n        clrAlertType=\"danger\"\r\n        [clrAlertClosable]=\"false\"\r\n    >\r\n        <clr-alert-item>\r\n            <span class=\"alert-text\">\r\n                {{ 'error.no-default-tax-zone-set' | translate }}\r\n            </span>\r\n        </clr-alert-item>\r\n    </clr-alert>\r\n\r\n    <vdr-form-field [label]=\"'settings.default-shipping-zone' | translate\" for=\"defaultShippingZoneId\">\r\n        <select\r\n            clrSelect\r\n            name=\"defaultShippingZoneId\"\r\n            formControlName=\"defaultShippingZoneId\"\r\n            [vdrDisabled]=\"!(updatePermission | hasPermission)\"\r\n        >\r\n            <option selected value style=\"display: none\"></option>            \r\n            <option *ngFor=\"let zone of zones$ | async\" [value]=\"zone.id\">{{ zone.name }}</option>\r\n        </select>\r\n    </vdr-form-field>\r\n    <clr-alert\r\n        *ngIf=\"detailForm.value.code && !detailForm.value.defaultShippingZoneId\"\r\n        clrAlertType=\"warning\"\r\n        [clrAlertClosable]=\"false\"\r\n    >\r\n        <clr-alert-item>\r\n            <span class=\"alert-text\">\r\n                {{ 'error.no-default-shipping-zone-set' | translate }}\r\n            </span>\r\n        </clr-alert-item>\r\n    </clr-alert>\r\n\r\n    <section formGroupName=\"customFields\" *ngIf=\"customFields.length\">\r\n        <label>{{ 'common.custom-fields' | translate }}</label>\r\n        <ng-container *ngFor=\"let customField of customFields\">\r\n            <vdr-custom-field-control\r\n                *ngIf=\"customFieldIsSet(customField.name)\"\r\n                entityName=\"Channel\"\r\n                [customFieldsFormGroup]=\"detailForm.get('customFields')\"\r\n                [customField]=\"customField\"\r\n            ></vdr-custom-field-control>\r\n        </ng-container>\r\n    </section>\r\n</form>\r\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport { BaseDetailComponent, CustomFieldConfig, Permission } from '@vendure/admin-ui/core';\r\nimport {\r\n    Channel,\r\n    CreateChannelInput,\r\n    CurrencyCode,\r\n    GetZones,\r\n    LanguageCode,\r\n    UpdateChannelInput,\r\n} from '@vendure/admin-ui/core';\r\nimport { getDefaultUiLanguage } from '@vendure/admin-ui/core';\r\nimport { NotificationService } from '@vendure/admin-ui/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\nimport { ServerConfigService } from '@vendure/admin-ui/core';\r\nimport { DEFAULT_CHANNEL_CODE } from '@vendure/common/lib/shared-constants';\r\nimport { Observable } from 'rxjs';\r\nimport { map, mergeMap, take } from 'rxjs/operators';\r\n@Component({\r\n    selector: 'vdr-channel-detail',\r\n    templateUrl: './channel-detail.component.html',\r\n    styleUrls: ['./channel-detail.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ChannelDetailComponent\r\n    extends BaseDetailComponent<Channel.Fragment>\r\n    implements OnInit, OnDestroy {\r\n    customFields: CustomFieldConfig[];\r\n    zones$: Observable<GetZones.Zones[]>;\r\n    detailForm: FormGroup;\r\n    currencyCodes = Object.values(CurrencyCode);\r\n    availableLanguageCodes$: Observable<LanguageCode[]>;\r\n    readonly updatePermission = [Permission.SuperAdmin, Permission.UpdateChannel, Permission.CreateChannel];\r\n\r\n    constructor(\r\n        router: Router,\r\n        route: ActivatedRoute,\r\n        protected serverConfigService: ServerConfigService,\r\n        private changeDetector: ChangeDetectorRef,\r\n        protected dataService: DataService,\r\n        private formBuilder: FormBuilder,\r\n        private notificationService: NotificationService,\r\n    ) {\r\n        super(route, router, serverConfigService, dataService);\r\n        this.customFields = this.getCustomFieldConfig('Channel');\r\n        this.detailForm = this.formBuilder.group({\r\n            code: ['', Validators.required],\r\n            token: ['', Validators.required],\r\n            pricesIncludeTax: [false],\r\n            currencyCode: [''],\r\n            defaultShippingZoneId: ['', Validators.required],\r\n            defaultLanguageCode: [],\r\n            defaultTaxZoneId: ['', Validators.required],\r\n            customFields: this.formBuilder.group(\r\n                this.customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\r\n            ),\r\n        });\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.init();\r\n        this.zones$ = this.dataService.settings.getZones().mapSingle(data => data.zones);\r\n        this.availableLanguageCodes$ = this.serverConfigService.getAvailableLanguages();\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.destroy();\r\n    }\r\n\r\n    customFieldIsSet(name: string): boolean {\r\n        return !!this.detailForm.get(['customFields', name]);\r\n    }\r\n\r\n    saveButtonEnabled(): boolean {\r\n        return this.detailForm.dirty && this.detailForm.valid;\r\n    }\r\n\r\n    create() {\r\n        if (!this.detailForm.dirty) {\r\n            return;\r\n        }\r\n        const formValue = this.detailForm.value;\r\n        const input: CreateChannelInput = {\r\n            code: formValue.code,\r\n            token: formValue.token,\r\n            defaultLanguageCode: formValue.defaultLanguageCode,\r\n            pricesIncludeTax: formValue.pricesIncludeTax,\r\n            currencyCode: formValue.currencyCode,\r\n            defaultShippingZoneId: formValue.defaultShippingZoneId,\r\n            defaultTaxZoneId: formValue.defaultTaxZoneId,\r\n            customFields: formValue.customFields,\r\n        };\r\n        this.dataService.settings\r\n            .createChannel(input)\r\n            .pipe(\r\n                mergeMap(({ createChannel }) =>\r\n                    this.dataService.auth.currentUser().single$.pipe(\r\n                        map(({ me }) => ({\r\n                            me,\r\n                            createChannel,\r\n                        })),\r\n                    ),\r\n                ),\r\n                mergeMap(({ me, createChannel }) =>\r\n                    // tslint:disable-next-line:no-non-null-assertion\r\n                    this.dataService.client.updateUserChannels(me!.channels).pipe(map(() => createChannel)),\r\n                ),\r\n            )\r\n            .subscribe(data => {\r\n                switch (data.__typename) {\r\n                    case 'Channel':\r\n                        this.notificationService.success(_('common.notify-create-success'), {\r\n                            entity: 'Channel',\r\n                        });\r\n                        this.detailForm.markAsPristine();\r\n                        this.changeDetector.markForCheck();\r\n                        this.router.navigate(['../', data.id], { relativeTo: this.route });\r\n                        break;\r\n                    case 'LanguageNotAvailableError':\r\n                        this.notificationService.error(data.message);\r\n                        break;\r\n                }\r\n            });\r\n    }\r\n\r\n    save() {\r\n        if (!this.detailForm.dirty) {\r\n            return;\r\n        }\r\n        const formValue = this.detailForm.value;\r\n        this.entity$\r\n            .pipe(\r\n                take(1),\r\n                mergeMap(channel => {\r\n                    const input = {\r\n                        id: channel.id,\r\n                        code: formValue.code,\r\n                        token: formValue.token,\r\n                        pricesIncludeTax: formValue.pricesIncludeTax,\r\n                        currencyCode: formValue.currencyCode,\r\n                        defaultShippingZoneId: formValue.defaultShippingZoneId,\r\n                        defaultLanguageCode: formValue.defaultLanguageCode,\r\n                        defaultTaxZoneId: formValue.defaultTaxZoneId,\r\n                        customFields: formValue.customFields,\r\n                    } as UpdateChannelInput;\r\n                    return this.dataService.settings.updateChannel(input);\r\n                }),\r\n            )\r\n            .subscribe(({ updateChannel }) => {\r\n                switch (updateChannel.__typename) {\r\n                    case 'Channel':\r\n                        this.notificationService.success(_('common.notify-update-success'), {\r\n                            entity: 'Channel',\r\n                        });\r\n                        this.detailForm.markAsPristine();\r\n                        this.changeDetector.markForCheck();\r\n                        break;\r\n                    case 'LanguageNotAvailableError':\r\n                        this.notificationService.error(updateChannel.message);\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Update the form values when the entity changes.\r\n     */\r\n    protected setFormValues(entity: Channel.Fragment, languageCode: LanguageCode): void {\r\n        this.detailForm.patchValue({\r\n            code: entity.code,\r\n            token: entity.token || this.generateToken(),\r\n            pricesIncludeTax: entity.pricesIncludeTax,\r\n            currencyCode: entity.currencyCode,\r\n            defaultShippingZoneId: entity.defaultShippingZone ? entity.defaultShippingZone.id : '',\r\n            defaultLanguageCode: entity.defaultLanguageCode,\r\n            defaultTaxZoneId: entity.defaultTaxZone ? entity.defaultTaxZone.id : '',\r\n        });\r\n        if (this.customFields.length) {\r\n            const customFieldsGroup = this.detailForm.get('customFields') as FormGroup;\r\n\r\n            for (const fieldDef of this.customFields) {\r\n                const key = fieldDef.name;\r\n                const value = (entity as any).customFields[key];\r\n                const control = customFieldsGroup.get(key);\r\n                if (control) {\r\n                    control.patchValue(value);\r\n                }\r\n            }\r\n        }\r\n        if (entity.code === DEFAULT_CHANNEL_CODE) {\r\n            const codeControl = this.detailForm.get('code');\r\n            if (codeControl) {\r\n                codeControl.disable();\r\n            }\r\n        }\r\n    }\r\n\r\n    private generateToken(): string {\r\n        const randomString = () => Math.random().toString(36).substr(3, 10);\r\n        return `${randomString()}${randomString()}`;\r\n    }\r\n}\r\n","<vdr-action-bar>\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"channel-list\"></vdr-action-bar-items>\r\n        <a class=\"btn btn-primary\" [routerLink]=\"['./create']\" *vdrIfPermissions=\"'SuperAdmin'\">\r\n            <clr-icon shape=\"plus\"></clr-icon>\r\n            {{ 'settings.create-new-channel' | translate }}\r\n        </a>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<vdr-data-table [items]=\"channels$ | async\">\r\n    <vdr-dt-column>{{ 'common.code' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <ng-template let-channel=\"item\">\r\n        <td class=\"left align-middle\">\r\n            <vdr-channel-badge [channelCode]=\"channel.code\"></vdr-channel-badge>\r\n            {{ channel.code | channelCodeToLabel | translate }}\r\n        </td>\r\n        <td class=\"right align-middle\">\r\n            <vdr-table-row-action\r\n                iconShape=\"edit\"\r\n                [label]=\"'common.edit' | translate\"\r\n                [linkTo]=\"['./', channel.id]\"\r\n            ></vdr-table-row-action>\r\n        </td>\r\n        <td class=\"right align-middle\">\r\n            <vdr-dropdown>\r\n                <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger [disabled]=\"isDefaultChannel(channel.code)\">\r\n                    {{ 'common.actions' | translate }}\r\n                    <clr-icon shape=\"caret down\"></clr-icon>\r\n                </button>\r\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                    <button\r\n                        type=\"button\"\r\n                        class=\"delete-button\"\r\n                        (click)=\"deleteChannel(channel.id)\"\r\n                        [disabled]=\"!(['SuperAdmin', 'DeleteChannel'] | hasPermission)\"\r\n                        vdrDropdownItem\r\n                    >\r\n                        <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                        {{ 'common.delete' | translate }}\r\n                    </button>\r\n                </vdr-dropdown-menu>\r\n            </vdr-dropdown>\r\n        </td>\r\n    </ng-template>\r\n</vdr-data-table>\r\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport { DEFAULT_CHANNEL_CODE } from '@vendure/common/lib/shared-constants';\r\nimport { EMPTY, Observable, Subject } from 'rxjs';\r\nimport { mergeMap, startWith, switchMap } from 'rxjs/operators';\r\n\r\nimport { Channel } from '@vendure/admin-ui/core';\r\nimport { NotificationService } from '@vendure/admin-ui/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\nimport { ModalService } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-channel-list',\r\n    templateUrl: './channel-list.component.html',\r\n    styleUrls: ['./channel-list.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ChannelListComponent {\r\n    channels$: Observable<Channel.Fragment[]>;\r\n    private refresh$ = new Subject();\r\n\r\n    constructor(\r\n        private dataService: DataService,\r\n        private modalService: ModalService,\r\n        private notificationService: NotificationService,\r\n    ) {\r\n        this.channels$ = this.refresh$.pipe(\r\n            startWith(1),\r\n            switchMap(() => this.dataService.settings.getChannels().mapStream(data => data.channels)),\r\n        );\r\n    }\r\n\r\n    isDefaultChannel(channelCode: string): boolean {\r\n        return channelCode === DEFAULT_CHANNEL_CODE;\r\n    }\r\n\r\n    deleteChannel(id: string) {\r\n        this.modalService\r\n            .dialog({\r\n                title: _('catalog.confirm-delete-channel'),\r\n                buttons: [\r\n                    { type: 'secondary', label: _('common.cancel') },\r\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\r\n                ],\r\n            })\r\n            .pipe(\r\n                switchMap(response => (response ? this.dataService.settings.deleteChannel(id) : EMPTY)),\r\n                mergeMap(() => this.dataService.auth.currentUser().single$),\r\n                // tslint:disable-next-line:no-non-null-assertion\r\n                mergeMap(data => this.dataService.client.updateUserChannels(data.me!.channels)),\r\n            )\r\n            .subscribe(\r\n                () => {\r\n                    this.notificationService.success(_('common.notify-delete-success'), {\r\n                        entity: 'Channel',\r\n                    });\r\n                    this.refresh$.next(1);\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-delete-error'), {\r\n                        entity: 'Channel',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n}\r\n","<vdr-action-bar>\r\n    <vdr-ab-left>\r\n        <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\r\n        <vdr-language-selector\r\n            [disabled]=\"isNew$ | async\"\r\n            [availableLanguageCodes]=\"availableLanguages$ | async\"\r\n            [currentLanguageCode]=\"languageCode$ | async\"\r\n            (languageCodeChange)=\"setLanguage($event)\"\r\n        ></vdr-language-selector>\r\n    </vdr-ab-left>\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"country-detail\"></vdr-action-bar-items>\r\n        <button\r\n            class=\"btn btn-primary\"\r\n            *ngIf=\"isNew$ | async; else updateButton\"\r\n            (click)=\"create()\"\r\n            [disabled]=\"detailForm.invalid || detailForm.pristine\"\r\n        >\r\n            {{ 'common.create' | translate }}\r\n        </button>\r\n        <ng-template #updateButton>\r\n            <button\r\n                class=\"btn btn-primary\"\r\n                *vdrIfPermissions=\"updatePermission\"\r\n                (click)=\"save()\"\r\n                [disabled]=\"detailForm.invalid || detailForm.pristine\"\r\n            >\r\n                {{ 'common.update' | translate }}\r\n            </button>\r\n        </ng-template>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<form class=\"form\" [formGroup]=\"detailForm\">\r\n    <vdr-form-field [label]=\"'common.code' | translate\" for=\"code\">\r\n        <input\r\n            id=\"code\"\r\n            type=\"text\"\r\n            formControlName=\"code\"\r\n            [readonly]=\"!(updatePermission | hasPermission)\"\r\n        />\r\n    </vdr-form-field>\r\n    <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\r\n        <input\r\n            id=\"name\"\r\n            type=\"text\"\r\n            formControlName=\"name\"\r\n            [readonly]=\"!(updatePermission | hasPermission)\"\r\n        />\r\n    </vdr-form-field>\r\n    <vdr-form-field [label]=\"'common.enabled' | translate\" for=\"enabled\">\r\n        <clr-toggle-wrapper>\r\n            <input\r\n                type=\"checkbox\"\r\n                clrToggle\r\n                id=\"enabled\"\r\n                formControlName=\"enabled\"\r\n                [vdrDisabled]=\"!(updatePermission | hasPermission)\"\r\n            />\r\n        </clr-toggle-wrapper>\r\n    </vdr-form-field>\r\n</form>\r\n","import { ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    BaseDetailComponent,\n    Country,\n    CreateCountryInput,\n    createUpdatedTranslatable,\n    DataService,\n    findTranslation,\n    LanguageCode,\n    NotificationService,\n    Permission,\n    ServerConfigService,\n    UpdateCountryInput,\n} from '@vendure/admin-ui/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { mergeMap, take } from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-country-detail',\n    templateUrl: './country-detail.component.html',\n    styleUrls: ['./country-detail.component.scss'],\n})\nexport class CountryDetailComponent\n    extends BaseDetailComponent<Country.Fragment>\n    implements OnInit, OnDestroy {\n    country$: Observable<Country.Fragment>;\n    detailForm: FormGroup;\n    readonly updatePermission = [Permission.UpdateSettings, Permission.UpdateCountry];\n\n    constructor(\n        router: Router,\n        route: ActivatedRoute,\n        serverConfigService: ServerConfigService,\n        private changeDetector: ChangeDetectorRef,\n        protected dataService: DataService,\n        private formBuilder: FormBuilder,\n        private notificationService: NotificationService,\n    ) {\n        super(route, router, serverConfigService, dataService);\n        this.detailForm = this.formBuilder.group({\n            code: ['', Validators.required],\n            name: ['', Validators.required],\n            enabled: [true],\n        });\n    }\n\n    ngOnInit() {\n        this.init();\n        this.country$ = this.entity$;\n    }\n\n    ngOnDestroy(): void {\n        this.destroy();\n    }\n\n    create() {\n        if (!this.detailForm.dirty) {\n            return;\n        }\n        combineLatest(this.country$, this.languageCode$)\n            .pipe(\n                take(1),\n                mergeMap(([country, languageCode]) => {\n                    const formValue = this.detailForm.value;\n                    const input: CreateCountryInput = createUpdatedTranslatable({\n                        translatable: country,\n                        updatedFields: formValue,\n                        languageCode,\n                        defaultTranslation: {\n                            name: formValue.name,\n                            languageCode,\n                        },\n                    });\n                    return this.dataService.settings.createCountry(input);\n                }),\n            )\n            .subscribe(\n                data => {\n                    this.notificationService.success(_('common.notify-create-success'), {\n                        entity: 'Country',\n                    });\n                    this.detailForm.markAsPristine();\n                    this.changeDetector.markForCheck();\n                    this.router.navigate(['../', data.createCountry.id], { relativeTo: this.route });\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-create-error'), {\n                        entity: 'Country',\n                    });\n                },\n            );\n    }\n\n    save() {\n        combineLatest(this.country$, this.languageCode$)\n            .pipe(\n                take(1),\n                mergeMap(([country, languageCode]) => {\n                    const formValue = this.detailForm.value;\n                    const input: UpdateCountryInput = createUpdatedTranslatable({\n                        translatable: country,\n                        updatedFields: formValue,\n                        languageCode,\n                        defaultTranslation: {\n                            name: formValue.name,\n                            languageCode,\n                        },\n                    });\n                    return this.dataService.settings.updateCountry(input);\n                }),\n            )\n            .subscribe(\n                data => {\n                    this.notificationService.success(_('common.notify-update-success'), {\n                        entity: 'Country',\n                    });\n                    this.detailForm.markAsPristine();\n                    this.changeDetector.markForCheck();\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-update-error'), {\n                        entity: 'Country',\n                    });\n                },\n            );\n    }\n\n    protected setFormValues(country: Country, languageCode: LanguageCode): void {\n        const currentTranslation = findTranslation(country, languageCode);\n\n        this.detailForm.patchValue({\n            code: country.code,\n            name: currentTranslation ? currentTranslation.name : '',\n            enabled: country.enabled,\n        });\n    }\n}\n","<vdr-action-bar>\r\n    <vdr-ab-left>\r\n        <input\r\n            type=\"text\"\r\n            name=\"searchTerm\"\r\n            [formControl]=\"searchTerm\"\r\n            [placeholder]=\"'settings.search-country-by-name' | translate\"\r\n            class=\"search-input\"\r\n        />\r\n    </vdr-ab-left>\r\n\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"country-list\"></vdr-action-bar-items>\r\n        <a class=\"btn btn-primary\" [routerLink]=\"['./create']\" *vdrIfPermissions=\"['CreateSettings', 'CreateCountry']\">\r\n            <clr-icon shape=\"plus\"></clr-icon>\r\n            {{ 'settings.create-new-country' | translate }}\r\n        </a>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<vdr-data-table\r\n    [items]=\"countriesWithZones$ | async\"\r\n>\r\n    <vdr-dt-column>{{ 'common.code' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column [expand]=\"true\">{{ 'common.name' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'settings.zone' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'common.enabled' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <ng-template let-country=\"item\">\r\n        <td class=\"left align-middle\">{{ country.code }}</td>\r\n        <td class=\"left align-middle\">{{ country.name }}</td>\r\n        <td class=\"left align-middle\">\r\n            <a [routerLink]=\"['/settings', 'zones', { contents: zone.id }]\" *ngFor=\"let zone of country.zones\">\r\n            <vdr-chip [colorFrom]=\"zone.name\">{{ zone.name }}</vdr-chip>\r\n            </a>\r\n        </td>\r\n        <td class=\"left align-middle\">\r\n            <clr-icon\r\n                [class.is-success]=\"country.enabled\"\r\n                [attr.shape]=\"country.enabled ? 'check' : 'times'\"\r\n            ></clr-icon>\r\n        </td>\r\n        <td class=\"right align-middle\">\r\n            <vdr-table-row-action\r\n                iconShape=\"edit\"\r\n                [label]=\"'common.edit' | translate\"\r\n                [linkTo]=\"['./', country.id]\"\r\n            ></vdr-table-row-action>\r\n        </td>\r\n        <td class=\"right align-middle\">\r\n            <vdr-dropdown>\r\n                <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger>\r\n                    {{ 'common.actions' | translate }}\r\n                    <clr-icon shape=\"caret down\"></clr-icon>\r\n                </button>\r\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                    <button\r\n                        type=\"button\"\r\n                        class=\"delete-button\"\r\n                        (click)=\"deleteCountry(country.id)\"\r\n                        vdrDropdownItem\r\n                        [disabled]=\"!(['DeleteSettings', 'DeleteCountry'] | hasPermission)\"\r\n                    >\r\n                        <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                        {{ 'common.delete' | translate }}\r\n                    </button>\r\n                </vdr-dropdown-menu>\r\n            </vdr-dropdown>\r\n        </td>\r\n    </ng-template>\r\n</vdr-data-table>\r\n","import { ChangeDetectionStrategy, Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    DataService,\r\n    DeletionResult,\r\n    GetCountryList,\r\n    GetZones,\r\n    ModalService,\r\n    NotificationService,\r\n    Zone,\r\n} from '@vendure/admin-ui/core';\r\nimport { combineLatest, EMPTY, Observable, Subject } from 'rxjs';\r\nimport { map, startWith, switchMap, tap } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'vdr-country-list',\r\n    templateUrl: './country-list.component.html',\r\n    styleUrls: ['./country-list.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CountryListComponent implements OnInit, OnDestroy {\r\n    searchTerm = new FormControl('');\r\n    countriesWithZones$: Observable<Array<GetCountryList.Items & { zones: GetZones.Zones[] }>>;\r\n    zones$: Observable<GetZones.Zones[]>;\r\n\r\n    private countries: GetCountryList.Items[] = [];\r\n    private destroy$ = new Subject();\r\n\r\n    constructor(\r\n        private dataService: DataService,\r\n        private notificationService: NotificationService,\r\n        private modalService: ModalService,\r\n    ) {}\r\n\r\n    ngOnInit() {\r\n        const countries$ = this.searchTerm.valueChanges.pipe(\r\n            startWith(null),\r\n            switchMap(term => this.dataService.settings.getCountries(999, 0, term).stream$),\r\n            tap(data => (this.countries = data.countries.items)),\r\n            map(data => data.countries.items),\r\n        );\r\n        this.zones$ = this.dataService.settings.getZones().mapStream(data => data.zones);\r\n        this.countriesWithZones$ = combineLatest(countries$, this.zones$).pipe(\r\n            map(([countries, zones]) => {\r\n                return countries.map(country => ({\r\n                    ...country,\r\n                    zones: zones.filter(z => !!z.members.find(c => c.id === country.id)),\r\n                }));\r\n            }),\r\n        );\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.destroy$.next();\r\n        this.destroy$.complete();\r\n    }\r\n\r\n    deleteCountry(countryId: string) {\r\n        this.modalService\r\n            .dialog({\r\n                title: _('catalog.confirm-delete-country'),\r\n                buttons: [\r\n                    { type: 'secondary', label: _('common.cancel') },\r\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\r\n                ],\r\n            })\r\n            .pipe(\r\n                switchMap(response =>\r\n                    response ? this.dataService.settings.deleteCountry(countryId) : EMPTY,\r\n                ),\r\n            )\r\n            .subscribe(\r\n                response => {\r\n                    if (response.deleteCountry.result === DeletionResult.DELETED) {\r\n                        this.notificationService.success(_('common.notify-delete-success'), {\r\n                            entity: 'Country',\r\n                        });\r\n                        this.dataService.settings.getCountries(999, 0).single$.subscribe();\r\n                    } else {\r\n                        this.notificationService.error(response.deleteCountry.message || '');\r\n                    }\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-delete-error'), {\r\n                        entity: 'Country',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    private isZone(input: Zone.Fragment | { name: string } | string): input is Zone.Fragment {\r\n        return input.hasOwnProperty('id');\r\n    }\r\n}\r\n","<vdr-action-bar>\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"global-settings-detail\"></vdr-action-bar-items>\r\n        <button\r\n            class=\"btn btn-primary\"\r\n            (click)=\"save()\"\r\n            *vdrIfPermissions=\"updatePermission\"\r\n            [disabled]=\"detailForm.invalid || detailForm.pristine\"\r\n        >\r\n            {{ 'common.update' | translate }}\r\n        </button>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<form class=\"form\" [formGroup]=\"detailForm\">\r\n    <vdr-form-field [label]=\"'common.available-languages' | translate\" for=\"availableLanguages\">\r\n        <ng-select\r\n            [items]=\"languageCodes\"\r\n            [addTag]=\"false\"\r\n            [hideSelected]=\"true\"\r\n            multiple=\"true\"\r\n            appendTo=\"body\"\r\n            formControlName=\"availableLanguages\"\r\n        >\r\n            <ng-template ng-label-tmp let-item=\"item\" let-clear=\"clear\">\r\n                <span class=\"ng-value-icon left\" (click)=\"clear.call(null, item)\" aria-hidden=\"true\">\r\n                    ×\r\n                </span>\r\n                <span class=\"ng-value-label\">{{ item | localeLanguageName }} ({{ item }})</span>\r\n            </ng-template>\r\n            <ng-template ng-option-tmp let-item=\"item\">\r\n                {{ item | localeLanguageName }} ({{ item }})\r\n            </ng-template>\r\n        </ng-select>\r\n    </vdr-form-field>\r\n    <vdr-form-field\r\n        [label]=\"'settings.global-out-of-stock-threshold' | translate\"\r\n        for=\"outOfStockThreshold\"\r\n        [tooltip]=\"'settings.global-out-of-stock-threshold-tooltip' | translate\"\r\n    >\r\n        <input\r\n            id=\"outOfStockThreshold\"\r\n            type=\"number\"\r\n            formControlName=\"outOfStockThreshold\"\r\n            [readonly]=\"!(updatePermission | hasPermission)\"\r\n        />\r\n    </vdr-form-field>\r\n    <vdr-form-field\r\n        [label]=\"'settings.track-inventory-default' | translate\"\r\n        for=\"enabled\"\r\n        [tooltip]=\"'catalog.track-inventory-tooltip' | translate\"\r\n    >\r\n        <clr-toggle-wrapper>\r\n            <input\r\n                type=\"checkbox\"\r\n                clrToggle\r\n                name=\"enabled\"\r\n                formControlName=\"trackInventory\"\r\n                [vdrDisabled]=\"!(updatePermission | hasPermission)\"\r\n            />\r\n        </clr-toggle-wrapper>\r\n    </vdr-form-field>\r\n    <section formGroupName=\"customFields\" *ngIf=\"customFields.length\">\r\n        <label>{{ 'common.custom-fields' | translate }}</label>\r\n        <ng-container *ngFor=\"let customField of customFields\">\r\n            <vdr-custom-field-control\r\n                *ngIf=\"customFieldIsSet(customField.name)\"\r\n                entityName=\"GlobalSettings\"\r\n                [customFieldsFormGroup]=\"detailForm.get('customFields')\"\r\n                [customField]=\"customField\"\r\n            ></vdr-custom-field-control>\r\n        </ng-container>\r\n    </section>\r\n</form>\r\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    BaseDetailComponent,\r\n    CustomFieldConfig,\r\n    DataService,\r\n    GlobalSettings,\r\n    LanguageCode,\r\n    NotificationService,\r\n    Permission,\r\n    ServerConfigService,\r\n} from '@vendure/admin-ui/core';\r\nimport { switchMap, tap, withLatestFrom } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'vdr-global-settings',\r\n    templateUrl: './global-settings.component.html',\r\n    styleUrls: ['./global-settings.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class GlobalSettingsComponent extends BaseDetailComponent<GlobalSettings> implements OnInit {\r\n    detailForm: FormGroup;\r\n    customFields: CustomFieldConfig[];\r\n    languageCodes = Object.values(LanguageCode);\r\n    readonly updatePermission = [Permission.UpdateSettings, Permission.UpdateGlobalSettings];\r\n\r\n    constructor(\r\n        router: Router,\r\n        route: ActivatedRoute,\r\n        serverConfigService: ServerConfigService,\r\n        private changeDetector: ChangeDetectorRef,\r\n        protected dataService: DataService,\r\n        private formBuilder: FormBuilder,\r\n        private notificationService: NotificationService,\r\n    ) {\r\n        super(route, router, serverConfigService, dataService);\r\n        this.customFields = this.getCustomFieldConfig('GlobalSettings');\r\n        this.detailForm = this.formBuilder.group({\r\n            availableLanguages: [''],\r\n            trackInventory: false,\r\n            outOfStockThreshold: [0, Validators.required],\r\n            customFields: this.formBuilder.group(\r\n                this.customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\r\n            ),\r\n        });\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.init();\r\n        this.dataService.client.userStatus().single$.subscribe(({ userStatus }) => {\r\n            if (!userStatus.permissions.includes(Permission.UpdateSettings)) {\r\n                const languagesSelect = this.detailForm.get('availableLanguages');\r\n                if (languagesSelect) {\r\n                    languagesSelect.disable();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    customFieldIsSet(name: string): boolean {\r\n        return !!this.detailForm.get(['customFields', name]);\r\n    }\r\n\r\n    save() {\r\n        if (!this.detailForm.dirty) {\r\n            return;\r\n        }\r\n\r\n        this.dataService.settings\r\n            .updateGlobalSettings(this.detailForm.value)\r\n            .pipe(\r\n                tap(({ updateGlobalSettings }) => {\r\n                    switch (updateGlobalSettings.__typename) {\r\n                        case 'GlobalSettings':\r\n                            this.detailForm.markAsPristine();\r\n                            this.changeDetector.markForCheck();\r\n                            this.notificationService.success(_('common.notify-update-success'), {\r\n                                entity: 'Settings',\r\n                            });\r\n                            break;\r\n                        case 'ChannelDefaultLanguageError':\r\n                            this.notificationService.error(updateGlobalSettings.message);\r\n                    }\r\n                }),\r\n                switchMap(() => this.serverConfigService.refreshGlobalSettings()),\r\n                withLatestFrom(this.dataService.client.uiState().single$),\r\n            )\r\n            .subscribe(([{ globalSettings }, { uiState }]) => {\r\n                const availableLangs = globalSettings.availableLanguages;\r\n                if (availableLangs.length && !availableLangs.includes(uiState.contentLanguage)) {\r\n                    this.dataService.client.setContentLanguage(availableLangs[0]).subscribe();\r\n                }\r\n            });\r\n    }\r\n\r\n    protected setFormValues(entity: GlobalSettings, languageCode: LanguageCode): void {\r\n        this.detailForm.patchValue({\r\n            availableLanguages: entity.availableLanguages,\r\n            trackInventory: entity.trackInventory,\r\n            outOfStockThreshold: entity.outOfStockThreshold,\r\n        });\r\n        if (this.customFields.length) {\r\n            const customFieldsGroup = this.detailForm.get('customFields') as FormGroup;\r\n\r\n            for (const fieldDef of this.customFields) {\r\n                const key = fieldDef.name;\r\n                const value = (entity as any).customFields[key];\r\n                const control = customFieldsGroup.get(key);\r\n                if (control) {\r\n                    control.patchValue(value);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","<vdr-action-bar>\r\n    <vdr-ab-left>\r\n        <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\r\n    </vdr-ab-left>\r\n\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"payment-method-detail\"></vdr-action-bar-items>\r\n        <button\r\n            class=\"btn btn-primary\"\r\n            *ngIf=\"isNew$ | async; else updateButton\"\r\n            [disabled]=\"detailForm.pristine || detailForm.invalid\"\r\n            (click)=\"create()\"\r\n        >\r\n            {{ 'common.create' | translate }}\r\n        </button>\r\n        <ng-template #updateButton>\r\n            <button\r\n                *vdrIfPermissions=\"updatePermission\"\r\n                class=\"btn btn-primary\"\r\n                (click)=\"save()\"\r\n                [disabled]=\"detailForm.pristine || detailForm.invalid || !selectedHandler\"\r\n            >\r\n                {{ 'common.update' | translate }}\r\n            </button>\r\n        </ng-template>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<form class=\"form\" [formGroup]=\"detailForm\" *ngIf=\"entity$ | async as paymentMethod\">\r\n    <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\r\n        <input\r\n            id=\"name\"\r\n            type=\"text\"\r\n            formControlName=\"name\"\r\n            [readonly]=\"!(updatePermission | hasPermission)\"\r\n            (input)=\"updateCode(paymentMethod.code, $event.target.value)\"\r\n        />\r\n    </vdr-form-field>\r\n    <vdr-form-field\r\n        [label]=\"'common.code' | translate\"\r\n        for=\"code\"\r\n        [readOnlyToggle]=\"updatePermission | hasPermission\"\r\n    >\r\n        <input\r\n            id=\"code\"\r\n            type=\"text\"\r\n            formControlName=\"code\"\r\n            [readonly]=\"!(updatePermission | hasPermission)\"\r\n        />\r\n    </vdr-form-field>\r\n    <vdr-rich-text-editor\r\n        formControlName=\"description\"\r\n        [readonly]=\"!(updatePermission | hasPermission)\"\r\n        [label]=\"'common.description' | translate\"\r\n    ></vdr-rich-text-editor>\r\n    <vdr-form-field [label]=\"'common.enabled' | translate\" for=\"description\">\r\n        <clr-toggle-wrapper>\r\n            <input\r\n                type=\"checkbox\"\r\n                clrToggle\r\n                id=\"enabled\"\r\n                [vdrDisabled]=\"!(updatePermission | hasPermission)\"\r\n                formControlName=\"enabled\"\r\n            />\r\n        </clr-toggle-wrapper>\r\n    </vdr-form-field>\r\n\r\n    <div class=\"clr-row mt4\">\r\n        <div class=\"clr-col\">\r\n            <label class=\"clr-control-label\">{{ 'settings.payment-eligibility-checker' | translate }}</label>\r\n            <vdr-configurable-input\r\n                *ngIf=\"selectedChecker && selectedCheckerDefinition\"\r\n                [operation]=\"selectedChecker\"\r\n                [operationDefinition]=\"selectedCheckerDefinition\"\r\n                [readonly]=\"!(updatePermission | hasPermission)\"\r\n                (remove)=\"removeChecker()\"\r\n                formControlName=\"checker\"\r\n            ></vdr-configurable-input>\r\n            <div *ngIf=\"!selectedChecker || !selectedCheckerDefinition\">\r\n                <vdr-dropdown>\r\n                    <button class=\"btn btn-outline\" vdrDropdownTrigger>\r\n                        <clr-icon shape=\"plus\"></clr-icon>\r\n                        {{ 'common.select' | translate }}\r\n                    </button>\r\n                    <vdr-dropdown-menu vdrPosition=\"bottom-left\">\r\n                        <button\r\n                            *ngFor=\"let checker of checkers\"\r\n                            type=\"button\"\r\n                            vdrDropdownItem\r\n                            (click)=\"selectChecker(checker)\"\r\n                        >\r\n                            {{ checker.description }}\r\n                        </button>\r\n                    </vdr-dropdown-menu>\r\n                </vdr-dropdown>\r\n            </div>\r\n        </div>\r\n        <div class=\"clr-col\">\r\n            <label class=\"clr-control-label\">{{ 'settings.payment-handler' | translate }}</label>\r\n            <vdr-configurable-input\r\n                *ngIf=\"selectedHandler && selectedHandlerDefinition\"\r\n                [operation]=\"selectedHandler\"\r\n                [operationDefinition]=\"selectedHandlerDefinition\"\r\n                [readonly]=\"!(updatePermission | hasPermission)\"\r\n                (remove)=\"removeHandler()\"\r\n                formControlName=\"handler\"\r\n            ></vdr-configurable-input>\r\n            <div *ngIf=\"!selectedHandler || !selectedHandlerDefinition\">\r\n                <vdr-dropdown>\r\n                    <button class=\"btn btn-outline\" vdrDropdownTrigger>\r\n                        <clr-icon shape=\"plus\"></clr-icon>\r\n                        {{ 'common.select' | translate }}\r\n                    </button>\r\n                    <vdr-dropdown-menu vdrPosition=\"bottom-left\">\r\n                        <button\r\n                            *ngFor=\"let handler of handlers\"\r\n                            type=\"button\"\r\n                            vdrDropdownItem\r\n                            (click)=\"selectHandler(handler)\"\r\n                        >\r\n                            {{ handler.description }}\r\n                        </button>\r\n                    </vdr-dropdown-menu>\r\n                </vdr-dropdown>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</form>\r\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    BaseDetailComponent,\r\n    ConfigArgDefinition,\r\n    configurableDefinitionToInstance,\r\n    ConfigurableOperation,\r\n    ConfigurableOperationDefinition,\r\n    CreatePaymentMethodInput,\r\n    DataService,\r\n    encodeConfigArgValue,\r\n    getConfigArgValue,\r\n    NotificationService,\r\n    PaymentMethod,\r\n    Permission,\r\n    ServerConfigService,\r\n    toConfigurableOperationInput,\r\n    UpdatePaymentMethodInput,\r\n} from '@vendure/admin-ui/core';\r\nimport { normalizeString } from '@vendure/common/lib/normalize-string';\r\nimport { combineLatest } from 'rxjs';\r\nimport { mergeMap, take } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'vdr-payment-method-detail',\r\n    templateUrl: './payment-method-detail.component.html',\r\n    styleUrls: ['./payment-method-detail.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class PaymentMethodDetailComponent\r\n    extends BaseDetailComponent<PaymentMethod.Fragment>\r\n    implements OnInit, OnDestroy {\r\n    detailForm: FormGroup;\r\n    checkers: ConfigurableOperationDefinition[] = [];\r\n    handlers: ConfigurableOperationDefinition[] = [];\r\n    selectedChecker?: ConfigurableOperation | null;\r\n    selectedCheckerDefinition?: ConfigurableOperationDefinition;\r\n    selectedHandler?: ConfigurableOperation | null;\r\n    selectedHandlerDefinition?: ConfigurableOperationDefinition;\r\n    readonly updatePermission = [Permission.UpdateSettings, Permission.UpdatePaymentMethod];\r\n\r\n    constructor(\r\n        router: Router,\r\n        route: ActivatedRoute,\r\n        serverConfigService: ServerConfigService,\r\n        private changeDetector: ChangeDetectorRef,\r\n        protected dataService: DataService,\r\n        private formBuilder: FormBuilder,\r\n        private notificationService: NotificationService,\r\n    ) {\r\n        super(route, router, serverConfigService, dataService);\r\n        this.detailForm = this.formBuilder.group({\r\n            code: ['', Validators.required],\r\n            name: ['', Validators.required],\r\n            description: '',\r\n            enabled: [true, Validators.required],\r\n            checker: {},\r\n            handler: {},\r\n        });\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.init();\r\n        combineLatest([\r\n            this.dataService.settings.getPaymentMethodOperations().single$,\r\n            this.entity$.pipe(take(1)),\r\n        ]).subscribe(([data, entity]) => {\r\n            this.checkers = data.paymentMethodEligibilityCheckers;\r\n            this.handlers = data.paymentMethodHandlers;\r\n            this.changeDetector.markForCheck();\r\n            this.selectedCheckerDefinition = data.paymentMethodEligibilityCheckers.find(\r\n                c => c.code === (entity.checker && entity.checker.code),\r\n            );\r\n            this.selectedHandlerDefinition = data.paymentMethodHandlers.find(\r\n                c => c.code === (entity.handler && entity.handler.code),\r\n            );\r\n        });\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.destroy();\r\n    }\r\n\r\n    updateCode(currentCode: string, nameValue: string) {\r\n        if (!currentCode) {\r\n            const codeControl = this.detailForm.get(['code']);\r\n            if (codeControl && codeControl.pristine) {\r\n                codeControl.setValue(normalizeString(nameValue, '-'));\r\n            }\r\n        }\r\n    }\r\n\r\n    configArgsIsPopulated(): boolean {\r\n        const configArgsGroup = this.detailForm.get('configArgs') as FormGroup | undefined;\r\n        if (!configArgsGroup) {\r\n            return false;\r\n        }\r\n        return 0 < Object.keys(configArgsGroup.controls).length;\r\n    }\r\n\r\n    selectChecker(checker: ConfigurableOperationDefinition) {\r\n        this.selectedCheckerDefinition = checker;\r\n        this.selectedChecker = configurableDefinitionToInstance(checker);\r\n        const formControl = this.detailForm.get('checker');\r\n        if (formControl) {\r\n            formControl.clearValidators();\r\n            formControl.updateValueAndValidity({ onlySelf: true });\r\n            formControl.patchValue(this.selectedChecker);\r\n        }\r\n        this.detailForm.markAsDirty();\r\n    }\r\n\r\n    selectHandler(handler: ConfigurableOperationDefinition) {\r\n        this.selectedHandlerDefinition = handler;\r\n        this.selectedHandler = configurableDefinitionToInstance(handler);\r\n        const formControl = this.detailForm.get('handler');\r\n        if (formControl) {\r\n            formControl.clearValidators();\r\n            formControl.updateValueAndValidity({ onlySelf: true });\r\n            formControl.patchValue(this.selectedHandler);\r\n        }\r\n        this.detailForm.markAsDirty();\r\n    }\r\n\r\n    removeChecker() {\r\n        this.selectedChecker = null;\r\n        this.detailForm.markAsDirty();\r\n    }\r\n\r\n    removeHandler() {\r\n        this.selectedHandler = null;\r\n        this.detailForm.markAsDirty();\r\n    }\r\n\r\n    create() {\r\n        const selectedChecker = this.selectedChecker;\r\n        const selectedHandler = this.selectedHandler;\r\n        if (!selectedHandler) {\r\n            return;\r\n        }\r\n        this.entity$\r\n            .pipe(\r\n                take(1),\r\n                mergeMap(({ id }) => {\r\n                    const formValue = this.detailForm.value;\r\n                    const input: CreatePaymentMethodInput = {\r\n                        name: formValue.name,\r\n                        code: formValue.code,\r\n                        description: formValue.description,\r\n                        enabled: formValue.enabled,\r\n                        checker: selectedChecker\r\n                            ? toConfigurableOperationInput(selectedChecker, formValue.checker)\r\n                            : null,\r\n                        handler: toConfigurableOperationInput(selectedHandler, formValue.handler),\r\n                    };\r\n                    return this.dataService.settings.createPaymentMethod(input);\r\n                }),\r\n            )\r\n            .subscribe(\r\n                data => {\r\n                    this.notificationService.success(_('common.notify-create-success'), {\r\n                        entity: 'PaymentMethod',\r\n                    });\r\n                    this.detailForm.markAsPristine();\r\n                    this.changeDetector.markForCheck();\r\n                    this.router.navigate(['../', data.createPaymentMethod.id], { relativeTo: this.route });\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-create-error'), {\r\n                        entity: 'PaymentMethod',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    save() {\r\n        const selectedChecker = this.selectedChecker;\r\n        const selectedHandler = this.selectedHandler;\r\n        if (!selectedHandler) {\r\n            return;\r\n        }\r\n        this.entity$\r\n            .pipe(\r\n                take(1),\r\n                mergeMap(({ id }) => {\r\n                    const formValue = this.detailForm.value;\r\n                    const input: UpdatePaymentMethodInput = {\r\n                        id,\r\n                        name: formValue.name,\r\n                        code: formValue.code,\r\n                        description: formValue.description,\r\n                        enabled: formValue.enabled,\r\n                        checker: selectedChecker\r\n                            ? toConfigurableOperationInput(selectedChecker, formValue.checker)\r\n                            : null,\r\n                        handler: toConfigurableOperationInput(selectedHandler, formValue.handler),\r\n                    };\r\n                    return this.dataService.settings.updatePaymentMethod(input);\r\n                }),\r\n            )\r\n            .subscribe(\r\n                data => {\r\n                    this.notificationService.success(_('common.notify-update-success'), {\r\n                        entity: 'PaymentMethod',\r\n                    });\r\n                    this.detailForm.markAsPristine();\r\n                    this.changeDetector.markForCheck();\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-update-error'), {\r\n                        entity: 'PaymentMethod',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    protected setFormValues(paymentMethod: PaymentMethod.Fragment): void {\r\n        this.detailForm.patchValue({\r\n            name: paymentMethod.name,\r\n            code: paymentMethod.code,\r\n            description: paymentMethod.description,\r\n            enabled: paymentMethod.enabled,\r\n            checker: paymentMethod.checker || {},\r\n            handler: paymentMethod.handler || {},\r\n        });\r\n        if (!this.selectedChecker) {\r\n            this.selectedChecker = paymentMethod.checker && {\r\n                code: paymentMethod.checker.code,\r\n                args: paymentMethod.checker.args.map(a => ({ ...a, value: getConfigArgValue(a.value) })),\r\n            };\r\n        }\r\n        if (!this.selectedHandler) {\r\n            this.selectedHandler = paymentMethod.handler && {\r\n                code: paymentMethod.handler.code,\r\n                args: paymentMethod.handler.args.map(a => ({ ...a, value: getConfigArgValue(a.value) })),\r\n            };\r\n        }\r\n    }\r\n}\r\n","<vdr-action-bar>\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"payment-method-list\"></vdr-action-bar-items>\r\n        <a class=\"btn btn-primary\" [routerLink]=\"['./create']\" *vdrIfPermissions=\"['CreateSettings', 'CreatePaymentMethod']\">\r\n            <clr-icon shape=\"plus\"></clr-icon>\r\n            {{ 'settings.create-new-payment-method' | translate }}\r\n        </a>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<vdr-data-table\r\n    [items]=\"items$ | async\"\r\n    [itemsPerPage]=\"itemsPerPage$ | async\"\r\n    [totalItems]=\"totalItems$ | async\"\r\n    [currentPage]=\"currentPage$ | async\"\r\n    (pageChange)=\"setPageNumber($event)\"\r\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\r\n>\r\n    <vdr-dt-column>{{ 'common.code' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'common.enabled' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <ng-template let-paymentMethod=\"item\">\r\n        <td class=\"left align-middle\">{{ paymentMethod.code }}</td>\r\n        <td class=\"left align-middle\">{{ paymentMethod.enabled }}</td>\r\n        <td class=\"right align-middle\">\r\n            <vdr-table-row-action\r\n                iconShape=\"edit\"\r\n                [label]=\"'common.edit' | translate\"\r\n                [linkTo]=\"['./', paymentMethod.id]\"\r\n            ></vdr-table-row-action>\r\n        </td>\r\n        <td class=\"right align-middle\">\r\n            <vdr-dropdown>\r\n                <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger>\r\n                    {{ 'common.actions' | translate }}\r\n                    <clr-icon shape=\"caret down\"></clr-icon>\r\n                </button>\r\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                    <button\r\n                        type=\"button\"\r\n                        class=\"delete-button\"\r\n                        (click)=\"deletePaymentMethod(paymentMethod.id)\"\r\n                        [disabled]=\"!(['DeleteSettings', 'DeletePaymentMethod'] | hasPermission)\"\r\n                        vdrDropdownItem\r\n                    >\r\n                        <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                        {{ 'common.delete' | translate }}\r\n                    </button>\r\n                </vdr-dropdown-menu>\r\n            </vdr-dropdown>\r\n        </td>\r\n    </ng-template>\r\n</vdr-data-table>\r\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    BaseListComponent,\r\n    DataService,\r\n    DeletionResult,\r\n    GetPaymentMethodList,\r\n    ModalService,\r\n    NotificationService,\r\n} from '@vendure/admin-ui/core';\r\nimport { EMPTY } from 'rxjs';\r\nimport { map, switchMap } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'vdr-payment-method-list',\r\n    templateUrl: './payment-method-list.component.html',\r\n    styleUrls: ['./payment-method-list.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class PaymentMethodListComponent extends BaseListComponent<\r\n    GetPaymentMethodList.Query,\r\n    GetPaymentMethodList.Items\r\n> {\r\n    constructor(\r\n        private dataService: DataService,\r\n        router: Router,\r\n        route: ActivatedRoute,\r\n        private modalService: ModalService,\r\n        private notificationService: NotificationService,\r\n    ) {\r\n        super(router, route);\r\n        super.setQueryFn(\r\n            (...args: any[]) => this.dataService.settings.getPaymentMethods(...args).refetchOnChannelChange(),\r\n            data => data.paymentMethods,\r\n        );\r\n    }\r\n\r\n    deletePaymentMethod(paymentMethodId: string) {\r\n        this.showModalAndDelete(paymentMethodId)\r\n            .pipe(\r\n                switchMap(response => {\r\n                    if (response.result === DeletionResult.DELETED) {\r\n                        return [true];\r\n                    } else {\r\n                        return this.showModalAndDelete(paymentMethodId, response.message || '').pipe(\r\n                            map(r => r.result === DeletionResult.DELETED),\r\n                        );\r\n                    }\r\n                }),\r\n                // Refresh the cached facets to reflect the changes\r\n                switchMap(() => this.dataService.settings.getPaymentMethods(100).single$),\r\n            )\r\n            .subscribe(\r\n                () => {\r\n                    this.notificationService.success(_('common.notify-delete-success'), {\r\n                        entity: 'PaymentMethod',\r\n                    });\r\n                    this.refresh();\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-delete-error'), {\r\n                        entity: 'PaymentMethod',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    private showModalAndDelete(paymentMethodId: string, message?: string) {\r\n        return this.modalService\r\n            .dialog({\r\n                title: _('settings.confirm-delete-payment-method'),\r\n                body: message,\r\n                buttons: [\r\n                    { type: 'secondary', label: _('common.cancel') },\r\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\r\n                ],\r\n            })\r\n            .pipe(\r\n                switchMap(res =>\r\n                    res ? this.dataService.settings.deletePaymentMethod(paymentMethodId, !!message) : EMPTY,\r\n                ),\r\n                map(res => res.deletePaymentMethod),\r\n            );\r\n    }\r\n}\r\n","<vdr-action-bar>\r\n    <vdr-ab-left>\r\n        <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\r\n    </vdr-ab-left>\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"administrator-detail\"></vdr-action-bar-items>\r\n        <button\r\n            class=\"btn btn-primary\"\r\n            (click)=\"save()\"\r\n            [disabled]=\"detailForm.invalid || detailForm.pristine\"\r\n        >\r\n            {{ 'common.update' | translate }}\r\n        </button>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<form class=\"form\" [formGroup]=\"detailForm\">\r\n    <vdr-form-field [label]=\"'settings.email-address' | translate\" for=\"emailAddress\">\r\n        <input id=\"emailAddress\" type=\"text\" formControlName=\"emailAddress\" />\r\n    </vdr-form-field>\r\n    <vdr-form-field [label]=\"'settings.first-name' | translate\" for=\"firstName\">\r\n        <input id=\"firstName\" type=\"text\" formControlName=\"firstName\" />\r\n    </vdr-form-field>\r\n    <vdr-form-field [label]=\"'settings.last-name' | translate\" for=\"lastName\">\r\n        <input id=\"lastName\" type=\"text\" formControlName=\"lastName\" />\r\n    </vdr-form-field>\r\n    <vdr-form-field *ngIf=\"isNew$ | async\" [label]=\"'settings.password' | translate\" for=\"password\">\r\n        <input id=\"password\" type=\"password\" formControlName=\"password\" />\r\n    </vdr-form-field>\r\n    <vdr-form-field [label]=\"'settings.password' | translate\" for=\"password\" [readOnlyToggle]=\"true\">\r\n        <input id=\"password\" type=\"password\" formControlName=\"password\" />\r\n    </vdr-form-field>\r\n    <section formGroupName=\"customFields\" *ngIf=\"customFields.length\">\r\n        <label>{{ 'common.custom-fields' | translate }}</label>\r\n        <ng-container *ngFor=\"let customField of customFields\">\r\n            <vdr-custom-field-control\r\n                *ngIf=\"customFieldIsSet(customField.name)\"\r\n                entityName=\"Administrator\"\r\n                [customFieldsFormGroup]=\"detailForm.get('customFields')\"\r\n                [customField]=\"customField\"\r\n            ></vdr-custom-field-control>\r\n        </ng-container>\r\n    </section>\r\n</form>\r\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    Administrator,\r\n    BaseDetailComponent,\r\n    CustomFieldConfig,\r\n    DataService,\r\n    GetActiveAdministrator,\r\n    LanguageCode,\r\n    NotificationService,\r\n    ServerConfigService,\r\n    UpdateActiveAdministratorInput,\r\n} from '@vendure/admin-ui/core';\r\nimport { mergeMap, take } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'vdr-profile',\r\n    templateUrl: './profile.component.html',\r\n    styleUrls: ['./profile.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ProfileComponent\r\n    extends BaseDetailComponent<GetActiveAdministrator.ActiveAdministrator>\r\n    implements OnInit, OnDestroy {\r\n    customFields: CustomFieldConfig[];\r\n    detailForm: FormGroup;\r\n\r\n    constructor(\r\n        router: Router,\r\n        route: ActivatedRoute,\r\n        serverConfigService: ServerConfigService,\r\n        private changeDetector: ChangeDetectorRef,\r\n        protected dataService: DataService,\r\n        private formBuilder: FormBuilder,\r\n        private notificationService: NotificationService,\r\n    ) {\r\n        super(route, router, serverConfigService, dataService);\r\n        this.customFields = this.getCustomFieldConfig('Administrator');\r\n        this.detailForm = this.formBuilder.group({\r\n            emailAddress: ['', Validators.required],\r\n            firstName: ['', Validators.required],\r\n            lastName: ['', Validators.required],\r\n            password: [''],\r\n            customFields: this.formBuilder.group(\r\n                this.customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\r\n            ),\r\n        });\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.init();\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.destroy();\r\n    }\r\n\r\n    customFieldIsSet(name: string): boolean {\r\n        return !!this.detailForm.get(['customFields', name]);\r\n    }\r\n\r\n    save() {\r\n        this.entity$\r\n            .pipe(\r\n                take(1),\r\n                mergeMap(({ id }) => {\r\n                    const formValue = this.detailForm.value;\r\n                    const administrator: UpdateActiveAdministratorInput = {\r\n                        emailAddress: formValue.emailAddress,\r\n                        firstName: formValue.firstName,\r\n                        lastName: formValue.lastName,\r\n                        password: formValue.password,\r\n                        customFields: formValue.customFields,\r\n                    };\r\n                    return this.dataService.administrator.updateActiveAdministrator(administrator);\r\n                }),\r\n            )\r\n            .subscribe(\r\n                data => {\r\n                    this.notificationService.success(_('common.notify-update-success'), {\r\n                        entity: 'Administrator',\r\n                    });\r\n                    this.detailForm.markAsPristine();\r\n                    this.changeDetector.markForCheck();\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-update-error'), {\r\n                        entity: 'Administrator',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    protected setFormValues(administrator: Administrator, languageCode: LanguageCode): void {\r\n        this.detailForm.patchValue({\r\n            emailAddress: administrator.emailAddress,\r\n            firstName: administrator.firstName,\r\n            lastName: administrator.lastName,\r\n        });\r\n        if (this.customFields.length) {\r\n            const customFieldsGroup = this.detailForm.get('customFields') as FormGroup;\r\n\r\n            for (const fieldDef of this.customFields) {\r\n                const key = fieldDef.name;\r\n                const value = (administrator as any).customFields[key];\r\n                const control = customFieldsGroup.get(key);\r\n                if (control) {\r\n                    control.patchValue(value);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","<vdr-action-bar>\r\n    <vdr-ab-left>\r\n        <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\r\n    </vdr-ab-left>\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"role-detail\"></vdr-action-bar-items>\r\n        <button\r\n            class=\"btn btn-primary\"\r\n            *ngIf=\"isNew$ | async; else updateButton\"\r\n            (click)=\"create()\"\r\n            [disabled]=\"detailForm.invalid || detailForm.pristine\"\r\n        >\r\n            {{ 'common.create' | translate }}\r\n        </button>\r\n        <ng-template #updateButton>\r\n            <button\r\n                class=\"btn btn-primary\"\r\n                (click)=\"save()\"\r\n                *vdrIfPermissions=\"'UpdateAdministrator'\"\r\n                [disabled]=\"detailForm.invalid || detailForm.pristine\"\r\n            >\r\n                {{ 'common.update' | translate }}\r\n            </button>\r\n        </ng-template>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<form class=\"form\" [formGroup]=\"detailForm\">\r\n    <vdr-form-field [label]=\"'common.description' | translate\" for=\"description\">\r\n        <input\r\n            id=\"description\"\r\n            type=\"text\"\r\n            formControlName=\"description\"\r\n            [readonly]=\"!('UpdateAdministrator' | hasPermission)\"\r\n            (input)=\"updateCode($event.target.value)\"\r\n        />\r\n    </vdr-form-field>\r\n    <vdr-form-field\r\n        [label]=\"'common.code' | translate\"\r\n        for=\"code\"\r\n        [readOnlyToggle]=\"'UpdateAdministrator' | hasPermission\"\r\n    >\r\n        <input\r\n            id=\"code\"\r\n            type=\"text\"\r\n            formControlName=\"code\"\r\n            [readonly]=\"!('UpdateAdministrator' | hasPermission)\"\r\n        />\r\n    </vdr-form-field>\r\n    <vdr-form-field [label]=\"'settings.channel' | translate\">\r\n        <vdr-channel-assignment-control\r\n            formControlName=\"channelIds\"\r\n            [vdrDisabled]=\"!('UpdateAdministrator' | hasPermission)\"\r\n        ></vdr-channel-assignment-control>\r\n    </vdr-form-field>\r\n    <label>{{ 'settings.permissions' | translate }}</label>\r\n    <vdr-permission-grid\r\n        [permissionDefinitions]=\"permissionDefinitions\"\r\n        [activePermissions]=\"detailForm.get('permissions')?.value\"\r\n        (permissionChange)=\"setPermission($event)\"\r\n        [readonly]=\"!('UpdateAdministrator' | hasPermission)\"\r\n    ></vdr-permission-grid>\r\n</form>\r\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    BaseDetailComponent,\n    CreateRoleInput,\n    DataService,\n    LanguageCode,\n    NotificationService,\n    Permission,\n    PermissionDefinition,\n    Role,\n    ServerConfigService,\n    UpdateRoleInput,\n} from '@vendure/admin-ui/core';\nimport { normalizeString } from '@vendure/common/lib/normalize-string';\nimport { unique } from '@vendure/common/lib/unique';\nimport { Observable } from 'rxjs';\nimport { mergeMap, take } from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-role-detail',\n    templateUrl: './role-detail.component.html',\n    styleUrls: ['./role-detail.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class RoleDetailComponent extends BaseDetailComponent<Role> implements OnInit, OnDestroy {\n    role$: Observable<Role>;\n    detailForm: FormGroup;\n    permissionDefinitions: PermissionDefinition[];\n    constructor(\n        router: Router,\n        route: ActivatedRoute,\n        serverConfigService: ServerConfigService,\n        private changeDetector: ChangeDetectorRef,\n        protected dataService: DataService,\n        private formBuilder: FormBuilder,\n        private notificationService: NotificationService,\n    ) {\n        super(route, router, serverConfigService, dataService);\n        this.detailForm = this.formBuilder.group({\n            code: ['', Validators.required],\n            description: ['', Validators.required],\n            channelIds: [],\n            permissions: [],\n        });\n    }\n\n    ngOnInit() {\n        this.init();\n        this.role$ = this.entity$;\n        this.permissionDefinitions = this.serverConfigService.getPermissionDefinitions();\n    }\n\n    ngOnDestroy(): void {\n        this.destroy();\n    }\n\n    updateCode(nameValue: string) {\n        const codeControl = this.detailForm.get(['code']);\n        if (codeControl && codeControl.pristine) {\n            codeControl.setValue(normalizeString(nameValue, '-'));\n        }\n    }\n\n    setPermission(change: { permission: string; value: boolean }) {\n        const permissionsControl = this.detailForm.get('permissions');\n        if (permissionsControl) {\n            const currentPermissions = permissionsControl.value as string[];\n            const newValue =\n                change.value === true\n                    ? unique([...currentPermissions, change.permission])\n                    : currentPermissions.filter(p => p !== change.permission);\n            permissionsControl.setValue(newValue);\n            permissionsControl.markAsDirty();\n        }\n    }\n\n    create() {\n        const formValue = this.detailForm.value;\n        const role: CreateRoleInput = formValue;\n        this.dataService.administrator.createRole(role).subscribe(\n            data => {\n                this.notificationService.success(_('common.notify-create-success'), { entity: 'Role' });\n                this.detailForm.markAsPristine();\n                this.changeDetector.markForCheck();\n                this.router.navigate(['../', data.createRole.id], { relativeTo: this.route });\n            },\n            err => {\n                this.notificationService.error(_('common.notify-create-error'), {\n                    entity: 'Role',\n                });\n            },\n        );\n    }\n\n    save() {\n        this.role$\n            .pipe(\n                take(1),\n                mergeMap(({ id }) => {\n                    const formValue = this.detailForm.value;\n                    const role: UpdateRoleInput = { id, ...formValue };\n                    return this.dataService.administrator.updateRole(role);\n                }),\n            )\n            .subscribe(\n                data => {\n                    this.notificationService.success(_('common.notify-update-success'), { entity: 'Role' });\n                    this.detailForm.markAsPristine();\n                    this.changeDetector.markForCheck();\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-update-error'), {\n                        entity: 'Role',\n                    });\n                },\n            );\n    }\n\n    protected setFormValues(role: Role, languageCode: LanguageCode): void {\n        this.detailForm.patchValue({\n            description: role.description,\n            code: role.code,\n            channelIds: role.channels.map(c => c.id),\n            permissions: role.permissions,\n        });\n        // This was required to get the channel selector component to\n        // correctly display its contents. A while spent debugging the root\n        // cause did not yield a solution, therefore this next line.\n        this.changeDetector.detectChanges();\n    }\n}\n","<vdr-action-bar>\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"role-list\"></vdr-action-bar-items>\r\n        <a class=\"btn btn-primary\" [routerLink]=\"['./create']\" *vdrIfPermissions=\"'CreateAdministrator'\">\r\n            <clr-icon shape=\"plus\"></clr-icon>\r\n            {{ 'settings.create-new-role' | translate }}\r\n        </a>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<vdr-data-table\r\n    [items]=\"visibleRoles$ | async\"\r\n    [itemsPerPage]=\"itemsPerPage$ | async\"\r\n    [totalItems]=\"totalItems$ | async\"\r\n    [currentPage]=\"currentPage$ | async\"\r\n    (pageChange)=\"setPageNumber($event)\"\r\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\r\n>\r\n    <vdr-dt-column>{{ 'common.description' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'common.code' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'settings.channel' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'settings.permissions' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <ng-template let-role=\"item\">\r\n        <td class=\"left align-middle\">{{ role.description }}</td>\r\n        <td class=\"left align-middle\"><span *ngIf=\"!isDefaultRole(role)\">{{ role.code }}</span></td>\r\n        <td class=\"left align-middle\">\r\n            <ng-container *ngIf=\"!isDefaultRole(role)\">\r\n                <vdr-chip *ngFor=\"let channel of role.channels\">\r\n                    <vdr-channel-badge [channelCode]=\"channel.code\"></vdr-channel-badge>\r\n                    {{ channel.code | channelCodeToLabel | translate }}\r\n                </vdr-chip>\r\n            </ng-container>\r\n        </td>\r\n        <td class=\"left align-middle\">\r\n            <ng-container *ngIf=\"!isDefaultRole(role); else defaultRole\">\r\n                <vdr-chip *ngFor=\"let permission of role.permissions |  slice: 0:displayLimit[role.id] || 3\">{{ permission }}</vdr-chip>\r\n                <button\r\n                    class=\"btn btn-sm btn-secondary btn-icon\"\r\n                    *ngIf=\"role.permissions.length > initialLimit\"\r\n                    (click)=\"toggleDisplayLimit(role)\"\r\n                >\r\n                    <ng-container *ngIf=\"(displayLimit[role.id] || 0) < role.permissions.length; else collapse\">\r\n                        <clr-icon shape=\"plus\"></clr-icon>\r\n                        {{ role.permissions.length - initialLimit }}\r\n                    </ng-container>\r\n                    <ng-template #collapse>\r\n                        <clr-icon shape=\"minus\"></clr-icon>\r\n                    </ng-template>\r\n                </button>\r\n            </ng-container>\r\n            <ng-template #defaultRole>\r\n                <span class=\"default-role-label\">{{ 'settings.default-role-label' | translate }}</span>\r\n            </ng-template>\r\n        </td>\r\n        <td class=\"right align-middle\">\r\n            <vdr-table-row-action\r\n                *ngIf=\"!isDefaultRole(role)\"\r\n                iconShape=\"edit\"\r\n                [label]=\"'common.edit' | translate\"\r\n                [linkTo]=\"['./', role.id]\"\r\n            ></vdr-table-row-action>\r\n        </td>\r\n        <td class=\"right align-middle\">\r\n            <vdr-dropdown>\r\n                <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger [disabled]=\"isDefaultRole(role)\">\r\n                    {{ 'common.actions' | translate }}\r\n                    <clr-icon shape=\"caret down\"></clr-icon>\r\n                </button>\r\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                    <button\r\n                        type=\"button\"\r\n                        class=\"delete-button\"\r\n                        (click)=\"deleteRole(role.id)\"\r\n                        [disabled]=\"!('SuperAdmin' | hasPermission)\"\r\n                        vdrDropdownItem\r\n                    >\r\n                        <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                        {{ 'common.delete' | translate }}\r\n                    </button>\r\n                </vdr-dropdown-menu>\r\n            </vdr-dropdown>\r\n        </td>\r\n    </ng-template>\r\n</vdr-data-table>\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport { BaseListComponent } from '@vendure/admin-ui/core';\nimport { GetRoles, Role } from '@vendure/admin-ui/core';\nimport { NotificationService } from '@vendure/admin-ui/core';\nimport { DataService } from '@vendure/admin-ui/core';\nimport { ModalService } from '@vendure/admin-ui/core';\nimport { CUSTOMER_ROLE_CODE, SUPER_ADMIN_ROLE_CODE } from '@vendure/common/lib/shared-constants';\nimport { EMPTY, Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-role-list',\n    templateUrl: './role-list.component.html',\n    styleUrls: ['./role-list.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class RoleListComponent extends BaseListComponent<GetRoles.Query, GetRoles.Items> implements OnInit {\n    readonly initialLimit = 3;\n    displayLimit: { [id: string]: number } = {};\n    visibleRoles$: Observable<GetRoles.Items[]>;\n\n    constructor(\n        private modalService: ModalService,\n        private notificationService: NotificationService,\n        private dataService: DataService,\n        router: Router,\n        route: ActivatedRoute,\n    ) {\n        super(router, route);\n        super.setQueryFn(\n            (...args: any[]) => this.dataService.administrator.getRoles(...args),\n            data => data.roles,\n        );\n    }\n\n    ngOnInit() {\n        super.ngOnInit();\n        this.visibleRoles$ = this.items$.pipe(\n            map(roles => roles.filter(role => role.code !== CUSTOMER_ROLE_CODE)),\n        );\n    }\n\n    toggleDisplayLimit(role: GetRoles.Items) {\n        if (this.displayLimit[role.id] === role.permissions.length) {\n            this.displayLimit[role.id] = this.initialLimit;\n        } else {\n            this.displayLimit[role.id] = role.permissions.length;\n        }\n    }\n\n    isDefaultRole(role: Role): boolean {\n        return role.code === SUPER_ADMIN_ROLE_CODE || role.code === CUSTOMER_ROLE_CODE;\n    }\n\n    deleteRole(id: string) {\n        this.modalService\n            .dialog({\n                title: _('settings.confirm-delete-role'),\n                buttons: [\n                    { type: 'secondary', label: _('common.cancel') },\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\n                ],\n            })\n            .pipe(switchMap(response => (response ? this.dataService.administrator.deleteRole(id) : EMPTY)))\n            .subscribe(\n                () => {\n                    this.notificationService.success(_('common.notify-delete-success'), {\n                        entity: 'Role',\n                    });\n                    this.refresh();\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-delete-error'), {\n                        entity: 'Role',\n                    });\n                },\n            );\n    }\n}\n","<div class=\"test-result card\">\r\n    <div class=\"card-header\">\r\n        {{ 'settings.test-result' | translate }}\r\n    </div>\r\n    <div class=\"card-block\" *ngFor=\"let quote of testResult\">\r\n        <div class=\"result-details\" [class.stale]=\"testDataUpdated\">\r\n            <vdr-labeled-data [label]=\"'settings.shipping-method' | translate\">\r\n                {{ quote.name }}\r\n            </vdr-labeled-data>\r\n            <div class=\"price-row\">\r\n                <vdr-labeled-data [label]=\"'common.price' | translate\">\r\n                    {{ quote.price | localeCurrency: currencyCode }}\r\n                </vdr-labeled-data>\r\n                <vdr-labeled-data [label]=\"'common.price-with-tax' | translate\">\r\n                    {{ quote.priceWithTax | localeCurrency: currencyCode }}\r\n                </vdr-labeled-data>\r\n            </div>\r\n            <vdr-object-tree *ngIf=\"quote.metadata\" [value]=\"quote.metadata\"></vdr-object-tree>\r\n        </div>\r\n    </div>\r\n    <div class=\"card-block\" *ngIf=\"testResult?.length === 0\">\r\n        <clr-icon shape=\"ban\" class=\"is-solid error\"></clr-icon>\r\n        {{ 'settings.no-eligible-shipping-methods' | translate }}\r\n    </div>\r\n    <div class=\"card-footer\">\r\n        <button class=\"btn btn-secondary\" (click)=\"runTest.emit()\" [disabled]=\"!okToRun\">\r\n            {{ 'settings.test-shipping-methods' | translate }}\r\n        </button>\r\n    </div>\r\n</div>\r\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\r\n\r\nimport { CurrencyCode, ShippingMethodQuote } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-shipping-eligibility-test-result',\r\n    templateUrl: './shipping-eligibility-test-result.component.html',\r\n    styleUrls: ['./shipping-eligibility-test-result.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ShippingEligibilityTestResultComponent {\r\n    @Input() testResult: ShippingMethodQuote[];\r\n    @Input() okToRun = false;\r\n    @Input() testDataUpdated = false;\r\n    @Input() currencyCode: CurrencyCode;\r\n    @Output() runTest = new EventEmitter<void>();\r\n}\r\n","<div class=\"card\">\r\n    <div class=\"card-header\">\r\n        {{ 'settings.test-order' | translate }}\r\n    </div>\r\n    <table class=\"order-table table\" *ngIf=\"lines.length; else emptyPlaceholder\">\r\n        <thead>\r\n            <tr>\r\n                <th></th>\r\n                <th>{{ 'order.product-name' | translate }}</th>\r\n                <th>{{ 'order.product-sku' | translate }}</th>\r\n                <th>{{ 'order.unit-price' | translate }}</th>\r\n                <th>{{ 'order.quantity' | translate }}</th>\r\n                <th>{{ 'order.total' | translate }}</th>\r\n            </tr>\r\n        </thead>\r\n        <tr *ngFor=\"let line of lines\" class=\"order-line\">\r\n            <td class=\"align-middle thumb\">\r\n                <img [src]=\"line.preview + '?preset=tiny'\" />\r\n            </td>\r\n            <td class=\"align-middle name\">{{ line.name }}</td>\r\n            <td class=\"align-middle sku\">{{ line.sku }}</td>\r\n            <td class=\"align-middle unit-price\">\r\n                {{ line.unitPriceWithTax | localeCurrency: currencyCode }}\r\n            </td>\r\n            <td class=\"align-middle quantity\">\r\n                <input\r\n                    [(ngModel)]=\"line.quantity\"\r\n                    (change)=\"updateQuantity()\"\r\n                    type=\"number\"\r\n                    max=\"9999\"\r\n                    min=\"1\"\r\n                />\r\n                <button class=\"icon-button\" (click)=\"removeLine(line)\">\r\n                    <clr-icon shape=\"trash\"></clr-icon>\r\n                </button>\r\n            </td>\r\n            <td class=\"align-middle total\">\r\n                {{ (line.unitPriceWithTax * line.quantity) | localeCurrency: currencyCode }}\r\n            </td>\r\n        </tr>\r\n        <tr class=\"sub-total\">\r\n            <td class=\"left\">{{ 'order.sub-total' | translate }}</td>\r\n            <td></td>\r\n            <td></td>\r\n            <td></td>\r\n            <td></td>\r\n            <td>{{ subTotal | localeCurrency: currencyCode }}</td>\r\n        </tr>\r\n    </table>\r\n\r\n    <ng-template #emptyPlaceholder>\r\n        <div class=\"card-block empty-placeholder\">\r\n            <div class=\"empty-text\">{{ 'settings.add-products-to-test-order' | translate }}</div>\r\n            <clr-icon shape=\"arrow\" dir=\"down\" size=\"96\"></clr-icon>\r\n        </div>\r\n    </ng-template>\r\n    <div class=\"card-block\">\r\n        <vdr-product-selector (productSelected)=\"selectResult($event)\"> </vdr-product-selector>\r\n    </div>\r\n</div>\r\n","import { ChangeDetectionStrategy, Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport {\n    CurrencyCode,\n    DataService,\n    LocalStorageService,\n    ProductSelectorSearch,\n} from '@vendure/admin-ui/core';\n\nexport interface TestOrderLine {\n    id: string;\n    name: string;\n    preview: string;\n    sku: string;\n    unitPriceWithTax: number;\n    quantity: number;\n}\n\n@Component({\n    selector: 'vdr-test-order-builder',\n    templateUrl: './test-order-builder.component.html',\n    styleUrls: ['./test-order-builder.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TestOrderBuilderComponent implements OnInit {\n    @Output() orderLinesChange = new EventEmitter<TestOrderLine[]>();\n    lines: TestOrderLine[] = [];\n    currencyCode: CurrencyCode;\n    get subTotal(): number {\n        return this.lines.reduce((sum, l) => sum + l.unitPriceWithTax * l.quantity, 0);\n    }\n\n    constructor(private dataService: DataService, private localStorageService: LocalStorageService) {}\n\n    ngOnInit() {\n        this.lines = this.loadFromLocalStorage();\n        if (this.lines) {\n            this.orderLinesChange.emit(this.lines);\n        }\n        this.dataService.settings.getActiveChannel('cache-first').single$.subscribe(result => {\n            this.currencyCode = result.activeChannel.currencyCode;\n        });\n    }\n\n    selectResult(result: ProductSelectorSearch.Items) {\n        if (result) {\n            this.addToLines(result);\n        }\n    }\n\n    private addToLines(result: ProductSelectorSearch.Items) {\n        if (!this.lines.find(l => l.id === result.productVariantId)) {\n            this.lines.push({\n                id: result.productVariantId,\n                name: result.productVariantName,\n                preview: result.productAsset?.preview ?? '',\n                quantity: 1,\n                sku: result.sku,\n                unitPriceWithTax:\n                    (result.priceWithTax.__typename === 'SinglePrice' && result.priceWithTax.value) || 0,\n            });\n            this.persistToLocalStorage();\n            this.orderLinesChange.emit(this.lines);\n        }\n    }\n\n    updateQuantity() {\n        this.persistToLocalStorage();\n        this.orderLinesChange.emit(this.lines);\n    }\n\n    removeLine(line: TestOrderLine) {\n        this.lines = this.lines.filter(l => l.id !== line.id);\n        this.persistToLocalStorage();\n        this.orderLinesChange.emit(this.lines);\n    }\n\n    private persistToLocalStorage() {\n        this.localStorageService.setForCurrentLocation('shippingTestOrder', this.lines);\n    }\n\n    private loadFromLocalStorage(): TestOrderLine[] {\n        return this.localStorageService.getForCurrentLocation('shippingTestOrder') || [];\n    }\n}\n","<div class=\"card\">\r\n    <div class=\"card-header\">\r\n        {{ 'settings.test-address' | translate }}\r\n    </div>\r\n    <div class=\"card-block\">\r\n        <form [formGroup]=\"form\">\r\n            <clr-input-container>\r\n                <label>{{ 'customer.city' | translate }}</label>\r\n                <input formControlName=\"city\" type=\"text\" clrInput />\r\n            </clr-input-container>\r\n            <clr-input-container>\r\n                <label>{{ 'customer.province' | translate }}</label>\r\n                <input formControlName=\"province\" type=\"text\" clrInput />\r\n            </clr-input-container>\r\n            <clr-input-container>\r\n                <label>{{ 'customer.postal-code' | translate }}</label>\r\n                <input formControlName=\"postalCode\" type=\"text\" clrInput />\r\n            </clr-input-container>\r\n            <clr-input-container>\r\n                <label>{{ 'customer.country' | translate }}</label>\r\n                <select name=\"countryCode\" formControlName=\"countryCode\" clrInput clrSelect>\r\n                    <option *ngFor=\"let country of availableCountries$ | async\" [value]=\"country.code\">\r\n                        {{ country.name }}\r\n                    </option>\r\n                </select>\r\n            </clr-input-container>\r\n        </form>\r\n    </div>\r\n</div>\r\n","import { ChangeDetectionStrategy, Component, EventEmitter, OnDestroy, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { DataService, GetAvailableCountries, LocalStorageService } from '@vendure/admin-ui/core';\r\nimport { Observable, Subscription } from 'rxjs';\r\n\r\nexport interface TestAddress {\r\n    city: string;\r\n    province: string;\r\n    postalCode: string;\r\n    countryCode: string;\r\n}\r\n\r\n@Component({\r\n    selector: 'vdr-test-address-form',\r\n    templateUrl: './test-address-form.component.html',\r\n    styleUrls: ['./test-address-form.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class TestAddressFormComponent implements OnInit, OnDestroy {\r\n    @Output() addressChange = new EventEmitter<TestAddress>();\r\n    availableCountries$: Observable<GetAvailableCountries.Items[]>;\r\n    form: FormGroup;\r\n    private subscription: Subscription;\r\n\r\n    constructor(\r\n        private formBuilder: FormBuilder,\r\n        private dataService: DataService,\r\n        private localStorageService: LocalStorageService,\r\n    ) {}\r\n\r\n    ngOnInit() {\r\n        this.availableCountries$ = this.dataService.settings\r\n            .getAvailableCountries()\r\n            .mapSingle(result => result.countries.items);\r\n        const storedValue = this.localStorageService.getForCurrentLocation('shippingTestAddress');\r\n        const initialValue: TestAddress = storedValue\r\n            ? storedValue\r\n            : {\r\n                  city: '',\r\n                  countryCode: '',\r\n                  postalCode: '',\r\n                  province: '',\r\n              };\r\n        this.addressChange.emit(initialValue);\r\n\r\n        this.form = this.formBuilder.group(initialValue);\r\n        this.subscription = this.form.valueChanges.subscribe(value => {\r\n            this.localStorageService.setForCurrentLocation('shippingTestAddress', value);\r\n            this.addressChange.emit(value);\r\n        });\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.subscription) {\r\n            this.subscription.unsubscribe();\r\n        }\r\n    }\r\n}\r\n","<div\r\n    class=\"test-result card\"\r\n    [ngClass]=\"{\r\n        success: testResult?.eligible === true,\r\n        error: testResult?.eligible === false,\r\n        unknown: !testResult\r\n    }\"\r\n>\r\n    <div class=\"card-header\">\r\n        {{ 'settings.test-result' | translate }}\r\n    </div>\r\n    <div class=\"card-block\">\r\n        <div class=\"result-details\" [class.stale]=\"testDataUpdated\">\r\n            <vdr-labeled-data [label]=\"'settings.eligible' | translate\">\r\n                <div class=\"eligible-icon\">\r\n                    <clr-icon\r\n                        shape=\"success-standard\"\r\n                        class=\"is-solid success\"\r\n                        *ngIf=\"testResult?.eligible\"\r\n                    ></clr-icon>\r\n                    <clr-icon\r\n                        shape=\"ban\"\r\n                        class=\"is-solid error\"\r\n                        *ngIf=\"testResult?.eligible === false\"\r\n                    ></clr-icon>\r\n                    <clr-icon shape=\"unknown-status\" *ngIf=\"!testResult\"></clr-icon>\r\n                </div>\r\n                {{ testResult?.eligible }}\r\n            </vdr-labeled-data>\r\n            <div class=\"price-row\">\r\n                <vdr-labeled-data\r\n                    [label]=\"'common.price' | translate\"\r\n                    *ngIf=\"testResult?.quote?.price != null\"\r\n                >\r\n                    {{ testResult.quote?.price | localeCurrency: currencyCode }}\r\n                </vdr-labeled-data>\r\n                <vdr-labeled-data\r\n                    [label]=\"'common.price-with-tax' | translate\"\r\n                    *ngIf=\"testResult?.quote?.priceWithTax != null\"\r\n                >\r\n                    {{ testResult.quote?.priceWithTax | localeCurrency: currencyCode }}\r\n                </vdr-labeled-data>\r\n            </div>\r\n            <vdr-object-tree\r\n                *ngIf=\"testResult?.quote?.metadata\"\r\n                [value]=\"testResult?.quote?.metadata\"\r\n            ></vdr-object-tree>\r\n        </div>\r\n    </div>\r\n    <div class=\"card-footer\">\r\n        <button class=\"btn btn-secondary\" (click)=\"runTest.emit()\" [disabled]=\"!okToRun\">\r\n            {{ 'settings.test-shipping-method' | translate }}\r\n        </button>\r\n    </div>\r\n</div>\r\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\r\n\r\nimport { CurrencyCode, TestShippingMethodResult } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-shipping-method-test-result',\r\n    templateUrl: './shipping-method-test-result.component.html',\r\n    styleUrls: ['./shipping-method-test-result.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ShippingMethodTestResultComponent {\r\n    @Input() testResult: TestShippingMethodResult;\r\n    @Input() okToRun = false;\r\n    @Input() testDataUpdated = false;\r\n    @Input() currencyCode: CurrencyCode;\r\n    @Output() runTest = new EventEmitter<void>();\r\n}\r\n","<vdr-action-bar>\r\n    <vdr-ab-left>\r\n        <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\r\n        <vdr-language-selector\r\n            [disabled]=\"isNew$ | async\"\r\n            [availableLanguageCodes]=\"availableLanguages$ | async\"\r\n            [currentLanguageCode]=\"languageCode$ | async\"\r\n            (languageCodeChange)=\"setLanguage($event)\"\r\n        ></vdr-language-selector>\r\n    </vdr-ab-left>\r\n\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"shipping-method-detail\"></vdr-action-bar-items>\r\n        <button\r\n            class=\"btn btn-primary\"\r\n            *ngIf=\"isNew$ | async; else updateButton\"\r\n            (click)=\"create()\"\r\n            [disabled]=\"detailForm.pristine || detailForm.invalid || !selectedChecker || !selectedCalculator\"\r\n        >\r\n            {{ 'common.create' | translate }}\r\n        </button>\r\n        <ng-template #updateButton>\r\n            <button\r\n                class=\"btn btn-primary\"\r\n                (click)=\"save()\"\r\n                *vdrIfPermissions=\"updatePermission\"\r\n                [disabled]=\"\r\n                    detailForm.pristine || detailForm.invalid || !selectedChecker || !selectedCalculator\r\n                \"\r\n            >\r\n                {{ 'common.update' | translate }}\r\n            </button>\r\n        </ng-template>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<form class=\"form\" [formGroup]=\"detailForm\" *ngIf=\"entity$ | async as shippingMethod\">\r\n    <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\r\n        <input\r\n            id=\"name\"\r\n            type=\"text\"\r\n            formControlName=\"name\"\r\n            [readonly]=\"!(updatePermission | hasPermission)\"\r\n            (input)=\"updateCode(shippingMethod.code, $event.target.value)\"\r\n        />\r\n    </vdr-form-field>\r\n    <vdr-form-field\r\n        [label]=\"'common.code' | translate\"\r\n        for=\"code\"\r\n        [readOnlyToggle]=\"updatePermission | hasPermission\"\r\n    >\r\n        <input\r\n            id=\"code\"\r\n            type=\"text\"\r\n            formControlName=\"code\"\r\n            [readonly]=\"!(updatePermission | hasPermission)\"\r\n        />\r\n    </vdr-form-field>\r\n    <vdr-rich-text-editor\r\n        formControlName=\"description\"\r\n        [readonly]=\"!(updatePermission | hasPermission)\"\r\n        [label]=\"'common.description' | translate\"\r\n    ></vdr-rich-text-editor>\r\n    <vdr-form-field [label]=\"'settings.fulfillment-handler' | translate\" for=\"fulfillmentHandler\" class=\"mb2\">\r\n        <select\r\n            name=\"fulfillmentHandler\"\r\n            formControlName=\"fulfillmentHandler\"\r\n            [vdrDisabled]=\"!(updatePermission | hasPermission)\"\r\n        >\r\n            <option *ngFor=\"let handler of fulfillmentHandlers\" [value]=\"handler.code\">\r\n                {{ handler.code }}: {{ handler.description }}\r\n            </option>\r\n        </select>\r\n    </vdr-form-field>\r\n\r\n    <section formGroupName=\"customFields\" *ngIf=\"customFields.length\">\r\n        <label>{{ 'common.custom-fields' | translate }}</label>\r\n        <ng-container *ngFor=\"let customField of customFields\">\r\n            <vdr-custom-field-control\r\n                *ngIf=\"customFieldIsSet(customField.name)\"\r\n                entityName=\"ShippingMethod\"\r\n                [customFieldsFormGroup]=\"detailForm.get('customFields')\"\r\n                [customField]=\"customField\"\r\n            ></vdr-custom-field-control>\r\n        </ng-container>\r\n    </section>\r\n\r\n    <div class=\"clr-row mt4\">\r\n        <div class=\"clr-col\">\r\n            <label class=\"clr-control-label\">{{ 'settings.shipping-eligibility-checker' | translate }}</label>\r\n            <vdr-configurable-input\r\n                *ngIf=\"selectedChecker && selectedCheckerDefinition\"\r\n                [operation]=\"selectedChecker\"\r\n                [operationDefinition]=\"selectedCheckerDefinition\"\r\n                [readonly]=\"!(updatePermission | hasPermission)\"\r\n                (remove)=\"selectedChecker = null\"\r\n                formControlName=\"checker\"\r\n            ></vdr-configurable-input>\r\n            <div *ngIf=\"!selectedChecker || !selectedCheckerDefinition\">\r\n                <vdr-dropdown>\r\n                    <button class=\"btn btn-outline\" vdrDropdownTrigger>\r\n                        <clr-icon shape=\"plus\"></clr-icon>\r\n                        {{ 'common.select' | translate }}\r\n                    </button>\r\n                    <vdr-dropdown-menu vdrPosition=\"bottom-left\">\r\n                        <button\r\n                            *ngFor=\"let checker of checkers\"\r\n                            type=\"button\"\r\n                            vdrDropdownItem\r\n                            (click)=\"selectChecker(checker)\"\r\n                        >\r\n                            {{ checker.description }}\r\n                        </button>\r\n                    </vdr-dropdown-menu>\r\n                </vdr-dropdown>\r\n            </div>\r\n        </div>\r\n        <div class=\"clr-col\">\r\n            <label class=\"clr-control-label\">{{ 'settings.shipping-calculator' | translate }}</label>\r\n            <vdr-configurable-input\r\n                *ngIf=\"selectedCalculator && selectedCalculatorDefinition\"\r\n                [operation]=\"selectedCalculator\"\r\n                [operationDefinition]=\"selectedCalculatorDefinition\"\r\n                [readonly]=\"!(updatePermission | hasPermission)\"\r\n                (remove)=\"selectedCalculator = null\"\r\n                formControlName=\"calculator\"\r\n            ></vdr-configurable-input>\r\n            <div *ngIf=\"!selectedCalculator || !selectedCalculatorDefinition\">\r\n                <vdr-dropdown>\r\n                    <button class=\"btn btn-outline\" vdrDropdownTrigger>\r\n                        <clr-icon shape=\"plus\"></clr-icon>\r\n                        {{ 'common.select' | translate }}\r\n                    </button>\r\n                    <vdr-dropdown-menu vdrPosition=\"bottom-left\">\r\n                        <button\r\n                            *ngFor=\"let calculator of calculators\"\r\n                            type=\"button\"\r\n                            vdrDropdownItem\r\n                            (click)=\"selectCalculator(calculator)\"\r\n                        >\r\n                            {{ calculator.description }}\r\n                        </button>\r\n                    </vdr-dropdown-menu>\r\n                </vdr-dropdown>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</form>\r\n<div class=\"testing-tool\">\r\n    <clr-accordion>\r\n        <clr-accordion-panel>\r\n            <clr-accordion-title>{{ 'settings.test-shipping-method' | translate }}</clr-accordion-title>\r\n            <clr-accordion-content *clrIfExpanded>\r\n                <div class=\"clr-row\">\r\n                    <div class=\"clr-col\">\r\n                        <vdr-test-order-builder\r\n                            (orderLinesChange)=\"setTestOrderLines($event)\"\r\n                        ></vdr-test-order-builder>\r\n                    </div>\r\n                    <div class=\"clr-col\">\r\n                        <vdr-test-address-form\r\n                            (addressChange)=\"setTestAddress($event)\"\r\n                        ></vdr-test-address-form>\r\n                        <vdr-shipping-method-test-result\r\n                            [currencyCode]=\"(activeChannel$ | async)?.currencyCode\"\r\n                            [okToRun]=\"allTestDataPresent() && testDataUpdated && detailForm.valid\"\r\n                            [testDataUpdated]=\"testDataUpdated\"\r\n                            [testResult]=\"testResult$ | async\"\r\n                            (runTest)=\"runTest()\"\r\n                        ></vdr-shipping-method-test-result>\r\n                    </div>\r\n                </div>\r\n            </clr-accordion-content>\r\n        </clr-accordion-panel>\r\n    </clr-accordion>\r\n</div>\r\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    BaseDetailComponent,\r\n    configurableDefinitionToInstance,\r\n    ConfigurableOperation,\r\n    ConfigurableOperationDefinition,\r\n    CreateShippingMethodInput,\r\n    createUpdatedTranslatable,\r\n    CustomFieldConfig,\r\n    DataService,\r\n    findTranslation,\r\n    GetActiveChannel,\r\n    getConfigArgValue,\r\n    LanguageCode,\r\n    NotificationService,\r\n    Permission,\r\n    ServerConfigService,\r\n    ShippingMethod,\r\n    TestShippingMethodInput,\r\n    TestShippingMethodResult,\r\n    toConfigurableOperationInput,\r\n    UpdateShippingMethodInput,\r\n} from '@vendure/admin-ui/core';\r\nimport { normalizeString } from '@vendure/common/lib/normalize-string';\r\nimport { combineLatest, merge, Observable, of, Subject } from 'rxjs';\r\nimport { mergeMap, switchMap, take, takeUntil } from 'rxjs/operators';\r\n\r\nimport { TestAddress } from '../test-address-form/test-address-form.component';\r\nimport { TestOrderLine } from '../test-order-builder/test-order-builder.component';\r\n\r\n@Component({\r\n    selector: 'vdr-shipping-method-detail',\r\n    templateUrl: './shipping-method-detail.component.html',\r\n    styleUrls: ['./shipping-method-detail.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ShippingMethodDetailComponent\r\n    extends BaseDetailComponent<ShippingMethod.Fragment>\r\n    implements OnInit, OnDestroy {\r\n    detailForm: FormGroup;\r\n    checkers: ConfigurableOperationDefinition[] = [];\r\n    calculators: ConfigurableOperationDefinition[] = [];\r\n    fulfillmentHandlers: ConfigurableOperationDefinition[] = [];\r\n    selectedChecker?: ConfigurableOperation | null;\r\n    selectedCheckerDefinition?: ConfigurableOperationDefinition;\r\n    selectedCalculator?: ConfigurableOperation | null;\r\n    selectedCalculatorDefinition?: ConfigurableOperationDefinition;\r\n    activeChannel$: Observable<GetActiveChannel.ActiveChannel>;\r\n    testAddress: TestAddress;\r\n    testOrderLines: TestOrderLine[];\r\n    testDataUpdated = false;\r\n    testResult$: Observable<TestShippingMethodResult | undefined>;\r\n    customFields: CustomFieldConfig[];\r\n    readonly updatePermission = [Permission.UpdateSettings, Permission.UpdateShippingMethod];\r\n    private fetchTestResult$ = new Subject<[TestAddress, TestOrderLine[]]>();\r\n\r\n    constructor(\r\n        router: Router,\r\n        route: ActivatedRoute,\r\n        serverConfigService: ServerConfigService,\r\n        private changeDetector: ChangeDetectorRef,\r\n        protected dataService: DataService,\r\n        private formBuilder: FormBuilder,\r\n        private notificationService: NotificationService,\r\n    ) {\r\n        super(route, router, serverConfigService, dataService);\r\n        this.customFields = this.getCustomFieldConfig('ShippingMethod');\r\n        this.detailForm = this.formBuilder.group({\r\n            code: ['', Validators.required],\r\n            name: ['', Validators.required],\r\n            description: '',\r\n            fulfillmentHandler: ['', Validators.required],\r\n            checker: {},\r\n            calculator: {},\r\n            customFields: this.formBuilder.group(\r\n                this.customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\r\n            ),\r\n        });\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.init();\r\n        combineLatest([\r\n            this.dataService.shippingMethod.getShippingMethodOperations().single$,\r\n            this.entity$.pipe(take(1)),\r\n        ]).subscribe(([data, entity]) => {\r\n            this.checkers = data.shippingEligibilityCheckers;\r\n            this.calculators = data.shippingCalculators;\r\n            this.fulfillmentHandlers = data.fulfillmentHandlers;\r\n            this.changeDetector.markForCheck();\r\n            this.selectedCheckerDefinition = data.shippingEligibilityCheckers.find(\r\n                c => c.code === (entity.checker && entity.checker.code),\r\n            );\r\n            this.selectedCalculatorDefinition = data.shippingCalculators.find(\r\n                c => c.code === (entity.calculator && entity.calculator.code),\r\n            );\r\n        });\r\n\r\n        this.activeChannel$ = this.dataService.settings\r\n            .getActiveChannel()\r\n            .mapStream(data => data.activeChannel);\r\n\r\n        this.testResult$ = this.fetchTestResult$.pipe(\r\n            switchMap(([address, lines]) => {\r\n                if (!this.selectedChecker || !this.selectedCalculator) {\r\n                    return of(undefined);\r\n                }\r\n                const formValue = this.detailForm.value;\r\n                const input: TestShippingMethodInput = {\r\n                    shippingAddress: { ...address, streetLine1: 'test' },\r\n                    lines: lines.map(l => ({ productVariantId: l.id, quantity: l.quantity })),\r\n                    checker: toConfigurableOperationInput(this.selectedChecker, formValue.checker),\r\n                    calculator: toConfigurableOperationInput(this.selectedCalculator, formValue.calculator),\r\n                };\r\n                return this.dataService.shippingMethod\r\n                    .testShippingMethod(input)\r\n                    .mapSingle(result => result.testShippingMethod);\r\n            }),\r\n        );\r\n\r\n        // tslint:disable:no-non-null-assertion\r\n        merge(\r\n            this.detailForm.get(['checker'])!.valueChanges,\r\n            this.detailForm.get(['calculator'])!.valueChanges,\r\n        )\r\n            .pipe(takeUntil(this.destroy$))\r\n            .subscribe(() => (this.testDataUpdated = true));\r\n        // tslint:enable:no-non-null-assertion\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.destroy();\r\n    }\r\n\r\n    customFieldIsSet(name: string): boolean {\r\n        return !!this.detailForm.get(['customFields', name]);\r\n    }\r\n\r\n    updateCode(currentCode: string, nameValue: string) {\r\n        if (!currentCode) {\r\n            const codeControl = this.detailForm.get(['code']);\r\n            if (codeControl && codeControl.pristine) {\r\n                codeControl.setValue(normalizeString(nameValue, '-'));\r\n            }\r\n        }\r\n    }\r\n\r\n    selectChecker(checker: ConfigurableOperationDefinition) {\r\n        this.selectedCheckerDefinition = checker;\r\n        this.selectedChecker = configurableDefinitionToInstance(checker);\r\n        const formControl = this.detailForm.get('checker');\r\n        if (formControl) {\r\n            formControl.clearValidators();\r\n            formControl.updateValueAndValidity({ onlySelf: true });\r\n            formControl.patchValue(this.selectedChecker);\r\n        }\r\n        this.detailForm.markAsDirty();\r\n    }\r\n\r\n    selectCalculator(calculator: ConfigurableOperationDefinition) {\r\n        this.selectedCalculatorDefinition = calculator;\r\n        this.selectedCalculator = configurableDefinitionToInstance(calculator);\r\n        const formControl = this.detailForm.get('calculator');\r\n        if (formControl) {\r\n            formControl.clearValidators();\r\n            formControl.updateValueAndValidity({ onlySelf: true });\r\n            formControl.patchValue(this.selectedCalculator);\r\n        }\r\n        this.detailForm.markAsDirty();\r\n    }\r\n\r\n    create() {\r\n        const selectedChecker = this.selectedChecker;\r\n        const selectedCalculator = this.selectedCalculator;\r\n        if (!selectedChecker || !selectedCalculator) {\r\n            return;\r\n        }\r\n        combineLatest([this.entity$, this.languageCode$])\r\n            .pipe(\r\n                take(1),\r\n                mergeMap(([shippingMethod, languageCode]) => {\r\n                    const formValue = this.detailForm.value;\r\n                    const input = {\r\n                        ...(this.getUpdatedShippingMethod(\r\n                            shippingMethod,\r\n                            this.detailForm,\r\n                            languageCode,\r\n                        ) as CreateShippingMethodInput),\r\n                        checker: toConfigurableOperationInput(selectedChecker, formValue.checker),\r\n                        calculator: toConfigurableOperationInput(selectedCalculator, formValue.calculator),\r\n                    };\r\n                    return this.dataService.shippingMethod.createShippingMethod(input);\r\n                }),\r\n            )\r\n            .subscribe(\r\n                data => {\r\n                    this.notificationService.success(_('common.notify-create-success'), {\r\n                        entity: 'ShippingMethod',\r\n                    });\r\n                    this.detailForm.markAsPristine();\r\n                    this.changeDetector.markForCheck();\r\n                    this.router.navigate(['../', data.createShippingMethod.id], { relativeTo: this.route });\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-create-error'), {\r\n                        entity: 'ShippingMethod',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    save() {\r\n        const selectedChecker = this.selectedChecker;\r\n        const selectedCalculator = this.selectedCalculator;\r\n        if (!selectedChecker || !selectedCalculator) {\r\n            return;\r\n        }\r\n        combineLatest([this.entity$, this.languageCode$])\r\n            .pipe(\r\n                take(1),\r\n                mergeMap(([shippingMethod, languageCode]) => {\r\n                    const formValue = this.detailForm.value;\r\n                    const input = {\r\n                        ...(this.getUpdatedShippingMethod(\r\n                            shippingMethod,\r\n                            this.detailForm,\r\n                            languageCode,\r\n                        ) as UpdateShippingMethodInput),\r\n                        checker: toConfigurableOperationInput(selectedChecker, formValue.checker),\r\n                        calculator: toConfigurableOperationInput(selectedCalculator, formValue.calculator),\r\n                    };\r\n                    return this.dataService.shippingMethod.updateShippingMethod(input);\r\n                }),\r\n            )\r\n            .subscribe(\r\n                data => {\r\n                    this.notificationService.success(_('common.notify-update-success'), {\r\n                        entity: 'ShippingMethod',\r\n                    });\r\n                    this.detailForm.markAsPristine();\r\n                    this.changeDetector.markForCheck();\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-update-error'), {\r\n                        entity: 'ShippingMethod',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    setTestOrderLines(event: TestOrderLine[]) {\r\n        this.testOrderLines = event;\r\n        this.testDataUpdated = true;\r\n    }\r\n\r\n    setTestAddress(event: TestAddress) {\r\n        this.testAddress = event;\r\n        this.testDataUpdated = true;\r\n    }\r\n\r\n    allTestDataPresent(): boolean {\r\n        return !!(\r\n            this.testAddress &&\r\n            this.testOrderLines &&\r\n            this.testOrderLines.length &&\r\n            this.selectedChecker &&\r\n            this.selectedCalculator\r\n        );\r\n    }\r\n\r\n    runTest() {\r\n        this.fetchTestResult$.next([this.testAddress, this.testOrderLines]);\r\n        this.testDataUpdated = false;\r\n    }\r\n\r\n    /**\r\n     * Given a ShippingMethod and the value of the detailForm, this method creates an updated copy which\r\n     * can then be persisted to the API.\r\n     */\r\n    private getUpdatedShippingMethod(\r\n        shippingMethod: ShippingMethod.Fragment,\r\n        formGroup: FormGroup,\r\n        languageCode: LanguageCode,\r\n    ): Omit<CreateShippingMethodInput | UpdateShippingMethodInput, 'checker' | 'calculator'> {\r\n        const formValue = formGroup.value;\r\n        const input = createUpdatedTranslatable({\r\n            translatable: shippingMethod,\r\n            updatedFields: formValue,\r\n            customFieldConfig: this.customFields,\r\n            languageCode,\r\n            defaultTranslation: {\r\n                languageCode,\r\n                name: shippingMethod.name || '',\r\n                description: shippingMethod.description || '',\r\n            },\r\n        });\r\n        return { ...input, fulfillmentHandler: formValue.fulfillmentHandler };\r\n    }\r\n\r\n    protected setFormValues(shippingMethod: ShippingMethod.Fragment, languageCode: LanguageCode): void {\r\n        const currentTranslation = findTranslation(shippingMethod, languageCode);\r\n        this.detailForm.patchValue({\r\n            name: currentTranslation?.name ?? '',\r\n            description: currentTranslation?.description ?? '',\r\n            code: shippingMethod.code,\r\n            fulfillmentHandler: shippingMethod.fulfillmentHandlerCode,\r\n            checker: shippingMethod.checker || {},\r\n            calculator: shippingMethod.calculator || {},\r\n        });\r\n        if (!this.selectedChecker) {\r\n            this.selectedChecker = shippingMethod.checker && {\r\n                code: shippingMethod.checker.code,\r\n                args: shippingMethod.checker.args.map(a => ({ ...a, value: getConfigArgValue(a.value) })),\r\n            };\r\n        }\r\n        if (!this.selectedCalculator) {\r\n            this.selectedCalculator = shippingMethod.calculator && {\r\n                code: shippingMethod.calculator?.code,\r\n                args: shippingMethod.calculator?.args.map(a => ({ ...a, value: getConfigArgValue(a.value) })),\r\n            };\r\n        }\r\n        if (this.customFields.length) {\r\n            const customFieldsGroup = this.detailForm.get('customFields') as FormGroup;\r\n\r\n            for (const fieldDef of this.customFields) {\r\n                const key = fieldDef.name;\r\n                const value =\r\n                    fieldDef.type === 'localeString'\r\n                        ? (currentTranslation as any).customFields[key]\r\n                        : (shippingMethod as any).customFields[key];\r\n                const control = customFieldsGroup.get(key);\r\n                if (control) {\r\n                    control.patchValue(value);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","<vdr-action-bar>\r\n    <vdr-ab-left>\r\n        <vdr-language-selector\r\n            [availableLanguageCodes]=\"availableLanguages$ | async\"\r\n            [currentLanguageCode]=\"contentLanguage$ | async\"\r\n            (languageCodeChange)=\"setLanguage($event)\"\r\n        ></vdr-language-selector>\r\n    </vdr-ab-left>\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"shipping-method-list\"></vdr-action-bar-items>\r\n        <a\r\n            class=\"btn btn-primary\"\r\n            [routerLink]=\"['./create']\"\r\n            *vdrIfPermissions=\"['CreateSettings', 'CreateShippingMethod']\"\r\n        >\r\n            <clr-icon shape=\"plus\"></clr-icon>\r\n            {{ 'settings.create-new-shipping-method' | translate }}\r\n        </a>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<vdr-data-table\r\n    [items]=\"items$ | async\"\r\n    [itemsPerPage]=\"itemsPerPage$ | async\"\r\n    [totalItems]=\"totalItems$ | async\"\r\n    [currentPage]=\"currentPage$ | async\"\r\n    (pageChange)=\"setPageNumber($event)\"\r\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\r\n>\r\n    <vdr-dt-column>{{ 'common.code' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'common.name' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <ng-template let-shippingMethod=\"item\">\r\n        <td class=\"left align-middle\">{{ shippingMethod.code }}</td>\r\n        <td class=\"left align-middle\">{{ shippingMethod.name }}</td>\r\n        <td class=\"right align-middle\">\r\n            <vdr-table-row-action\r\n                iconShape=\"edit\"\r\n                [label]=\"'common.edit' | translate\"\r\n                [linkTo]=\"['./', shippingMethod.id]\"\r\n            ></vdr-table-row-action>\r\n        </td>\r\n        <td class=\"right align-middle\">\r\n            <vdr-dropdown>\r\n                <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger>\r\n                    {{ 'common.actions' | translate }}\r\n                    <clr-icon shape=\"caret down\"></clr-icon>\r\n                </button>\r\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                    <button\r\n                        type=\"button\"\r\n                        class=\"delete-button\"\r\n                        (click)=\"deleteShippingMethod(shippingMethod.id)\"\r\n                        [disabled]=\"!(['DeleteSettings', 'DeleteShippingMethod'] | hasPermission)\"\r\n                        vdrDropdownItem\r\n                    >\r\n                        <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                        {{ 'common.delete' | translate }}\r\n                    </button>\r\n                </vdr-dropdown-menu>\r\n            </vdr-dropdown>\r\n        </td>\r\n    </ng-template>\r\n</vdr-data-table>\r\n\r\n<div class=\"testing-tool\">\r\n    <clr-accordion>\r\n        <clr-accordion-panel>\r\n            <clr-accordion-title>{{ 'settings.test-shipping-methods' | translate }}</clr-accordion-title>\r\n            <clr-accordion-content *clrIfExpanded>\r\n                <div class=\"clr-row\">\r\n                    <div class=\"clr-col\">\r\n                        <vdr-test-order-builder\r\n                            (orderLinesChange)=\"setTestOrderLines($event)\"\r\n                        ></vdr-test-order-builder>\r\n                    </div>\r\n                    <div class=\"clr-col\">\r\n                        <vdr-test-address-form\r\n                            (addressChange)=\"setTestAddress($event)\"\r\n                        ></vdr-test-address-form>\r\n                        <vdr-shipping-eligibility-test-result\r\n                            [currencyCode]=\"(activeChannel$ | async)?.currencyCode\"\r\n                            [okToRun]=\"allTestDataPresent()\"\r\n                            [testDataUpdated]=\"testDataUpdated\"\r\n                            [testResult]=\"testResult$ | async\"\r\n                            (runTest)=\"runTest()\"\r\n                        ></vdr-shipping-eligibility-test-result>\r\n                    </div>\r\n                </div>\r\n            </clr-accordion-content>\r\n        </clr-accordion-panel>\r\n    </clr-accordion>\r\n</div>\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    BaseListComponent,\r\n    DataService,\r\n    GetActiveChannel,\r\n    GetShippingMethodList,\r\n    LanguageCode,\r\n    ModalService,\r\n    NotificationService,\r\n    ServerConfigService,\r\n    ShippingMethodQuote,\r\n    TestEligibleShippingMethodsInput,\r\n} from '@vendure/admin-ui/core';\r\nimport { EMPTY, Observable, Subject } from 'rxjs';\r\nimport { switchMap, tap } from 'rxjs/operators';\r\n\r\nimport { TestAddress } from '../test-address-form/test-address-form.component';\r\nimport { TestOrderLine } from '../test-order-builder/test-order-builder.component';\r\n\r\n@Component({\r\n    selector: 'vdr-shipping-method-list',\r\n    templateUrl: './shipping-method-list.component.html',\r\n    styleUrls: ['./shipping-method-list.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ShippingMethodListComponent\r\n    extends BaseListComponent<GetShippingMethodList.Query, GetShippingMethodList.Items>\r\n    implements OnInit {\r\n    activeChannel$: Observable<GetActiveChannel.ActiveChannel>;\r\n    testAddress: TestAddress;\r\n    testOrderLines: TestOrderLine[];\r\n    testDataUpdated = false;\r\n    testResult$: Observable<ShippingMethodQuote[] | undefined>;\r\n    availableLanguages$: Observable<LanguageCode[]>;\r\n    contentLanguage$: Observable<LanguageCode>;\r\n    private fetchTestResult$ = new Subject<[TestAddress, TestOrderLine[]]>();\r\n\r\n    constructor(\r\n        private modalService: ModalService,\r\n        private notificationService: NotificationService,\r\n        private dataService: DataService,\r\n        private serverConfigService: ServerConfigService,\r\n        router: Router,\r\n        route: ActivatedRoute,\r\n    ) {\r\n        super(router, route);\r\n        super.setQueryFn(\r\n            (...args: any[]) =>\r\n                this.dataService.shippingMethod.getShippingMethods(...args).refetchOnChannelChange(),\r\n            data => data.shippingMethods,\r\n        );\r\n    }\r\n\r\n    ngOnInit() {\r\n        super.ngOnInit();\r\n        this.testResult$ = this.fetchTestResult$.pipe(\r\n            switchMap(([address, lines]) => {\r\n                const input: TestEligibleShippingMethodsInput = {\r\n                    shippingAddress: { ...address, streetLine1: 'test' },\r\n                    lines: lines.map(l => ({ productVariantId: l.id, quantity: l.quantity })),\r\n                };\r\n                return this.dataService.shippingMethod\r\n                    .testEligibleShippingMethods(input)\r\n                    .mapSingle(result => result.testEligibleShippingMethods);\r\n            }),\r\n        );\r\n        this.activeChannel$ = this.dataService.settings\r\n            .getActiveChannel()\r\n            .mapStream(data => data.activeChannel);\r\n        this.availableLanguages$ = this.serverConfigService.getAvailableLanguages();\r\n        this.contentLanguage$ = this.dataService.client\r\n            .uiState()\r\n            .mapStream(({ uiState }) => uiState.contentLanguage)\r\n            .pipe(tap(() => this.refresh()));\r\n    }\r\n\r\n    deleteShippingMethod(id: string) {\r\n        this.modalService\r\n            .dialog({\r\n                title: _('catalog.confirm-delete-shipping-method'),\r\n                buttons: [\r\n                    { type: 'secondary', label: _('common.cancel') },\r\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\r\n                ],\r\n            })\r\n            .pipe(\r\n                switchMap(response =>\r\n                    response ? this.dataService.shippingMethod.deleteShippingMethod(id) : EMPTY,\r\n                ),\r\n            )\r\n            .subscribe(\r\n                () => {\r\n                    this.notificationService.success(_('common.notify-delete-success'), {\r\n                        entity: 'ShippingMethod',\r\n                    });\r\n                    this.refresh();\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-delete-error'), {\r\n                        entity: 'ShippingMethod',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    setTestOrderLines(event: TestOrderLine[]) {\r\n        this.testOrderLines = event;\r\n        this.testDataUpdated = true;\r\n    }\r\n\r\n    setTestAddress(event: TestAddress) {\r\n        this.testAddress = event;\r\n        this.testDataUpdated = true;\r\n    }\r\n\r\n    allTestDataPresent(): boolean {\r\n        return !!(this.testAddress && this.testOrderLines && this.testOrderLines.length);\r\n    }\r\n\r\n    runTest() {\r\n        this.fetchTestResult$.next([this.testAddress, this.testOrderLines]);\r\n        this.testDataUpdated = false;\r\n    }\r\n\r\n    setLanguage(code: LanguageCode) {\r\n        this.dataService.client.setContentLanguage(code).subscribe();\r\n    }\r\n}\r\n","<vdr-action-bar>\r\n    <vdr-ab-left>\r\n        <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\r\n    </vdr-ab-left>\r\n\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"tax-category-detail\"></vdr-action-bar-items>\r\n        <button\r\n            class=\"btn btn-primary\"\r\n            *ngIf=\"isNew$ | async; else updateButton\"\r\n            (click)=\"create()\"\r\n            [disabled]=\"!saveButtonEnabled()\"\r\n        >\r\n            {{ 'common.create' | translate }}\r\n        </button>\r\n        <ng-template #updateButton>\r\n            <button\r\n                class=\"btn btn-primary\"\r\n                (click)=\"save()\"\r\n                [disabled]=\"!saveButtonEnabled()\"\r\n                *vdrIfPermissions=\"updatePermission\"\r\n            >\r\n                {{ 'common.update' | translate }}\r\n            </button>\r\n        </ng-template>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<form class=\"form\" [formGroup]=\"detailForm\">\r\n    <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\r\n        <input\r\n            id=\"name\"\r\n            type=\"text\"\r\n            formControlName=\"name\"\r\n            [readonly]=\"!(updatePermission | hasPermission)\"\r\n        />\r\n    </vdr-form-field>\r\n    <vdr-form-field [label]=\"'common.default-tax-category' | translate\" for=\"isDefault\">\r\n        <clr-toggle-wrapper>\r\n            <input\r\n                type=\"checkbox\"\r\n                clrToggle\r\n                id=\"isDefault\"\r\n                [vdrDisabled]=\"!(updatePermission | hasPermission)\"\r\n                formControlName=\"isDefault\"\r\n            />\r\n        </clr-toggle-wrapper>\r\n    </vdr-form-field>\r\n</form>\r\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport { BaseDetailComponent, Permission } from '@vendure/admin-ui/core';\nimport {\n    ConfigurableOperation,\n    CreateTaxCategoryInput,\n    LanguageCode,\n    TaxCategory,\n    UpdateTaxCategoryInput,\n} from '@vendure/admin-ui/core';\nimport { NotificationService } from '@vendure/admin-ui/core';\nimport { DataService } from '@vendure/admin-ui/core';\nimport { ServerConfigService } from '@vendure/admin-ui/core';\nimport { Observable } from 'rxjs';\nimport { mergeMap, take } from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-tax-detail',\n    templateUrl: './tax-category-detail.component.html',\n    styleUrls: ['./tax-category-detail.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TaxCategoryDetailComponent\n    extends BaseDetailComponent<TaxCategory.Fragment>\n    implements OnInit, OnDestroy {\n    taxCategory$: Observable<TaxCategory.Fragment>;\n    detailForm: FormGroup;\n    readonly updatePermission = [Permission.UpdateSettings, Permission.UpdateTaxCategory];\n\n    private taxCondition: ConfigurableOperation;\n    private taxAction: ConfigurableOperation;\n\n    constructor(\n        router: Router,\n        route: ActivatedRoute,\n        serverConfigService: ServerConfigService,\n        private changeDetector: ChangeDetectorRef,\n        protected dataService: DataService,\n        private formBuilder: FormBuilder,\n        private notificationService: NotificationService,\n    ) {\n        super(route, router, serverConfigService, dataService);\n        this.detailForm = this.formBuilder.group({\n            name: ['', Validators.required],\n            isDefault: false,\n        });\n    }\n\n    ngOnInit() {\n        this.init();\n        this.taxCategory$ = this.entity$;\n    }\n\n    ngOnDestroy() {\n        this.destroy();\n    }\n\n    saveButtonEnabled(): boolean {\n        return this.detailForm.dirty && this.detailForm.valid;\n    }\n\n    create() {\n        if (!this.detailForm.dirty) {\n            return;\n        }\n        const formValue = this.detailForm.value;\n        const input = { name: formValue.name, isDefault: formValue.isDefault } as CreateTaxCategoryInput;\n        this.dataService.settings.createTaxCategory(input).subscribe(\n            data => {\n                this.notificationService.success(_('common.notify-create-success'), {\n                    entity: 'TaxCategory',\n                });\n                this.detailForm.markAsPristine();\n                this.changeDetector.markForCheck();\n                this.router.navigate(['../', data.createTaxCategory.id], { relativeTo: this.route });\n            },\n            err => {\n                this.notificationService.error(_('common.notify-create-error'), {\n                    entity: 'TaxCategory',\n                });\n            },\n        );\n    }\n\n    save() {\n        if (!this.detailForm.dirty) {\n            return;\n        }\n        const formValue = this.detailForm.value;\n        this.taxCategory$\n            .pipe(\n                take(1),\n                mergeMap(taxCategory => {\n                    const input = {\n                        id: taxCategory.id,\n                        name: formValue.name,\n                        isDefault: formValue.isDefault,\n                    } as UpdateTaxCategoryInput;\n                    return this.dataService.settings.updateTaxCategory(input);\n                }),\n            )\n            .subscribe(\n                data => {\n                    this.notificationService.success(_('common.notify-update-success'), {\n                        entity: 'TaxCategory',\n                    });\n                    this.detailForm.markAsPristine();\n                    this.changeDetector.markForCheck();\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-update-error'), {\n                        entity: 'TaxCategory',\n                    });\n                },\n            );\n    }\n\n    /**\n     * Update the form values when the entity changes.\n     */\n    protected setFormValues(entity: TaxCategory.Fragment, languageCode: LanguageCode): void {\n        this.detailForm.patchValue({\n            name: entity.name,\n            isDefault: entity.isDefault,\n        });\n    }\n}\n","<vdr-action-bar>\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"tax-category-list\"></vdr-action-bar-items>\r\n        <a class=\"btn btn-primary\" [routerLink]=\"['./create']\" *vdrIfPermissions=\"['CreateSettings', 'CreateTaxCategory']\">\r\n            <clr-icon shape=\"plus\"></clr-icon>\r\n            {{ 'settings.create-new-tax-category' | translate }}\r\n        </a>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<vdr-data-table [items]=\"taxCategories$ | async\">\r\n    <vdr-dt-column>{{ 'common.name' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <ng-template let-taxCategory=\"item\">\r\n        <td class=\"left align-middle\">{{ taxCategory.name }}</td>\r\n        <td class=\"left align-middle\">\r\n            <vdr-chip *ngIf=\"taxCategory.isDefault\">{{ 'common.default-tax-category' | translate }}</vdr-chip>\r\n        </td>\r\n        <td class=\"right align-middle\">\r\n            <vdr-table-row-action\r\n                iconShape=\"edit\"\r\n                [label]=\"'common.edit' | translate\"\r\n                [linkTo]=\"['./', taxCategory.id]\"\r\n            ></vdr-table-row-action>\r\n        </td>\r\n        <td class=\"right align-middle\">\r\n            <vdr-dropdown>\r\n                <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger>\r\n                    {{ 'common.actions' | translate }}\r\n                    <clr-icon shape=\"caret down\"></clr-icon>\r\n                </button>\r\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                    <button\r\n                        type=\"button\"\r\n                        class=\"delete-button\"\r\n                        (click)=\"deleteTaxCategory(taxCategory)\"\r\n                        [disabled]=\"!(['DeleteSettings', 'DeleteTaxCategory'] | hasPermission)\"\r\n                        vdrDropdownItem\r\n                    >\r\n                        <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                        {{ 'common.delete' | translate }}\r\n                    </button>\r\n                </vdr-dropdown-menu>\r\n            </vdr-dropdown>\r\n        </td>\r\n    </ng-template>\r\n</vdr-data-table>\r\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport { EMPTY, Observable } from 'rxjs';\r\nimport { map, switchMap } from 'rxjs/operators';\r\n\r\nimport { DeletionResult, GetTaxCategories, TaxCategory } from '@vendure/admin-ui/core';\r\nimport { NotificationService } from '@vendure/admin-ui/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\nimport { QueryResult } from '@vendure/admin-ui/core';\r\nimport { ModalService } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-tax-list',\r\n    templateUrl: './tax-category-list.component.html',\r\n    styleUrls: ['./tax-category-list.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class TaxCategoryListComponent {\r\n    taxCategories$: Observable<TaxCategory.Fragment[]>;\r\n    private queryResult: QueryResult<GetTaxCategories.Query>;\r\n\r\n    constructor(\r\n        private dataService: DataService,\r\n        private notificationService: NotificationService,\r\n        private modalService: ModalService,\r\n    ) {\r\n        this.queryResult = this.dataService.settings.getTaxCategories();\r\n        this.taxCategories$ = this.queryResult.mapStream(data => data.taxCategories);\r\n    }\r\n\r\n    deleteTaxCategory(taxCategory: TaxCategory.Fragment) {\r\n        return this.modalService\r\n            .dialog({\r\n                title: _('settings.confirm-delete-tax-category'),\r\n                body: taxCategory.name,\r\n                buttons: [\r\n                    { type: 'secondary', label: _('common.cancel') },\r\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\r\n                ],\r\n            })\r\n            .pipe(\r\n                switchMap(res => (res ? this.dataService.settings.deleteTaxCategory(taxCategory.id) : EMPTY)),\r\n                map(res => res.deleteTaxCategory),\r\n            )\r\n            .subscribe(\r\n                res => {\r\n                    if (res.result === DeletionResult.DELETED) {\r\n                        this.notificationService.success(_('common.notify-delete-success'), {\r\n                            entity: 'TaxRate',\r\n                        });\r\n                        this.queryResult.ref.refetch();\r\n                    } else {\r\n                        this.notificationService.error(res.message || _('common.notify-delete-error'), {\r\n                            entity: 'TaxRate',\r\n                        });\r\n                    }\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-delete-error'), {\r\n                        entity: 'TaxRate',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n}\r\n","<vdr-action-bar>\r\n    <vdr-ab-left>\r\n        <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\r\n    </vdr-ab-left>\r\n\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"tax-rate-detail\"></vdr-action-bar-items>\r\n        <button\r\n            class=\"btn btn-primary\"\r\n            *ngIf=\"isNew$ | async; else updateButton\"\r\n            (click)=\"create()\"\r\n            [disabled]=\"!saveButtonEnabled()\"\r\n        >\r\n            {{ 'common.create' | translate }}\r\n        </button>\r\n        <ng-template #updateButton>\r\n            <button\r\n                class=\"btn btn-primary\"\r\n                (click)=\"save()\"\r\n                [disabled]=\"!saveButtonEnabled()\"\r\n                *vdrIfPermissions=\"updatePermission\"\r\n            >\r\n                {{ 'common.update' | translate }}\r\n            </button>\r\n        </ng-template>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<form class=\"form\" [formGroup]=\"detailForm\">\r\n    <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\r\n        <input\r\n            id=\"name\"\r\n            type=\"text\"\r\n            formControlName=\"name\"\r\n            [readonly]=\"!(updatePermission | hasPermission)\"\r\n        />\r\n    </vdr-form-field>\r\n    <vdr-form-field [label]=\"'common.enabled' | translate\" for=\"enabled\">\r\n        <clr-toggle-wrapper>\r\n            <input\r\n                type=\"checkbox\"\r\n                clrToggle\r\n                id=\"enabled\"\r\n                formControlName=\"enabled\"\r\n                [vdrDisabled]=\"!(updatePermission | hasPermission)\"\r\n            />\r\n        </clr-toggle-wrapper>\r\n    </vdr-form-field>\r\n    <vdr-form-field [label]=\"'settings.rate' | translate\" for=\"value\">\r\n        <vdr-affixed-input suffix=\"%\">\r\n            <input\r\n                id=\"value\"\r\n                type=\"number\"\r\n                step=\"0.1\"\r\n                formControlName=\"value\"\r\n                [readonly]=\"!(updatePermission | hasPermission)\"\r\n            />\r\n        </vdr-affixed-input>\r\n    </vdr-form-field>\r\n    <vdr-form-field [label]=\"'settings.tax-category' | translate\" for=\"taxCategoryId\">\r\n        <select\r\n            clrSelect\r\n            name=\"taxCategoryId\"\r\n            formControlName=\"taxCategoryId\"\r\n            [vdrDisabled]=\"!(updatePermission | hasPermission)\"\r\n        >\r\n            <option *ngFor=\"let taxCategory of taxCategories$ | async\" [value]=\"taxCategory.id\">\r\n                {{ taxCategory.name }}\r\n            </option>\r\n        </select>\r\n    </vdr-form-field>\r\n    <vdr-form-field [label]=\"'settings.zone' | translate\" for=\"zoneId\">\r\n        <select\r\n            clrSelect\r\n            name=\"zoneId\"\r\n            formControlName=\"zoneId\"\r\n            [vdrDisabled]=\"!(updatePermission | hasPermission)\"\r\n        >\r\n            <option *ngFor=\"let zone of zones$ | async\" [value]=\"zone.id\">{{ zone.name }}</option>\r\n        </select>\r\n    </vdr-form-field>\r\n</form>\r\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    BaseDetailComponent,\n    CreateTaxRateInput,\n    CustomerGroup,\n    DataService,\n    GetZones,\n    LanguageCode,\n    NotificationService,\n    Permission,\n    ServerConfigService,\n    TaxCategory,\n    TaxRate,\n    UpdateTaxRateInput,\n} from '@vendure/admin-ui/core';\nimport { Observable } from 'rxjs';\nimport { mergeMap, take } from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-tax-rate-detail',\n    templateUrl: './tax-rate-detail.component.html',\n    styleUrls: ['./tax-rate-detail.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TaxRateDetailComponent\n    extends BaseDetailComponent<TaxRate.Fragment>\n    implements OnInit, OnDestroy {\n    taxCategories$: Observable<TaxCategory.Fragment[]>;\n    zones$: Observable<GetZones.Zones[]>;\n    groups$: Observable<CustomerGroup[]>;\n    detailForm: FormGroup;\n    readonly updatePermission = [Permission.UpdateSettings, Permission.UpdateTaxRate];\n\n    constructor(\n        router: Router,\n        route: ActivatedRoute,\n        serverConfigService: ServerConfigService,\n        private changeDetector: ChangeDetectorRef,\n        protected dataService: DataService,\n        private formBuilder: FormBuilder,\n        private notificationService: NotificationService,\n    ) {\n        super(route, router, serverConfigService, dataService);\n        this.detailForm = this.formBuilder.group({\n            name: ['', Validators.required],\n            enabled: [true],\n            value: [0, Validators.required],\n            taxCategoryId: [''],\n            zoneId: [''],\n            customerGroupId: [''],\n        });\n    }\n\n    ngOnInit() {\n        this.init();\n        this.taxCategories$ = this.dataService.settings\n            .getTaxCategories()\n            .mapSingle(data => data.taxCategories);\n        this.zones$ = this.dataService.settings.getZones().mapSingle(data => data.zones);\n    }\n\n    ngOnDestroy() {\n        this.destroy();\n    }\n\n    saveButtonEnabled(): boolean {\n        return this.detailForm.dirty && this.detailForm.valid;\n    }\n\n    create() {\n        if (!this.detailForm.dirty) {\n            return;\n        }\n        const formValue = this.detailForm.value;\n        const input = {\n            name: formValue.name,\n            enabled: formValue.enabled,\n            value: formValue.value,\n            categoryId: formValue.taxCategoryId,\n            zoneId: formValue.zoneId,\n            customerGroupId: formValue.customerGroupId,\n        } as CreateTaxRateInput;\n        this.dataService.settings.createTaxRate(input).subscribe(\n            data => {\n                this.notificationService.success(_('common.notify-create-success'), {\n                    entity: 'TaxRate',\n                });\n                this.detailForm.markAsPristine();\n                this.changeDetector.markForCheck();\n                this.router.navigate(['../', data.createTaxRate.id], { relativeTo: this.route });\n            },\n            err => {\n                this.notificationService.error(_('common.notify-create-error'), {\n                    entity: 'TaxRate',\n                });\n            },\n        );\n    }\n\n    save() {\n        if (!this.detailForm.dirty) {\n            return;\n        }\n        const formValue = this.detailForm.value;\n        this.entity$\n            .pipe(\n                take(1),\n                mergeMap(taxRate => {\n                    const input = {\n                        id: taxRate.id,\n                        name: formValue.name,\n                        enabled: formValue.enabled,\n                        value: formValue.value,\n                        categoryId: formValue.taxCategoryId,\n                        zoneId: formValue.zoneId,\n                        customerGroupId: formValue.customerGroupId,\n                    } as UpdateTaxRateInput;\n                    return this.dataService.settings.updateTaxRate(input);\n                }),\n            )\n            .subscribe(\n                data => {\n                    this.notificationService.success(_('common.notify-update-success'), {\n                        entity: 'TaxRate',\n                    });\n                    this.detailForm.markAsPristine();\n                    this.changeDetector.markForCheck();\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-update-error'), {\n                        entity: 'TaxRate',\n                    });\n                },\n            );\n    }\n\n    /**\n     * Update the form values when the entity changes.\n     */\n    protected setFormValues(entity: TaxRate.Fragment, languageCode: LanguageCode): void {\n        this.detailForm.patchValue({\n            name: entity.name,\n            enabled: entity.enabled,\n            value: entity.value,\n            taxCategoryId: entity.category ? entity.category.id : '',\n            zoneId: entity.zone ? entity.zone.id : '',\n            customerGroupId: entity.customerGroup ? entity.customerGroup.id : '',\n        });\n    }\n}\n","<vdr-action-bar>\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"tax-rate-list\"></vdr-action-bar-items>\r\n        <a class=\"btn btn-primary\" [routerLink]=\"['./create']\" *vdrIfPermissions=\"['CreateSettings', 'CreateTaxRate']\">\r\n            <clr-icon shape=\"plus\"></clr-icon>\r\n            {{ 'settings.create-new-tax-rate' | translate }}\r\n        </a>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<vdr-data-table\r\n    [items]=\"items$ | async\"\r\n    [itemsPerPage]=\"itemsPerPage$ | async\"\r\n    [totalItems]=\"totalItems$ | async\"\r\n    [currentPage]=\"currentPage$ | async\"\r\n    (pageChange)=\"setPageNumber($event)\"\r\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\r\n>\r\n    <vdr-dt-column>{{ 'common.name' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'settings.tax-category' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'settings.zone' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'settings.tax-rate' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <ng-template let-taxRate=\"item\">\r\n        <td class=\"left align-middle\">{{ taxRate.name }}</td>\r\n        <td class=\"left align-middle\">{{ taxRate.category.name }}</td>\r\n        <td class=\"left align-middle\">{{ taxRate.zone.name }}</td>\r\n        <td class=\"left align-middle\">{{ taxRate.value }}%</td>\r\n        <td class=\"right align-middle\">\r\n            <vdr-table-row-action\r\n                iconShape=\"edit\"\r\n                [label]=\"'common.edit' | translate\"\r\n                [linkTo]=\"['./', taxRate.id]\"\r\n            ></vdr-table-row-action>\r\n        </td>\r\n        <td class=\"right align-middle\">\r\n            <vdr-dropdown>\r\n                <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger>\r\n                    {{ 'common.actions' | translate }}\r\n                    <clr-icon shape=\"caret down\"></clr-icon>\r\n                </button>\r\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                    <button\r\n                        type=\"button\"\r\n                        class=\"delete-button\"\r\n                        (click)=\"deleteTaxRate(taxRate)\"\r\n                        [disabled]=\"!(['DeleteSettings', 'DeleteTaxRate'] | hasPermission)\"\r\n                        vdrDropdownItem\r\n                    >\r\n                        <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                        {{ 'common.delete' | translate }}\r\n                    </button>\r\n                </vdr-dropdown-menu>\r\n            </vdr-dropdown>\r\n        </td>\r\n    </ng-template>\r\n</vdr-data-table>\r\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport { EMPTY } from 'rxjs';\r\nimport { map, switchMap } from 'rxjs/operators';\r\n\r\nimport { BaseListComponent } from '@vendure/admin-ui/core';\r\nimport { DeletionResult, GetTaxRateList } from '@vendure/admin-ui/core';\r\nimport { NotificationService } from '@vendure/admin-ui/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\nimport { ModalService } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-tax-rate-list',\r\n    templateUrl: './tax-rate-list.component.html',\r\n    styleUrls: ['./tax-rate-list.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class TaxRateListComponent extends BaseListComponent<GetTaxRateList.Query, GetTaxRateList.Items> {\r\n    constructor(\r\n        private modalService: ModalService,\r\n        private notificationService: NotificationService,\r\n        private dataService: DataService,\r\n        router: Router,\r\n        route: ActivatedRoute,\r\n    ) {\r\n        super(router, route);\r\n        super.setQueryFn(\r\n            (...args: any[]) => this.dataService.settings.getTaxRates(...args),\r\n            data => data.taxRates,\r\n        );\r\n    }\r\n\r\n    deleteTaxRate(taxRate: GetTaxRateList.Items) {\r\n        return this.modalService\r\n            .dialog({\r\n                title: _('settings.confirm-delete-tax-rate'),\r\n                body: taxRate.name,\r\n                buttons: [\r\n                    { type: 'secondary', label: _('common.cancel') },\r\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\r\n                ],\r\n            })\r\n            .pipe(\r\n                switchMap(res => (res ? this.dataService.settings.deleteTaxRate(taxRate.id) : EMPTY)),\r\n                map(res => res.deleteTaxRate),\r\n            )\r\n            .subscribe(\r\n                res => {\r\n                    if (res.result === DeletionResult.DELETED) {\r\n                        this.notificationService.success(_('common.notify-delete-success'), {\r\n                            entity: 'TaxRate',\r\n                        });\r\n                        this.refresh();\r\n                    } else {\r\n                        this.notificationService.error(res.message || _('common.notify-delete-error'), {\r\n                            entity: 'TaxRate',\r\n                        });\r\n                    }\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-delete-error'), {\r\n                        entity: 'TaxRate',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n}\r\n","<ng-template vdrDialogTitle>\r\n    <span *ngIf=\"zone.id\">{{ 'settings.update-zone' | translate }}</span>\r\n    <span *ngIf=\"!zone.id\">{{ 'settings.create-zone' | translate }}</span>\r\n</ng-template>\r\n\r\n<vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\r\n    <input id=\"name\" type=\"text\" [(ngModel)]=\"zone.name\" [readonly]=\"!(['UpdateSettings', 'UpdateZone'] | hasPermission)\" />\r\n</vdr-form-field>\r\n\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button type=\"submit\" (click)=\"save()\" [disabled]=\"!zone.name\" class=\"btn btn-primary\">\r\n        <span *ngIf=\"zone.id\">{{ 'settings.update-zone' | translate }}</span>\r\n        <span *ngIf=\"!zone.id\">{{ 'settings.create-zone' | translate }}</span>\r\n    </button>\r\n</ng-template>\r\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { Dialog } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-zone-detail-dialog',\r\n    templateUrl: './zone-detail-dialog.component.html',\r\n    styleUrls: ['./zone-detail-dialog.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ZoneDetailDialogComponent implements Dialog<string> {\r\n    zone: { id?: string; name: string };\r\n    resolveWith: (result?: string) => void;\r\n\r\n    cancel() {\r\n        this.resolveWith();\r\n    }\r\n\r\n    save() {\r\n        this.resolveWith(this.zone.name);\r\n    }\r\n}\r\n","<vdr-action-bar>\r\n    <vdr-ab-left> </vdr-ab-left>\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"zone-list\"></vdr-action-bar-items>\r\n        <button class=\"btn btn-primary\" *vdrIfPermissions=\"['CreateSettings', 'CreateZone']\" (click)=\"create()\">\r\n            <clr-icon shape=\"plus\"></clr-icon>\r\n            {{ 'settings.create-new-zone' | translate }}\r\n        </button>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n<div class=\"zone-wrapper\">\r\n    <table class=\"table zone-list\">\r\n        <tbody>\r\n            <tr *ngFor=\"let zone of zones$ | async\" [class.active]=\"zone.id === (activeZone$ | async)?.id\">\r\n                <td class=\"left align-middle\"><vdr-entity-info [entity]=\"zone\"></vdr-entity-info></td>\r\n                <td class=\"left align-middle\"><vdr-chip [colorFrom]=\"zone.name\">{{ zone.name }}</vdr-chip></td>\r\n                <td class=\"text-right align-middle\">\r\n                    <a\r\n                        class=\"btn btn-link btn-sm\"\r\n                        [routerLink]=\"['./', { contents: zone.id }]\"\r\n                        queryParamsHandling=\"preserve\"\r\n                    >\r\n                        <clr-icon shape=\"view-list\"></clr-icon>\r\n                        {{ 'settings.view-zone-members' | translate }}\r\n                    </a>\r\n                </td>\r\n                <td class=\"align-middle\">\r\n                    <button class=\"btn btn-link btn-sm\" (click)=\"update(zone)\">\r\n                        <clr-icon shape=\"edit\"></clr-icon>\r\n                        {{ 'common.edit' | translate }}\r\n                    </button>\r\n                </td>\r\n                <td class=\"align-middle\">\r\n                    <vdr-dropdown>\r\n                        <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger>\r\n                            {{ 'common.actions' | translate }}\r\n                            <clr-icon shape=\"caret down\"></clr-icon>\r\n                        </button>\r\n                        <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                            <button\r\n                                class=\"button\"\r\n                                vdrDropdownItem\r\n                                (click)=\"delete(zone.id)\"\r\n                                [disabled]=\"!(['DeleteSettings', 'DeleteZone'] | hasPermission)\"\r\n                            >\r\n                                <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                                {{ 'common.delete' | translate }}\r\n                            </button>\r\n                        </vdr-dropdown-menu>\r\n                    </vdr-dropdown>\r\n                </td>\r\n            </tr>\r\n        </tbody>\r\n    </table>\r\n    <div class=\"zone-members\" [class.expanded]=\"activeZone$ | async\">\r\n        <ng-container *ngIf=\"activeZone$ | async as activeZone\">\r\n            <vdr-zone-member-list\r\n                [members]=\"activeZone.members\"\r\n                [selectedMemberIds]=\"selectedMemberIds\"\r\n                (selectionChange)=\"selectedMemberIds = $event\"\r\n            >\r\n                <div *vdrZoneMemberListHeader>\r\n                    <div class=\"flex\">\r\n                        <div class=\"header-title-row\">\r\n                            {{ activeZone.name }} ({{ activeZone.members.length }})\r\n                        </div>\r\n                        <div class=\"flex-spacer\"></div>\r\n                        <button type=\"button\" class=\"close-button\" (click)=\"closeMembers()\">\r\n                            <clr-icon shape=\"close\"></clr-icon>\r\n                        </button>\r\n                    </div>\r\n                    <div class=\"controls\">\r\n                        <vdr-dropdown>\r\n                            <button\r\n                                type=\"button\"\r\n                                class=\"btn btn-secondary btn-sm\"\r\n                                vdrDropdownTrigger\r\n                                [disabled]=\"selectedMemberIds.length === 0\"\r\n                            >\r\n                                {{ 'common.with-selected' | translate }}\r\n                                <clr-icon shape=\"caret down\"></clr-icon>\r\n                            </button>\r\n                            <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                                <button\r\n                                    type=\"button\"\r\n                                    class=\"delete-button\"\r\n                                    (click)=\"removeFromZone(activeZone, selectedMemberIds)\"\r\n                                    vdrDropdownItem\r\n                                    [disabled]=\"!(['UpdateSettings', 'UpdateZone'] | hasPermission)\"\r\n                                >\r\n                                    <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                                    {{ 'settings.remove-from-zone' | translate }}\r\n                                </button>\r\n                            </vdr-dropdown-menu>\r\n                        </vdr-dropdown>\r\n                        <button class=\"btn btn-secondary btn-sm\" (click)=\"addToZone(activeZone)\">\r\n                            {{ 'settings.add-countries-to-zone' | translate: { zoneName: activeZone.name } }}\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div *vdrZoneMemberControls=\"let member = member\">\r\n                    <vdr-dropdown>\r\n                        <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger>\r\n                            {{ 'common.actions' | translate }}\r\n                            <clr-icon shape=\"caret down\"></clr-icon>\r\n                        </button>\r\n                        <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                            <a\r\n                                type=\"button\"\r\n                                [routerLink]=\"['/settings', 'countries', member.id]\"\r\n                                vdrDropdownItem\r\n                            >\r\n                                <clr-icon shape=\"edit\"></clr-icon>\r\n                                {{ 'common.edit' | translate }}\r\n                            </a>\r\n                            <button\r\n                                type=\"button\"\r\n                                class=\"delete-button\"\r\n                                (click)=\"removeFromZone(activeZone, [member.id])\"\r\n                                vdrDropdownItem\r\n                                [disabled]=\"!(['UpdateSettings', 'UpdateZone'] | hasPermission)\"\r\n                            >\r\n                                <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                                {{ 'settings.remove-from-zone' | translate }}\r\n                            </button>\r\n                        </vdr-dropdown-menu>\r\n                    </vdr-dropdown>\r\n                </div>\r\n            </vdr-zone-member-list>\r\n        </ng-container>\r\n    </div>\r\n</div>\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    Country,\r\n    DataService,\r\n    DeletionResult,\r\n    GetZones,\r\n    ModalService,\r\n    NotificationService,\r\n} from '@vendure/admin-ui/core';\r\nimport { combineLatest, EMPTY, Observable, of } from 'rxjs';\r\nimport { distinctUntilChanged, map, mapTo, startWith, switchMap, tap } from 'rxjs/operators';\r\n\r\nimport { AddCountryToZoneDialogComponent } from '../add-country-to-zone-dialog/add-country-to-zone-dialog.component';\r\nimport { ZoneDetailDialogComponent } from '../zone-detail-dialog/zone-detail-dialog.component';\r\n\r\n@Component({\r\n    selector: 'vdr-zone-list',\r\n    templateUrl: './zone-list.component.html',\r\n    styleUrls: ['./zone-list.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ZoneListComponent implements OnInit {\r\n    activeZone$: Observable<GetZones.Zones | undefined>;\r\n    zones$: Observable<GetZones.Zones[]>;\r\n    members$: Observable<GetZones.Members[]>;\r\n    selectedMemberIds: string[] = [];\r\n\r\n    constructor(\r\n        private dataService: DataService,\r\n        private notificationService: NotificationService,\r\n        private modalService: ModalService,\r\n        private route: ActivatedRoute,\r\n        private router: Router,\r\n    ) {}\r\n\r\n    ngOnInit(): void {\r\n        this.zones$ = this.dataService.settings.getZones().mapStream(data => data.zones);\r\n        const activeZoneId$ = this.route.paramMap.pipe(\r\n            map(pm => pm.get('contents')),\r\n            distinctUntilChanged(),\r\n            tap(() => (this.selectedMemberIds = [])),\r\n        );\r\n        this.activeZone$ = combineLatest(this.zones$, activeZoneId$).pipe(\r\n            map(([zones, activeZoneId]) => {\r\n                if (activeZoneId) {\r\n                    return zones.find(z => z.id === activeZoneId);\r\n                }\r\n            }),\r\n        );\r\n    }\r\n\r\n    create() {\r\n        this.modalService\r\n            .fromComponent(ZoneDetailDialogComponent, { locals: { zone: { name: '' } } })\r\n            .pipe(\r\n                switchMap(name =>\r\n                    name ? this.dataService.settings.createZone({ name, memberIds: [] }) : EMPTY,\r\n                ),\r\n                // refresh list\r\n                switchMap(() => this.dataService.settings.getZones().single$),\r\n            )\r\n            .subscribe(\r\n                () => {\r\n                    this.notificationService.success(_('common.notify-create-success'), {\r\n                        entity: 'Zone',\r\n                    });\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-create-error'), {\r\n                        entity: 'Zone',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    delete(zoneId: string) {\r\n        this.modalService\r\n            .dialog({\r\n                title: _('catalog.confirm-delete-zone'),\r\n                buttons: [\r\n                    { type: 'secondary', label: _('common.cancel') },\r\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\r\n                ],\r\n            })\r\n            .pipe(\r\n                switchMap(response => (response ? this.dataService.settings.deleteZone(zoneId) : EMPTY)),\r\n\r\n                switchMap(result => {\r\n                    if (result.deleteZone.result === DeletionResult.DELETED) {\r\n                        // refresh list\r\n                        return this.dataService.settings\r\n                            .getZones()\r\n                            .mapSingle(() => ({ errorMessage: false }));\r\n                    } else {\r\n                        return of({ errorMessage: result.deleteZone.message });\r\n                    }\r\n                }),\r\n            )\r\n            .subscribe(\r\n                result => {\r\n                    if (typeof result.errorMessage === 'string') {\r\n                        this.notificationService.error(result.errorMessage);\r\n                    } else {\r\n                        this.notificationService.success(_('common.notify-delete-success'), {\r\n                            entity: 'Zone',\r\n                        });\r\n                    }\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-delete-error'), {\r\n                        entity: 'Zone',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    update(zone: GetZones.Zones) {\r\n        this.modalService\r\n            .fromComponent(ZoneDetailDialogComponent, { locals: { zone } })\r\n            .pipe(\r\n                switchMap(name =>\r\n                    name ? this.dataService.settings.updateZone({ id: zone.id, name }) : EMPTY,\r\n                ),\r\n            )\r\n            .subscribe(\r\n                () => {\r\n                    this.notificationService.success(_('common.notify-update-success'), {\r\n                        entity: 'Zone',\r\n                    });\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-update-error'), {\r\n                        entity: 'Zone',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    closeMembers() {\r\n        const params = { ...this.route.snapshot.params };\r\n        delete params.contents;\r\n        this.router.navigate(['./', params], { relativeTo: this.route, queryParamsHandling: 'preserve' });\r\n    }\r\n\r\n    addToZone(zone: GetZones.Zones) {\r\n        this.modalService\r\n            .fromComponent(AddCountryToZoneDialogComponent, {\r\n                locals: {\r\n                    zoneName: zone.name,\r\n                    currentMembers: zone.members,\r\n                },\r\n                size: 'md',\r\n            })\r\n            .pipe(\r\n                switchMap(memberIds =>\r\n                    memberIds\r\n                        ? this.dataService.settings\r\n                              .addMembersToZone(zone.id, memberIds)\r\n                              .pipe(mapTo(memberIds))\r\n                        : EMPTY,\r\n                ),\r\n            )\r\n            .subscribe({\r\n                next: result => {\r\n                    this.notificationService.success(_(`settings.add-countries-to-zone-success`), {\r\n                        countryCount: result.length,\r\n                        zoneName: zone.name,\r\n                    });\r\n                },\r\n                error: err => {\r\n                    this.notificationService.error(err);\r\n                },\r\n            });\r\n    }\r\n\r\n    removeFromZone(zone: GetZones.Zones, memberIds: string[]) {\r\n        this.dataService.settings.removeMembersFromZone(zone.id, memberIds).subscribe({\r\n            complete: () => {\r\n                this.notificationService.success(_(`settings.remove-countries-from-zone-success`), {\r\n                    countryCount: memberIds.length,\r\n                    zoneName: zone.name,\r\n                });\r\n            },\r\n        });\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { BaseEntityResolver } from '@vendure/admin-ui/core';\r\nimport { Administrator, Role } from '@vendure/admin-ui/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class AdministratorResolver extends BaseEntityResolver<Administrator.Fragment> {\r\n    constructor(router: Router, dataService: DataService) {\r\n        super(\r\n            router,\r\n            {\r\n                __typename: 'Administrator' as 'Administrator',\r\n                id: '',\r\n                createdAt: '',\r\n                updatedAt: '',\r\n                emailAddress: '',\r\n                firstName: '',\r\n                lastName: '',\r\n                user: { roles: [] } as any,\r\n            },\r\n            id => dataService.administrator.getAdministrator(id).mapStream(data => data.administrator),\r\n        );\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { BaseEntityResolver } from '@vendure/admin-ui/core';\r\nimport { Channel, CurrencyCode } from '@vendure/admin-ui/core';\r\nimport { getDefaultUiLanguage } from '@vendure/admin-ui/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\n\r\n/**\r\n * Resolves the id from the path into a Customer entity.\r\n */\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class ChannelResolver extends BaseEntityResolver<Channel.Fragment> {\r\n    constructor(router: Router, dataService: DataService) {\r\n        super(\r\n            router,\r\n            {\r\n                __typename: 'Channel',\r\n                id: '',\r\n                createdAt: '',\r\n                updatedAt: '',\r\n                code: '',\r\n                token: '',\r\n                pricesIncludeTax: false,\r\n                currencyCode: CurrencyCode.USD,\r\n                defaultLanguageCode: getDefaultUiLanguage(),\r\n                defaultShippingZone: {} as any,\r\n                defaultTaxZone: {} as any,\r\n            },\r\n            (id) => dataService.settings.getChannel(id).mapStream((data) => data.channel),\r\n        );\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { BaseEntityResolver } from '@vendure/admin-ui/core';\r\nimport { Country } from '@vendure/admin-ui/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\n\r\n/**\r\n * Resolves the id from the path into a Customer entity.\r\n */\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class CountryResolver extends BaseEntityResolver<Country.Fragment> {\r\n    constructor(router: Router, dataService: DataService) {\r\n        super(\r\n            router,\r\n            {\r\n                __typename: 'Country',\r\n                id: '',\r\n                createdAt: '',\r\n                updatedAt: '',\r\n                code: '',\r\n                name: '',\r\n                enabled: false,\r\n                translations: [],\r\n            },\r\n            id => dataService.settings.getCountry(id).mapStream(data => data.country),\r\n        );\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { BaseEntityResolver } from '@vendure/admin-ui/core';\r\nimport { GetGlobalSettings } from '@vendure/admin-ui/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\n\r\n/**\r\n * Resolves the global settings.\r\n */\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class GlobalSettingsResolver extends BaseEntityResolver<GetGlobalSettings.GlobalSettings> {\r\n    constructor(router: Router, dataService: DataService) {\r\n        super(\r\n            router,\r\n            // we will never be creating a new GlobalSettings entity, so this part is not used.\r\n            {} as any,\r\n            () => dataService.settings.getGlobalSettings().mapStream(data => data.globalSettings),\r\n        );\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { BaseEntityResolver } from '@vendure/admin-ui/core';\r\nimport { PaymentMethod } from '@vendure/admin-ui/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\n\r\n/**\r\n * Resolves the id from the path into a Customer entity.\r\n */\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class PaymentMethodResolver extends BaseEntityResolver<PaymentMethod.Fragment> {\r\n    constructor(router: Router, dataService: DataService) {\r\n        super(\r\n            router,\r\n            {\r\n                __typename: 'PaymentMethod',\r\n                id: '',\r\n                createdAt: '',\r\n                updatedAt: '',\r\n                name: '',\r\n                code: '',\r\n                description: '',\r\n                enabled: true,\r\n                checker: undefined as any,\r\n                handler: undefined as any,\r\n            },\r\n            id => dataService.settings.getPaymentMethod(id).mapStream(data => data.paymentMethod),\r\n        );\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { BaseEntityResolver } from '@vendure/admin-ui/core';\r\nimport { Administrator, Role } from '@vendure/admin-ui/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class ProfileResolver extends BaseEntityResolver<Administrator.Fragment> {\r\n    constructor(router: Router, dataService: DataService) {\r\n        super(\r\n            router,\r\n            {\r\n                __typename: 'Administrator' as 'Administrator',\r\n                id: '',\r\n                createdAt: '',\r\n                updatedAt: '',\r\n                emailAddress: '',\r\n                firstName: '',\r\n                lastName: '',\r\n                user: { roles: [] } as any,\r\n            },\r\n            id =>\r\n                dataService.administrator\r\n                    .getActiveAdministrator()\r\n                    .mapStream(data => data.activeAdministrator),\r\n        );\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { BaseEntityResolver } from '@vendure/admin-ui/core';\r\nimport { Role } from '@vendure/admin-ui/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class RoleResolver extends BaseEntityResolver<Role.Fragment> {\r\n    constructor(router: Router, dataService: DataService) {\r\n        super(\r\n            router,\r\n            {\r\n                __typename: 'Role' as 'Role',\r\n                id: '',\r\n                createdAt: '',\r\n                updatedAt: '',\r\n                code: '',\r\n                description: '',\r\n                permissions: [],\r\n                channels: [],\r\n            },\r\n            id => dataService.administrator.getRole(id).mapStream(data => data.role),\r\n        );\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BaseEntityResolver } from '@vendure/admin-ui/core';\nimport { ShippingMethod } from '@vendure/admin-ui/core';\nimport { DataService } from '@vendure/admin-ui/core';\n\n/**\n * Resolves the id from the path into a Customer entity.\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class ShippingMethodResolver extends BaseEntityResolver<ShippingMethod.Fragment> {\n    constructor(router: Router, dataService: DataService) {\n        super(\n            router,\n            {\n                __typename: 'ShippingMethod',\n                createdAt: '',\n                updatedAt: '',\n                id: '',\n                code: '',\n                name: '',\n                description: '',\n                fulfillmentHandlerCode: undefined as any,\n                checker: undefined as any,\n                calculator: undefined as any,\n                translations: [],\n            },\n            id => dataService.shippingMethod.getShippingMethod(id).mapStream(data => data.shippingMethod),\n        );\n    }\n}\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { BaseEntityResolver, DataService, TaxCategory } from '@vendure/admin-ui/core';\r\n\r\n/**\r\n * Resolves the id from the path into a Customer entity.\r\n */\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class TaxCategoryResolver extends BaseEntityResolver<TaxCategory.Fragment> {\r\n    constructor(router: Router, dataService: DataService) {\r\n        super(\r\n            router,\r\n            {\r\n                __typename: 'TaxCategory',\r\n                id: '',\r\n                createdAt: '',\r\n                updatedAt: '',\r\n                name: '',\r\n                isDefault: false,\r\n            },\r\n            id => dataService.settings.getTaxCategory(id).mapStream(data => data.taxCategory),\r\n        );\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { BaseEntityResolver, DataService, TaxRate } from '@vendure/admin-ui/core';\r\n\r\n/**\r\n * Resolves the id from the path into a Customer entity.\r\n */\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class TaxRateResolver extends BaseEntityResolver<TaxRate.Fragment> {\r\n    constructor(router: Router, dataService: DataService) {\r\n        super(\r\n            router,\r\n            {\r\n                __typename: 'TaxRate',\r\n                id: '',\r\n                createdAt: '',\r\n                updatedAt: '',\r\n                name: '',\r\n                value: 0,\r\n                enabled: true,\r\n                category: {} as any,\r\n                zone: {} as any,\r\n                customerGroup: null,\r\n            },\r\n            id => dataService.settings.getTaxRate(id).mapStream(data => data.taxRate),\r\n        );\r\n    }\r\n}\r\n","import { Route } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    Administrator,\r\n    CanDeactivateDetailGuard,\r\n    Channel,\r\n    Country,\r\n    createResolveData,\r\n    detailBreadcrumb,\r\n    Role,\r\n    ShippingMethod,\r\n    TaxCategory,\r\n    TaxRate,\r\n} from '@vendure/admin-ui/core';\r\n\r\nimport { AdminDetailComponent } from './components/admin-detail/admin-detail.component';\r\nimport { AdministratorListComponent } from './components/administrator-list/administrator-list.component';\r\nimport { ChannelDetailComponent } from './components/channel-detail/channel-detail.component';\r\nimport { ChannelListComponent } from './components/channel-list/channel-list.component';\r\nimport { CountryDetailComponent } from './components/country-detail/country-detail.component';\r\nimport { CountryListComponent } from './components/country-list/country-list.component';\r\nimport { GlobalSettingsComponent } from './components/global-settings/global-settings.component';\r\nimport { PaymentMethodDetailComponent } from './components/payment-method-detail/payment-method-detail.component';\r\nimport { PaymentMethodListComponent } from './components/payment-method-list/payment-method-list.component';\r\nimport { ProfileComponent } from './components/profile/profile.component';\r\nimport { RoleDetailComponent } from './components/role-detail/role-detail.component';\r\nimport { RoleListComponent } from './components/role-list/role-list.component';\r\nimport { ShippingMethodDetailComponent } from './components/shipping-method-detail/shipping-method-detail.component';\r\nimport { ShippingMethodListComponent } from './components/shipping-method-list/shipping-method-list.component';\r\nimport { TaxCategoryDetailComponent } from './components/tax-category-detail/tax-category-detail.component';\r\nimport { TaxCategoryListComponent } from './components/tax-category-list/tax-category-list.component';\r\nimport { TaxRateDetailComponent } from './components/tax-rate-detail/tax-rate-detail.component';\r\nimport { TaxRateListComponent } from './components/tax-rate-list/tax-rate-list.component';\r\nimport { ZoneListComponent } from './components/zone-list/zone-list.component';\r\nimport { AdministratorResolver } from './providers/routing/administrator-resolver';\r\nimport { ChannelResolver } from './providers/routing/channel-resolver';\r\nimport { CountryResolver } from './providers/routing/country-resolver';\r\nimport { GlobalSettingsResolver } from './providers/routing/global-settings-resolver';\r\nimport { PaymentMethodResolver } from './providers/routing/payment-method-resolver';\r\nimport { ProfileResolver } from './providers/routing/profile-resolver';\r\nimport { RoleResolver } from './providers/routing/role-resolver';\r\nimport { ShippingMethodResolver } from './providers/routing/shipping-method-resolver';\r\nimport { TaxCategoryResolver } from './providers/routing/tax-category-resolver';\r\nimport { TaxRateResolver } from './providers/routing/tax-rate-resolver';\r\n\r\nexport const settingsRoutes: Route[] = [\r\n    {\r\n        path: 'profile',\r\n        component: ProfileComponent,\r\n        resolve: createResolveData(ProfileResolver),\r\n        canDeactivate: [CanDeactivateDetailGuard],\r\n        data: {\r\n            breadcrumb: _('breadcrumb.profile'),\r\n        },\r\n    },\r\n    {\r\n        path: 'administrators',\r\n        component: AdministratorListComponent,\r\n        data: {\r\n            breadcrumb: _('breadcrumb.administrators'),\r\n        },\r\n    },\r\n    {\r\n        path: 'administrators/:id',\r\n        component: AdminDetailComponent,\r\n        resolve: createResolveData(AdministratorResolver),\r\n        canDeactivate: [CanDeactivateDetailGuard],\r\n        data: { breadcrumb: administratorBreadcrumb },\r\n    },\r\n    {\r\n        path: 'channels',\r\n        component: ChannelListComponent,\r\n        data: {\r\n            breadcrumb: _('breadcrumb.channels'),\r\n        },\r\n    },\r\n    {\r\n        path: 'channels/:id',\r\n        component: ChannelDetailComponent,\r\n        resolve: createResolveData(ChannelResolver),\r\n        canDeactivate: [CanDeactivateDetailGuard],\r\n        data: { breadcrumb: channelBreadcrumb },\r\n    },\r\n    {\r\n        path: 'roles',\r\n        component: RoleListComponent,\r\n        data: {\r\n            breadcrumb: _('breadcrumb.roles'),\r\n        },\r\n    },\r\n    {\r\n        path: 'roles/:id',\r\n        component: RoleDetailComponent,\r\n        resolve: createResolveData(RoleResolver),\r\n        canDeactivate: [CanDeactivateDetailGuard],\r\n        data: { breadcrumb: roleBreadcrumb },\r\n    },\r\n    {\r\n        path: 'tax-categories',\r\n        component: TaxCategoryListComponent,\r\n        data: {\r\n            breadcrumb: _('breadcrumb.tax-categories'),\r\n        },\r\n    },\r\n    {\r\n        path: 'tax-categories/:id',\r\n        component: TaxCategoryDetailComponent,\r\n        resolve: createResolveData(TaxCategoryResolver),\r\n        canDeactivate: [CanDeactivateDetailGuard],\r\n        data: {\r\n            breadcrumb: taxCategoryBreadcrumb,\r\n        },\r\n    },\r\n    {\r\n        path: 'tax-rates',\r\n        component: TaxRateListComponent,\r\n        data: {\r\n            breadcrumb: _('breadcrumb.tax-rates'),\r\n        },\r\n    },\r\n    {\r\n        path: 'tax-rates/:id',\r\n        component: TaxRateDetailComponent,\r\n        resolve: createResolveData(TaxRateResolver),\r\n        canDeactivate: [CanDeactivateDetailGuard],\r\n        data: {\r\n            breadcrumb: taxRateBreadcrumb,\r\n        },\r\n    },\r\n    {\r\n        path: 'countries',\r\n        component: CountryListComponent,\r\n        data: {\r\n            breadcrumb: _('breadcrumb.countries'),\r\n        },\r\n    },\r\n    {\r\n        path: 'countries/:id',\r\n        component: CountryDetailComponent,\r\n        resolve: createResolveData(CountryResolver),\r\n        canDeactivate: [CanDeactivateDetailGuard],\r\n        data: {\r\n            breadcrumb: countryBreadcrumb,\r\n        },\r\n    },\r\n    {\r\n        path: 'zones',\r\n        component: ZoneListComponent,\r\n        data: {\r\n            breadcrumb: _('breadcrumb.zones'),\r\n        },\r\n    },\r\n    {\r\n        path: 'shipping-methods',\r\n        component: ShippingMethodListComponent,\r\n        data: {\r\n            breadcrumb: _('breadcrumb.shipping-methods'),\r\n        },\r\n    },\r\n    {\r\n        path: 'shipping-methods/:id',\r\n        component: ShippingMethodDetailComponent,\r\n        resolve: createResolveData(ShippingMethodResolver),\r\n        canDeactivate: [CanDeactivateDetailGuard],\r\n        data: {\r\n            breadcrumb: shippingMethodBreadcrumb,\r\n        },\r\n    },\r\n    {\r\n        path: 'payment-methods',\r\n        component: PaymentMethodListComponent,\r\n        data: {\r\n            breadcrumb: _('breadcrumb.payment-methods'),\r\n        },\r\n    },\r\n    {\r\n        path: 'payment-methods/:id',\r\n        component: PaymentMethodDetailComponent,\r\n        resolve: createResolveData(PaymentMethodResolver),\r\n        canDeactivate: [CanDeactivateDetailGuard],\r\n        data: {\r\n            breadcrumb: paymentMethodBreadcrumb,\r\n        },\r\n    },\r\n    {\r\n        path: 'global-settings',\r\n        component: GlobalSettingsComponent,\r\n        resolve: createResolveData(GlobalSettingsResolver),\r\n        canDeactivate: [CanDeactivateDetailGuard],\r\n        data: {\r\n            breadcrumb: _('breadcrumb.global-settings'),\r\n        },\r\n    },\r\n];\r\n\r\nexport function administratorBreadcrumb(data: any, params: any) {\r\n    return detailBreadcrumb<Administrator>({\r\n        entity: data.entity,\r\n        id: params.id,\r\n        breadcrumbKey: 'breadcrumb.administrators',\r\n        getName: admin => `${admin.firstName} ${admin.lastName}`,\r\n        route: 'administrators',\r\n    });\r\n}\r\n\r\nexport function channelBreadcrumb(data: any, params: any) {\r\n    return detailBreadcrumb<Channel>({\r\n        entity: data.entity,\r\n        id: params.id,\r\n        breadcrumbKey: 'breadcrumb.channels',\r\n        getName: channel => channel.code,\r\n        route: 'channels',\r\n    });\r\n}\r\n\r\nexport function roleBreadcrumb(data: any, params: any) {\r\n    return detailBreadcrumb<Role>({\r\n        entity: data.entity,\r\n        id: params.id,\r\n        breadcrumbKey: 'breadcrumb.roles',\r\n        getName: role => role.description,\r\n        route: 'roles',\r\n    });\r\n}\r\n\r\nexport function taxCategoryBreadcrumb(data: any, params: any) {\r\n    return detailBreadcrumb<TaxCategory.Fragment>({\r\n        entity: data.entity,\r\n        id: params.id,\r\n        breadcrumbKey: 'breadcrumb.tax-categories',\r\n        getName: category => category.name,\r\n        route: 'tax-categories',\r\n    });\r\n}\r\n\r\nexport function taxRateBreadcrumb(data: any, params: any) {\r\n    return detailBreadcrumb<TaxRate.Fragment>({\r\n        entity: data.entity,\r\n        id: params.id,\r\n        breadcrumbKey: 'breadcrumb.tax-rates',\r\n        getName: category => category.name,\r\n        route: 'tax-rates',\r\n    });\r\n}\r\n\r\nexport function countryBreadcrumb(data: any, params: any) {\r\n    return detailBreadcrumb<Country.Fragment>({\r\n        entity: data.entity,\r\n        id: params.id,\r\n        breadcrumbKey: 'breadcrumb.countries',\r\n        getName: promotion => promotion.name,\r\n        route: 'countries',\r\n    });\r\n}\r\n\r\nexport function shippingMethodBreadcrumb(data: any, params: any) {\r\n    return detailBreadcrumb<ShippingMethod.Fragment>({\r\n        entity: data.entity,\r\n        id: params.id,\r\n        breadcrumbKey: 'breadcrumb.shipping-methods',\r\n        getName: method => method.name,\r\n        route: 'shipping-methods',\r\n    });\r\n}\r\n\r\nexport function paymentMethodBreadcrumb(data: any, params: any) {\r\n    return detailBreadcrumb<ShippingMethod.Fragment>({\r\n        entity: data.entity,\r\n        id: params.id,\r\n        breadcrumbKey: 'breadcrumb.payment-methods',\r\n        getName: method => method.code,\r\n        route: 'payment-methods',\r\n    });\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { SharedModule } from '@vendure/admin-ui/core';\r\n\r\nimport { AddCountryToZoneDialogComponent } from './components/add-country-to-zone-dialog/add-country-to-zone-dialog.component';\r\nimport { AdminDetailComponent } from './components/admin-detail/admin-detail.component';\r\nimport { AdministratorListComponent } from './components/administrator-list/administrator-list.component';\r\nimport { ChannelDetailComponent } from './components/channel-detail/channel-detail.component';\r\nimport { ChannelListComponent } from './components/channel-list/channel-list.component';\r\nimport { CountryDetailComponent } from './components/country-detail/country-detail.component';\r\nimport { CountryListComponent } from './components/country-list/country-list.component';\r\nimport { GlobalSettingsComponent } from './components/global-settings/global-settings.component';\r\nimport { PaymentMethodDetailComponent } from './components/payment-method-detail/payment-method-detail.component';\r\nimport { PaymentMethodListComponent } from './components/payment-method-list/payment-method-list.component';\r\nimport { PermissionGridComponent } from './components/permission-grid/permission-grid.component';\r\nimport { ProfileComponent } from './components/profile/profile.component';\r\nimport { RoleDetailComponent } from './components/role-detail/role-detail.component';\r\nimport { RoleListComponent } from './components/role-list/role-list.component';\r\nimport { ShippingEligibilityTestResultComponent } from './components/shipping-eligibility-test-result/shipping-eligibility-test-result.component';\r\nimport { ShippingMethodDetailComponent } from './components/shipping-method-detail/shipping-method-detail.component';\r\nimport { ShippingMethodListComponent } from './components/shipping-method-list/shipping-method-list.component';\r\nimport { ShippingMethodTestResultComponent } from './components/shipping-method-test-result/shipping-method-test-result.component';\r\nimport { TaxCategoryDetailComponent } from './components/tax-category-detail/tax-category-detail.component';\r\nimport { TaxCategoryListComponent } from './components/tax-category-list/tax-category-list.component';\r\nimport { TaxRateDetailComponent } from './components/tax-rate-detail/tax-rate-detail.component';\r\nimport { TaxRateListComponent } from './components/tax-rate-list/tax-rate-list.component';\r\nimport { TestAddressFormComponent } from './components/test-address-form/test-address-form.component';\r\nimport { TestOrderBuilderComponent } from './components/test-order-builder/test-order-builder.component';\r\nimport { ZoneDetailDialogComponent } from './components/zone-detail-dialog/zone-detail-dialog.component';\r\nimport { ZoneListComponent } from './components/zone-list/zone-list.component';\r\nimport { ZoneMemberControlsDirective } from './components/zone-member-list/zone-member-controls.directive';\r\nimport { ZoneMemberListHeaderDirective } from './components/zone-member-list/zone-member-list-header.directive';\r\nimport { ZoneMemberListComponent } from './components/zone-member-list/zone-member-list.component';\r\nimport { settingsRoutes } from './settings.routes';\r\n\r\n@NgModule({\r\n    imports: [SharedModule, RouterModule.forChild(settingsRoutes)],\r\n    declarations: [\r\n        TaxCategoryListComponent,\r\n        TaxCategoryDetailComponent,\r\n        AdministratorListComponent,\r\n        RoleListComponent,\r\n        RoleDetailComponent,\r\n        AdminDetailComponent,\r\n        PermissionGridComponent,\r\n        CountryListComponent,\r\n        CountryDetailComponent,\r\n        TaxRateListComponent,\r\n        TaxRateDetailComponent,\r\n        ChannelListComponent,\r\n        ChannelDetailComponent,\r\n        ShippingMethodListComponent,\r\n        ShippingMethodDetailComponent,\r\n        PaymentMethodListComponent,\r\n        PaymentMethodDetailComponent,\r\n        GlobalSettingsComponent,\r\n        TestOrderBuilderComponent,\r\n        TestAddressFormComponent,\r\n        ShippingMethodTestResultComponent,\r\n        ShippingEligibilityTestResultComponent,\r\n        ZoneListComponent,\r\n        AddCountryToZoneDialogComponent,\r\n        ZoneMemberListComponent,\r\n        ZoneMemberListHeaderDirective,\r\n        ZoneMemberControlsDirective,\r\n        ZoneDetailDialogComponent,\r\n        ProfileComponent,\r\n    ],\r\n})\r\nexport class SettingsModule {}\r\n"]}