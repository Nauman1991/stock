{"version":3,"sources":["webpack:///src/lib/catalog/src/components/asset-detail/asset-detail.component.html","webpack:///src/lib/catalog/src/components/asset-detail/asset-detail.component.ts","webpack:///src/lib/catalog/src/components/asset-list/asset-list.component.ts","webpack:///src/lib/catalog/src/components/asset-list/asset-list.component.html","webpack:///src/lib/catalog/src/components/collection-contents/collection-contents.component.html","webpack:///src/lib/catalog/src/components/collection-contents/collection-contents.component.ts","webpack:///src/lib/catalog/src/components/collection-detail/collection-detail.component.html","webpack:///src/lib/catalog/src/components/collection-detail/collection-detail.component.ts","webpack:///src/lib/catalog/src/components/collection-tree/array-to-tree.ts","webpack:///src/lib/catalog/src/components/collection-tree/collection-tree.component.html","webpack:///src/lib/catalog/src/components/collection-tree/collection-tree.component.ts","webpack:///src/lib/catalog/src/components/collection-list/collection-list.component.html","webpack:///src/lib/catalog/src/components/collection-list/collection-list.component.ts","webpack:///src/lib/catalog/src/components/facet-detail/facet-detail.component.html","webpack:///src/lib/catalog/src/components/facet-detail/facet-detail.component.ts","webpack:///src/lib/catalog/src/components/facet-list/facet-list.component.html","webpack:///src/lib/catalog/src/components/facet-list/facet-list.component.ts","webpack:///src/lib/catalog/src/providers/product-detail/replace-last.ts","webpack:///src/lib/catalog/src/providers/product-detail/product-detail.service.ts","webpack:///src/lib/catalog/src/components/apply-facet-dialog/apply-facet-dialog.component.html","webpack:///src/lib/catalog/src/components/apply-facet-dialog/apply-facet-dialog.component.ts","webpack:///src/lib/catalog/src/components/assign-products-to-channel-dialog/assign-products-to-channel-dialog.component.html","webpack:///src/lib/catalog/src/components/assign-products-to-channel-dialog/assign-products-to-channel-dialog.component.ts","webpack:///src/lib/catalog/src/components/product-detail/product-detail.component.html","webpack:///src/lib/catalog/src/components/product-detail/product-detail.component.ts","webpack:///src/lib/catalog/src/components/product-search-input/product-search-input.component.html","webpack:///src/lib/catalog/src/components/product-search-input/product-search-input.component.ts","webpack:///src/lib/catalog/src/components/product-list/product-list.component.html","webpack:///src/lib/catalog/src/components/product-list/product-list.component.ts","webpack:///src/lib/catalog/src/components/confirm-variant-deletion-dialog/confirm-variant-deletion-dialog.component.html","webpack:///src/lib/catalog/src/components/confirm-variant-deletion-dialog/confirm-variant-deletion-dialog.component.ts","webpack:///src/lib/catalog/src/components/option-value-input/option-value-input.component.html","webpack:///src/lib/catalog/src/components/option-value-input/option-value-input.component.ts","webpack:///src/lib/catalog/src/components/product-variants-editor/product-variants-editor.component.html","webpack:///src/lib/catalog/src/components/product-variants-editor/product-variants-editor.component.ts","webpack:///src/lib/catalog/src/providers/routing/asset-resolver.ts","webpack:///src/lib/catalog/src/providers/routing/collection-resolver.ts","webpack:///src/lib/catalog/src/providers/routing/facet-resolver.ts","webpack:///src/lib/catalog/src/providers/routing/product-resolver.ts","webpack:///src/lib/catalog/src/providers/routing/product-variants-resolver.ts","webpack:///src/lib/catalog/src/catalog.routes.ts","webpack:///src/lib/catalog/src/components/collection-tree/collection-tree-node.component.html","webpack:///src/lib/catalog/src/components/collection-tree/collection-tree-node.component.ts","webpack:///src/lib/catalog/src/components/generate-product-variants/generate-product-variants.component.html","webpack:///src/lib/catalog/src/components/generate-product-variants/generate-product-variants.component.ts","webpack:///src/lib/catalog/src/components/product-assets/product-assets.component.html","webpack:///src/lib/catalog/src/components/product-assets/product-assets.component.ts","webpack:///src/lib/catalog/src/components/update-product-option-dialog/update-product-option-dialog.component.html","webpack:///src/lib/catalog/src/components/update-product-option-dialog/update-product-option-dialog.component.ts","webpack:///src/lib/catalog/src/components/variant-price-detail/variant-price-detail.component.html","webpack:///src/lib/catalog/src/components/variant-price-detail/variant-price-detail.component.ts","webpack:///src/lib/catalog/src/components/product-variants-list/product-variants-list.component.html","webpack:///src/lib/catalog/src/components/product-variants-list/product-variants-list.component.ts","webpack:///src/lib/catalog/src/components/product-variants-table/product-variants-table.component.html","webpack:///src/lib/catalog/src/components/product-variants-table/product-variants-table.component.ts","webpack:///src/lib/catalog/src/catalog.module.ts"],"names":["router","route","serverConfigService","notificationService","dataService","formBuilder","super","detailForm","this","customFields","getCustomFieldConfig","name","tags","group","reduce","hash","field","init","destroy","event","get","setValue","markAsDirty","product","updateAsset","id","value","subscribe","success","entity","err","error","languageCode","length","customFieldsGroup","key","control","patchValue","onAssetChange","modalService","searchTerm$","BehaviorSubject","filterByTags$","uploading","getAssetList","data","assets","skip","take","searchTerm","map","t","options","filter","contains","sort","createdAt","DESC","tagsOperator","AND","paginationConfig$","combineLatest","itemsPerPage$","currentPage$","totalItems$","pipe","itemsPerPage","currentPage","totalItems","debounceTime","takeUntil","destroy$","refresh","allTags$","getTagList","mapStream","items","files","createAssets","finalize","successCount","result","__typename","message","count","showModalAndDelete","a","switchMap","response","DELETED","r","assetIds","dialog","title","translationVars","body","buttons","type","label","returnValue","res","deleteAssets","filesSelected","setItemsPerPage","setPageNumber","filterTermControl","collectionIdChange$","refresh$","Subject","contentsCurrentPage$","paramMap","qpm","page","startWith","distinctUntilChanged","contentsItemsPerPage$","perPage","filterTerm$","valueChanges","tap","setContentsPageNumber","collection$","filterTerm","collection","getCollectionContents","mapSingle","of","contents$","productVariants","contentsTotalItems$","changes","next","collectionId","currentValue","complete","setParam","navigate","snapshot","params","relativeTo","queryParamsHandling","setContentsItemsPerPage","changeDetector","assetChanges","filters","allFilters","updatePermission","UpdateCatalog","UpdateCollection","required","slug","description","visible","array","getCollectionFilters","single$","collectionFilters","find","f","code","Object","values","nameValue","entity$","languageCode$","slugControl","currentTranslation","currentSlugIsEmpty","pristine","normalizeString","collectionFilter","filtersArray","findIndex","o","argsHash","args","output","arg","push","index","removeAt","splice","dirty","mergeMap","category","input","getUpdatedCollection","parentId","createCollection","markAsPristine","markForCheck","updateCollection","contentsComponent","featuredAsset","isPrivate","forEach","addFilter","fieldDef","form","updatedCategory","translatable","updatedFields","customFieldConfig","defaultTranslation","featuredAssetId","mapOperationsToInputs","operations","formValueOperations","i","arguments","j","setLanguage","arrayToTree","nodes","currentState","tree","nodeMap","topLevelNodes","mappedArr","currentStateMap","Map","visit","node","set","children","n","hasOwnProperty","mappedElem","expanded","parent","expandAll","rearrange","deleteCollection","collections","collectionTree","item","newParentId","container","Error","emit","currentIndex","queryResult","getCollections","refetchOnChannelChange","items$","shareReplay","activeCollectionId$","pm","activeCollectionTitle$","match","c","availableLanguages$","getAvailableLanguages","contentLanguage$","client","uiState","contentLanguage","completed$","moveCollection","hasChildren","contents","setContentLanguage","ref","refetch","onRearrange","UpdateFacet","customValueFields","facet","currentCode","codeControl","valuesFormArray","insert","facetForm","newFacet","getUpdatedFacet","createFacet","getAllFacets","mapTo","facetGroup","updateOperations","updateFacet","valuesArray","newValues","controls","facetId","translations","createFacetValues","getFacet","updatedValues","getUpdatedFacetValues","updateFacetValues","forkJoin","facetValueId","deleted","deleteFacetValues","currentValuesFormArray","valueTranslation","valueControl","at","customValueFieldsGroup","addControl","fieldValue","facetFormGroup","dirtyValues","v","formRow","toString","dirtyValueValues","notNullOrUndefined","initialLimit","displayLimit","getFacets","facets","deleteFacet","replaceLast","target","search","replace","lastIndex","lastIndexOf","substr","settings","getTaxCategories","taxCategories","createVariantsConfig","createProduct$","createProduct","nonEmptyOptionGroups","groups","g","createOptionGroups$","createProductOptionGroups","optionGroups","optionGroup","addOptionGroupToProduct","productId","optionGroupId","variants","optionIds","optionValues","optionName","option","og","flat","createProductVariants","createProductOptionGroup","variantData","join","price","sku","stockOnHand","stock","updateOptions","autoUpdate","productInput","updateVariantsInput","updateProduct","productOldName","productNewName","variant","currentVariantName","variantInput","existingVariantInput","variantTranslation","updateProductVariants","updateProductVariantNames$","oldOptionName","newOptionName","variantsToUpdate","includes","variantName","updateProductOption","deleteProductVariant","getProduct","throwError","ApplyFacetDialogComponent","selectedValues","setTimeout","selector","focus","resolveWith","priceFactorControl","selectedChannelIdControl","productVariantIds","activeChannelId$","userStatus","activeChannelId","allChannels$","getChannels","channels","currentChannel","availableChannels","ids","selectChannel","variantsPreview$","from","getTopVariants","factor","pricePreview","channelIds","selectedChannel","isProductVariantMode","assignVariantsToChannel","channelId","priceFactor","channel","assignProductsToChannel","productIds","toPromise","slice","filterInput","productDetailService","location","variantAssetChanges","selectedVariantIds","variantDisplayMode","customVariantFields","customOptionGroupFields","customOptionFields","enabled","autoUpdateVariantNames","facetValueIds","product$","variants$","term","lcTerm","toLocaleLowerCase","taxCategories$","activeTab$","facets$","productFacetValues$","facetValues","allFacetValues$","formFacetValueIdChanges$","getProductFormGroup","val","formChangeFacetValues$","allFacetValues","productFacetValues","combined","fv","facetValues$","merge","productChannels$","p","channelPriceIncludesTax$","getActiveChannel","activeChannel","pricesIncludeTax","tabName","replaceState","createUrlTree","tab","channelCode","DEFAULT_CHANNEL_CODE","fromComponent","size","locals","currentChannelIds","removeProductsFromChannel","removeVariantsFromChannel","keys","variantId","displayFacetValueModal","productGroup","currentFacetValueIds","unique","withLatestFrom","existingFacetValueIds","variantFormGroup","every","closable","newProduct","getUpdatedProduct","createProductWithVariants","console","priceIncludesTax","variantsInput","assetsChanged","variantsArray","variantAssetsChanged","getUpdatedProductVariants","updateSlugAfterSave","cfCurrentTranslation","cfProduct","variantsFormArray","priceWithTax","taxCategoryId","taxCategory","useGlobalOutOfStockThreshold","outOfStockThreshold","trackInventory","productFormGroup","updatedProduct","dirtyVariants","dirtyVariantValues","formValue","results","firstResult","emitEvent","searchTermChange","facetValueChange","lastTerm","lastFacetValueIds","filterFacetResults","isFacetValueItem","facetValue","toLowerCase","startsWith","selectComponent","select","currentTerm","selectedItems","unselect","Array","isArray","searchTermItem","itemsList","markedIndex","provide","useValue","onSelectChange","jobQueueService","groupByProduct","searchProducts","facetValueOperator","result$","queryParamMap","productSearchInput","setSearchTerm","fvids$","getAll","setFacetValues","delay","setQueryParam","q","fvids","reindex","info","addJob","job","state","COMPLETED","time","Intl","NumberFormat","format","duration","indexedItemCount","deleteProduct","setFacetValueIds","rebuildSearchIndex","ConfirmVariantDeletionDialogComponent","OPTION_VALUE_INPUT_VALUE_ACCESSOR","useExisting","multi","groupName","disabled","isFocussed","lastSelected","fn","onChangeFn","onTouchFn","isDisabled","obj","textArea","nativeElement","locked","addOptionValue","preventDefault","removeLastOption","parseInputIntoOptions","split","s","trim","handleKey","handleBlur","GeneratedVariant","config","formValueChanged","generatedVariants","initOptionsAndVariants","currencyCode","variantInfo","existing","isNew","previousVariants","generatedVariantFactory","isDefault","existingVariant","prototypeVariant","prototype","getVariantPrototype","productVariantId","generateAllCombinations","optionsAreEqual","optionsAreSubset","pick","reFetchProduct","newOptionGroups","checkUniqueSkus","confirmDeletionOfObsoleteVariants","createdOptionGroups","addOptionGroupsToProduct","addNewOptionsToGroups","groupsIds","fetchOptionGroups","createNewProductVariants","deleteObsoleteVariants","withDuplicateSkus","gv","obsoleteVariants","getObsoleteVariants","newOptions","createdGroup","cog","productOptionGroupId","allGroupIds","addOptionToGroup","getProductOptionGroup","productOptionGroup","deleteOperations","getProductVariantsOptions","generateVariants","b","toOptionString","x","save","addOption","updatedAt","IMAGE","fileSize","mimeType","width","height","source","preview","focalPoint","getAsset","asset","getCollection","catalogRoutes","path","component","breadcrumb","resolve","canDeactivate","productBreadcrumb","productVariantEditorBreadcrumb","facetBreadcrumb","collectionBreadcrumb","assetBreadcrumb","breadcrumbKey","getName","link","root","depth","parentName","permissions$","permissions","hasUpdatePermission$","perms","hasDeletePermission$","DeleteCatalog","DeleteCollection","expandAllChange","previousValue","parentPath","concat","child","onMove","previousIndex","onDrop","onDelete","drop","variantsChange","variantFormValues","sum","copyFromDefault","onFormChange","optionValueInputComponent","stopPropagation","variantsToCreate","prop","viewportRuler","collectionDetailComponent","compact","change","updateCollectionPermissions","updateProductPermissions","UpdateProduct","emitChangeEvent","previousContainer","updateVariantName","codeInputTouched","productOption","activeLanguage","customFieldsForm","updateCode","priceChange$","taxCategoryIdChange$","taxRates$","getTaxRates","taxRates","activeChannel$","taxRate$","defaultTaxZone","applicableRate","taxRate","zone","grossPrice$","Math","round","selectFacetValueClick","assignToChannel","removeFromChannel","assetChange","selectionChange","pagination","formGroupMap","GlobalFlag","getGlobalSettings","globalSettings","globalTrackInventory","globalOutOfStockThreshold","subscription","formArray","add","buildFormGroupMap","unsubscribe","formGroup","FALSE","INHERIT","effectiveOutOfStockThreshold","stockAllocated","areAllSelected","indexOf","formFacetValueIds","getFacetValueIds","variantFacetValueIds","newValue","clear","controlGroup","pendingAssetChanges","CatalogModule","forChild"],"mappings":"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","file":"x","sourcesContent":["<vdr-action-bar>\r\n    <vdr-ab-left>\r\n        <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\r\n    </vdr-ab-left>\r\n\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"asset-detail\"></vdr-action-bar-items>\r\n        <button\r\n            *vdrIfPermissions=\"['UpdateCatalog', 'UpdateAsset']\"\r\n            class=\"btn btn-primary\"\r\n            (click)=\"save()\"\r\n            [disabled]=\"detailForm.invalid || detailForm.pristine\"\r\n        >\r\n            {{ 'common.update' | translate }}\r\n        </button>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n<vdr-asset-preview\r\n    [asset]=\"entity$ | async\"\r\n    [editable]=\"true\"\r\n    [customFields]=\"customFields\"\r\n    [customFieldsForm]=\"detailForm.get('customFields')\"\r\n    (assetChange)=\"onAssetChange($event)\"\r\n></vdr-asset-preview>\r\n","import { ChangeDetectionStrategy, Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    Asset,\r\n    BaseDetailComponent,\r\n    CustomFieldConfig,\r\n    GetAsset,\r\n    LanguageCode,\r\n} from '@vendure/admin-ui/core';\r\nimport { DataService, NotificationService, ServerConfigService } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-asset-detail',\r\n    templateUrl: './asset-detail.component.html',\r\n    styleUrls: ['./asset-detail.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class AssetDetailComponent extends BaseDetailComponent<GetAsset.Asset> implements OnInit, OnDestroy {\r\n    detailForm = new FormGroup({});\r\n    customFields: CustomFieldConfig[];\r\n\r\n    constructor(\r\n        router: Router,\r\n        route: ActivatedRoute,\r\n        serverConfigService: ServerConfigService,\r\n        private notificationService: NotificationService,\r\n        protected dataService: DataService,\r\n        private formBuilder: FormBuilder,\r\n    ) {\r\n        super(route, router, serverConfigService, dataService);\r\n        this.customFields = this.getCustomFieldConfig('Asset');\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.detailForm = new FormGroup({\r\n            name: new FormControl(''),\r\n            tags: new FormControl([]),\r\n            customFields: this.formBuilder.group(\r\n                this.customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\r\n            ),\r\n        });\r\n        this.init();\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.destroy();\r\n    }\r\n\r\n    onAssetChange(event: { id: string; name: string; tags: string[] }) {\r\n        this.detailForm.get('name')?.setValue(event.name);\r\n        this.detailForm.get('tags')?.setValue(event.tags);\r\n        this.detailForm.markAsDirty();\r\n    }\r\n\r\n    save() {\r\n        this.dataService.product\r\n            .updateAsset({\r\n                id: this.id,\r\n                name: this.detailForm.value.name,\r\n                tags: this.detailForm.value.tags,\r\n                customFields: this.detailForm.value.customFields,\r\n            })\r\n            .subscribe(\r\n                () => {\r\n                    this.notificationService.success(_('common.notify-update-success'), { entity: 'Asset' });\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-update-error'), {\r\n                        entity: 'Asset',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    protected setFormValues(entity: GetAsset.Asset, languageCode: LanguageCode): void {\r\n        this.detailForm.get('name')?.setValue(entity.name);\r\n        this.detailForm.get('tags')?.setValue(entity.tags);\r\n        if (this.customFields.length) {\r\n            const customFieldsGroup = this.detailForm.get('customFields') as FormGroup;\r\n\r\n            for (const fieldDef of this.customFields) {\r\n                const key = fieldDef.name;\r\n                const value = (entity as any).customFields[key];\r\n                const control = customFieldsGroup.get(key);\r\n                if (control) {\r\n                    control.patchValue(value);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    Asset,\r\n    BaseListComponent,\r\n    DataService,\r\n    DeletionResult,\r\n    GetAssetList,\r\n    LogicalOperator,\r\n    ModalService,\r\n    NotificationService,\r\n    SortOrder,\r\n    TagFragment,\r\n} from '@vendure/admin-ui/core';\r\nimport { PaginationInstance } from 'ngx-pagination';\r\nimport { BehaviorSubject, combineLatest, EMPTY, Observable } from 'rxjs';\r\nimport { debounceTime, finalize, map, switchMap, takeUntil } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'vdr-asset-list',\r\n    templateUrl: './asset-list.component.html',\r\n    styleUrls: ['./asset-list.component.scss'],\r\n})\r\nexport class AssetListComponent\r\n    extends BaseListComponent<GetAssetList.Query, GetAssetList.Items, GetAssetList.Variables>\r\n    implements OnInit {\r\n    searchTerm$ = new BehaviorSubject<string | undefined>(undefined);\r\n    filterByTags$ = new BehaviorSubject<TagFragment[] | undefined>(undefined);\r\n    uploading = false;\r\n    allTags$: Observable<TagFragment[]>;\r\n    paginationConfig$: Observable<PaginationInstance>;\r\n\r\n    constructor(\r\n        private notificationService: NotificationService,\r\n        private modalService: ModalService,\r\n        private dataService: DataService,\r\n        router: Router,\r\n        route: ActivatedRoute,\r\n    ) {\r\n        super(router, route);\r\n        super.setQueryFn(\r\n            (...args: any[]) => this.dataService.product.getAssetList(...args),\r\n            data => data.assets,\r\n            (skip, take) => {\r\n                const searchTerm = this.searchTerm$.value;\r\n                const tags = this.filterByTags$.value?.map(t => t.value);\r\n                return {\r\n                    options: {\r\n                        skip,\r\n                        take,\r\n                        ...(searchTerm\r\n                            ? {\r\n                                  filter: {\r\n                                      name: { contains: searchTerm },\r\n                                  },\r\n                              }\r\n                            : {}),\r\n                        sort: {\r\n                            createdAt: SortOrder.DESC,\r\n                        },\r\n                        tags,\r\n                        tagsOperator: LogicalOperator.AND,\r\n                    },\r\n                };\r\n            },\r\n            { take: 25, skip: 0 },\r\n        );\r\n    }\r\n\r\n    ngOnInit() {\r\n        super.ngOnInit();\r\n        this.paginationConfig$ = combineLatest(this.itemsPerPage$, this.currentPage$, this.totalItems$).pipe(\r\n            map(([itemsPerPage, currentPage, totalItems]) => ({ itemsPerPage, currentPage, totalItems })),\r\n        );\r\n        this.searchTerm$.pipe(debounceTime(250), takeUntil(this.destroy$)).subscribe(() => this.refresh());\r\n\r\n        this.filterByTags$.pipe(takeUntil(this.destroy$)).subscribe(() => this.refresh());\r\n        this.allTags$ = this.dataService.product.getTagList().mapStream(data => data.tags.items);\r\n    }\r\n\r\n    filesSelected(files: File[]) {\r\n        if (files.length) {\r\n            this.uploading = true;\r\n            this.dataService.product\r\n                .createAssets(files)\r\n                .pipe(finalize(() => (this.uploading = false)))\r\n                .subscribe(({ createAssets }) => {\r\n                    let successCount = 0;\r\n                    for (const result of createAssets) {\r\n                        switch (result.__typename) {\r\n                            case 'Asset':\r\n                                successCount++;\r\n                                break;\r\n                            case 'MimeTypeError':\r\n                                this.notificationService.error(result.message);\r\n                                break;\r\n                        }\r\n                    }\r\n                    if (0 < successCount) {\r\n                        super.refresh();\r\n                        this.notificationService.success(_('asset.notify-create-assets-success'), {\r\n                            count: successCount,\r\n                        });\r\n                    }\r\n                });\r\n        }\r\n    }\r\n\r\n    deleteAssets(assets: Asset[]) {\r\n        this.showModalAndDelete(assets.map(a => a.id))\r\n            .pipe(\r\n                switchMap(response => {\r\n                    if (response.result === DeletionResult.DELETED) {\r\n                        return [true];\r\n                    } else {\r\n                        return this.showModalAndDelete(\r\n                            assets.map(a => a.id),\r\n                            response.message || '',\r\n                        ).pipe(map(r => r.result === DeletionResult.DELETED));\r\n                    }\r\n                }),\r\n            )\r\n            .subscribe(\r\n                () => {\r\n                    this.notificationService.success(_('common.notify-delete-success'), {\r\n                        entity: 'Assets',\r\n                    });\r\n                    this.refresh();\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-delete-error'), {\r\n                        entity: 'Assets',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    private showModalAndDelete(assetIds: string[], message?: string) {\r\n        return this.modalService\r\n            .dialog({\r\n                title: _('catalog.confirm-delete-assets'),\r\n                translationVars: {\r\n                    count: assetIds.length,\r\n                },\r\n                body: message,\r\n                buttons: [\r\n                    { type: 'secondary', label: _('common.cancel') },\r\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\r\n                ],\r\n            })\r\n            .pipe(\r\n                switchMap(res => (res ? this.dataService.product.deleteAssets(assetIds, !!message) : EMPTY)),\r\n                map(res => res.deleteAssets),\r\n            );\r\n    }\r\n}\r\n","<vdr-action-bar>\r\n    <vdr-ab-left [grow]=\"true\">\r\n        <vdr-asset-search-input\r\n            class=\"pr4 mt1\"\r\n            [tags]=\"allTags$ | async\"\r\n            (searchTermChange)=\"searchTerm$.next($event)\"\r\n            (tagsChange)=\"filterByTags$.next($event)\"\r\n        ></vdr-asset-search-input>\r\n    </vdr-ab-left>\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"asset-list\"></vdr-action-bar-items>\r\n        <vdr-asset-file-input\r\n            (selectFiles)=\"filesSelected($event)\"\r\n            [uploading]=\"uploading\"\r\n            dropZoneTarget=\".content-area\"\r\n        ></vdr-asset-file-input>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<vdr-asset-gallery\r\n    [assets]=\"(items$ | async)! | paginate: (paginationConfig$ | async) || {}\"\r\n    [multiSelect]=\"true\"\r\n    [canDelete]=\"['DeleteCatalog', 'DeleteAsset'] | hasPermission\"\r\n    (deleteAssets)=\"deleteAssets($event)\"\r\n></vdr-asset-gallery>\r\n\r\n<div class=\"paging-controls\">\r\n    <vdr-items-per-page-controls\r\n        [itemsPerPage]=\"itemsPerPage$ | async\"\r\n        (itemsPerPageChange)=\"setItemsPerPage($event)\"\r\n    ></vdr-items-per-page-controls>\r\n\r\n    <vdr-pagination-controls\r\n        [currentPage]=\"currentPage$ | async\"\r\n        [itemsPerPage]=\"itemsPerPage$ | async\"\r\n        [totalItems]=\"totalItems$ | async\"\r\n        (pageChange)=\"setPageNumber($event)\"\r\n    ></vdr-pagination-controls>\r\n</div>\r\n","<div class=\"contents-header\">\r\n    <div class=\"header-title-row\">\r\n        <ng-container\r\n            *ngTemplateOutlet=\"headerTemplate; context: { $implicit: contentsTotalItems$ | async }\"\r\n        ></ng-container>\r\n    </div>\r\n    <input\r\n        type=\"text\"\r\n        [placeholder]=\"'catalog.filter-by-name' | translate\"\r\n        [formControl]=\"filterTermControl\"\r\n    />\r\n</div>\r\n<vdr-data-table\r\n    [items]=\"contents$ | async\"\r\n    [itemsPerPage]=\"contentsItemsPerPage$ | async\"\r\n    [totalItems]=\"contentsTotalItems$ | async\"\r\n    [currentPage]=\"contentsCurrentPage$ | async\"\r\n    (pageChange)=\"setContentsPageNumber($event)\"\r\n    (itemsPerPageChange)=\"setContentsItemsPerPage($event)\"\r\n>\r\n    <ng-template let-variant=\"item\">\r\n        <td class=\"left align-middle\">{{ variant.name }}</td>\r\n        <td class=\"right align-middle\">\r\n            <vdr-table-row-action\r\n                iconShape=\"edit\"\r\n                [label]=\"'common.edit' | translate\"\r\n                [linkTo]=\"['/catalog/products', variant.productId, { tab: 'variants' }]\"\r\n            ></vdr-table-row-action>\r\n        </td>\r\n    </ng-template>\r\n</vdr-data-table>\r\n","import {\r\n    ChangeDetectionStrategy,\r\n    Component,\r\n    ContentChild,\r\n    Input,\r\n    OnChanges,\r\n    OnDestroy,\r\n    OnInit,\r\n    SimpleChanges,\r\n    TemplateRef,\r\n} from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { BehaviorSubject, combineLatest, Observable, of, Subject } from 'rxjs';\r\nimport {\r\n    debounceTime,\r\n    distinctUntilChanged,\r\n    map,\r\n    startWith,\r\n    switchMap,\r\n    takeUntil,\r\n    tap,\r\n} from 'rxjs/operators';\r\n\r\nimport { GetCollectionContents } from '@vendure/admin-ui/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-collection-contents',\r\n    templateUrl: './collection-contents.component.html',\r\n    styleUrls: ['./collection-contents.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CollectionContentsComponent implements OnInit, OnChanges, OnDestroy {\r\n    @Input() collectionId: string;\r\n    @ContentChild(TemplateRef, { static: true }) headerTemplate: TemplateRef<any>;\r\n\r\n    contents$: Observable<GetCollectionContents.Items[]>;\r\n    contentsTotalItems$: Observable<number>;\r\n    contentsItemsPerPage$: Observable<number>;\r\n    contentsCurrentPage$: Observable<number>;\r\n    filterTermControl = new FormControl('');\r\n    private collectionIdChange$ = new BehaviorSubject<string>('');\r\n    private refresh$ = new BehaviorSubject<boolean>(true);\r\n    private destroy$ = new Subject<void>();\r\n\r\n    constructor(private route: ActivatedRoute, private router: Router, private dataService: DataService) {}\r\n\r\n    ngOnInit() {\r\n        this.contentsCurrentPage$ = this.route.paramMap.pipe(\r\n            map(qpm => qpm.get('contentsPage')),\r\n            map(page => (!page ? 1 : +page)),\r\n            startWith(1),\r\n            distinctUntilChanged(),\r\n        );\r\n\r\n        this.contentsItemsPerPage$ = this.route.paramMap.pipe(\r\n            map(qpm => qpm.get('contentsPerPage')),\r\n            map(perPage => (!perPage ? 10 : +perPage)),\r\n            startWith(10),\r\n            distinctUntilChanged(),\r\n        );\r\n\r\n        const filterTerm$ = this.filterTermControl.valueChanges.pipe(\r\n            debounceTime(250),\r\n            tap(() => this.setContentsPageNumber(1)),\r\n            startWith(''),\r\n        );\r\n\r\n        const collection$ = combineLatest(\r\n            this.collectionIdChange$,\r\n            this.contentsCurrentPage$,\r\n            this.contentsItemsPerPage$,\r\n            filterTerm$,\r\n            this.refresh$,\r\n        ).pipe(\r\n            takeUntil(this.destroy$),\r\n            switchMap(([id, currentPage, itemsPerPage, filterTerm]) => {\r\n                const take = itemsPerPage;\r\n                const skip = (currentPage - 1) * itemsPerPage;\r\n                if (id) {\r\n                    return this.dataService.collection\r\n                        .getCollectionContents(id, take, skip, filterTerm)\r\n                        .mapSingle(data => data.collection);\r\n                } else {\r\n                    return of(null);\r\n                }\r\n            }),\r\n        );\r\n\r\n        this.contents$ = collection$.pipe(map(result => (result ? result.productVariants.items : [])));\r\n        this.contentsTotalItems$ = collection$.pipe(\r\n            map(result => (result ? result.productVariants.totalItems : 0)),\r\n        );\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        if ('collectionId' in changes) {\r\n            this.collectionIdChange$.next(changes.collectionId.currentValue);\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.destroy$.next();\r\n        this.destroy$.complete();\r\n    }\r\n\r\n    setContentsPageNumber(page: number) {\r\n        this.setParam('contentsPage', page);\r\n    }\r\n\r\n    setContentsItemsPerPage(perPage: number) {\r\n        this.setParam('contentsPerPage', perPage);\r\n    }\r\n\r\n    refresh() {\r\n        this.refresh$.next(true);\r\n    }\r\n\r\n    private setParam(key: string, value: any) {\r\n        this.router.navigate(['./', { ...this.route.snapshot.params, [key]: value }], {\r\n            relativeTo: this.route,\r\n            queryParamsHandling: 'merge',\r\n        });\r\n    }\r\n}\r\n","<vdr-action-bar>\r\n    <vdr-ab-left>\r\n        <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\r\n        <vdr-language-selector\r\n            [disabled]=\"isNew$ | async\"\r\n            [availableLanguageCodes]=\"availableLanguages$ | async\"\r\n            [currentLanguageCode]=\"languageCode$ | async\"\r\n            (languageCodeChange)=\"setLanguage($event)\"\r\n        ></vdr-language-selector>\r\n    </vdr-ab-left>\r\n\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"collection-detail\"></vdr-action-bar-items>\r\n        <button\r\n            class=\"btn btn-primary\"\r\n            *ngIf=\"isNew$ | async; else updateButton\"\r\n            (click)=\"create()\"\r\n            [disabled]=\"detailForm.invalid || detailForm.pristine\"\r\n        >\r\n            {{ 'common.create' | translate }}\r\n        </button>\r\n        <ng-template #updateButton>\r\n            <button\r\n                *vdrIfPermissions=\"updatePermission\"\r\n                class=\"btn btn-primary\"\r\n                (click)=\"save()\"\r\n                [disabled]=\"(detailForm.invalid || detailForm.pristine) && !assetsChanged()\"\r\n            >\r\n                {{ 'common.update' | translate }}\r\n            </button>\r\n        </ng-template>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<form class=\"form\" [formGroup]=\"detailForm\" *ngIf=\"entity$ | async as category\">\r\n    <div class=\"clr-row\">\r\n        <div class=\"clr-col\">\r\n            <vdr-form-field [label]=\"'catalog.visibility' | translate\" for=\"visibility\">\r\n                <clr-toggle-wrapper>\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        clrToggle\r\n                        formControlName=\"visible\"\r\n                        id=\"visibility\"\r\n                        [vdrDisabled]=\"!(updatePermission | hasPermission)\"\r\n                    />\r\n                    <label class=\"visible-toggle\">\r\n                        <ng-container *ngIf=\"detailForm.value.visible; else private\">{{ 'catalog.public' | translate }}</ng-container>\r\n                        <ng-template #private>{{ 'catalog.private' | translate }}</ng-template>\r\n                    </label>\r\n                </clr-toggle-wrapper>\r\n            </vdr-form-field>\r\n            <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\r\n                <input\r\n                    id=\"name\"\r\n                    type=\"text\"\r\n                    formControlName=\"name\"\r\n                    [readonly]=\"!(updatePermission | hasPermission)\"\r\n                    (input)=\"updateSlug($event.target.value)\"\r\n                />\r\n            </vdr-form-field>\r\n            <vdr-form-field\r\n                [label]=\"'catalog.slug' | translate\"\r\n                for=\"slug\"\r\n                [errors]=\"{ pattern: ('catalog.slug-pattern-error' | translate) }\"\r\n            >\r\n                <input\r\n                    id=\"slug\"\r\n                    type=\"text\"\r\n                    formControlName=\"slug\"\r\n                    [readonly]=\"!(updatePermission | hasPermission)\"\r\n                    pattern=\"[a-z0-9_-]+\"\r\n                />\r\n            </vdr-form-field>\r\n            <vdr-rich-text-editor\r\n                formControlName=\"description\"\r\n                [readonly]=\"!(updatePermission | hasPermission)\"\r\n                [label]=\"'common.description' | translate\"\r\n            ></vdr-rich-text-editor>\r\n\r\n            <section formGroupName=\"customFields\" *ngIf=\"customFields.length\">\r\n                <label>{{ 'common.custom-fields' | translate }}</label>\r\n                <ng-container *ngFor=\"let customField of customFields\">\r\n                    <vdr-custom-field-control\r\n                        *ngIf=\"customFieldIsSet(customField.name)\"\r\n                        entityName=\"Collection\"\r\n                        [customFieldsFormGroup]=\"detailForm.get(['customFields'])\"\r\n                        [customField]=\"customField\"\r\n                    ></vdr-custom-field-control>\r\n                </ng-container>\r\n            </section>\r\n        </div>\r\n        <div class=\"clr-col-md-auto\">\r\n            <vdr-product-assets\r\n                [assets]=\"category.assets\"\r\n                [featuredAsset]=\"category.featuredAsset\"\r\n                (change)=\"assetChanges = $event\"\r\n            ></vdr-product-assets>\r\n        </div>\r\n    </div>\r\n    <div class=\"clr-row\" formArrayName=\"filters\">\r\n        <div class=\"clr-col\">\r\n            <label>{{ 'catalog.filters' | translate }}</label>\r\n            <ng-container *ngFor=\"let filter of filters; index as i\">\r\n                <vdr-configurable-input\r\n                    (remove)=\"removeFilter($event)\"\r\n                    [operation]=\"filter\"\r\n                    [operationDefinition]=\"getFilterDefinition(filter)\"\r\n                    [formControlName]=\"i\"\r\n                    [readonly]=\"!(updatePermission | hasPermission)\"\r\n                ></vdr-configurable-input>\r\n            </ng-container>\r\n\r\n            <div *vdrIfPermissions=\"updatePermission\">\r\n                <vdr-dropdown>\r\n                    <button class=\"btn btn-outline\" vdrDropdownTrigger>\r\n                        <clr-icon shape=\"plus\"></clr-icon>\r\n                        {{ 'marketing.add-condition' | translate }}\r\n                    </button>\r\n                    <vdr-dropdown-menu vdrPosition=\"bottom-left\">\r\n                        <button\r\n                            *ngFor=\"let filter of allFilters\"\r\n                            type=\"button\"\r\n                            vdrDropdownItem\r\n                            (click)=\"addFilter(filter)\"\r\n                        >\r\n                            {{ filter.description }}\r\n                        </button>\r\n                    </vdr-dropdown-menu>\r\n                </vdr-dropdown>\r\n            </div>\r\n        </div>\r\n        <div class=\"clr-col\">\r\n            <vdr-collection-contents [collectionId]=\"id\" #collectionContents>\r\n                <ng-template let-count>\r\n                    <div class=\"contents-title\">\r\n                        {{ 'catalog.collection-contents' | translate }} ({{\r\n                            'common.results-count' | translate: { count: count }\r\n                        }})\r\n                    </div>\r\n                </ng-template>\r\n            </vdr-collection-contents>\r\n        </div>\r\n    </div>\r\n</form>\r\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    OnDestroy,\n    OnInit,\n    ViewChild,\n} from '@angular/core';\nimport { FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    Asset,\n    BaseDetailComponent,\n    Collection,\n    ConfigurableOperation,\n    ConfigurableOperationDefinition,\n    ConfigurableOperationInput,\n    CreateCollectionInput,\n    createUpdatedTranslatable,\n    CustomFieldConfig,\n    DataService,\n    encodeConfigArgValue,\n    findTranslation,\n    getConfigArgValue,\n    LanguageCode,\n    ModalService,\n    NotificationService,\n    Permission,\n    ServerConfigService,\n    UpdateCollectionInput,\n} from '@vendure/admin-ui/core';\nimport { normalizeString } from '@vendure/common/lib/normalize-string';\nimport { combineLatest } from 'rxjs';\nimport { mergeMap, take } from 'rxjs/operators';\n\nimport { CollectionContentsComponent } from '../collection-contents/collection-contents.component';\n\n@Component({\n    selector: 'vdr-collection-detail',\n    templateUrl: './collection-detail.component.html',\n    styleUrls: ['./collection-detail.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CollectionDetailComponent\n    extends BaseDetailComponent<Collection.Fragment>\n    implements OnInit, OnDestroy {\n    customFields: CustomFieldConfig[];\n    detailForm: FormGroup;\n    assetChanges: { assets?: Asset[]; featuredAsset?: Asset } = {};\n    filters: ConfigurableOperation[] = [];\n    allFilters: ConfigurableOperationDefinition[] = [];\n    readonly updatePermission = [Permission.UpdateCatalog, Permission.UpdateCollection];\n    @ViewChild('collectionContents') contentsComponent: CollectionContentsComponent;\n\n    constructor(\n        router: Router,\n        route: ActivatedRoute,\n        serverConfigService: ServerConfigService,\n        private changeDetector: ChangeDetectorRef,\n        protected dataService: DataService,\n        private formBuilder: FormBuilder,\n        private notificationService: NotificationService,\n        private modalService: ModalService,\n    ) {\n        super(route, router, serverConfigService, dataService);\n        this.customFields = this.getCustomFieldConfig('Collection');\n        this.detailForm = this.formBuilder.group({\n            name: ['', Validators.required],\n            slug: '',\n            description: '',\n            visible: false,\n            filters: this.formBuilder.array([]),\n            customFields: this.formBuilder.group(\n                this.customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\n            ),\n        });\n    }\n\n    ngOnInit() {\n        this.init();\n        this.dataService.collection.getCollectionFilters().single$.subscribe(res => {\n            this.allFilters = res.collectionFilters;\n        });\n    }\n\n    ngOnDestroy() {\n        this.destroy();\n    }\n\n    getFilterDefinition(filter: ConfigurableOperation): ConfigurableOperationDefinition | undefined {\n        return this.allFilters.find(f => f.code === filter.code);\n    }\n\n    customFieldIsSet(name: string): boolean {\n        return !!this.detailForm.get(['customFields', name]);\n    }\n\n    assetsChanged(): boolean {\n        return !!Object.values(this.assetChanges).length;\n    }\n\n    /**\n     * If creating a new Collection, automatically generate the slug based on the collection name.\n     */\n    updateSlug(nameValue: string) {\n        combineLatest(this.entity$, this.languageCode$)\n            .pipe(take(1))\n            .subscribe(([entity, languageCode]) => {\n                const slugControl = this.detailForm.get(['slug']);\n                const currentTranslation = findTranslation(entity, languageCode);\n                const currentSlugIsEmpty = !currentTranslation || !currentTranslation.slug;\n                if (slugControl && slugControl.pristine && currentSlugIsEmpty) {\n                    slugControl.setValue(normalizeString(`${nameValue}`, '-'));\n                }\n            });\n    }\n\n    addFilter(collectionFilter: ConfigurableOperation) {\n        const filtersArray = this.detailForm.get('filters') as FormArray;\n        const index = filtersArray.value.findIndex(o => o.code === collectionFilter.code);\n        if (index === -1) {\n            const argsHash = collectionFilter.args.reduce(\n                (output, arg) => ({\n                    ...output,\n                    [arg.name]: getConfigArgValue(arg.value),\n                }),\n                {},\n            );\n            filtersArray.push(\n                this.formBuilder.control({\n                    code: collectionFilter.code,\n                    args: argsHash,\n                }),\n            );\n            this.filters.push({\n                code: collectionFilter.code,\n                args: collectionFilter.args.map(a => ({ name: a.name, value: getConfigArgValue(a.value) })),\n            });\n        }\n    }\n\n    removeFilter(collectionFilter: ConfigurableOperation) {\n        const filtersArray = this.detailForm.get('filters') as FormArray;\n        const index = filtersArray.value.findIndex(o => o.code === collectionFilter.code);\n        if (index !== -1) {\n            filtersArray.removeAt(index);\n            this.filters.splice(index, 1);\n        }\n    }\n\n    create() {\n        if (!this.detailForm.dirty) {\n            return;\n        }\n        combineLatest(this.entity$, this.languageCode$)\n            .pipe(\n                take(1),\n                mergeMap(([category, languageCode]) => {\n                    const input = this.getUpdatedCollection(\n                        category,\n                        this.detailForm,\n                        languageCode,\n                    ) as CreateCollectionInput;\n                    const parentId = this.route.snapshot.paramMap.get('parentId');\n                    if (parentId) {\n                        input.parentId = parentId;\n                    }\n                    return this.dataService.collection.createCollection(input);\n                }),\n            )\n            .subscribe(\n                data => {\n                    this.notificationService.success(_('common.notify-create-success'), {\n                        entity: 'Collection',\n                    });\n                    this.assetChanges = {};\n                    this.detailForm.markAsPristine();\n                    this.changeDetector.markForCheck();\n                    this.router.navigate(['../', data.createCollection.id], { relativeTo: this.route });\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-create-error'), {\n                        entity: 'Collection',\n                    });\n                },\n            );\n    }\n\n    save() {\n        combineLatest(this.entity$, this.languageCode$)\n            .pipe(\n                take(1),\n                mergeMap(([category, languageCode]) => {\n                    const input = this.getUpdatedCollection(\n                        category,\n                        this.detailForm,\n                        languageCode,\n                    ) as UpdateCollectionInput;\n                    return this.dataService.collection.updateCollection(input);\n                }),\n            )\n            .subscribe(\n                () => {\n                    this.assetChanges = {};\n                    this.detailForm.markAsPristine();\n                    this.changeDetector.markForCheck();\n                    this.notificationService.success(_('common.notify-update-success'), {\n                        entity: 'Collection',\n                    });\n                    this.contentsComponent.refresh();\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-update-error'), {\n                        entity: 'Collection',\n                    });\n                },\n            );\n    }\n\n    canDeactivate(): boolean {\n        return super.canDeactivate() && !this.assetChanges.assets && !this.assetChanges.featuredAsset;\n    }\n\n    /**\n     * Sets the values of the form on changes to the category or current language.\n     */\n    protected setFormValues(entity: Collection.Fragment, languageCode: LanguageCode) {\n        const currentTranslation = findTranslation(entity, languageCode);\n\n        this.detailForm.patchValue({\n            name: currentTranslation ? currentTranslation.name : '',\n            slug: currentTranslation ? currentTranslation.slug : '',\n            description: currentTranslation ? currentTranslation.description : '',\n            visible: !entity.isPrivate,\n        });\n\n        entity.filters.forEach(f => this.addFilter(f));\n\n        if (this.customFields.length) {\n            const customFieldsGroup = this.detailForm.get(['customFields']) as FormGroup;\n\n            for (const fieldDef of this.customFields) {\n                const key = fieldDef.name;\n                const value =\n                    fieldDef.type === 'localeString'\n                        ? (currentTranslation as any).customFields[key]\n                        : (entity as any).customFields[key];\n                const control = customFieldsGroup.get(key);\n                if (control) {\n                    control.patchValue(value);\n                }\n            }\n        }\n    }\n\n    /**\n     * Given a category and the value of the form, this method creates an updated copy of the category which\n     * can then be persisted to the API.\n     */\n    private getUpdatedCollection(\n        category: Collection.Fragment,\n        form: FormGroup,\n        languageCode: LanguageCode,\n    ): CreateCollectionInput | UpdateCollectionInput {\n        const updatedCategory = createUpdatedTranslatable({\n            translatable: category,\n            updatedFields: form.value,\n            customFieldConfig: this.customFields,\n            languageCode,\n            defaultTranslation: {\n                languageCode,\n                name: category.name || '',\n                slug: category.slug || '',\n                description: category.description || '',\n            },\n        });\n        return {\n            ...updatedCategory,\n            assetIds: this.assetChanges.assets?.map(a => a.id),\n            featuredAssetId: this.assetChanges.featuredAsset?.id,\n            isPrivate: !form.value.visible,\n            filters: this.mapOperationsToInputs(this.filters, this.detailForm.value.filters),\n        };\n    }\n\n    /**\n     * Maps an array of conditions or actions to the input format expected by the GraphQL API.\n     */\n    private mapOperationsToInputs(\n        operations: ConfigurableOperation[],\n        formValueOperations: any,\n    ): ConfigurableOperationInput[] {\n        return operations.map((o, i) => {\n            return {\n                code: o.code,\n                arguments: Object.values(formValueOperations[i].args).map((value: any, j) => ({\n                    name: o.args[j].name,\n                    value: encodeConfigArgValue(value),\n                })),\n            };\n        });\n    }\n}\n","export type HasParent = { id: string; parent?: { id: string } | null };\r\nexport type TreeNode<T extends HasParent> = T & { children: Array<TreeNode<T>>; expanded: boolean };\r\nexport type RootNode<T extends HasParent> = { id?: string; children: Array<TreeNode<T>> };\r\n\r\n/**\r\n * Builds a tree from an array of nodes which have a parent.\r\n * Based on https://stackoverflow.com/a/31247960/772859, modified to preserve ordering.\r\n */\r\nexport function arrayToTree<T extends HasParent>(nodes: T[], currentState?: RootNode<T>): RootNode<T> {\r\n    const topLevelNodes: Array<TreeNode<T>> = [];\r\n    const mappedArr: { [id: string]: TreeNode<T> } = {};\r\n    const currentStateMap = treeToMap(currentState);\r\n\r\n    // First map the nodes of the array to an object -> create a hash table.\r\n    for (const node of nodes) {\r\n        mappedArr[node.id] = { ...(node as any), children: [] };\r\n    }\r\n\r\n    for (const id of nodes.map(n => n.id)) {\r\n        if (mappedArr.hasOwnProperty(id)) {\r\n            const mappedElem = mappedArr[id];\r\n            mappedElem.expanded = currentStateMap.get(id)?.expanded ?? false;\r\n            const parent = mappedElem.parent;\r\n            if (!parent) {\r\n                continue;\r\n            }\r\n            // If the element is not at the root level, add it to its parent array of children.\r\n            const parentIsRoot = !mappedArr[parent.id];\r\n            if (!parentIsRoot) {\r\n                if (mappedArr[parent.id]) {\r\n                    mappedArr[parent.id].children.push(mappedElem);\r\n                } else {\r\n                    mappedArr[parent.id] = { children: [mappedElem] } as any;\r\n                }\r\n            } else {\r\n                topLevelNodes.push(mappedElem);\r\n            }\r\n        }\r\n    }\r\n    // tslint:disable-next-line:no-non-null-assertion\r\n    const rootId = topLevelNodes.length ? topLevelNodes[0].parent!.id : undefined;\r\n    return { id: rootId, children: topLevelNodes };\r\n}\r\n\r\n/**\r\n * Converts an existing tree (as generated by the arrayToTree function) into a flat\r\n * Map. This is used to persist certain states (e.g. `expanded`) when re-building the\r\n * tree.\r\n */\r\nfunction treeToMap<T extends HasParent>(tree?: RootNode<T>): Map<string, TreeNode<T>> {\r\n    const nodeMap = new Map<string, TreeNode<T>>();\r\n    function visit(node: TreeNode<T>) {\r\n        nodeMap.set(node.id, node);\r\n        node.children.forEach(visit);\r\n    }\r\n    if (tree) {\r\n        visit(tree as TreeNode<T>);\r\n    }\r\n    return nodeMap;\r\n}\r\n","<vdr-collection-tree-node\r\n    *ngIf=\"collectionTree\"\r\n    cdkDropListGroup\r\n    [expandAll]=\"expandAll\"\r\n    [collectionTree]=\"collectionTree\"\r\n    [activeCollectionId]=\"activeCollectionId\"\r\n></vdr-collection-tree-node>\r\n","import { CdkDragDrop } from '@angular/cdk/drag-drop';\r\nimport {\r\n    ChangeDetectionStrategy,\r\n    Component,\r\n    EventEmitter,\r\n    Input,\r\n    OnChanges,\r\n    Output,\r\n    SimpleChanges,\r\n} from '@angular/core';\r\nimport { Collection } from '@vendure/admin-ui/core';\r\n\r\nimport { arrayToTree, HasParent, RootNode } from './array-to-tree';\r\n\r\nexport type RearrangeEvent = { collectionId: string; parentId: string; index: number };\r\nexport type CollectionPartial = Pick<Collection.Fragment, 'id' | 'parent' | 'name'>;\r\n\r\n@Component({\r\n    selector: 'vdr-collection-tree',\r\n    templateUrl: 'collection-tree.component.html',\r\n    styleUrls: ['./collection-tree.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CollectionTreeComponent implements OnChanges {\r\n    @Input() collections: CollectionPartial[];\r\n    @Input() activeCollectionId: string;\r\n    @Input() expandAll = false;\r\n    @Output() rearrange = new EventEmitter<RearrangeEvent>();\r\n    @Output() deleteCollection = new EventEmitter<string>();\r\n    collectionTree: RootNode<CollectionPartial>;\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if ('collections' in changes && this.collections) {\r\n            this.collectionTree = arrayToTree(this.collections, this.collectionTree);\r\n        }\r\n    }\r\n\r\n    onDrop(event: CdkDragDrop<CollectionPartial | RootNode<CollectionPartial>>) {\r\n        const item = event.item.data as CollectionPartial;\r\n        const newParent = event.container.data;\r\n        const newParentId = newParent.id;\r\n        if (newParentId == null) {\r\n            throw new Error(`Could not determine the ID of the root Collection`);\r\n        }\r\n        this.rearrange.emit({\r\n            collectionId: item.id,\r\n            parentId: newParentId,\r\n            index: event.currentIndex,\r\n        });\r\n    }\r\n\r\n    onMove(event: RearrangeEvent) {\r\n        this.rearrange.emit(event);\r\n    }\r\n\r\n    onDelete(id: string) {\r\n        this.deleteCollection.emit(id);\r\n    }\r\n\r\n    private isRootNode<T extends HasParent>(node: T | RootNode<T>): node is RootNode<T> {\r\n        return !node.hasOwnProperty('parent');\r\n    }\r\n}\r\n","<vdr-action-bar>\r\n    <vdr-ab-left>\r\n        <div class=\"flex center wrap\">\r\n            <vdr-language-selector\r\n                class=\"mt2\"\r\n                [availableLanguageCodes]=\"availableLanguages$ | async\"\r\n                [currentLanguageCode]=\"contentLanguage$ | async\"\r\n                (languageCodeChange)=\"setLanguage($event)\"\r\n            ></vdr-language-selector>\r\n            <clr-checkbox-wrapper\r\n                class=\"expand-all-toggle ml3\"\r\n                [ngClass]=\"(availableLanguages$ | async)?.length === 1 ? 'mt3' : 'mt1'\"\r\n            >\r\n                <input type=\"checkbox\" clrCheckbox [(ngModel)]=\"expandAll\" />\r\n                <label>{{ 'catalog.expand-all-collections' | translate }}</label>\r\n            </clr-checkbox-wrapper>\r\n        </div>\r\n    </vdr-ab-left>\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"collection-list\"></vdr-action-bar-items>\r\n        <a\r\n            class=\"btn btn-primary\"\r\n            *vdrIfPermissions=\"['CreateCatalog', 'CreateCollection']\"\r\n            [routerLink]=\"['./create']\"\r\n        >\r\n            <clr-icon shape=\"plus\"></clr-icon>\r\n            {{ 'catalog.create-new-collection' | translate }}\r\n        </a>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n<div class=\"collection-wrapper\">\r\n    <vdr-collection-tree\r\n        [collections]=\"items$ | async\"\r\n        [activeCollectionId]=\"activeCollectionId$ | async\"\r\n        [expandAll]=\"expandAll\"\r\n        (rearrange)=\"onRearrange($event)\"\r\n        (deleteCollection)=\"deleteCollection($event)\"\r\n    ></vdr-collection-tree>\r\n\r\n    <div class=\"collection-contents\" [class.expanded]=\"activeCollectionId$ | async\">\r\n        <vdr-collection-contents [collectionId]=\"activeCollectionId$ | async\">\r\n            <ng-template let-count>\r\n                <div class=\"collection-title\">\r\n                    {{ activeCollectionTitle$ | async }} ({{\r\n                        'common.results-count' | translate: { count: count }\r\n                    }})\r\n                </div>\r\n                <button type=\"button\" class=\"close-button\" (click)=\"closeContents()\">\r\n                    <clr-icon shape=\"close\"></clr-icon>\r\n                </button>\r\n            </ng-template>\r\n        </vdr-collection-contents>\r\n    </div>\r\n</div>\r\n","import { ChangeDetectionStrategy, Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    DataService,\r\n    GetCollectionList,\r\n    LanguageCode,\r\n    ModalService,\r\n    NotificationService,\r\n    QueryResult,\r\n    ServerConfigService,\r\n} from '@vendure/admin-ui/core';\r\nimport { combineLatest, EMPTY, Observable } from 'rxjs';\r\nimport { distinctUntilChanged, map, shareReplay, switchMap, take, tap } from 'rxjs/operators';\r\n\r\nimport { RearrangeEvent } from '../collection-tree/collection-tree.component';\r\n\r\n@Component({\r\n    selector: 'vdr-collection-list',\r\n    templateUrl: './collection-list.component.html',\r\n    styleUrls: ['./collection-list.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CollectionListComponent implements OnInit, OnDestroy {\r\n    activeCollectionId$: Observable<string | null>;\r\n    activeCollectionTitle$: Observable<string>;\r\n    items$: Observable<GetCollectionList.Items[]>;\r\n    availableLanguages$: Observable<LanguageCode[]>;\r\n    contentLanguage$: Observable<LanguageCode>;\r\n    expandAll = false;\r\n    private queryResult: QueryResult<any>;\r\n\r\n    constructor(\r\n        private dataService: DataService,\r\n        private notificationService: NotificationService,\r\n        private modalService: ModalService,\r\n        private router: Router,\r\n        private route: ActivatedRoute,\r\n        private serverConfigService: ServerConfigService,\r\n    ) {}\r\n\r\n    ngOnInit() {\r\n        this.queryResult = this.dataService.collection.getCollections(1000, 0).refetchOnChannelChange();\r\n        this.items$ = this.queryResult.mapStream(data => data.collections.items).pipe(shareReplay(1));\r\n        this.activeCollectionId$ = this.route.paramMap.pipe(\r\n            map(pm => pm.get('contents')),\r\n            distinctUntilChanged(),\r\n        );\r\n\r\n        this.activeCollectionTitle$ = combineLatest(this.activeCollectionId$, this.items$).pipe(\r\n            map(([id, collections]) => {\r\n                if (id) {\r\n                    const match = collections.find(c => c.id === id);\r\n                    return match ? match.name : '';\r\n                }\r\n                return '';\r\n            }),\r\n        );\r\n        this.availableLanguages$ = this.serverConfigService.getAvailableLanguages();\r\n        this.contentLanguage$ = this.dataService.client\r\n            .uiState()\r\n            .mapStream(({ uiState }) => uiState.contentLanguage)\r\n            .pipe(tap(() => this.refresh()));\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.queryResult.completed$.next();\r\n    }\r\n\r\n    onRearrange(event: RearrangeEvent) {\r\n        this.dataService.collection.moveCollection([event]).subscribe({\r\n            next: () => {\r\n                this.notificationService.success(_('common.notify-saved-changes'));\r\n                this.refresh();\r\n            },\r\n            error: err => {\r\n                this.notificationService.error(_('common.notify-save-changes-error'));\r\n            },\r\n        });\r\n    }\r\n\r\n    deleteCollection(id: string) {\r\n        this.items$\r\n            .pipe(\r\n                take(1),\r\n                map(items => -1 < items.findIndex(i => i.parent && i.parent.id === id)),\r\n                switchMap(hasChildren => {\r\n                    return this.modalService.dialog({\r\n                        title: _('catalog.confirm-delete-collection'),\r\n                        body: hasChildren\r\n                            ? _('catalog.confirm-delete-collection-and-children-body')\r\n                            : undefined,\r\n                        buttons: [\r\n                            { type: 'secondary', label: _('common.cancel') },\r\n                            { type: 'danger', label: _('common.delete'), returnValue: true },\r\n                        ],\r\n                    });\r\n                }),\r\n                switchMap(response => (response ? this.dataService.collection.deleteCollection(id) : EMPTY)),\r\n            )\r\n            .subscribe(\r\n                () => {\r\n                    this.notificationService.success(_('common.notify-delete-success'), {\r\n                        entity: 'Collection',\r\n                    });\r\n                    this.refresh();\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-delete-error'), {\r\n                        entity: 'Collection',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    closeContents() {\r\n        const params = { ...this.route.snapshot.params };\r\n        delete params.contents;\r\n        this.router.navigate(['./', params], { relativeTo: this.route, queryParamsHandling: 'preserve' });\r\n    }\r\n\r\n    setLanguage(code: LanguageCode) {\r\n        this.dataService.client.setContentLanguage(code).subscribe();\r\n    }\r\n\r\n    private refresh() {\r\n        this.queryResult.ref.refetch();\r\n    }\r\n}\r\n","<vdr-action-bar>\r\n    <vdr-ab-left>\r\n        <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\r\n        <vdr-language-selector\r\n            [disabled]=\"isNew$ | async\"\r\n            [availableLanguageCodes]=\"availableLanguages$ | async\"\r\n            [currentLanguageCode]=\"languageCode$ | async\"\r\n            (languageCodeChange)=\"setLanguage($event)\"\r\n        ></vdr-language-selector>\r\n    </vdr-ab-left>\r\n\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"facet-detail\"></vdr-action-bar-items>\r\n        <button\r\n            class=\"btn btn-primary\"\r\n            *ngIf=\"isNew$ | async; else updateButton\"\r\n            (click)=\"create()\"\r\n            [disabled]=\"detailForm.invalid || detailForm.pristine\"\r\n        >\r\n            {{ 'common.create' | translate }}\r\n        </button>\r\n        <ng-template #updateButton>\r\n            <button\r\n                *vdrIfPermissions=\"updatePermission\"\r\n                class=\"btn btn-primary\"\r\n                (click)=\"save()\"\r\n                [disabled]=\"detailForm.invalid || detailForm.pristine\"\r\n            >\r\n                {{ 'common.update' | translate }}\r\n            </button>\r\n        </ng-template>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<form class=\"form\" [formGroup]=\"detailForm\" *ngIf=\"entity$ | async as facet\">\r\n    <section class=\"form-block\" formGroupName=\"facet\">\r\n        <vdr-form-field [label]=\"'catalog.visibility' | translate\" for=\"visibility\">\r\n            <clr-toggle-wrapper>\r\n                <input\r\n                    type=\"checkbox\"\r\n                    clrToggle\r\n                    [vdrDisabled]=\"!(updatePermission | hasPermission)\"\r\n                    formControlName=\"visible\"\r\n                    id=\"visibility\"\r\n                />\r\n                <label class=\"visible-toggle\">\r\n                    <ng-container *ngIf=\"detailForm.value.facet.visible; else private\">{{ 'catalog.public' | translate }}</ng-container>\r\n                    <ng-template #private>{{ 'catalog.private' | translate }}</ng-template>\r\n                </label>\r\n            </clr-toggle-wrapper>\r\n        </vdr-form-field>\r\n        <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\r\n            <input\r\n                id=\"name\"\r\n                type=\"text\"\r\n                formControlName=\"name\"\r\n                [readonly]=\"!(updatePermission | hasPermission)\"\r\n                (input)=\"updateCode(facet.code, $event.target.value)\"\r\n            />\r\n        </vdr-form-field>\r\n        <vdr-form-field\r\n            [label]=\"'common.code' | translate\"\r\n            for=\"code\"\r\n            [readOnlyToggle]=\"updatePermission | hasPermission\"\r\n        >\r\n            <input\r\n                id=\"code\"\r\n                type=\"text\"\r\n                [readonly]=\"!(updatePermission | hasPermission)\"\r\n                formControlName=\"code\"\r\n            />\r\n        </vdr-form-field>\r\n\r\n        <section formGroupName=\"customFields\" *ngIf=\"customFields.length\">\r\n            <label>{{ 'common.custom-fields' | translate }}</label>\r\n            <ng-container *ngFor=\"let customField of customFields\">\r\n                <vdr-custom-field-control\r\n                    *ngIf=\"customFieldIsSet(customField.name)\"\r\n                    entityName=\"Facet\"\r\n                    [customFieldsFormGroup]=\"detailForm.get(['facet', 'customFields'])\"\r\n                    [customField]=\"customField\"\r\n                ></vdr-custom-field-control>\r\n            </ng-container>\r\n        </section>\r\n    </section>\r\n\r\n    <section class=\"form-block\" *ngIf=\"!(isNew$ | async)\">\r\n        <label>{{ 'catalog.facet-values' | translate }}</label>\r\n\r\n        <table class=\"facet-values-list table\" formArrayName=\"values\" *ngIf=\"0 < getValuesFormArray().length\">\r\n            <thead>\r\n                <tr>\r\n                    <th></th>\r\n                    <th>{{ 'common.name' | translate }}</th>\r\n                    <th>{{ 'common.code' | translate }}</th>\r\n                    <ng-container *ngFor=\"let customField of customValueFields\">\r\n                        <th>{{ customField.name }}</th>\r\n                    </ng-container>\r\n                    <th></th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                <tr\r\n                    class=\"facet-value\"\r\n                    *ngFor=\"let value of values; let i = index\"\r\n                    [formGroupName]=\"i\"\r\n                >\r\n                    <td class=\"align-middle\">\r\n                        <vdr-entity-info [entity]=\"value\"></vdr-entity-info>\r\n                    </td>\r\n                    <td class=\"align-middle\">\r\n                        <input\r\n                            type=\"text\"\r\n                            formControlName=\"name\"\r\n                            [readonly]=\"!(updatePermission | hasPermission)\"\r\n                            (input)=\"updateValueCode(facet.values[i]?.code, $event.target.value, i)\"\r\n                        />\r\n                    </td>\r\n                    <td class=\"align-middle\"><input type=\"text\" formControlName=\"code\" readonly /></td>\r\n                    <ng-container *ngFor=\"let customField of customValueFields\">\r\n                        <td class=\"align-middle\">\r\n                            <vdr-custom-field-control\r\n                                *ngIf=\"customValueFieldIsSet(i, customField.name)\"\r\n                                entityName=\"FacetValue\"\r\n                                [showLabel]=\"false\"\r\n                                [customFieldsFormGroup]=\"detailForm.get(['values', i, 'customFields'])\"\r\n                                [customField]=\"customField\"\r\n                            ></vdr-custom-field-control>\r\n                        </td>\r\n                    </ng-container>\r\n                    <td class=\"align-middle\">\r\n                        <vdr-dropdown>\r\n                            <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger>\r\n                                {{ 'common.actions' | translate }}\r\n                                <clr-icon shape=\"caret down\"></clr-icon>\r\n                            </button>\r\n                            <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                                <button\r\n                                    type=\"button\"\r\n                                    class=\"delete-button\"\r\n                                    (click)=\"deleteFacetValue(facet.values[i]?.id, i)\"\r\n                                    [disabled]=\"!(updatePermission | hasPermission)\"\r\n                                    vdrDropdownItem\r\n                                >\r\n                                    <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                                    {{ 'common.delete' | translate }}\r\n                                </button>\r\n                            </vdr-dropdown-menu>\r\n                        </vdr-dropdown>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n\r\n        <div>\r\n            <button\r\n                type=\"button\"\r\n                class=\"btn btn-secondary\"\r\n                *vdrIfPermissions=\"['CreateCatalog', 'CreateFacet']\"\r\n                (click)=\"addFacetValue()\"\r\n            >\r\n                <clr-icon shape=\"add\"></clr-icon>\r\n                {{ 'catalog.add-facet-value' | translate }}\r\n            </button>\r\n        </div>\r\n    </section>\r\n</form>\r\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormArray, FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    BaseDetailComponent,\n    CreateFacetInput,\n    CreateFacetValueInput,\n    createUpdatedTranslatable,\n    CustomFieldConfig,\n    DataService,\n    DeletionResult,\n    FacetWithValues,\n    findTranslation,\n    LanguageCode,\n    ModalService,\n    NotificationService,\n    Permission,\n    ServerConfigService,\n    UpdateFacetInput,\n    UpdateFacetValueInput,\n} from '@vendure/admin-ui/core';\nimport { normalizeString } from '@vendure/common/lib/normalize-string';\nimport { notNullOrUndefined } from '@vendure/common/lib/shared-utils';\nimport { combineLatest, EMPTY, forkJoin, Observable } from 'rxjs';\nimport { map, mapTo, mergeMap, switchMap, take } from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-facet-detail',\n    templateUrl: './facet-detail.component.html',\n    styleUrls: ['./facet-detail.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FacetDetailComponent\n    extends BaseDetailComponent<FacetWithValues.Fragment>\n    implements OnInit, OnDestroy {\n    customFields: CustomFieldConfig[];\n    customValueFields: CustomFieldConfig[];\n    detailForm: FormGroup;\n    values: Array<FacetWithValues.Values | { name: string; code: string }>;\n    readonly updatePermission = [Permission.UpdateCatalog, Permission.UpdateFacet];\n\n    constructor(\n        router: Router,\n        route: ActivatedRoute,\n        serverConfigService: ServerConfigService,\n        private changeDetector: ChangeDetectorRef,\n        protected dataService: DataService,\n        private formBuilder: FormBuilder,\n        private notificationService: NotificationService,\n        private modalService: ModalService,\n    ) {\n        super(route, router, serverConfigService, dataService);\n        this.customFields = this.getCustomFieldConfig('Facet');\n        this.customValueFields = this.getCustomFieldConfig('FacetValue');\n        this.detailForm = this.formBuilder.group({\n            facet: this.formBuilder.group({\n                code: ['', Validators.required],\n                name: '',\n                visible: true,\n                customFields: this.formBuilder.group(\n                    this.customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\n                ),\n            }),\n            values: this.formBuilder.array([]),\n        });\n    }\n\n    ngOnInit() {\n        this.init();\n    }\n\n    ngOnDestroy() {\n        this.destroy();\n    }\n\n    updateCode(currentCode: string, nameValue: string) {\n        if (!currentCode) {\n            const codeControl = this.detailForm.get(['facet', 'code']);\n            if (codeControl && codeControl.pristine) {\n                codeControl.setValue(normalizeString(nameValue, '-'));\n            }\n        }\n    }\n\n    updateValueCode(currentCode: string, nameValue: string, index: number) {\n        if (!currentCode) {\n            const codeControl = this.detailForm.get(['values', index, 'code']);\n            if (codeControl && codeControl.pristine) {\n                codeControl.setValue(normalizeString(nameValue, '-'));\n            }\n        }\n    }\n\n    customFieldIsSet(name: string): boolean {\n        return !!this.detailForm.get(['facet', 'customFields', name]);\n    }\n\n    customValueFieldIsSet(index: number, name: string): boolean {\n        return !!this.detailForm.get(['values', index, 'customFields', name]);\n    }\n\n    getValuesFormArray(): FormArray {\n        return this.detailForm.get('values') as FormArray;\n    }\n\n    addFacetValue() {\n        const valuesFormArray = this.detailForm.get('values') as FormArray | null;\n        if (valuesFormArray) {\n            valuesFormArray.insert(\n                valuesFormArray.length,\n                this.formBuilder.group({\n                    id: '',\n                    name: ['', Validators.required],\n                    code: '',\n                }),\n            );\n            this.values.push({ name: '', code: '' });\n        }\n    }\n\n    create() {\n        const facetForm = this.detailForm.get('facet');\n        if (!facetForm || !facetForm.dirty) {\n            return;\n        }\n        combineLatest(this.entity$, this.languageCode$)\n            .pipe(\n                take(1),\n                mergeMap(([facet, languageCode]) => {\n                    const newFacet = this.getUpdatedFacet(\n                        facet,\n                        facetForm as FormGroup,\n                        languageCode,\n                    ) as CreateFacetInput;\n                    return this.dataService.facet.createFacet(newFacet);\n                }),\n                switchMap(data => this.dataService.facet.getAllFacets().single$.pipe(mapTo(data))),\n            )\n            .subscribe(\n                data => {\n                    this.notificationService.success(_('common.notify-create-success'), { entity: 'Facet' });\n                    this.detailForm.markAsPristine();\n                    this.changeDetector.markForCheck();\n                    this.router.navigate(['../', data.createFacet.id], { relativeTo: this.route });\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-create-error'), {\n                        entity: 'Facet',\n                    });\n                },\n            );\n    }\n\n    save() {\n        combineLatest(this.entity$, this.languageCode$)\n            .pipe(\n                take(1),\n                mergeMap(([facet, languageCode]) => {\n                    const facetGroup = this.detailForm.get('facet');\n                    const updateOperations: Array<Observable<any>> = [];\n\n                    if (facetGroup && facetGroup.dirty) {\n                        const newFacet = this.getUpdatedFacet(\n                            facet,\n                            facetGroup as FormGroup,\n                            languageCode,\n                        ) as UpdateFacetInput;\n                        if (newFacet) {\n                            updateOperations.push(this.dataService.facet.updateFacet(newFacet));\n                        }\n                    }\n                    const valuesArray = this.detailForm.get('values');\n                    if (valuesArray && valuesArray.dirty) {\n                        const newValues: CreateFacetValueInput[] = (valuesArray as FormArray).controls\n                            .filter(c => !c.value.id)\n                            .map(c => ({\n                                facetId: facet.id,\n                                code: c.value.code,\n                                translations: [{ name: c.value.name, languageCode }],\n                            }));\n                        if (newValues.length) {\n                            updateOperations.push(\n                                this.dataService.facet\n                                    .createFacetValues(newValues)\n                                    .pipe(switchMap(() => this.dataService.facet.getFacet(this.id).single$)),\n                            );\n                        }\n                        const updatedValues = this.getUpdatedFacetValues(\n                            facet,\n                            valuesArray as FormArray,\n                            languageCode,\n                        );\n                        if (updatedValues.length) {\n                            updateOperations.push(this.dataService.facet.updateFacetValues(updatedValues));\n                        }\n                    }\n\n                    return forkJoin(updateOperations);\n                }),\n                switchMap(() => this.dataService.facet.getAllFacets().single$),\n            )\n            .subscribe(\n                () => {\n                    this.detailForm.markAsPristine();\n                    this.changeDetector.markForCheck();\n                    this.notificationService.success(_('common.notify-update-success'), { entity: 'Facet' });\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-update-error'), {\n                        entity: 'Facet',\n                    });\n                },\n            );\n    }\n\n    deleteFacetValue(facetValueId: string | undefined, index: number) {\n        if (!facetValueId) {\n            // deleting a newly-added (not persisted) FacetValue\n            const valuesFormArray = this.detailForm.get('values') as FormArray | null;\n            if (valuesFormArray) {\n                valuesFormArray.removeAt(index);\n            }\n            this.values.splice(index, 1);\n            return;\n        }\n        this.showModalAndDelete(facetValueId)\n            .pipe(\n                switchMap(response => {\n                    if (response.result === DeletionResult.DELETED) {\n                        return [true];\n                    } else {\n                        return this.showModalAndDelete(facetValueId, response.message || '').pipe(\n                            map(r => r.result === DeletionResult.DELETED),\n                        );\n                    }\n                }),\n                switchMap(deleted => (deleted ? this.dataService.facet.getFacet(this.id).single$ : [])),\n            )\n            .subscribe(\n                () => {\n                    this.notificationService.success(_('common.notify-delete-success'), {\n                        entity: 'FacetValue',\n                    });\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-delete-error'), {\n                        entity: 'FacetValue',\n                    });\n                },\n            );\n    }\n\n    private showModalAndDelete(facetValueId: string, message?: string) {\n        return this.modalService\n            .dialog({\n                title: _('catalog.confirm-delete-facet-value'),\n                body: message,\n                buttons: [\n                    { type: 'secondary', label: _('common.cancel') },\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\n                ],\n            })\n            .pipe(\n                switchMap(result =>\n                    result ? this.dataService.facet.deleteFacetValues([facetValueId], !!message) : EMPTY,\n                ),\n                map(result => result.deleteFacetValues[0]),\n            );\n    }\n\n    /**\n     * Sets the values of the form on changes to the facet or current language.\n     */\n    protected setFormValues(facet: FacetWithValues.Fragment, languageCode: LanguageCode) {\n        const currentTranslation = findTranslation(facet, languageCode);\n\n        this.detailForm.patchValue({\n            facet: {\n                code: facet.code,\n                visible: !facet.isPrivate,\n                name: currentTranslation?.name ?? '',\n            },\n        });\n\n        if (this.customFields.length) {\n            const customFieldsGroup = this.detailForm.get(['facet', 'customFields']) as FormGroup;\n\n            for (const fieldDef of this.customFields) {\n                const key = fieldDef.name;\n                const value =\n                    fieldDef.type === 'localeString'\n                        ? (currentTranslation as any).customFields[key]\n                        : (facet as any).customFields[key];\n                const control = customFieldsGroup.get(key);\n                if (control) {\n                    control.patchValue(value);\n                }\n            }\n        }\n\n        const currentValuesFormArray = this.detailForm.get('values') as FormArray;\n        this.values = [...facet.values];\n        facet.values.forEach((value, i) => {\n            const valueTranslation = findTranslation(value, languageCode);\n            const group = {\n                id: value.id,\n                code: value.code,\n                name: valueTranslation ? valueTranslation.name : '',\n            };\n            const valueControl = currentValuesFormArray.at(i);\n            if (valueControl) {\n                valueControl.setValue(group);\n            } else {\n                currentValuesFormArray.insert(i, this.formBuilder.group(group));\n            }\n            if (this.customValueFields.length) {\n                let customValueFieldsGroup = this.detailForm.get(['values', i, 'customFields']) as FormGroup;\n                if (!customValueFieldsGroup) {\n                    customValueFieldsGroup = new FormGroup({});\n                    (this.detailForm.get(['values', i]) as FormGroup).addControl(\n                        'customFields',\n                        customValueFieldsGroup,\n                    );\n                }\n\n                if (customValueFieldsGroup) {\n                    for (const fieldDef of this.customValueFields) {\n                        const key = fieldDef.name;\n                        const fieldValue =\n                            fieldDef.type === 'localeString'\n                                ? (valueTranslation as any).customFields[key]\n                                : (value as any).customFields[key];\n                        const control = customValueFieldsGroup.get(key);\n                        if (control) {\n                            control.setValue(fieldValue);\n                        } else {\n                            customValueFieldsGroup.addControl(key, new FormControl(fieldValue));\n                        }\n                    }\n                }\n            }\n        });\n    }\n\n    /**\n     * Given a facet and the value of the detailForm, this method creates an updated copy of the facet which\n     * can then be persisted to the API.\n     */\n    private getUpdatedFacet(\n        facet: FacetWithValues.Fragment,\n        facetFormGroup: FormGroup,\n        languageCode: LanguageCode,\n    ): CreateFacetInput | UpdateFacetInput {\n        const input = createUpdatedTranslatable({\n            translatable: facet,\n            updatedFields: facetFormGroup.value,\n            customFieldConfig: this.customFields,\n            languageCode,\n            defaultTranslation: {\n                languageCode,\n                name: facet.name || '',\n            },\n        });\n        input.isPrivate = !facetFormGroup.value.visible;\n        return input;\n    }\n\n    /**\n     * Given an array of facet values and the values from the detailForm, this method creates an new array\n     * which can be persisted to the API.\n     */\n    private getUpdatedFacetValues(\n        facet: FacetWithValues.Fragment,\n        valuesFormArray: FormArray,\n        languageCode: LanguageCode,\n    ): UpdateFacetValueInput[] {\n        const dirtyValues = facet.values.filter((v, i) => {\n            const formRow = valuesFormArray.get(i.toString());\n            return formRow && formRow.dirty && formRow.value.id;\n        });\n        const dirtyValueValues = valuesFormArray.controls\n            .filter(c => c.dirty && c.value.id)\n            .map(c => c.value);\n\n        if (dirtyValues.length !== dirtyValueValues.length) {\n            throw new Error(_(`error.facet-value-form-values-do-not-match`));\n        }\n        return dirtyValues\n            .map((value, i) => {\n                return createUpdatedTranslatable({\n                    translatable: value,\n                    updatedFields: dirtyValueValues[i],\n                    customFieldConfig: this.customValueFields,\n                    languageCode,\n                    defaultTranslation: {\n                        languageCode,\n                        name: '',\n                    },\n                });\n            })\n            .filter(notNullOrUndefined);\n    }\n}\n","<vdr-action-bar>\r\n    <vdr-ab-left>\r\n        <vdr-language-selector\r\n            [availableLanguageCodes]=\"availableLanguages$ | async\"\r\n            [currentLanguageCode]=\"contentLanguage$ | async\"\r\n            (languageCodeChange)=\"setLanguage($event)\"\r\n        ></vdr-language-selector>\r\n    </vdr-ab-left>\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"facet-list\"></vdr-action-bar-items>\r\n        <a class=\"btn btn-primary\"\r\n           *vdrIfPermissions=\"['CreateCatalog', 'CreateFacet']\"\r\n           [routerLink]=\"['./create']\">\r\n            <clr-icon shape=\"plus\"></clr-icon>\r\n            {{ 'catalog.create-new-facet' | translate }}\r\n        </a>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<vdr-data-table\r\n    [items]=\"items$ | async\"\r\n    [itemsPerPage]=\"itemsPerPage$ | async\"\r\n    [totalItems]=\"totalItems$ | async\"\r\n    [currentPage]=\"currentPage$ | async\"\r\n    (pageChange)=\"setPageNumber($event)\"\r\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\r\n>\r\n    <vdr-dt-column>{{ 'common.code' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'common.name' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column [expand]=\"true\">{{ 'catalog.values' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'catalog.visibility' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <ng-template let-facet=\"item\">\r\n        <td class=\"left align-middle\" [class.private]=\"facet.isPrivate\">{{ facet.code }}</td>\r\n        <td class=\"left align-middle\" [class.private]=\"facet.isPrivate\">{{ facet.name }}</td>\r\n        <td class=\"left align-middle\" [class.private]=\"facet.isPrivate\">\r\n            <vdr-facet-value-chip\r\n                *ngFor=\"let value of facet.values | slice: 0:displayLimit[facet.id] || 3\"\r\n                [facetValue]=\"value\"\r\n                [removable]=\"false\"\r\n                [displayFacetName]=\"false\"\r\n            ></vdr-facet-value-chip>\r\n            <button\r\n                class=\"btn btn-sm btn-secondary btn-icon\"\r\n                *ngIf=\"facet.values.length > initialLimit\"\r\n                (click)=\"toggleDisplayLimit(facet)\"\r\n            >\r\n                <ng-container *ngIf=\"(displayLimit[facet.id] || 0) < facet.values.length; else collapse\">\r\n                    <clr-icon shape=\"plus\"></clr-icon>\r\n                    {{ facet.values.length - initialLimit }}\r\n                </ng-container>\r\n                <ng-template #collapse>\r\n                    <clr-icon shape=\"minus\"></clr-icon>\r\n                </ng-template>\r\n            </button>\r\n        </td>\r\n        <td class=\"left align-middle\" [class.private]=\"facet.isPrivate\">\r\n            <vdr-chip>\r\n                <ng-container *ngIf=\"!facet.isPrivate; else private\">{{ 'catalog.public' | translate }}</ng-container>\r\n                <ng-template #private>{{ 'catalog.private' | translate }}</ng-template>\r\n            </vdr-chip>\r\n        </td>\r\n        <td class=\"right align-middle\" [class.private]=\"facet.isPrivate\">\r\n            <vdr-table-row-action\r\n                iconShape=\"edit\"\r\n                [label]=\"'common.edit' | translate\"\r\n                [linkTo]=\"['./', facet.id]\"\r\n            ></vdr-table-row-action>\r\n        </td>\r\n        <td class=\"right align-middle\" [class.private]=\"facet.isPrivate\">\r\n            <vdr-dropdown>\r\n                <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger>\r\n                    {{ 'common.actions' | translate }}\r\n                    <clr-icon shape=\"caret down\"></clr-icon>\r\n                </button>\r\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                    <button\r\n                        type=\"button\"\r\n                        class=\"delete-button\"\r\n                        (click)=\"deleteFacet(facet.id)\"\r\n                        [disabled]=\"!(['DeleteCatalog', 'DeleteFacet'] | hasPermission)\"\r\n                        vdrDropdownItem\r\n                    >\r\n                        <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                        {{ 'common.delete' | translate }}\r\n                    </button>\r\n                </vdr-dropdown-menu>\r\n            </vdr-dropdown>\r\n        </td>\r\n    </ng-template>\r\n</vdr-data-table>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport { BaseListComponent, LanguageCode, ServerConfigService } from '@vendure/admin-ui/core';\r\nimport { DeletionResult, GetFacetList } from '@vendure/admin-ui/core';\r\nimport { NotificationService } from '@vendure/admin-ui/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\nimport { ModalService } from '@vendure/admin-ui/core';\r\nimport { EMPTY, Observable } from 'rxjs';\r\nimport { map, switchMap, tap } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'vdr-facet-list',\r\n    templateUrl: './facet-list.component.html',\r\n    styleUrls: ['./facet-list.component.scss'],\r\n})\r\nexport class FacetListComponent\r\n    extends BaseListComponent<GetFacetList.Query, GetFacetList.Items>\r\n    implements OnInit {\r\n    availableLanguages$: Observable<LanguageCode[]>;\r\n    contentLanguage$: Observable<LanguageCode>;\r\n    readonly initialLimit = 3;\r\n    displayLimit: { [id: string]: number } = {};\r\n    constructor(\r\n        private dataService: DataService,\r\n        private modalService: ModalService,\r\n        private notificationService: NotificationService,\r\n        private serverConfigService: ServerConfigService,\r\n        router: Router,\r\n        route: ActivatedRoute,\r\n    ) {\r\n        super(router, route);\r\n        super.setQueryFn(\r\n            (...args: any[]) => this.dataService.facet.getFacets(...args).refetchOnChannelChange(),\r\n            data => data.facets,\r\n        );\r\n    }\r\n\r\n    ngOnInit() {\r\n        super.ngOnInit();\r\n        this.availableLanguages$ = this.serverConfigService.getAvailableLanguages();\r\n        this.contentLanguage$ = this.dataService.client\r\n            .uiState()\r\n            .mapStream(({ uiState }) => uiState.contentLanguage)\r\n            .pipe(tap(() => this.refresh()));\r\n    }\r\n\r\n    toggleDisplayLimit(facet: GetFacetList.Items) {\r\n        if (this.displayLimit[facet.id] === facet.values.length) {\r\n            this.displayLimit[facet.id] = this.initialLimit;\r\n        } else {\r\n            this.displayLimit[facet.id] = facet.values.length;\r\n        }\r\n    }\r\n\r\n    deleteFacet(facetValueId: string) {\r\n        this.showModalAndDelete(facetValueId)\r\n            .pipe(\r\n                switchMap(response => {\r\n                    if (response.result === DeletionResult.DELETED) {\r\n                        return [true];\r\n                    } else {\r\n                        return this.showModalAndDelete(facetValueId, response.message || '').pipe(\r\n                            map(r => r.result === DeletionResult.DELETED),\r\n                        );\r\n                    }\r\n                }),\r\n                // Refresh the cached facets to reflect the changes\r\n                switchMap(() => this.dataService.facet.getAllFacets().single$),\r\n            )\r\n            .subscribe(\r\n                () => {\r\n                    this.notificationService.success(_('common.notify-delete-success'), {\r\n                        entity: 'FacetValue',\r\n                    });\r\n                    this.refresh();\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-delete-error'), {\r\n                        entity: 'FacetValue',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    setLanguage(code: LanguageCode) {\r\n        this.dataService.client.setContentLanguage(code).subscribe();\r\n    }\r\n\r\n    private showModalAndDelete(facetId: string, message?: string) {\r\n        return this.modalService\r\n            .dialog({\r\n                title: _('catalog.confirm-delete-facet'),\r\n                body: message,\r\n                buttons: [\r\n                    { type: 'secondary', label: _('common.cancel') },\r\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\r\n                ],\r\n            })\r\n            .pipe(\r\n                switchMap(res => (res ? this.dataService.facet.deleteFacet(facetId, !!message) : EMPTY)),\r\n                map(res => res.deleteFacet),\r\n            );\r\n    }\r\n}\r\n","/**\r\n * @description\r\n * Like String.prototype.replace(), but replaces the last instance\r\n * rather than the first.\r\n */\r\nexport function replaceLast(target: string | undefined | null, search: string, replace: string): string {\r\n    if (!target) {\r\n        return '';\r\n    }\r\n    const lastIndex = target.lastIndexOf(search);\r\n    if (lastIndex === -1) {\r\n        return target;\r\n    }\r\n    const head = target.substr(0, lastIndex);\r\n    const tail = target.substr(lastIndex).replace(search, replace);\r\n    return head + tail;\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {\r\n    CreateProductInput,\r\n    CreateProductVariantInput,\r\n    DataService,\r\n    DeletionResult,\r\n    FacetWithValues,\r\n    findTranslation,\r\n    LanguageCode,\r\n    ProductWithVariants,\r\n    UpdateProductInput,\r\n    UpdateProductMutation,\r\n    UpdateProductOptionInput,\r\n    UpdateProductVariantInput,\r\n    UpdateProductVariantsMutation,\r\n} from '@vendure/admin-ui/core';\r\nimport { normalizeString } from '@vendure/common/lib/normalize-string';\r\nimport { notNullOrUndefined } from '@vendure/common/lib/shared-utils';\r\nimport { forkJoin, Observable, of, throwError } from 'rxjs';\r\nimport { map, mergeMap, shareReplay, switchMap } from 'rxjs/operators';\r\n\r\nimport { CreateProductVariantsConfig } from '../../components/generate-product-variants/generate-product-variants.component';\r\n\r\nimport { replaceLast } from './replace-last';\r\n\r\n/**\r\n * Handles the logic for making the API calls to perform CRUD operations on a Product and its related\r\n * entities. This logic was extracted out of the component because it became too large and hard to follow.\r\n */\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class ProductDetailService {\r\n    constructor(private dataService: DataService) {}\r\n\r\n    getFacets(): Observable<FacetWithValues.Fragment[]> {\r\n        return this.dataService.facet.getAllFacets().mapSingle(data => data.facets.items);\r\n    }\r\n\r\n    getTaxCategories() {\r\n        return this.dataService.settings\r\n            .getTaxCategories()\r\n            .mapSingle(data => data.taxCategories)\r\n            .pipe(shareReplay(1));\r\n    }\r\n\r\n    createProductWithVariants(\r\n        input: CreateProductInput,\r\n        createVariantsConfig: CreateProductVariantsConfig,\r\n        languageCode: LanguageCode,\r\n    ) {\r\n        const createProduct$ = this.dataService.product.createProduct(input);\r\n        const nonEmptyOptionGroups = createVariantsConfig.groups.filter(g => 0 < g.values.length);\r\n        const createOptionGroups$ = this.createProductOptionGroups(nonEmptyOptionGroups, languageCode);\r\n\r\n        return forkJoin(createProduct$, createOptionGroups$).pipe(\r\n            mergeMap(([{ createProduct }, optionGroups]) => {\r\n                const addOptionsToProduct$ = optionGroups.length\r\n                    ? forkJoin(\r\n                          optionGroups.map(optionGroup => {\r\n                              return this.dataService.product.addOptionGroupToProduct({\r\n                                  productId: createProduct.id,\r\n                                  optionGroupId: optionGroup.id,\r\n                              });\r\n                          }),\r\n                      )\r\n                    : of([]);\r\n                return addOptionsToProduct$.pipe(\r\n                    map(() => {\r\n                        return { createProduct, optionGroups };\r\n                    }),\r\n                );\r\n            }),\r\n            mergeMap(({ createProduct, optionGroups }) => {\r\n                const variants = createVariantsConfig.variants.map(v => {\r\n                    const optionIds = optionGroups.length\r\n                        ? v.optionValues.map((optionName, index) => {\r\n                              const option = optionGroups[index].options.find(o => o.name === optionName);\r\n                              if (!option) {\r\n                                  throw new Error(\r\n                                      `Could not find a matching ProductOption \"${optionName}\" when creating variant`,\r\n                                  );\r\n                              }\r\n                              return option.id;\r\n                          })\r\n                        : [];\r\n                    return {\r\n                        ...v,\r\n                        optionIds,\r\n                    };\r\n                });\r\n                const options = optionGroups.map(og => og.options).reduce((flat, o) => [...flat, ...o], []);\r\n                return this.createProductVariants(createProduct, variants, options, languageCode);\r\n            }),\r\n        );\r\n    }\r\n\r\n    createProductOptionGroups(groups: Array<{ name: string; values: string[] }>, languageCode: LanguageCode) {\r\n        return groups.length\r\n            ? forkJoin(\r\n                  groups.map(c => {\r\n                      return this.dataService.product\r\n                          .createProductOptionGroups({\r\n                              code: normalizeString(c.name, '-'),\r\n                              translations: [{ languageCode, name: c.name }],\r\n                              options: c.values.map(v => ({\r\n                                  code: normalizeString(v, '-'),\r\n                                  translations: [{ languageCode, name: v }],\r\n                              })),\r\n                          })\r\n                          .pipe(map(data => data.createProductOptionGroup));\r\n                  }),\r\n              )\r\n            : of([]);\r\n    }\r\n\r\n    createProductVariants(\r\n        product: { name: string; id: string },\r\n        variantData: Array<{ price: number; sku: string; stock: number; optionIds: string[] }>,\r\n        options: Array<{ id: string; name: string }>,\r\n        languageCode: LanguageCode,\r\n    ) {\r\n        const variants: CreateProductVariantInput[] = variantData.map(v => {\r\n            const name = options.length\r\n                ? `${product.name} ${v.optionIds\r\n                      .map(id => options.find(o => o.id === id))\r\n                      .filter(notNullOrUndefined)\r\n                      .map(o => o.name)\r\n                      .join(' ')}`\r\n                : product.name;\r\n            return {\r\n                productId: product.id,\r\n                price: v.price,\r\n                sku: v.sku,\r\n                stockOnHand: v.stock,\r\n                translations: [\r\n                    {\r\n                        languageCode,\r\n                        name,\r\n                    },\r\n                ],\r\n                optionIds: v.optionIds,\r\n            };\r\n        });\r\n        return this.dataService.product.createProductVariants(variants).pipe(\r\n            map(({ createProductVariants }) => ({\r\n                createProductVariants,\r\n                productId: product.id,\r\n            })),\r\n        );\r\n    }\r\n\r\n    updateProduct(updateOptions: {\r\n        product: ProductWithVariants.Fragment;\r\n        languageCode: LanguageCode;\r\n        autoUpdate: boolean;\r\n        productInput?: UpdateProductInput;\r\n        variantsInput?: UpdateProductVariantInput[];\r\n    }) {\r\n        const { product, languageCode, autoUpdate, productInput, variantsInput } = updateOptions;\r\n        const updateOperations: Array<Observable<UpdateProductMutation | UpdateProductVariantsMutation>> = [];\r\n        const updateVariantsInput = variantsInput || [];\r\n        if (productInput) {\r\n            updateOperations.push(this.dataService.product.updateProduct(productInput));\r\n\r\n            const productOldName = findTranslation(product, languageCode)?.name ?? '';\r\n            const productNewName = findTranslation(productInput, languageCode)?.name;\r\n            if (productNewName && productOldName !== productNewName && autoUpdate) {\r\n                for (const variant of product.variants) {\r\n                    const currentVariantName = findTranslation(variant, languageCode)?.name || '';\r\n                    let variantInput: UpdateProductVariantInput;\r\n                    const existingVariantInput = updateVariantsInput.find(i => i.id === variant.id);\r\n                    if (existingVariantInput) {\r\n                        variantInput = existingVariantInput;\r\n                    } else {\r\n                        variantInput = {\r\n                            id: variant.id,\r\n                            translations: [{ languageCode, name: currentVariantName }],\r\n                        };\r\n                        updateVariantsInput.push(variantInput);\r\n                    }\r\n                    const variantTranslation = findTranslation(variantInput, languageCode);\r\n                    if (variantTranslation) {\r\n                        if (variantTranslation.name) {\r\n                            variantTranslation.name = replaceLast(\r\n                                variantTranslation.name,\r\n                                productOldName,\r\n                                productNewName,\r\n                            );\r\n                        } else {\r\n                            // The variant translation was falsy, which occurs\r\n                            // when defining the product name for a new translation\r\n                            // language that had not yet been defined.\r\n                            variantTranslation.name = [\r\n                                productNewName,\r\n                                ...variant.options.map(o => o.name),\r\n                            ].join(' ');\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (updateVariantsInput.length) {\r\n            updateOperations.push(this.dataService.product.updateProductVariants(updateVariantsInput));\r\n        }\r\n        return forkJoin(updateOperations);\r\n    }\r\n\r\n    updateProductOption(\r\n        input: UpdateProductOptionInput & { autoUpdate: boolean },\r\n        product: ProductWithVariants.Fragment,\r\n        languageCode: LanguageCode,\r\n    ) {\r\n        let updateProductVariantNames$: Observable<any> = of([]);\r\n        if (input.autoUpdate) {\r\n            // Update any ProductVariants' names which include the option name\r\n            let oldOptionName: string | undefined;\r\n            const newOptionName = findTranslation(input, languageCode)?.name;\r\n            if (!newOptionName) {\r\n                updateProductVariantNames$ = of([]);\r\n            }\r\n            const variantsToUpdate: UpdateProductVariantInput[] = [];\r\n            for (const variant of product.variants) {\r\n                if (variant.options.map(o => o.id).includes(input.id)) {\r\n                    if (!oldOptionName) {\r\n                        oldOptionName = findTranslation(\r\n                            variant.options.find(o => o.id === input.id),\r\n                            languageCode,\r\n                        )?.name;\r\n                    }\r\n                    const variantName = findTranslation(variant, languageCode)?.name || '';\r\n                    if (oldOptionName && newOptionName && variantName.includes(oldOptionName)) {\r\n                        variantsToUpdate.push({\r\n                            id: variant.id,\r\n                            translations: [\r\n                                {\r\n                                    languageCode,\r\n                                    name: replaceLast(variantName, oldOptionName, newOptionName),\r\n                                },\r\n                            ],\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n            if (variantsToUpdate.length) {\r\n                updateProductVariantNames$ = this.dataService.product.updateProductVariants(variantsToUpdate);\r\n            }\r\n        }\r\n        return this.dataService.product\r\n            .updateProductOption(input)\r\n            .pipe(mergeMap(() => updateProductVariantNames$));\r\n    }\r\n\r\n    deleteProductVariant(id: string, productId: string) {\r\n        return this.dataService.product.deleteProductVariant(id).pipe(\r\n            switchMap(result => {\r\n                if (result.deleteProductVariant.result === DeletionResult.DELETED) {\r\n                    return this.dataService.product.getProduct(productId).single$;\r\n                } else {\r\n                    return throwError(result.deleteProductVariant.message);\r\n                }\r\n            }),\r\n        );\r\n    }\r\n}\r\n","<ng-template vdrDialogTitle>{{ 'catalog.add-facets' | translate }}</ng-template>\r\n\r\n<vdr-facet-value-selector\r\n    [facets]=\"facets\"\r\n    (selectedValuesChange)=\"selectedValues = $event\"\r\n></vdr-facet-value-selector>\r\n\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button\r\n        type=\"submit\"\r\n        (click)=\"selectValues()\"\r\n        [disabled]=\"selectedValues.length === 0\"\r\n        class=\"btn btn-primary\"\r\n    >\r\n        {{ 'catalog.add-facets' | translate }}\r\n    </button>\r\n</ng-template>\r\n","import {\r\n    AfterViewInit,\r\n    ChangeDetectionStrategy,\r\n    ChangeDetectorRef,\r\n    Component,\r\n    ViewChild,\r\n} from '@angular/core';\r\nimport { Dialog, FacetValue, FacetValueSelectorComponent, FacetWithValues } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-apply-facet-dialog',\r\n    templateUrl: './apply-facet-dialog.component.html',\r\n    styleUrls: ['./apply-facet-dialog.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ApplyFacetDialogComponent implements Dialog<FacetValue[]>, AfterViewInit {\r\n    @ViewChild(FacetValueSelectorComponent) private selector: FacetValueSelectorComponent;\r\n    resolveWith: (result?: FacetValue[]) => void;\r\n    selectedValues: FacetValue[] = [];\r\n    // Provided by caller\r\n    facets: FacetWithValues.Fragment[];\r\n\r\n    constructor(private changeDetector: ChangeDetectorRef) {}\r\n\r\n    ngAfterViewInit() {\r\n        setTimeout(() => this.selector.focus(), 0);\r\n    }\r\n\r\n    selectValues() {\r\n        this.resolveWith(this.selectedValues);\r\n    }\r\n\r\n    cancel() {\r\n        this.resolveWith();\r\n    }\r\n}\r\n","<ng-template vdrDialogTitle>\r\n    <ng-container *ngIf=\"isProductVariantMode; else productModeTitle\">{{\r\n        'catalog.assign-variants-to-channel' | translate\r\n    }}</ng-container>\r\n    <ng-template #productModeTitle>{{ 'catalog.assign-products-to-channel' | translate }}</ng-template>\r\n</ng-template>\r\n\r\n<div class=\"flex\">\r\n    <clr-input-container>\r\n        <label>{{ 'common.channel' | translate }}</label>\r\n        <vdr-channel-assignment-control\r\n            clrInput\r\n            [multiple]=\"false\"\r\n            [includeDefaultChannel]=\"false\"\r\n            [disableChannelIds]=\"currentChannelIds\"\r\n            [formControl]=\"selectedChannelIdControl\"\r\n        ></vdr-channel-assignment-control>\r\n    </clr-input-container>\r\n    <div class=\"flex-spacer\"></div>\r\n    <clr-input-container>\r\n        <label>{{ 'catalog.price-conversion-factor' | translate }}</label>\r\n        <input clrInput type=\"number\" min=\"0\" max=\"99999\" [formControl]=\"priceFactorControl\" />\r\n    </clr-input-container>\r\n</div>\r\n\r\n<div class=\"channel-price-preview\">\r\n    <label class=\"clr-control-label\">{{ 'catalog.channel-price-preview' | translate }}</label>\r\n    <table class=\"table\">\r\n        <thead>\r\n            <tr>\r\n                <th>{{ 'common.name' | translate }}</th>\r\n                <th>\r\n                    {{\r\n                        'catalog.price-in-channel'\r\n                            | translate: { channel: currentChannel?.code | channelCodeToLabel | translate }\r\n                    }}\r\n                </th>\r\n                <th>\r\n                    <ng-template [ngIf]=\"selectedChannel\" [ngIfElse]=\"noSelection\">\r\n                        {{ 'catalog.price-in-channel' | translate: { channel: selectedChannel?.code } }}\r\n                    </ng-template>\r\n                    <ng-template #noSelection>\r\n                        {{ 'catalog.no-channel-selected' | translate }}\r\n                    </ng-template>\r\n                </th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n            <tr *ngFor=\"let row of variantsPreview$ | async\">\r\n                <td>{{ row.name }}</td>\r\n                <td>{{ row.price | localeCurrency: currentChannel?.currencyCode }}</td>\r\n                <td>\r\n                    <ng-template [ngIf]=\"selectedChannel\" [ngIfElse]=\"noChannelSelected\">\r\n                        {{ row.pricePreview | localeCurrency: selectedChannel?.currencyCode }}\r\n                    </ng-template>\r\n                    <ng-template #noChannelSelected> - </ng-template>\r\n                </td>\r\n            </tr>\r\n        </tbody>\r\n    </table>\r\n</div>\r\n\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button type=\"submit\" (click)=\"assign()\" [disabled]=\"!selectedChannel\" class=\"btn btn-primary\">\r\n        <ng-template [ngIf]=\"selectedChannel\" [ngIfElse]=\"noSelection\">\r\n            {{ 'catalog.assign-to-named-channel' | translate: { channelCode: selectedChannel?.code } }}\r\n        </ng-template>\r\n        <ng-template #noSelection>\r\n            {{ 'catalog.no-channel-selected' | translate }}\r\n        </ng-template>\r\n    </button>\r\n</ng-template>\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport { GetChannels, ProductVariantFragment } from '@vendure/admin-ui/core';\nimport { NotificationService } from '@vendure/admin-ui/core';\nimport { DataService } from '@vendure/admin-ui/core';\nimport { Dialog } from '@vendure/admin-ui/core';\nimport { combineLatest, from, Observable } from 'rxjs';\nimport { map, startWith, switchMap } from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-assign-products-to-channel-dialog',\n    templateUrl: './assign-products-to-channel-dialog.component.html',\n    styleUrls: ['./assign-products-to-channel-dialog.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AssignProductsToChannelDialogComponent implements OnInit, Dialog<any> {\n    selectedChannel: GetChannels.Channels | null | undefined;\n    currentChannel: GetChannels.Channels;\n    availableChannels: GetChannels.Channels[];\n    resolveWith: (result?: any) => void;\n    variantsPreview$: Observable<Array<{ id: string; name: string; price: number; pricePreview: number }>>;\n    priceFactorControl = new FormControl(1);\n    selectedChannelIdControl = new FormControl();\n\n    // assigned by ModalService.fromComponent() call\n    productIds: string[];\n    productVariantIds: string[] | undefined;\n    currentChannelIds: string[];\n\n    get isProductVariantMode(): boolean {\n        return this.productVariantIds != null;\n    }\n\n    constructor(private dataService: DataService, private notificationService: NotificationService) {}\n\n    ngOnInit() {\n        const activeChannelId$ = this.dataService.client\n            .userStatus()\n            .mapSingle(({ userStatus }) => userStatus.activeChannelId);\n        const allChannels$ = this.dataService.settings.getChannels().mapSingle(data => data.channels);\n\n        combineLatest(activeChannelId$, allChannels$).subscribe(([activeChannelId, channels]) => {\n            // tslint:disable-next-line:no-non-null-assertion\n            this.currentChannel = channels.find(c => c.id === activeChannelId)!;\n            this.availableChannels = channels;\n        });\n\n        this.selectedChannelIdControl.valueChanges.subscribe(ids => {\n            this.selectChannel(ids);\n        });\n\n        this.variantsPreview$ = combineLatest(\n            from(this.getTopVariants(10)),\n            this.priceFactorControl.valueChanges.pipe(startWith(1)),\n        ).pipe(\n            map(([variants, factor]) => {\n                return variants.map(v => ({\n                    id: v.id,\n                    name: v.name,\n                    price: v.price,\n                    pricePreview: v.price * +factor,\n                }));\n            }),\n        );\n    }\n\n    selectChannel(channelIds: string[]) {\n        this.selectedChannel = this.availableChannels.find(c => c.id === channelIds[0]);\n    }\n\n    assign() {\n        const selectedChannel = this.selectedChannel;\n        if (selectedChannel) {\n            if (!this.isProductVariantMode) {\n                this.dataService.product\n                    .assignProductsToChannel({\n                        channelId: selectedChannel.id,\n                        productIds: this.productIds,\n                        priceFactor: +this.priceFactorControl.value,\n                    })\n                    .subscribe(() => {\n                        this.notificationService.success(_('catalog.assign-product-to-channel-success'), {\n                            channel: selectedChannel.code,\n                        });\n                        this.resolveWith(true);\n                    });\n            } else if (this.productVariantIds) {\n                this.dataService.product\n                    .assignVariantsToChannel({\n                        channelId: selectedChannel.id,\n                        productVariantIds: this.productVariantIds,\n                        priceFactor: +this.priceFactorControl.value,\n                    })\n                    .subscribe(() => {\n                        this.notificationService.success(_('catalog.assign-variant-to-channel-success'), {\n                            channel: selectedChannel.code,\n                        });\n                        this.resolveWith(true);\n                    });\n            }\n        }\n    }\n\n    cancel() {\n        this.resolveWith();\n    }\n\n    private async getTopVariants(take: number): Promise<ProductVariantFragment[]> {\n        const variants: ProductVariantFragment[] = [];\n\n        for (let i = 0; i < this.productIds.length && variants.length < take; i++) {\n            const productVariants = await this.dataService.product\n                .getProduct(this.productIds[i])\n                .mapSingle(({ product }) => {\n                    const _variants = product ? product.variants : [];\n                    return _variants.filter(v =>\n                        this.isProductVariantMode ? this.productVariantIds?.includes(v.id) : true,\n                    );\n                })\n                .toPromise();\n            variants.push(...(productVariants || []));\n        }\n        return variants.slice(0, take);\n    }\n}\n","<vdr-action-bar>\r\n    <vdr-ab-left>\r\n        <div class=\"flex clr-flex-row\">\r\n            <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\r\n            <clr-toggle-wrapper *vdrIfPermissions=\"['UpdateCatalog', 'UpdateProduct']\">\r\n                <input\r\n                    type=\"checkbox\"\r\n                    clrToggle\r\n                    name=\"enabled\"\r\n                    [formControl]=\"detailForm.get(['product', 'enabled'])\"\r\n                />\r\n                <label>{{ 'common.enabled' | translate }}</label>\r\n            </clr-toggle-wrapper>\r\n        </div>\r\n        <vdr-language-selector\r\n            [disabled]=\"isNew$ | async\"\r\n            [availableLanguageCodes]=\"availableLanguages$ | async\"\r\n            [currentLanguageCode]=\"languageCode$ | async\"\r\n            (languageCodeChange)=\"setLanguage($event)\"\r\n        ></vdr-language-selector>\r\n    </vdr-ab-left>\r\n\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"product-detail\"></vdr-action-bar-items>\r\n        <button\r\n            class=\"btn btn-primary\"\r\n            *ngIf=\"isNew$ | async; else updateButton\"\r\n            (click)=\"create()\"\r\n            [disabled]=\"detailForm.invalid || detailForm.pristine || !variantsToCreateAreValid()\"\r\n        >\r\n            {{ 'common.create' | translate }}\r\n        </button>\r\n        <ng-template #updateButton>\r\n            <button\r\n                *vdrIfPermissions=\"['UpdateCatalog', 'UpdateProduct']\"\r\n                class=\"btn btn-primary\"\r\n                (click)=\"save()\"\r\n                [disabled]=\"\r\n                    (detailForm.invalid || detailForm.pristine) && !assetsChanged() && !variantAssetsChanged()\r\n                \"\r\n            >\r\n                {{ 'common.update' | translate }}\r\n            </button>\r\n        </ng-template>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<form\r\n    class=\"form\"\r\n    [formGroup]=\"detailForm\"\r\n    *ngIf=\"product$ | async as product\"\r\n>\r\n    <button type=\"submit\" hidden x-data=\"prevents enter key from triggering other buttons\"></button>\r\n    <clr-tabs>\r\n        <clr-tab>\r\n            <button clrTabLink (click)=\"navigateToTab('details')\">\r\n                {{ 'catalog.product-details' | translate }}\r\n            </button>\r\n            <clr-tab-content *clrIfActive=\"(activeTab$ | async) === 'details'\">\r\n                <div class=\"clr-row\">\r\n                    <div class=\"clr-col\">\r\n                        <section class=\"form-block\" formGroupName=\"product\">\r\n                            <ng-container *vdrIfMultichannel>\r\n                                <vdr-form-item\r\n                                    [label]=\"'common.channels' | translate\"\r\n                                    *vdrIfDefaultChannelActive\r\n                                >\r\n                                    <div class=\"flex channel-assignment\">\r\n                                        <ng-container *ngFor=\"let channel of productChannels$ | async\">\r\n                                            <vdr-chip\r\n                                                *ngIf=\"!isDefaultChannel(channel.code)\"\r\n                                                icon=\"times-circle\"\r\n                                                (iconClick)=\"removeFromChannel(channel.id)\"\r\n                                            >\r\n                                                <vdr-channel-badge\r\n                                                    [channelCode]=\"channel.code\"\r\n                                                ></vdr-channel-badge>\r\n                                                {{ channel.code | channelCodeToLabel }}\r\n                                            </vdr-chip>\r\n                                        </ng-container>\r\n                                        <button class=\"btn btn-sm\" (click)=\"assignToChannel()\">\r\n                                            <clr-icon shape=\"layers\"></clr-icon>\r\n                                            {{ 'catalog.assign-to-channel' | translate }}\r\n                                        </button>\r\n                                    </div>\r\n                                </vdr-form-item>\r\n                            </ng-container>\r\n                            <vdr-form-field [label]=\"'catalog.product-name' | translate\" for=\"name\">\r\n                                <input\r\n                                    id=\"name\"\r\n                                    type=\"text\"\r\n                                    formControlName=\"name\"\r\n                                    [readonly]=\"!(['UpdateCatalog', 'UpdateProduct'] | hasPermission)\"\r\n                                    (input)=\"updateSlug($event.target.value)\"\r\n                                />\r\n                            </vdr-form-field>\r\n                            <div\r\n                                class=\"auto-rename-wrapper\"\r\n                                [class.visible]=\"\r\n                                    (isNew$ | async) === false && detailForm.get(['product', 'name'])?.dirty\r\n                                \"\r\n                            >\r\n                                <clr-checkbox-wrapper>\r\n                                    <input\r\n                                        clrCheckbox\r\n                                        type=\"checkbox\"\r\n                                        id=\"auto-update\"\r\n                                        formControlName=\"autoUpdateVariantNames\"\r\n                                    />\r\n                                    <label>{{\r\n                                        'catalog.auto-update-product-variant-name' | translate\r\n                                    }}</label>\r\n                                </clr-checkbox-wrapper>\r\n                            </div>\r\n                            <vdr-form-field\r\n                                [label]=\"'catalog.slug' | translate\"\r\n                                for=\"slug\"\r\n                                [errors]=\"{ pattern: 'catalog.slug-pattern-error' | translate }\"\r\n                            >\r\n                                <input\r\n                                    id=\"slug\"\r\n                                    type=\"text\"\r\n                                    formControlName=\"slug\"\r\n                                    [readonly]=\"!(['UpdateCatalog', 'UpdateProduct'] | hasPermission)\"\r\n                                    pattern=\"[a-z0-9_-]+\"\r\n                                />\r\n                            </vdr-form-field>\r\n                            <vdr-rich-text-editor\r\n                                formControlName=\"description\"\r\n                                [readonly]=\"!(['UpdateCatalog', 'UpdateProduct'] | hasPermission)\"\r\n                                [label]=\"'common.description' | translate\"\r\n                            ></vdr-rich-text-editor>\r\n\r\n                            <section formGroupName=\"customFields\" *ngIf=\"customFields.length\">\r\n                                <label>{{ 'common.custom-fields' | translate }}</label>\r\n                                <ng-container *ngFor=\"let customField of customFields\">\r\n                                    <vdr-custom-field-control\r\n                                        *ngIf=\"customFieldIsSet(customField.name)\"\r\n                                        entityName=\"Product\"\r\n                                        [customFieldsFormGroup]=\"detailForm.get(['product', 'customFields'])\"\r\n                                        [customField]=\"customField\"\r\n                                        [readonly]=\"!(['UpdateCatalog', 'UpdateProduct'] | hasPermission)\"\r\n                                    ></vdr-custom-field-control>\r\n                                </ng-container>\r\n                            </section>\r\n\r\n                            <div class=\"facets\">\r\n                                <vdr-facet-value-chip\r\n                                    *ngFor=\"let facetValue of facetValues$ | async\"\r\n                                    [facetValue]=\"facetValue\"\r\n                                    [removable]=\"['UpdateCatalog', 'UpdateProduct'] | hasPermission\"\r\n                                    (remove)=\"removeProductFacetValue(facetValue.id)\"\r\n                                ></vdr-facet-value-chip>\r\n                                <button\r\n                                    class=\"btn btn-sm btn-secondary\"\r\n                                    *vdrIfPermissions=\"['UpdateCatalog', 'UpdateProduct']\"\r\n                                    (click)=\"selectProductFacetValue()\"\r\n                                >\r\n                                    <clr-icon shape=\"plus\"></clr-icon>\r\n                                    {{ 'catalog.add-facets' | translate }}\r\n                                </button>\r\n                            </div>\r\n                        </section>\r\n                    </div>\r\n                    <div class=\"clr-col-md-auto\">\r\n                        <vdr-product-assets\r\n                            [assets]=\"assetChanges.assets || product.assets\"\r\n                            [featuredAsset]=\"assetChanges.featuredAsset || product.featuredAsset\"\r\n                            (change)=\"assetChanges = $event\"\r\n                        ></vdr-product-assets>\r\n                    </div>\r\n                </div>\r\n\r\n                <div *ngIf=\"isNew$ | async\">\r\n                    <h4>{{ 'catalog.product-variants' | translate }}</h4>\r\n                    <vdr-generate-product-variants\r\n                        (variantsChange)=\"createVariantsConfig = $event\"\r\n                    ></vdr-generate-product-variants>\r\n                </div>\r\n            </clr-tab-content>\r\n        </clr-tab>\r\n        <clr-tab *ngIf=\"!(isNew$ | async)\">\r\n            <button clrTabLink (click)=\"navigateToTab('variants')\">\r\n                {{ 'catalog.product-variants' | translate }}\r\n            </button>\r\n            <clr-tab-content *clrIfActive=\"(activeTab$ | async) === 'variants'\">\r\n                <section class=\"form-block\">\r\n                    <div class=\"view-mode\">\r\n                        <div class=\"btn-group\">\r\n                            <button\r\n                                class=\"btn btn-secondary-outline\"\r\n                                (click)=\"variantDisplayMode = 'card'\"\r\n                                [class.btn-primary]=\"variantDisplayMode === 'card'\"\r\n                            >\r\n                                <clr-icon shape=\"list\"></clr-icon>\r\n                                {{ 'catalog.display-variant-cards' | translate }}\r\n                            </button>\r\n                            <button\r\n                                class=\"btn\"\r\n                                (click)=\"variantDisplayMode = 'table'\"\r\n                                [class.btn-primary]=\"variantDisplayMode === 'table'\"\r\n                            >\r\n                                <clr-icon shape=\"table\"></clr-icon>\r\n                                {{ 'catalog.display-variant-table' | translate }}\r\n                            </button>\r\n                        </div>\r\n                        <div class=\"variant-filter\">\r\n                            <input\r\n                                [formControl]=\"filterInput\"\r\n                                [placeholder]=\"'catalog.filter-by-name-or-sku' | translate\"\r\n                            />\r\n                            <button class=\"icon-button\" (click)=\"filterInput.setValue('')\">\r\n                                <clr-icon shape=\"times\"></clr-icon>\r\n                            </button>\r\n                        </div>\r\n                        <div class=\"flex-spacer\"></div>\r\n                        <a\r\n                            *vdrIfPermissions=\"['UpdateCatalog', 'UpdateProduct']\"\r\n                            [routerLink]=\"['./', 'manage-variants']\"\r\n                            class=\"btn btn-secondary edit-variants-btn\"\r\n                        >\r\n                            <clr-icon shape=\"add-text\"></clr-icon>\r\n                            {{ 'catalog.manage-variants' | translate }}\r\n                        </a>\r\n                    </div>\r\n\r\n                    <vdr-product-variants-table\r\n                        *ngIf=\"variantDisplayMode === 'table'\"\r\n                        [variants]=\"variants$ | async\"\r\n                        [optionGroups]=\"product.optionGroups\"\r\n                        [channelPriceIncludesTax]=\"channelPriceIncludesTax$ | async\"\r\n                        [productVariantsFormArray]=\"detailForm.get('variants')\"\r\n                        [pendingAssetChanges]=\"variantAssetChanges\"\r\n                    ></vdr-product-variants-table>\r\n                    <vdr-product-variants-list\r\n                        *ngIf=\"variantDisplayMode === 'card'\"\r\n                        [variants]=\"variants$ | async\"\r\n                        [channelPriceIncludesTax]=\"channelPriceIncludesTax$ | async\"\r\n                        [facets]=\"facets$ | async\"\r\n                        [optionGroups]=\"product.optionGroups\"\r\n                        [productVariantsFormArray]=\"detailForm.get('variants')\"\r\n                        [taxCategories]=\"taxCategories$ | async\"\r\n                        [customFields]=\"customVariantFields\"\r\n                        [customOptionFields]=\"customOptionFields\"\r\n                        [activeLanguage]=\"languageCode$ | async\"\r\n                        [pendingAssetChanges]=\"variantAssetChanges\"\r\n                        (assignToChannel)=\"assignVariantToChannel($event)\"\r\n                        (removeFromChannel)=\"removeVariantFromChannel($event)\"\r\n                        (assetChange)=\"variantAssetChange($event)\"\r\n                        (updateProductOption)=\"updateProductOption($event)\"\r\n                        (selectionChange)=\"selectedVariantIds = $event\"\r\n                        (selectFacetValueClick)=\"selectVariantFacetValue($event)\"\r\n                    ></vdr-product-variants-list>\r\n                </section>\r\n            </clr-tab-content>\r\n        </clr-tab>\r\n    </clr-tabs>\r\n</form>\r\n","import { Location } from '@angular/common';\r\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormArray, FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    Asset,\r\n    BaseDetailComponent,\r\n    CreateProductInput,\r\n    createUpdatedTranslatable,\r\n    CustomFieldConfig,\r\n    DataService,\r\n    FacetWithValues,\r\n    findTranslation,\r\n    flattenFacetValues,\r\n    GlobalFlag,\r\n    LanguageCode,\r\n    ModalService,\r\n    NotificationService,\r\n    ProductWithVariants,\r\n    ServerConfigService,\r\n    TaxCategory,\r\n    UpdateProductInput,\r\n    UpdateProductMutation,\r\n    UpdateProductOptionInput,\r\n    UpdateProductVariantInput,\r\n    UpdateProductVariantsMutation,\r\n} from '@vendure/admin-ui/core';\r\nimport { normalizeString } from '@vendure/common/lib/normalize-string';\r\nimport { DEFAULT_CHANNEL_CODE } from '@vendure/common/lib/shared-constants';\r\nimport { notNullOrUndefined } from '@vendure/common/lib/shared-utils';\r\nimport { unique } from '@vendure/common/lib/unique';\r\nimport { combineLatest, EMPTY, merge, Observable } from 'rxjs';\r\nimport {\r\n    debounceTime,\r\n    distinctUntilChanged,\r\n    map,\r\n    mergeMap,\r\n    shareReplay,\r\n    startWith,\r\n    switchMap,\r\n    take,\r\n    takeUntil,\r\n    withLatestFrom,\r\n} from 'rxjs/operators';\r\n\r\nimport { ProductDetailService } from '../../providers/product-detail/product-detail.service';\r\nimport { ApplyFacetDialogComponent } from '../apply-facet-dialog/apply-facet-dialog.component';\r\nimport { AssignProductsToChannelDialogComponent } from '../assign-products-to-channel-dialog/assign-products-to-channel-dialog.component';\r\nimport { CreateProductVariantsConfig } from '../generate-product-variants/generate-product-variants.component';\r\nimport { VariantAssetChange } from '../product-variants-list/product-variants-list.component';\r\n\r\nexport type TabName = 'details' | 'variants';\r\nexport interface VariantFormValue {\r\n    id: string;\r\n    enabled: boolean;\r\n    sku: string;\r\n    name: string;\r\n    price: number;\r\n    priceWithTax: number;\r\n    taxCategoryId: string;\r\n    stockOnHand: number;\r\n    useGlobalOutOfStockThreshold: boolean;\r\n    outOfStockThreshold: number;\r\n    trackInventory: GlobalFlag;\r\n    facetValueIds: string[];\r\n    customFields?: any;\r\n}\r\n\r\nexport interface SelectedAssets {\r\n    assets?: Asset[];\r\n    featuredAsset?: Asset;\r\n}\r\n\r\n@Component({\r\n    selector: 'vdr-product-detail',\r\n    templateUrl: './product-detail.component.html',\r\n    styleUrls: ['./product-detail.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ProductDetailComponent\r\n    extends BaseDetailComponent<ProductWithVariants.Fragment>\r\n    implements OnInit, OnDestroy {\r\n    activeTab$: Observable<TabName>;\r\n    product$: Observable<ProductWithVariants.Fragment>;\r\n    variants$: Observable<ProductWithVariants.Variants[]>;\r\n    taxCategories$: Observable<TaxCategory.Fragment[]>;\r\n    customFields: CustomFieldConfig[];\r\n    customVariantFields: CustomFieldConfig[];\r\n    customOptionGroupFields: CustomFieldConfig[];\r\n    customOptionFields: CustomFieldConfig[];\r\n    detailForm: FormGroup;\r\n    filterInput = new FormControl('');\r\n    assetChanges: SelectedAssets = {};\r\n    variantAssetChanges: { [variantId: string]: SelectedAssets } = {};\r\n    productChannels$: Observable<ProductWithVariants.Channels[]>;\r\n    facetValues$: Observable<ProductWithVariants.FacetValues[]>;\r\n    facets$: Observable<FacetWithValues.Fragment[]>;\r\n    selectedVariantIds: string[] = [];\r\n    variantDisplayMode: 'card' | 'table' = 'card';\r\n    createVariantsConfig: CreateProductVariantsConfig = { groups: [], variants: [] };\r\n    channelPriceIncludesTax$: Observable<boolean>;\r\n\r\n    constructor(\r\n        route: ActivatedRoute,\r\n        router: Router,\r\n        serverConfigService: ServerConfigService,\r\n        private productDetailService: ProductDetailService,\r\n        private formBuilder: FormBuilder,\r\n        private modalService: ModalService,\r\n        private notificationService: NotificationService,\r\n        protected dataService: DataService,\r\n        private location: Location,\r\n        private changeDetector: ChangeDetectorRef,\r\n    ) {\r\n        super(route, router, serverConfigService, dataService);\r\n        this.customFields = this.getCustomFieldConfig('Product');\r\n        this.customVariantFields = this.getCustomFieldConfig('ProductVariant');\r\n        this.customOptionGroupFields = this.getCustomFieldConfig('ProductOptionGroup');\r\n        this.customOptionFields = this.getCustomFieldConfig('ProductOption');\r\n        this.detailForm = this.formBuilder.group({\r\n            product: this.formBuilder.group({\r\n                enabled: true,\r\n                name: ['', Validators.required],\r\n                autoUpdateVariantNames: true,\r\n                slug: '',\r\n                description: '',\r\n                facetValueIds: [[]],\r\n                customFields: this.formBuilder.group(\r\n                    this.customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\r\n                ),\r\n            }),\r\n            variants: this.formBuilder.array([]),\r\n        });\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.init();\r\n        this.product$ = this.entity$;\r\n        const variants$ = this.product$.pipe(map(product => product.variants));\r\n        const filterTerm$ = this.filterInput.valueChanges.pipe(\r\n            startWith(''),\r\n            debounceTime(50),\r\n            shareReplay(),\r\n        );\r\n        this.variants$ = combineLatest(variants$, filterTerm$).pipe(\r\n            map(([variants, term]) => {\r\n                return term\r\n                    ? variants.filter(v => {\r\n                          const lcTerm = term.toLocaleLowerCase();\r\n                          return (\r\n                              v.name.toLocaleLowerCase().includes(lcTerm) ||\r\n                              v.sku.toLocaleLowerCase().includes(lcTerm)\r\n                          );\r\n                      })\r\n                    : variants;\r\n            }),\r\n        );\r\n        this.taxCategories$ = this.productDetailService.getTaxCategories().pipe(takeUntil(this.destroy$));\r\n        this.activeTab$ = this.route.paramMap.pipe(map(qpm => qpm.get('tab') as any));\r\n\r\n        // FacetValues are provided initially by the nested array of the\r\n        // Product entity, but once a fetch to get all Facets is made (as when\r\n        // opening the FacetValue selector modal), then these additional values\r\n        // are concatenated onto the initial array.\r\n        this.facets$ = this.productDetailService.getFacets();\r\n        const productFacetValues$ = this.product$.pipe(map(product => product.facetValues));\r\n        const allFacetValues$ = this.facets$.pipe(map(flattenFacetValues));\r\n        const productGroup = this.getProductFormGroup();\r\n\r\n        const formFacetValueIdChanges$ = productGroup.valueChanges.pipe(\r\n            map(val => val.facetValueIds as string[]),\r\n            distinctUntilChanged(),\r\n        );\r\n        const formChangeFacetValues$ = combineLatest(\r\n            formFacetValueIdChanges$,\r\n            productFacetValues$,\r\n            allFacetValues$,\r\n        ).pipe(\r\n            map(([ids, productFacetValues, allFacetValues]) => {\r\n                const combined = [...productFacetValues, ...allFacetValues];\r\n                return ids.map(id => combined.find(fv => fv.id === id)).filter(notNullOrUndefined);\r\n            }),\r\n        );\r\n\r\n        this.facetValues$ = merge(productFacetValues$, formChangeFacetValues$);\r\n        this.productChannels$ = this.product$.pipe(map(p => p.channels));\r\n        this.channelPriceIncludesTax$ = this.dataService.settings\r\n            .getActiveChannel('cache-first')\r\n            .refetchOnChannelChange()\r\n            .mapStream(data => data.activeChannel.pricesIncludeTax)\r\n            .pipe(shareReplay(1));\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.destroy();\r\n    }\r\n\r\n    navigateToTab(tabName: TabName) {\r\n        this.location.replaceState(\r\n            this.router\r\n                .createUrlTree(['./', { ...this.route.snapshot.params, tab: tabName }], {\r\n                    queryParamsHandling: 'merge',\r\n                    relativeTo: this.route,\r\n                })\r\n                .toString(),\r\n        );\r\n    }\r\n\r\n    isDefaultChannel(channelCode: string): boolean {\r\n        return channelCode === DEFAULT_CHANNEL_CODE;\r\n    }\r\n\r\n    assignToChannel() {\r\n        this.productChannels$\r\n            .pipe(\r\n                take(1),\r\n                switchMap(channels => {\r\n                    return this.modalService.fromComponent(AssignProductsToChannelDialogComponent, {\r\n                        size: 'lg',\r\n                        locals: {\r\n                            productIds: [this.id],\r\n                            currentChannelIds: channels.map(c => c.id),\r\n                        },\r\n                    });\r\n                }),\r\n            )\r\n            .subscribe();\r\n    }\r\n\r\n    removeFromChannel(channelId: string) {\r\n        this.modalService\r\n            .dialog({\r\n                title: _('catalog.remove-product-from-channel'),\r\n                buttons: [\r\n                    { type: 'secondary', label: _('common.cancel') },\r\n                    { type: 'danger', label: _('catalog.remove-from-channel'), returnValue: true },\r\n                ],\r\n            })\r\n            .pipe(\r\n                switchMap(response =>\r\n                    response\r\n                        ? this.dataService.product.removeProductsFromChannel({\r\n                              channelId,\r\n                              productIds: [this.id],\r\n                          })\r\n                        : EMPTY,\r\n                ),\r\n            )\r\n            .subscribe(\r\n                () => {\r\n                    this.notificationService.success(_('catalog.notify-remove-product-from-channel-success'));\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('catalog.notify-remove-product-from-channel-error'));\r\n                },\r\n            );\r\n    }\r\n\r\n    assignVariantToChannel(variant: ProductWithVariants.Variants) {\r\n        return this.modalService\r\n            .fromComponent(AssignProductsToChannelDialogComponent, {\r\n                size: 'lg',\r\n                locals: {\r\n                    productIds: [this.id],\r\n                    productVariantIds: [variant.id],\r\n                    currentChannelIds: variant.channels.map(c => c.id),\r\n                },\r\n            })\r\n            .subscribe();\r\n    }\r\n\r\n    removeVariantFromChannel({\r\n        channelId,\r\n        variant,\r\n    }: {\r\n        channelId: string;\r\n        variant: ProductWithVariants.Variants;\r\n    }) {\r\n        this.modalService\r\n            .dialog({\r\n                title: _('catalog.remove-product-variant-from-channel'),\r\n                buttons: [\r\n                    { type: 'secondary', label: _('common.cancel') },\r\n                    { type: 'danger', label: _('catalog.remove-from-channel'), returnValue: true },\r\n                ],\r\n            })\r\n            .pipe(\r\n                switchMap(response =>\r\n                    response\r\n                        ? this.dataService.product.removeVariantsFromChannel({\r\n                              channelId,\r\n                              productVariantIds: [variant.id],\r\n                          })\r\n                        : EMPTY,\r\n                ),\r\n            )\r\n            .subscribe(\r\n                () => {\r\n                    this.notificationService.success(_('catalog.notify-remove-variant-from-channel-success'));\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('catalog.notify-remove-variant-from-channel-error'));\r\n                },\r\n            );\r\n    }\r\n\r\n    customFieldIsSet(name: string): boolean {\r\n        return !!this.detailForm.get(['product', 'customFields', name]);\r\n    }\r\n\r\n    assetsChanged(): boolean {\r\n        return !!Object.values(this.assetChanges).length;\r\n    }\r\n\r\n    variantAssetsChanged(): boolean {\r\n        return !!Object.keys(this.variantAssetChanges).length;\r\n    }\r\n\r\n    variantAssetChange(event: VariantAssetChange) {\r\n        this.variantAssetChanges[event.variantId] = event;\r\n    }\r\n\r\n    /**\r\n     * If creating a new product, automatically generate the slug based on the product name.\r\n     */\r\n    updateSlug(nameValue: string) {\r\n        combineLatest(this.entity$, this.languageCode$)\r\n            .pipe(take(1))\r\n            .subscribe(([entity, languageCode]) => {\r\n                const slugControl = this.detailForm.get(['product', 'slug']);\r\n                const currentTranslation = findTranslation(entity, languageCode);\r\n                const currentSlugIsEmpty = !currentTranslation || !currentTranslation.slug;\r\n                if (slugControl && slugControl.pristine && currentSlugIsEmpty) {\r\n                    slugControl.setValue(normalizeString(`${nameValue}`, '-'));\r\n                }\r\n            });\r\n    }\r\n\r\n    selectProductFacetValue() {\r\n        this.displayFacetValueModal().subscribe(facetValueIds => {\r\n            if (facetValueIds) {\r\n                const productGroup = this.getProductFormGroup();\r\n                const currentFacetValueIds = productGroup.value.facetValueIds;\r\n                productGroup.patchValue({\r\n                    facetValueIds: unique([...currentFacetValueIds, ...facetValueIds]),\r\n                });\r\n                productGroup.markAsDirty();\r\n            }\r\n        });\r\n    }\r\n\r\n    updateProductOption(input: UpdateProductOptionInput & { autoUpdate: boolean }) {\r\n        combineLatest(this.product$, this.languageCode$)\r\n            .pipe(\r\n                take(1),\r\n                mergeMap(([product, languageCode]) =>\r\n                    this.productDetailService.updateProductOption(input, product, languageCode),\r\n                ),\r\n            )\r\n            .subscribe(\r\n                () => {\r\n                    this.notificationService.success(_('common.notify-update-success'), {\r\n                        entity: 'ProductOption',\r\n                    });\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-update-error'), {\r\n                        entity: 'ProductOption',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    removeProductFacetValue(facetValueId: string) {\r\n        const productGroup = this.getProductFormGroup();\r\n        const currentFacetValueIds = productGroup.value.facetValueIds;\r\n        productGroup.patchValue({\r\n            facetValueIds: currentFacetValueIds.filter(id => id !== facetValueId),\r\n        });\r\n        productGroup.markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Opens a dialog to select FacetValues to apply to the select ProductVariants.\r\n     */\r\n    selectVariantFacetValue(selectedVariantIds: string[]) {\r\n        this.displayFacetValueModal()\r\n            .pipe(withLatestFrom(this.variants$))\r\n            .subscribe(([facetValueIds, variants]) => {\r\n                if (facetValueIds) {\r\n                    for (const variantId of selectedVariantIds) {\r\n                        const index = variants.findIndex(v => v.id === variantId);\r\n                        const variant = variants[index];\r\n                        const existingFacetValueIds = variant ? variant.facetValues.map(fv => fv.id) : [];\r\n                        const variantFormGroup = this.detailForm.get(['variants', index]);\r\n                        if (variantFormGroup) {\r\n                            variantFormGroup.patchValue({\r\n                                facetValueIds: unique([...existingFacetValueIds, ...facetValueIds]),\r\n                            });\r\n                            variantFormGroup.markAsDirty();\r\n                        }\r\n                    }\r\n                    this.changeDetector.markForCheck();\r\n                }\r\n            });\r\n    }\r\n\r\n    variantsToCreateAreValid(): boolean {\r\n        return (\r\n            0 < this.createVariantsConfig.variants.length &&\r\n            this.createVariantsConfig.variants.every(v => {\r\n                return v.sku !== '';\r\n            })\r\n        );\r\n    }\r\n\r\n    private displayFacetValueModal(): Observable<string[] | undefined> {\r\n        return this.productDetailService.getFacets().pipe(\r\n            mergeMap(facets =>\r\n                this.modalService.fromComponent(ApplyFacetDialogComponent, {\r\n                    size: 'md',\r\n                    closable: true,\r\n                    locals: { facets },\r\n                }),\r\n            ),\r\n            map(facetValues => facetValues && facetValues.map(v => v.id)),\r\n        );\r\n    }\r\n\r\n    create() {\r\n        const productGroup = this.getProductFormGroup();\r\n        if (!productGroup.dirty) {\r\n            return;\r\n        }\r\n        combineLatest(this.product$, this.languageCode$)\r\n            .pipe(\r\n                take(1),\r\n                mergeMap(([product, languageCode]) => {\r\n                    const newProduct = this.getUpdatedProduct(\r\n                        product,\r\n                        productGroup as FormGroup,\r\n                        languageCode,\r\n                    ) as CreateProductInput;\r\n                    return this.productDetailService.createProductWithVariants(\r\n                        newProduct,\r\n                        this.createVariantsConfig,\r\n                        languageCode,\r\n                    );\r\n                }),\r\n            )\r\n            .subscribe(\r\n                ({ createProductVariants, productId }) => {\r\n                    this.notificationService.success(_('common.notify-create-success'), {\r\n                        entity: 'Product',\r\n                    });\r\n                    this.assetChanges = {};\r\n                    this.variantAssetChanges = {};\r\n                    this.detailForm.markAsPristine();\r\n                    this.router.navigate(['../', productId], { relativeTo: this.route });\r\n                },\r\n                err => {\r\n                    // tslint:disable-next-line:no-console\r\n                    console.error(err);\r\n                    this.notificationService.error(_('common.notify-create-error'), {\r\n                        entity: 'Product',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    save() {\r\n        combineLatest(this.product$, this.languageCode$, this.channelPriceIncludesTax$)\r\n            .pipe(\r\n                take(1),\r\n                mergeMap(([product, languageCode, priceIncludesTax]) => {\r\n                    const productGroup = this.getProductFormGroup();\r\n                    let productInput: UpdateProductInput | undefined;\r\n                    let variantsInput: UpdateProductVariantInput[] | undefined;\r\n\r\n                    if (productGroup.dirty || this.assetsChanged()) {\r\n                        productInput = this.getUpdatedProduct(\r\n                            product,\r\n                            productGroup as FormGroup,\r\n                            languageCode,\r\n                        ) as UpdateProductInput;\r\n                    }\r\n                    const variantsArray = this.detailForm.get('variants');\r\n                    if ((variantsArray && variantsArray.dirty) || this.variantAssetsChanged()) {\r\n                        variantsInput = this.getUpdatedProductVariants(\r\n                            product,\r\n                            variantsArray as FormArray,\r\n                            languageCode,\r\n                            priceIncludesTax,\r\n                        );\r\n                    }\r\n\r\n                    return this.productDetailService.updateProduct({\r\n                        product,\r\n                        languageCode,\r\n                        autoUpdate:\r\n                            this.detailForm.get(['product', 'autoUpdateVariantNames'])?.value ?? false,\r\n                        productInput,\r\n                        variantsInput,\r\n                    });\r\n                }),\r\n            )\r\n            .subscribe(\r\n                result => {\r\n                    this.updateSlugAfterSave(result);\r\n                    this.detailForm.markAsPristine();\r\n                    this.assetChanges = {};\r\n                    this.variantAssetChanges = {};\r\n                    this.notificationService.success(_('common.notify-update-success'), {\r\n                        entity: 'Product',\r\n                    });\r\n                    this.changeDetector.markForCheck();\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-update-error'), {\r\n                        entity: 'Product',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    canDeactivate(): boolean {\r\n        return super.canDeactivate() && !this.assetChanges.assets && !this.assetChanges.featuredAsset;\r\n    }\r\n\r\n    /**\r\n     * Sets the values of the form on changes to the product or current language.\r\n     */\r\n    protected setFormValues(product: ProductWithVariants.Fragment, languageCode: LanguageCode) {\r\n        const currentTranslation = findTranslation(product, languageCode);\r\n        this.detailForm.patchValue({\r\n            product: {\r\n                enabled: product.enabled,\r\n                name: currentTranslation ? currentTranslation.name : '',\r\n                slug: currentTranslation ? currentTranslation.slug : '',\r\n                description: currentTranslation ? currentTranslation.description : '',\r\n                facetValueIds: product.facetValues.map(fv => fv.id),\r\n            },\r\n        });\r\n\r\n        if (this.customFields.length) {\r\n            const customFieldsGroup = this.detailForm.get(['product', 'customFields']) as FormGroup;\r\n            const cfCurrentTranslation =\r\n                (currentTranslation && (currentTranslation as any).customFields) || {};\r\n            const cfProduct = (product as any).customFields || {};\r\n\r\n            for (const fieldDef of this.customFields) {\r\n                const key = fieldDef.name;\r\n                const value = fieldDef.type === 'localeString' ? cfCurrentTranslation[key] : cfProduct[key];\r\n                const control = customFieldsGroup.get(key);\r\n                if (control) {\r\n                    control.patchValue(value);\r\n                }\r\n            }\r\n        }\r\n\r\n        const variantsFormArray = this.detailForm.get('variants') as FormArray;\r\n        product.variants.forEach((variant, i) => {\r\n            const variantTranslation = findTranslation(variant, languageCode);\r\n            const facetValueIds = variant.facetValues.map(fv => fv.id);\r\n            const group: VariantFormValue = {\r\n                id: variant.id,\r\n                enabled: variant.enabled,\r\n                sku: variant.sku,\r\n                name: variantTranslation ? variantTranslation.name : '',\r\n                price: variant.price,\r\n                priceWithTax: variant.priceWithTax,\r\n                taxCategoryId: variant.taxCategory.id,\r\n                stockOnHand: variant.stockOnHand,\r\n                useGlobalOutOfStockThreshold: variant.useGlobalOutOfStockThreshold,\r\n                outOfStockThreshold: variant.outOfStockThreshold,\r\n                trackInventory: variant.trackInventory,\r\n                facetValueIds,\r\n            };\r\n\r\n            let variantFormGroup = variantsFormArray.at(i) as FormGroup | undefined;\r\n            if (variantFormGroup) {\r\n                variantFormGroup.patchValue(group);\r\n            } else {\r\n                variantFormGroup = this.formBuilder.group({\r\n                    ...group,\r\n                    facetValueIds: this.formBuilder.control(facetValueIds),\r\n                });\r\n                variantsFormArray.insert(i, variantFormGroup);\r\n            }\r\n            if (this.customVariantFields.length) {\r\n                let customFieldsGroup = variantFormGroup.get(['customFields']) as FormGroup | undefined;\r\n\r\n                if (!customFieldsGroup) {\r\n                    customFieldsGroup = this.formBuilder.group(\r\n                        this.customVariantFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\r\n                    );\r\n                    variantFormGroup.addControl('customFields', customFieldsGroup);\r\n                }\r\n\r\n                for (const fieldDef of this.customVariantFields) {\r\n                    const key = fieldDef.name;\r\n                    const value =\r\n                        fieldDef.type === 'localeString'\r\n                            ? (variantTranslation as any).customFields[key]\r\n                            : (variant as any).customFields[key];\r\n                    const control = customFieldsGroup.get(key);\r\n                    if (control) {\r\n                        control.patchValue(value);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Given a product and the value of the detailForm, this method creates an updated copy of the product which\r\n     * can then be persisted to the API.\r\n     */\r\n    private getUpdatedProduct(\r\n        product: ProductWithVariants.Fragment,\r\n        productFormGroup: FormGroup,\r\n        languageCode: LanguageCode,\r\n    ): UpdateProductInput | CreateProductInput {\r\n        const updatedProduct = createUpdatedTranslatable({\r\n            translatable: product,\r\n            updatedFields: productFormGroup.value,\r\n            customFieldConfig: this.customFields,\r\n            languageCode,\r\n            defaultTranslation: {\r\n                languageCode,\r\n                name: product.name || '',\r\n                slug: product.slug || '',\r\n                description: product.description || '',\r\n            },\r\n        });\r\n        return {\r\n            ...updatedProduct,\r\n            assetIds: this.assetChanges.assets?.map(a => a.id),\r\n            featuredAssetId: this.assetChanges.featuredAsset?.id,\r\n            facetValueIds: productFormGroup.value.facetValueIds,\r\n        } as UpdateProductInput | CreateProductInput;\r\n    }\r\n\r\n    /**\r\n     * Given an array of product variants and the values from the detailForm, this method creates an new array\r\n     * which can be persisted to the API.\r\n     */\r\n    private getUpdatedProductVariants(\r\n        product: ProductWithVariants.Fragment,\r\n        variantsFormArray: FormArray,\r\n        languageCode: LanguageCode,\r\n        priceIncludesTax: boolean,\r\n    ): UpdateProductVariantInput[] {\r\n        const dirtyVariants = product.variants.filter((v, i) => {\r\n            const formRow = variantsFormArray.get(i.toString());\r\n            return formRow && formRow.dirty;\r\n        });\r\n        const dirtyVariantValues = variantsFormArray.controls.filter(c => c.dirty).map(c => c.value);\r\n\r\n        if (dirtyVariants.length !== dirtyVariantValues.length) {\r\n            throw new Error(_(`error.product-variant-form-values-do-not-match`));\r\n        }\r\n        return dirtyVariants\r\n            .map((variant, i) => {\r\n                const formValue: VariantFormValue = dirtyVariantValues[i];\r\n                const result: UpdateProductVariantInput = createUpdatedTranslatable({\r\n                    translatable: variant,\r\n                    updatedFields: formValue,\r\n                    customFieldConfig: this.customVariantFields,\r\n                    languageCode,\r\n                    defaultTranslation: {\r\n                        languageCode,\r\n                        name: '',\r\n                    },\r\n                });\r\n                result.taxCategoryId = formValue.taxCategoryId;\r\n                result.facetValueIds = formValue.facetValueIds;\r\n                result.price = priceIncludesTax ? formValue.priceWithTax : formValue.price;\r\n                const assetChanges = this.variantAssetChanges[variant.id];\r\n                if (assetChanges) {\r\n                    result.featuredAssetId = assetChanges.featuredAsset?.id;\r\n                    result.assetIds = assetChanges.assets?.map(a => a.id);\r\n                }\r\n                return result;\r\n            })\r\n            .filter(notNullOrUndefined);\r\n    }\r\n\r\n    private getProductFormGroup(): FormGroup {\r\n        return this.detailForm.get('product') as FormGroup;\r\n    }\r\n\r\n    /**\r\n     * The server may alter the slug value in order to normalize and ensure uniqueness upon saving.\r\n     */\r\n    private updateSlugAfterSave(results: Array<UpdateProductMutation | UpdateProductVariantsMutation>) {\r\n        const firstResult = results[0];\r\n        const slugControl = this.detailForm.get(['product', 'slug']);\r\n\r\n        function isUpdateMutation(input: any): input is UpdateProductMutation {\r\n            return input.hasOwnProperty('updateProduct');\r\n        }\r\n\r\n        if (slugControl && isUpdateMutation(firstResult)) {\r\n            slugControl.setValue(firstResult.updateProduct.slug, { emitEvent: false });\r\n        }\r\n    }\r\n}\r\n","<ng-select\r\n    [addTag]=\"addTagFn\"\r\n    [placeholder]=\"'catalog.search-product-name-or-code' | translate\"\r\n    [items]=\"facetValueResults\"\r\n    [searchFn]=\"filterFacetResults\"\r\n    [hideSelected]=\"true\"\r\n    [multiple]=\"true\"\r\n    [markFirst]=\"false\"\r\n    (change)=\"onSelectChange($event)\"\r\n    #selectComponent\r\n>\r\n    <ng-template ng-header-tmp>\r\n        <div\r\n            class=\"search-header\"\r\n            *ngIf=\"selectComponent.searchTerm\"\r\n            [class.selected]=\"isSearchHeaderSelected()\"\r\n            (click)=\"selectComponent.selectTag()\"\r\n        >\r\n            {{ 'catalog.search-for-term' | translate }}: {{ selectComponent.searchTerm }}\r\n        </div>\r\n    </ng-template>\r\n    <ng-template ng-label-tmp let-item=\"item\" let-clear=\"clear\">\r\n        <ng-container *ngIf=\"item.facetValue\">\r\n            <vdr-facet-value-chip\r\n                [facetValue]=\"item.facetValue\"\r\n                [removable]=\"true\"\r\n                (remove)=\"clear(item)\"\r\n            ></vdr-facet-value-chip>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"!item.facetValue\">\r\n            <vdr-chip [icon]=\"'times'\" (iconClick)=\"clear(item)\">\"{{ item.label }}\"</vdr-chip>\r\n        </ng-container>\r\n    </ng-template>\r\n    <ng-template ng-option-tmp let-item=\"item\" let-index=\"index\" let-search=\"searchTerm\">\r\n        <ng-container *ngIf=\"item.facetValue\">\r\n            <vdr-facet-value-chip [facetValue]=\"item.facetValue\" [removable]=\"false\"></vdr-facet-value-chip>\r\n        </ng-container>\r\n    </ng-template>\r\n</ng-select>\r\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';\r\nimport { NgSelectComponent, SELECTION_MODEL_FACTORY } from '@ng-select/ng-select';\r\nimport { SearchProducts, SingleSearchSelectionModelFactory } from '@vendure/admin-ui/core';\r\nimport { notNullOrUndefined } from '@vendure/common/lib/shared-utils';\r\n\r\n@Component({\r\n    selector: 'vdr-product-search-input',\r\n    templateUrl: './product-search-input.component.html',\r\n    styleUrls: ['./product-search-input.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    providers: [{ provide: SELECTION_MODEL_FACTORY, useValue: SingleSearchSelectionModelFactory }],\r\n})\r\nexport class ProductSearchInputComponent {\r\n    @Input() facetValueResults: SearchProducts.FacetValues[];\r\n    @Output() searchTermChange = new EventEmitter<string>();\r\n    @Output() facetValueChange = new EventEmitter<string[]>();\r\n    @ViewChild('selectComponent', { static: true }) private selectComponent: NgSelectComponent;\r\n    private lastTerm = '';\r\n    private lastFacetValueIds: string[] = [];\r\n\r\n    setSearchTerm(term: string | null) {\r\n        if (term) {\r\n            this.selectComponent.select({ label: term, value: { label: term } });\r\n        } else {\r\n            const currentTerm = this.selectComponent.selectedItems.find(i => !this.isFacetValueItem(i.value));\r\n            if (currentTerm) {\r\n                this.selectComponent.unselect(currentTerm);\r\n            }\r\n        }\r\n    }\r\n\r\n    setFacetValues(ids: string[]) {\r\n        const items = this.selectComponent.items;\r\n\r\n        this.selectComponent.selectedItems.forEach(item => {\r\n            if (this.isFacetValueItem(item.value) && !ids.includes(item.value.facetValue.id)) {\r\n                this.selectComponent.unselect(item);\r\n            }\r\n        });\r\n\r\n        ids.map(id => {\r\n            return items.find(item => this.isFacetValueItem(item) && item.facetValue.id === id);\r\n        })\r\n            .filter(notNullOrUndefined)\r\n            .forEach(item => {\r\n                const isSelected = this.selectComponent.selectedItems.find(i => {\r\n                    const val = i.value;\r\n                    if (this.isFacetValueItem(val)) {\r\n                        return val.facetValue.id === item.facetValue.id;\r\n                    }\r\n                    return false;\r\n                });\r\n                if (!isSelected) {\r\n                    this.selectComponent.select({ label: '', value: item });\r\n                }\r\n            });\r\n    }\r\n\r\n    filterFacetResults = (term: string, item: SearchProducts.FacetValues | { label: string }) => {\r\n        if (!this.isFacetValueItem(item)) {\r\n            return false;\r\n        }\r\n        return (\r\n            item.facetValue.name.toLowerCase().startsWith(term.toLowerCase()) ||\r\n            item.facetValue.facet.name.toLowerCase().startsWith(term.toLowerCase())\r\n        );\r\n    };\r\n\r\n    onSelectChange(selectedItems: Array<SearchProducts.FacetValues | { label: string }>) {\r\n        if (!Array.isArray(selectedItems)) {\r\n            selectedItems = [selectedItems];\r\n        }\r\n        const searchTermItem = selectedItems.find(item => !this.isFacetValueItem(item)) as\r\n            | { label: string }\r\n            | undefined;\r\n        const searchTerm = searchTermItem ? searchTermItem.label : '';\r\n\r\n        const facetValueIds = selectedItems.filter(this.isFacetValueItem).map(i => i.facetValue.id);\r\n\r\n        if (searchTerm !== this.lastTerm) {\r\n            this.searchTermChange.emit(searchTerm);\r\n            this.lastTerm = searchTerm;\r\n        }\r\n        if (this.lastFacetValueIds.join(',') !== facetValueIds.join(',')) {\r\n            this.facetValueChange.emit(facetValueIds);\r\n            this.lastFacetValueIds = facetValueIds;\r\n        }\r\n    }\r\n\r\n    addTagFn(item: any) {\r\n        return { label: item };\r\n    }\r\n\r\n    isSearchHeaderSelected(): boolean {\r\n        return this.selectComponent.itemsList.markedIndex === -1;\r\n    }\r\n\r\n    private isFacetValueItem = (input: unknown): input is SearchProducts.FacetValues => {\r\n        return typeof input === 'object' && !!input && input.hasOwnProperty('facetValue');\r\n    };\r\n}\r\n","<vdr-action-bar>\r\n    <vdr-ab-left [grow]=\"true\">\r\n        <div class=\"search-form\">\r\n            <vdr-product-search-input\r\n                #productSearchInputComponent\r\n                [facetValueResults]=\"facetValues$ | async\"\r\n                (searchTermChange)=\"setSearchTerm($event)\"\r\n                (facetValueChange)=\"setFacetValueIds($event)\"\r\n            ></vdr-product-search-input>\r\n            <vdr-dropdown class=\"search-settings-menu mr3\">\r\n                <button type=\"button\" class=\"icon-button\" vdrDropdownTrigger>\r\n                    <clr-icon shape=\"cog\"></clr-icon>\r\n                </button>\r\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                    <button\r\n                        type=\"button\"\r\n                        vdrDropdownItem\r\n                        (click)=\"rebuildSearchIndex()\"\r\n                        [disabled]=\"!(['UpdateCatalog', 'UpdateProduct'] | hasPermission)\"\r\n                    >\r\n                        {{ 'catalog.rebuild-search-index' | translate }}\r\n                    </button>\r\n                </vdr-dropdown-menu>\r\n            </vdr-dropdown>\r\n        </div>\r\n        <div class=\"flex wrap\">\r\n            <clr-checkbox-wrapper class=\"mt2\">\r\n                <input type=\"checkbox\" clrCheckbox [(ngModel)]=\"groupByProduct\"/>\r\n                <label>{{ 'catalog.group-by-product' | translate }}</label>\r\n            </clr-checkbox-wrapper>\r\n            <vdr-language-selector\r\n                [availableLanguageCodes]=\"availableLanguages$ | async\"\r\n                [currentLanguageCode]=\"contentLanguage$ | async\"\r\n                (languageCodeChange)=\"setLanguage($event)\"\r\n            ></vdr-language-selector>\r\n        </div>\r\n    </vdr-ab-left>\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"product-list\"></vdr-action-bar-items>\r\n        <a class=\"btn btn-primary\" [routerLink]=\"['./create']\" *vdrIfPermissions=\"['CreateCatalog', 'CreateProduct']\">\r\n            <clr-icon shape=\"plus\"></clr-icon>\r\n            <span class=\"full-label\">{{ 'catalog.create-new-product' | translate }}</span>\r\n        </a>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<vdr-data-table\r\n    [items]=\"items$ | async\"\r\n    [itemsPerPage]=\"itemsPerPage$ | async\"\r\n    [totalItems]=\"totalItems$ | async\"\r\n    [currentPage]=\"currentPage$ | async\"\r\n    (pageChange)=\"setPageNumber($event)\"\r\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\r\n>\r\n    <ng-template let-result=\"item\">\r\n        <td class=\"left align-middle\" [class.disabled]=\"!result.enabled\">\r\n            <div class=\"image-placeholder\">\r\n                <img\r\n                    *ngIf=\"\r\n                        groupByProduct\r\n                            ? result.productAsset\r\n                            : result.productVariantAsset || result.productAsset as asset;\r\n                        else imagePlaceholder\r\n                    \"\r\n                    [src]=\"asset | assetPreview:'tiny'\"\r\n                />\r\n                <ng-template #imagePlaceholder>\r\n                    <div class=\"placeholder\">\r\n                        <clr-icon shape=\"image\" size=\"48\"></clr-icon>\r\n                    </div>\r\n                </ng-template>\r\n            </div>\r\n        </td>\r\n        <td class=\"left align-middle\" [class.disabled]=\"!result.enabled\">\r\n            {{ groupByProduct ? result.productName : result.productVariantName }}\r\n        </td>\r\n        <td class=\"align-middle\" [class.disabled]=\"!result.enabled\">\r\n            <vdr-chip *ngIf=\"!result.enabled\">{{ 'common.disabled' | translate }}</vdr-chip>\r\n        </td>\r\n        <td class=\"right align-middle\" [class.disabled]=\"!result.enabled\">\r\n            <vdr-table-row-action\r\n                iconShape=\"edit\"\r\n                [label]=\"'common.edit' | translate\"\r\n                [linkTo]=\"['./', result.productId]\"\r\n            ></vdr-table-row-action>\r\n        </td>\r\n        <td class=\"right align-middle\" [class.disabled]=\"!result.enabled\">\r\n            <vdr-dropdown>\r\n                <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger>\r\n                    {{ 'common.actions' | translate }}\r\n                    <clr-icon shape=\"caret down\"></clr-icon>\r\n                </button>\r\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                    <button\r\n                        type=\"button\"\r\n                        class=\"delete-button\"\r\n                        (click)=\"deleteProduct(result.productId)\"\r\n                        [disabled]=\"!(['DeleteCatalog', 'DeleteProduct'] | hasPermission)\"\r\n                        vdrDropdownItem\r\n                    >\r\n                        <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                        {{ 'common.delete' | translate }}\r\n                    </button>\r\n                </vdr-dropdown-menu>\r\n            </vdr-dropdown>\r\n        </td>\r\n    </ng-template>\r\n</vdr-data-table>\r\n","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    BaseListComponent,\r\n    DataService,\r\n    JobQueueService,\r\n    JobState,\r\n    LanguageCode,\r\n    LogicalOperator,\r\n    ModalService,\r\n    NotificationService,\r\n    SearchInput,\r\n    SearchProducts,\r\n    ServerConfigService,\r\n} from '@vendure/admin-ui/core';\r\nimport { EMPTY, Observable, of } from 'rxjs';\r\nimport {\r\n    delay,\r\n    distinctUntilChanged,\r\n    map,\r\n    shareReplay,\r\n    switchMap,\r\n    take,\r\n    takeUntil,\r\n    tap,\r\n    withLatestFrom,\r\n} from 'rxjs/operators';\r\n\r\nimport { ProductSearchInputComponent } from '../product-search-input/product-search-input.component';\r\n\r\n@Component({\r\n    selector: 'vdr-products-list',\r\n    templateUrl: './product-list.component.html',\r\n    styleUrls: ['./product-list.component.scss'],\r\n})\r\nexport class ProductListComponent\r\n    extends BaseListComponent<SearchProducts.Query, SearchProducts.Items, SearchProducts.Variables>\r\n    implements OnInit {\r\n    searchTerm = '';\r\n    facetValueIds: string[] = [];\r\n    groupByProduct = true;\r\n    facetValues$: Observable<SearchProducts.FacetValues[]>;\r\n    availableLanguages$: Observable<LanguageCode[]>;\r\n    contentLanguage$: Observable<LanguageCode>;\r\n    @ViewChild('productSearchInputComponent', { static: true })\r\n    private productSearchInput: ProductSearchInputComponent;\r\n    constructor(\r\n        private dataService: DataService,\r\n        private modalService: ModalService,\r\n        private notificationService: NotificationService,\r\n        private jobQueueService: JobQueueService,\r\n        private serverConfigService: ServerConfigService,\r\n        router: Router,\r\n        route: ActivatedRoute,\r\n    ) {\r\n        super(router, route);\r\n        super.setQueryFn(\r\n            (...args: any[]) =>\r\n                this.dataService.product.searchProducts(this.searchTerm, ...args).refetchOnChannelChange(),\r\n            data => data.search,\r\n            // tslint:disable-next-line:no-shadowed-variable\r\n            (skip, take) => ({\r\n                input: {\r\n                    skip,\r\n                    take,\r\n                    term: this.searchTerm,\r\n                    facetValueIds: this.facetValueIds,\r\n                    facetValueOperator: LogicalOperator.AND,\r\n                    groupByProduct: this.groupByProduct,\r\n                } as SearchInput,\r\n            }),\r\n        );\r\n    }\r\n\r\n    ngOnInit() {\r\n        super.ngOnInit();\r\n        this.facetValues$ = this.result$.pipe(map(data => data.search.facetValues));\r\n        // this.facetValues$ = of([]);\r\n        this.route.queryParamMap\r\n            .pipe(\r\n                map(qpm => qpm.get('q')),\r\n                takeUntil(this.destroy$),\r\n            )\r\n            .subscribe(term => {\r\n                this.productSearchInput.setSearchTerm(term);\r\n            });\r\n\r\n        const fvids$ = this.route.queryParamMap.pipe(map(qpm => qpm.getAll('fvids')));\r\n\r\n        fvids$.pipe(takeUntil(this.destroy$)).subscribe(ids => {\r\n            this.productSearchInput.setFacetValues(ids);\r\n        });\r\n\r\n        this.facetValues$.pipe(take(1), delay(100), withLatestFrom(fvids$)).subscribe(([__, ids]) => {\r\n            this.productSearchInput.setFacetValues(ids);\r\n        });\r\n        this.availableLanguages$ = this.serverConfigService.getAvailableLanguages();\r\n        this.contentLanguage$ = this.dataService.client\r\n            .uiState()\r\n            .mapStream(({ uiState }) => uiState.contentLanguage)\r\n            .pipe(tap(() => this.refresh()));\r\n    }\r\n\r\n    setSearchTerm(term: string) {\r\n        this.searchTerm = term;\r\n        this.setQueryParam({ q: term || null, page: 1 });\r\n        this.refresh();\r\n    }\r\n\r\n    setFacetValueIds(ids: string[]) {\r\n        this.facetValueIds = ids;\r\n        this.setQueryParam({ fvids: ids, page: 1 });\r\n        this.refresh();\r\n    }\r\n\r\n    rebuildSearchIndex() {\r\n        this.dataService.product.reindex().subscribe(({ reindex }) => {\r\n            this.notificationService.info(_('catalog.reindexing'));\r\n            this.jobQueueService.addJob(reindex.id, job => {\r\n                if (job.state === JobState.COMPLETED) {\r\n                    const time = new Intl.NumberFormat().format(job.duration || 0);\r\n                    this.notificationService.success(_('catalog.reindex-successful'), {\r\n                        count: job.result.indexedItemCount,\r\n                        time,\r\n                    });\r\n                    this.refresh();\r\n                } else {\r\n                    this.notificationService.error(_('catalog.reindex-error'));\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    deleteProduct(productId: string) {\r\n        this.modalService\r\n            .dialog({\r\n                title: _('catalog.confirm-delete-product'),\r\n                buttons: [\r\n                    { type: 'secondary', label: _('common.cancel') },\r\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\r\n                ],\r\n            })\r\n            .pipe(\r\n                switchMap(response => (response ? this.dataService.product.deleteProduct(productId) : EMPTY)),\r\n                // Short delay to allow the product to be removed from the search index before\r\n                // refreshing.\r\n                delay(500),\r\n            )\r\n            .subscribe(\r\n                () => {\r\n                    this.notificationService.success(_('common.notify-delete-success'), {\r\n                        entity: 'Product',\r\n                    });\r\n                    this.refresh();\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-delete-error'), {\r\n                        entity: 'Product',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    setLanguage(code: LanguageCode) {\r\n        this.dataService.client.setContentLanguage(code).subscribe();\r\n    }\r\n}\r\n","<ng-template vdrDialogTitle>\r\n    {{ 'catalog.confirm-deletion-of-unused-variants-title' | translate }}\r\n</ng-template>\r\n{{ 'catalog.confirm-deletion-of-unused-variants-body' | translate }}\r\n<ul>\r\n    <li *ngFor=\"let variant of variants\">{{ variant.name }} ({{ variant.sku }})</li>\r\n</ul>\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button type=\"submit\" (click)=\"confirm()\" class=\"btn btn-primary\">\r\n        {{ 'common.confirm' | translate }}\r\n    </button>\r\n</ng-template>\r\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { Dialog, GetProductVariantOptions } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-confirm-variant-deletion-dialog',\r\n    templateUrl: './confirm-variant-deletion-dialog.component.html',\r\n    styleUrls: ['./confirm-variant-deletion-dialog.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ConfirmVariantDeletionDialogComponent implements Dialog<boolean> {\r\n    resolveWith: (result?: boolean) => void;\r\n    variants: GetProductVariantOptions.Variants[] = [];\r\n\r\n    confirm() {\r\n        this.resolveWith(true);\r\n    }\r\n\r\n    cancel() {\r\n        this.resolveWith();\r\n    }\r\n}\r\n","<div class=\"input-wrapper\" [class.focus]=\"isFocussed\" (click)=\"textArea.focus()\">\r\n    <div class=\"chips\" *ngIf=\"0 < options.length\">\r\n        <vdr-chip\r\n            *ngFor=\"let option of options; last as isLast\"\r\n            [icon]=\"option.locked ? 'lock' : 'times'\"\r\n            [class.selected]=\"isLast && lastSelected\"\r\n            [class.locked]=\"option.locked\"\r\n            [colorFrom]=\"groupName\"\r\n            (iconClick)=\"removeOption(option)\"\r\n        >\r\n            {{ option.name }}\r\n        </vdr-chip>\r\n    </div>\r\n    <textarea\r\n        #textArea\r\n        (keyup)=\"handleKey($event)\"\r\n        (focus)=\"isFocussed = true\"\r\n        (blur)=\"handleBlur()\"\r\n        [(ngModel)]=\"input\"\r\n        [disabled]=\"disabled\"\r\n    ></textarea>\r\n</div>\r\n","import {\r\n    ChangeDetectionStrategy,\r\n    ChangeDetectorRef,\r\n    Component,\r\n    ElementRef,\r\n    forwardRef,\r\n    Input,\r\n    Provider,\r\n    ViewChild,\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { unique } from '@vendure/common/lib/unique';\r\n\r\nexport const OPTION_VALUE_INPUT_VALUE_ACCESSOR: Provider = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => OptionValueInputComponent),\r\n    multi: true,\r\n};\r\n\r\n@Component({\r\n    selector: 'vdr-option-value-input',\r\n    templateUrl: './option-value-input.component.html',\r\n    styleUrls: ['./option-value-input.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.Default,\r\n    providers: [OPTION_VALUE_INPUT_VALUE_ACCESSOR],\r\n})\r\nexport class OptionValueInputComponent implements ControlValueAccessor {\r\n    @Input() groupName = '';\r\n    @ViewChild('textArea', { static: true }) textArea: ElementRef<HTMLTextAreaElement>;\r\n    options: Array<{ name: string; locked: boolean }>;\r\n    disabled = false;\r\n    input = '';\r\n    isFocussed = false;\r\n    lastSelected = false;\r\n    onChangeFn: (value: any) => void;\r\n    onTouchFn: (value: any) => void;\r\n\r\n    constructor(private changeDetector: ChangeDetectorRef) {}\r\n\r\n    registerOnChange(fn: any): void {\r\n        this.onChangeFn = fn;\r\n    }\r\n\r\n    registerOnTouched(fn: any): void {\r\n        this.onTouchFn = fn;\r\n    }\r\n\r\n    setDisabledState(isDisabled: boolean): void {\r\n        this.disabled = isDisabled;\r\n        this.changeDetector.markForCheck();\r\n    }\r\n\r\n    writeValue(obj: any): void {\r\n        this.options = obj || [];\r\n    }\r\n\r\n    focus() {\r\n        this.textArea.nativeElement.focus();\r\n    }\r\n\r\n    removeOption(option: { name: string; locked: boolean }) {\r\n        if (!option.locked) {\r\n            this.options = this.options.filter(o => o.name !== option.name);\r\n            this.onChangeFn(this.options);\r\n        }\r\n    }\r\n\r\n    handleKey(event: KeyboardEvent) {\r\n        switch (event.key) {\r\n            case ',':\r\n            case 'Enter':\r\n                this.addOptionValue();\r\n                event.preventDefault();\r\n                break;\r\n            case 'Backspace':\r\n                if (this.lastSelected) {\r\n                    this.removeLastOption();\r\n                    this.lastSelected = false;\r\n                } else if (this.input === '') {\r\n                    this.lastSelected = true;\r\n                }\r\n                break;\r\n            default:\r\n                this.lastSelected = false;\r\n        }\r\n    }\r\n\r\n    handleBlur() {\r\n        this.isFocussed = false;\r\n        this.addOptionValue();\r\n    }\r\n\r\n    private addOptionValue() {\r\n        this.options = unique([...this.options, ...this.parseInputIntoOptions(this.input)]);\r\n        this.input = '';\r\n        this.onChangeFn(this.options);\r\n    }\r\n\r\n    private parseInputIntoOptions(input: string): Array<{ name: string; locked: boolean }> {\r\n        return input\r\n            .split(/[,\\n]/)\r\n            .map(s => s.trim())\r\n            .filter(s => s !== '')\r\n            .map(s => ({ name: s, locked: false }));\r\n    }\r\n\r\n    private removeLastOption() {\r\n        if (!this.options[this.options.length - 1].locked) {\r\n            this.options = this.options.slice(0, this.options.length - 1);\r\n        }\r\n    }\r\n}\r\n","<vdr-action-bar>\r\n    <vdr-ab-right>\r\n        <button\r\n            class=\"btn btn-primary\"\r\n            (click)=\"save()\"\r\n            [disabled]=\"!formValueChanged || getVariantsToAdd().length === 0\"\r\n        >\r\n            {{ 'common.add-new-variants' | translate: { count: getVariantsToAdd().length } }}\r\n        </button>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<div *ngFor=\"let group of optionGroups\" class=\"option-groups\">\r\n    <div class=\"name\">\r\n        <label>{{ 'catalog.option' | translate }}</label>\r\n        <input clrInput [(ngModel)]=\"group.name\" name=\"name\" [readonly]=\"!group.isNew\" />\r\n    </div>\r\n    <div class=\"values\">\r\n        <label>{{ 'catalog.option-values' | translate }}</label>\r\n        <vdr-option-value-input\r\n            #optionValueInputComponent\r\n            [(ngModel)]=\"group.values\"\r\n            (ngModelChange)=\"generateVariants()\"\r\n            [groupName]=\"group.name\"\r\n            [disabled]=\"group.name === ''\"\r\n        ></vdr-option-value-input>\r\n    </div>\r\n</div>\r\n<button\r\n    class=\"btn btn-primary-outline btn-sm\"\r\n    (click)=\"addOption()\"\r\n>\r\n    <clr-icon shape=\"plus\"></clr-icon>\r\n    {{ 'catalog.add-option' | translate }}\r\n</button>\r\n\r\n<div class=\"variants-preview\">\r\n    <table class=\"table\">\r\n        <thead>\r\n            <tr>\r\n                <th>{{ 'common.create' | translate }}</th>\r\n                <th>{{ 'catalog.variant' | translate }}</th>\r\n                <th>{{ 'catalog.sku' | translate }}</th>\r\n                <th>{{ 'catalog.price' | translate }}</th>\r\n                <th>{{ 'catalog.stock-on-hand' | translate }}</th>\r\n                <th></th>\r\n            </tr>\r\n        </thead>\r\n        <tr *ngFor=\"let variant of generatedVariants\" [class.disabled]=\"!variant.enabled || variant.existing\">\r\n            <td>\r\n                <input\r\n                    type=\"checkbox\"\r\n                    *ngIf=\"!variant.existing\"\r\n                    [(ngModel)]=\"variant.enabled\"\r\n                    name=\"enabled\"\r\n                    clrCheckbox\r\n                    (ngModelChange)=\"formValueChanged = true\"\r\n                />\r\n            </td>\r\n            <td>\r\n                {{ getVariantName(variant) | translate }}\r\n            </td>\r\n            <td>\r\n                <clr-input-container *ngIf=\"!variant.existing\">\r\n                    <input\r\n                        clrInput\r\n                        type=\"text\"\r\n                        [(ngModel)]=\"variant.sku\"\r\n                        [placeholder]=\"'catalog.sku' | translate\"\r\n                        name=\"sku\"\r\n                        required\r\n                        (ngModelChange)=\"onFormChanged(variant)\"\r\n                    />\r\n                </clr-input-container>\r\n                <span *ngIf=\"variant.existing\">{{ variant.sku }}</span>\r\n            </td>\r\n            <td>\r\n                <clr-input-container *ngIf=\"!variant.existing\">\r\n                    <vdr-currency-input\r\n                        clrInput\r\n                        [(ngModel)]=\"variant.price\"\r\n                        name=\"price\"\r\n                        [currencyCode]=\"currencyCode\"\r\n                        (ngModelChange)=\"onFormChanged(variant)\"\r\n                    ></vdr-currency-input>\r\n                </clr-input-container>\r\n                <span *ngIf=\"variant.existing\">{{ variant.price | localeCurrency: currencyCode }}</span>\r\n            </td>\r\n            <td>\r\n                <clr-input-container *ngIf=\"!variant.existing\">\r\n                    <input\r\n                        clrInput\r\n                        type=\"number\"\r\n                        [(ngModel)]=\"variant.stock\"\r\n                        name=\"stock\"\r\n                        min=\"0\"\r\n                        step=\"1\"\r\n                        (ngModelChange)=\"onFormChanged(variant)\"\r\n                    />\r\n                </clr-input-container>\r\n                <span *ngIf=\"variant.existing\">{{ variant.stock }}</span>\r\n            </td>\r\n            <td>\r\n                <vdr-dropdown *ngIf=\"variant.productVariantId as productVariantId\">\r\n                    <button class=\"icon-button\" vdrDropdownTrigger>\r\n                        <clr-icon shape=\"ellipsis-vertical\"></clr-icon>\r\n                    </button>\r\n                    <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                        <button\r\n                            type=\"button\"\r\n                            class=\"delete-button\"\r\n                            (click)=\"deleteVariant(productVariantId)\"\r\n                            vdrDropdownItem\r\n                        >\r\n                            <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                            {{ 'common.delete' | translate }}\r\n                        </button>\r\n                    </vdr-dropdown-menu>\r\n                </vdr-dropdown>\r\n            </td>\r\n        </tr>\r\n    </table>\r\n</div>\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    CreateProductOptionGroup,\r\n    CreateProductOptionInput,\r\n    CurrencyCode,\r\n    DataService,\r\n    DeactivateAware,\r\n    getDefaultUiLanguage,\r\n    GetProductVariantOptions,\r\n    LanguageCode,\r\n    ModalService,\r\n    NotificationService,\r\n    ProductOptionGroupWithOptionsFragment,\r\n} from '@vendure/admin-ui/core';\r\nimport { normalizeString } from '@vendure/common/lib/normalize-string';\r\nimport { pick } from '@vendure/common/lib/pick';\r\nimport { generateAllCombinations, notNullOrUndefined } from '@vendure/common/lib/shared-utils';\r\nimport { unique } from '@vendure/common/lib/unique';\r\nimport { EMPTY, forkJoin, Observable, of } from 'rxjs';\r\nimport { filter, map, mergeMap, switchMap } from 'rxjs/operators';\r\n\r\nimport { ProductDetailService } from '../../providers/product-detail/product-detail.service';\r\nimport { ConfirmVariantDeletionDialogComponent } from '../confirm-variant-deletion-dialog/confirm-variant-deletion-dialog.component';\r\n\r\nexport class GeneratedVariant {\r\n    isDefault: boolean;\r\n    options: Array<{ name: string; id?: string }>;\r\n    productVariantId?: string;\r\n    enabled: boolean;\r\n    existing: boolean;\r\n    sku: string;\r\n    price: number;\r\n    stock: number;\r\n\r\n    constructor(config: Partial<GeneratedVariant>) {\r\n        for (const key of Object.keys(config)) {\r\n            this[key] = config[key];\r\n        }\r\n    }\r\n}\r\n\r\n@Component({\r\n    selector: 'vdr-product-variants-editor',\r\n    templateUrl: './product-variants-editor.component.html',\r\n    styleUrls: ['./product-variants-editor.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.Default,\r\n})\r\nexport class ProductVariantsEditorComponent implements OnInit, DeactivateAware {\r\n    formValueChanged = false;\r\n    generatedVariants: GeneratedVariant[] = [];\r\n    optionGroups: Array<{\r\n        id?: string;\r\n        isNew: boolean;\r\n        name: string;\r\n        values: Array<{\r\n            id?: string;\r\n            name: string;\r\n            locked: boolean;\r\n        }>;\r\n    }>;\r\n    product: GetProductVariantOptions.Product;\r\n    currencyCode: CurrencyCode;\r\n    private languageCode: LanguageCode;\r\n\r\n    constructor(\r\n        private route: ActivatedRoute,\r\n        private dataService: DataService,\r\n        private productDetailService: ProductDetailService,\r\n        private notificationService: NotificationService,\r\n        private modalService: ModalService,\r\n    ) {}\r\n\r\n    ngOnInit() {\r\n        this.initOptionsAndVariants();\r\n        this.languageCode =\r\n            (this.route.snapshot.paramMap.get('lang') as LanguageCode) || getDefaultUiLanguage();\r\n        this.dataService.settings.getActiveChannel().single$.subscribe(data => {\r\n            this.currencyCode = data.activeChannel.currencyCode;\r\n        });\r\n    }\r\n\r\n    onFormChanged(variantInfo: GeneratedVariant) {\r\n        this.formValueChanged = true;\r\n        variantInfo.enabled = true;\r\n    }\r\n\r\n    canDeactivate(): boolean {\r\n        return !this.formValueChanged;\r\n    }\r\n\r\n    getVariantsToAdd() {\r\n        return this.generatedVariants.filter(v => !v.existing && v.enabled);\r\n    }\r\n\r\n    getVariantName(variant: GeneratedVariant) {\r\n        return variant.options.length === 0\r\n            ? _('catalog.default-variant')\r\n            : variant.options.map(o => o.name).join(' ');\r\n    }\r\n\r\n    addOption() {\r\n        this.optionGroups.push({\r\n            isNew: true,\r\n            name: '',\r\n            values: [],\r\n        });\r\n    }\r\n\r\n    generateVariants() {\r\n        const groups = this.optionGroups.map(g => g.values);\r\n        const previousVariants = this.generatedVariants;\r\n        const generatedVariantFactory = (\r\n            isDefault: boolean,\r\n            options: GeneratedVariant['options'],\r\n            existingVariant?: GetProductVariantOptions.Variants,\r\n            prototypeVariant?: GetProductVariantOptions.Variants,\r\n        ): GeneratedVariant => {\r\n            const prototype = this.getVariantPrototype(options, previousVariants);\r\n            return new GeneratedVariant({\r\n                enabled: true,\r\n                existing: !!existingVariant,\r\n                productVariantId: existingVariant?.id,\r\n                isDefault,\r\n                options,\r\n                price: existingVariant?.price ?? prototypeVariant?.price ?? prototype.price,\r\n                sku: existingVariant?.sku ?? prototypeVariant?.sku ?? prototype.sku,\r\n                stock: existingVariant?.stockOnHand ?? prototypeVariant?.stockOnHand ?? prototype.stock,\r\n            });\r\n        };\r\n        this.generatedVariants = groups.length\r\n            ? generateAllCombinations(groups).map(options => {\r\n                  const existingVariant = this.product.variants.find(v =>\r\n                      this.optionsAreEqual(v.options, options),\r\n                  );\r\n                  const prototypeVariant = this.product.variants.find(v =>\r\n                      this.optionsAreSubset(v.options, options),\r\n                  );\r\n                  return generatedVariantFactory(false, options, existingVariant, prototypeVariant);\r\n              })\r\n            : [generatedVariantFactory(true, [], this.product.variants[0])];\r\n    }\r\n\r\n    /**\r\n     * Returns one of the existing variants to base the newly-generated variant's\r\n     * details off.\r\n     */\r\n    private getVariantPrototype(\r\n        options: GeneratedVariant['options'],\r\n        previousVariants: GeneratedVariant[],\r\n    ): Pick<GeneratedVariant, 'sku' | 'price' | 'stock'> {\r\n        const variantsWithSimilarOptions = previousVariants.filter(v =>\r\n            options.map(o => o.name).filter(name => v.options.map(o => o.name).includes(name)),\r\n        );\r\n        if (variantsWithSimilarOptions.length) {\r\n            return pick(previousVariants[0], ['sku', 'price', 'stock']);\r\n        }\r\n        return {\r\n            sku: '',\r\n            price: 0,\r\n            stock: 0,\r\n        };\r\n    }\r\n\r\n    deleteVariant(id: string) {\r\n        this.modalService\r\n            .dialog({\r\n                title: _('catalog.confirm-delete-product-variant'),\r\n                buttons: [\r\n                    { type: 'secondary', label: _('common.cancel') },\r\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\r\n                ],\r\n            })\r\n            .pipe(\r\n                switchMap(response =>\r\n                    response ? this.productDetailService.deleteProductVariant(id, this.product.id) : EMPTY,\r\n                ),\r\n                switchMap(() => this.reFetchProduct(null)),\r\n            )\r\n            .subscribe(\r\n                () => {\r\n                    this.notificationService.success(_('common.notify-delete-success'), {\r\n                        entity: 'ProductVariant',\r\n                    });\r\n                    this.initOptionsAndVariants();\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-delete-error'), {\r\n                        entity: 'ProductVariant',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    save() {\r\n        const newOptionGroups = this.optionGroups\r\n            .filter(og => og.isNew)\r\n            .map(og => ({\r\n                name: og.name,\r\n                values: [],\r\n            }));\r\n\r\n        this.checkUniqueSkus()\r\n            .pipe(\r\n                mergeMap(() => this.confirmDeletionOfObsoleteVariants()),\r\n                mergeMap(() =>\r\n                    this.productDetailService.createProductOptionGroups(newOptionGroups, this.languageCode),\r\n                ),\r\n                mergeMap(createdOptionGroups => this.addOptionGroupsToProduct(createdOptionGroups)),\r\n                mergeMap(createdOptionGroups => this.addNewOptionsToGroups(createdOptionGroups)),\r\n                mergeMap(groupsIds => this.fetchOptionGroups(groupsIds)),\r\n                mergeMap(groups => this.createNewProductVariants(groups)),\r\n                mergeMap(res => this.deleteObsoleteVariants(res.createProductVariants)),\r\n                mergeMap(variants => this.reFetchProduct(variants)),\r\n            )\r\n            .subscribe({\r\n                next: variants => {\r\n                    this.formValueChanged = false;\r\n                    this.notificationService.success(_('catalog.created-new-variants-success'), {\r\n                        count: variants.length,\r\n                    });\r\n                    this.initOptionsAndVariants();\r\n                },\r\n            });\r\n    }\r\n\r\n    private checkUniqueSkus() {\r\n        const withDuplicateSkus = this.generatedVariants.filter((variant, index) => {\r\n            return this.generatedVariants.find(gv => gv.sku.trim() === variant.sku.trim() && gv !== variant);\r\n        });\r\n        if (withDuplicateSkus.length) {\r\n            return this.modalService\r\n                .dialog({\r\n                    title: _('catalog.duplicate-sku-warning'),\r\n                    body: unique(withDuplicateSkus.map(v => `${v.sku}`)).join(', '),\r\n                    buttons: [{ label: _('common.close'), returnValue: false, type: 'primary' }],\r\n                })\r\n                .pipe(mergeMap(res => EMPTY));\r\n        } else {\r\n            return of(true);\r\n        }\r\n    }\r\n\r\n    private confirmDeletionOfObsoleteVariants(): Observable<boolean> {\r\n        const obsoleteVariants = this.getObsoleteVariants();\r\n        if (obsoleteVariants.length) {\r\n            return this.modalService\r\n                .fromComponent(ConfirmVariantDeletionDialogComponent, {\r\n                    locals: {\r\n                        variants: obsoleteVariants,\r\n                    },\r\n                })\r\n                .pipe(\r\n                    mergeMap(res => {\r\n                        return res === true ? of(true) : EMPTY;\r\n                    }),\r\n                );\r\n        } else {\r\n            return of(true);\r\n        }\r\n    }\r\n\r\n    private getObsoleteVariants() {\r\n        return this.product.variants.filter(\r\n            variant => !this.generatedVariants.find(gv => gv.productVariantId === variant.id),\r\n        );\r\n    }\r\n\r\n    private hasOnlyDefaultVariant(product: GetProductVariantOptions.Product): boolean {\r\n        return product.variants.length === 1 && product.optionGroups.length === 0;\r\n    }\r\n\r\n    private addOptionGroupsToProduct(\r\n        createdOptionGroups: CreateProductOptionGroup.CreateProductOptionGroup[],\r\n    ): Observable<CreateProductOptionGroup.CreateProductOptionGroup[]> {\r\n        if (createdOptionGroups.length) {\r\n            return forkJoin(\r\n                createdOptionGroups.map(optionGroup => {\r\n                    return this.dataService.product.addOptionGroupToProduct({\r\n                        productId: this.product.id,\r\n                        optionGroupId: optionGroup.id,\r\n                    });\r\n                }),\r\n            ).pipe(map(() => createdOptionGroups));\r\n        } else {\r\n            return of([]);\r\n        }\r\n    }\r\n\r\n    private addNewOptionsToGroups(\r\n        createdOptionGroups: CreateProductOptionGroup.CreateProductOptionGroup[],\r\n    ): Observable<string[]> {\r\n        const newOptions: CreateProductOptionInput[] = this.optionGroups\r\n            .map(og => {\r\n                const createdGroup = createdOptionGroups.find(cog => cog.name === og.name);\r\n                const productOptionGroupId = createdGroup ? createdGroup.id : og.id;\r\n                if (!productOptionGroupId) {\r\n                    throw new Error('Could not get a productOptionGroupId');\r\n                }\r\n                return og.values\r\n                    .filter(v => !v.locked)\r\n                    .map(v => ({\r\n                        productOptionGroupId,\r\n                        code: normalizeString(v.name, '-'),\r\n                        translations: [{ name: v.name, languageCode: this.languageCode }],\r\n                    }));\r\n            })\r\n            .reduce((flat, options) => [...flat, ...options], []);\r\n\r\n        const allGroupIds = [\r\n            ...createdOptionGroups.map(g => g.id),\r\n            ...this.optionGroups.map(g => g.id).filter(notNullOrUndefined),\r\n        ];\r\n\r\n        if (newOptions.length) {\r\n            return forkJoin(newOptions.map(input => this.dataService.product.addOptionToGroup(input))).pipe(\r\n                map(() => allGroupIds),\r\n            );\r\n        } else {\r\n            return of(allGroupIds);\r\n        }\r\n    }\r\n\r\n    private fetchOptionGroups(groupsIds: string[]): Observable<ProductOptionGroupWithOptionsFragment[]> {\r\n        return forkJoin(\r\n            groupsIds.map(id =>\r\n                this.dataService.product\r\n                    .getProductOptionGroup(id)\r\n                    .mapSingle(data => data.productOptionGroup)\r\n                    .pipe(filter(notNullOrUndefined)),\r\n            ),\r\n        );\r\n    }\r\n\r\n    private createNewProductVariants(groups: ProductOptionGroupWithOptionsFragment[]) {\r\n        const options = groups\r\n            .filter(notNullOrUndefined)\r\n            .map(og => og.options)\r\n            .reduce((flat, o) => [...flat, ...o], []);\r\n        const variants = this.generatedVariants\r\n            .filter(v => v.enabled && !v.existing)\r\n            .map(v => ({\r\n                price: v.price,\r\n                sku: v.sku,\r\n                stock: v.stock,\r\n                optionIds: v.options\r\n                    .map(name => options.find(o => o.name === name.name))\r\n                    .filter(notNullOrUndefined)\r\n                    .map(o => o.id),\r\n            }));\r\n        return this.productDetailService.createProductVariants(\r\n            this.product,\r\n            variants,\r\n            options,\r\n            this.languageCode,\r\n        );\r\n    }\r\n\r\n    private deleteObsoleteVariants<T>(input: T): Observable<T> {\r\n        const obsoleteVariants = this.getObsoleteVariants();\r\n        if (obsoleteVariants.length) {\r\n            const deleteOperations = obsoleteVariants.map(v =>\r\n                this.dataService.product.deleteProductVariant(v.id).pipe(map(() => input)),\r\n            );\r\n            return forkJoin(...deleteOperations);\r\n        } else {\r\n            return of(input);\r\n        }\r\n    }\r\n\r\n    private reFetchProduct<T>(input: T): Observable<T> {\r\n        // Re-fetch the Product to force an update to the view.\r\n        const id = this.route.snapshot.paramMap.get('id');\r\n        if (id) {\r\n            return this.dataService.product.getProduct(id).single$.pipe(map(() => input));\r\n        } else {\r\n            return of(input);\r\n        }\r\n    }\r\n\r\n    initOptionsAndVariants() {\r\n        this.dataService.product\r\n            // tslint:disable-next-line:no-non-null-assertion\r\n            .getProductVariantsOptions(this.route.snapshot.paramMap.get('id')!)\r\n            // tslint:disable-next-line:no-non-null-assertion\r\n            .mapSingle(({ product }) => product!)\r\n            .subscribe(p => {\r\n                this.product = p;\r\n                this.optionGroups = p.optionGroups.map(og => {\r\n                    return {\r\n                        id: og.id,\r\n                        isNew: false,\r\n                        name: og.name,\r\n                        values: og.options.map(o => ({\r\n                            id: o.id,\r\n                            name: o.name,\r\n                            locked: true,\r\n                        })),\r\n                    };\r\n                });\r\n                this.generateVariants();\r\n            });\r\n    }\r\n\r\n    private optionsAreEqual(a: Array<{ name: string }>, b: Array<{ name: string }>): boolean {\r\n        return this.toOptionString(a) === this.toOptionString(b);\r\n    }\r\n\r\n    private optionsAreSubset(a: Array<{ name: string }>, b: Array<{ name: string }>): boolean {\r\n        return this.toOptionString(b).includes(this.toOptionString(a));\r\n    }\r\n\r\n    private toOptionString(o: Array<{ name: string }>): string {\r\n        return o\r\n            .map(x => x.name)\r\n            .sort()\r\n            .join('|');\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Asset, AssetType, BaseEntityResolver } from '@vendure/admin-ui/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class AssetResolver extends BaseEntityResolver<Asset.Fragment> {\r\n    constructor(router: Router, dataService: DataService) {\r\n        super(\r\n            router,\r\n            {\r\n                __typename: 'Asset' as const,\r\n                id: '',\r\n                createdAt: '',\r\n                updatedAt: '',\r\n                name: '',\r\n                type: AssetType.IMAGE,\r\n                fileSize: 0,\r\n                mimeType: '',\r\n                width: 0,\r\n                height: 0,\r\n                source: '',\r\n                preview: '',\r\n                focalPoint: null,\r\n            },\r\n            id => dataService.product.getAsset(id).mapStream(data => data.asset),\r\n        );\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { BaseEntityResolver } from '@vendure/admin-ui/core';\r\nimport { Collection, ProductWithVariants } from '@vendure/admin-ui/core';\r\nimport { getDefaultUiLanguage } from '@vendure/admin-ui/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class CollectionResolver extends BaseEntityResolver<Collection.Fragment> {\r\n    constructor(router: Router, dataService: DataService) {\r\n        super(\r\n            router,\r\n            {\r\n                __typename: 'Collection' as 'Collection',\r\n                id: '',\r\n                createdAt: '',\r\n                updatedAt: '',\r\n                languageCode: getDefaultUiLanguage(),\r\n                name: '',\r\n                slug: '',\r\n                isPrivate: false,\r\n                description: '',\r\n                featuredAsset: null,\r\n                assets: [],\r\n                translations: [],\r\n                filters: [],\r\n                parent: {} as any,\r\n                children: null,\r\n            },\r\n            id => dataService.collection.getCollection(id).mapStream(data => data.collection),\r\n        );\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { BaseEntityResolver } from '@vendure/admin-ui/core';\r\nimport { FacetWithValues } from '@vendure/admin-ui/core';\r\nimport { getDefaultUiLanguage } from '@vendure/admin-ui/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class FacetResolver extends BaseEntityResolver<FacetWithValues.Fragment> {\r\n    constructor(router: Router, dataService: DataService) {\r\n        super(\r\n            router,\r\n            {\r\n                __typename: 'Facet' as 'Facet',\r\n                id: '',\r\n                createdAt: '',\r\n                updatedAt: '',\r\n                isPrivate: false,\r\n                languageCode: getDefaultUiLanguage(),\r\n                name: '',\r\n                code: '',\r\n                translations: [],\r\n                values: [],\r\n            },\r\n            (id) => dataService.facet.getFacet(id).mapStream((data) => data.facet),\r\n        );\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { BaseEntityResolver } from '@vendure/admin-ui/core';\r\nimport { ProductWithVariants } from '@vendure/admin-ui/core';\r\nimport { getDefaultUiLanguage } from '@vendure/admin-ui/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class ProductResolver extends BaseEntityResolver<ProductWithVariants.Fragment> {\r\n    constructor(dataService: DataService, router: Router) {\r\n        super(\r\n            router,\r\n            {\r\n                __typename: 'Product' as 'Product',\r\n                id: '',\r\n                createdAt: '',\r\n                updatedAt: '',\r\n                enabled: true,\r\n                languageCode: getDefaultUiLanguage(),\r\n                name: '',\r\n                slug: '',\r\n                featuredAsset: null,\r\n                assets: [],\r\n                description: '',\r\n                translations: [],\r\n                optionGroups: [],\r\n                facetValues: [],\r\n                variants: [],\r\n                channels: [],\r\n            },\r\n            (id) =>\r\n                dataService.product\r\n                    .getProduct(id)\r\n                    .refetchOnChannelChange()\r\n                    .mapStream((data) => data.product),\r\n        );\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { BaseEntityResolver } from '@vendure/admin-ui/core';\r\nimport { GetProductVariantOptions } from '@vendure/admin-ui/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class ProductVariantsResolver extends BaseEntityResolver<GetProductVariantOptions.Product> {\r\n    constructor(router: Router, dataService: DataService) {\r\n        super(\r\n            router,\r\n            {\r\n                __typename: 'Product' as 'Product',\r\n                id: '',\r\n                createdAt: '',\r\n                updatedAt: '',\r\n                name: '',\r\n                optionGroups: [],\r\n                variants: [],\r\n            },\r\n            id => dataService.product.getProductVariantsOptions(id).mapStream(data => data.product),\r\n        );\r\n    }\r\n}\r\n","import { Route } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    Asset,\r\n    CanDeactivateDetailGuard,\r\n    Collection,\r\n    createResolveData,\r\n    detailBreadcrumb,\r\n    FacetWithValues,\r\n    ProductWithVariants,\r\n} from '@vendure/admin-ui/core';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { AssetDetailComponent } from './components/asset-detail/asset-detail.component';\r\nimport { AssetListComponent } from './components/asset-list/asset-list.component';\r\nimport { CollectionDetailComponent } from './components/collection-detail/collection-detail.component';\r\nimport { CollectionListComponent } from './components/collection-list/collection-list.component';\r\nimport { FacetDetailComponent } from './components/facet-detail/facet-detail.component';\r\nimport { FacetListComponent } from './components/facet-list/facet-list.component';\r\nimport { ProductDetailComponent } from './components/product-detail/product-detail.component';\r\nimport { ProductListComponent } from './components/product-list/product-list.component';\r\nimport { ProductVariantsEditorComponent } from './components/product-variants-editor/product-variants-editor.component';\r\nimport { AssetResolver } from './providers/routing/asset-resolver';\r\nimport { CollectionResolver } from './providers/routing/collection-resolver';\r\nimport { FacetResolver } from './providers/routing/facet-resolver';\r\nimport { ProductResolver } from './providers/routing/product-resolver';\r\nimport { ProductVariantsResolver } from './providers/routing/product-variants-resolver';\r\n\r\nexport const catalogRoutes: Route[] = [\r\n    {\r\n        path: 'products',\r\n        component: ProductListComponent,\r\n        data: {\r\n            breadcrumb: _('breadcrumb.products'),\r\n        },\r\n    },\r\n    {\r\n        path: 'products/:id',\r\n        component: ProductDetailComponent,\r\n        resolve: createResolveData(ProductResolver),\r\n        canDeactivate: [CanDeactivateDetailGuard],\r\n        data: {\r\n            breadcrumb: productBreadcrumb,\r\n        },\r\n    },\r\n    {\r\n        path: 'products/:id/manage-variants',\r\n        component: ProductVariantsEditorComponent,\r\n        resolve: createResolveData(ProductVariantsResolver),\r\n        canDeactivate: [CanDeactivateDetailGuard],\r\n        data: {\r\n            breadcrumb: productVariantEditorBreadcrumb,\r\n        },\r\n    },\r\n    {\r\n        path: 'facets',\r\n        component: FacetListComponent,\r\n        data: {\r\n            breadcrumb: _('breadcrumb.facets'),\r\n        },\r\n    },\r\n    {\r\n        path: 'facets/:id',\r\n        component: FacetDetailComponent,\r\n        resolve: createResolveData(FacetResolver),\r\n        canDeactivate: [CanDeactivateDetailGuard],\r\n        data: {\r\n            breadcrumb: facetBreadcrumb,\r\n        },\r\n    },\r\n    {\r\n        path: 'collections',\r\n        component: CollectionListComponent,\r\n        data: {\r\n            breadcrumb: _('breadcrumb.collections'),\r\n        },\r\n    },\r\n    {\r\n        path: 'collections/:id',\r\n        component: CollectionDetailComponent,\r\n        resolve: createResolveData(CollectionResolver),\r\n        canDeactivate: [CanDeactivateDetailGuard],\r\n        data: {\r\n            breadcrumb: collectionBreadcrumb,\r\n        },\r\n    },\r\n    {\r\n        path: 'assets',\r\n        component: AssetListComponent,\r\n        data: {\r\n            breadcrumb: _('breadcrumb.assets'),\r\n        },\r\n    },\r\n    {\r\n        path: 'assets/:id',\r\n        component: AssetDetailComponent,\r\n        resolve: createResolveData(AssetResolver),\r\n        data: {\r\n            breadcrumb: assetBreadcrumb,\r\n        },\r\n    },\r\n];\r\n\r\nexport function productBreadcrumb(data: any, params: any) {\r\n    return detailBreadcrumb<ProductWithVariants.Fragment>({\r\n        entity: data.entity,\r\n        id: params.id,\r\n        breadcrumbKey: 'breadcrumb.products',\r\n        getName: product => product.name,\r\n        route: 'products',\r\n    });\r\n}\r\n\r\nexport function productVariantEditorBreadcrumb(data: any, params: any) {\r\n    return data.entity.pipe(\r\n        map((entity: any) => {\r\n            return [\r\n                {\r\n                    label: _('breadcrumb.products'),\r\n                    link: ['../', 'products'],\r\n                },\r\n                {\r\n                    label: `${entity.name}`,\r\n                    link: ['../', 'products', params.id, { tab: 'variants' }],\r\n                },\r\n                {\r\n                    label: _('breadcrumb.manage-variants'),\r\n                    link: ['manage-variants'],\r\n                },\r\n            ];\r\n        }),\r\n    );\r\n}\r\n\r\nexport function facetBreadcrumb(data: any, params: any) {\r\n    return detailBreadcrumb<FacetWithValues.Fragment>({\r\n        entity: data.entity,\r\n        id: params.id,\r\n        breadcrumbKey: 'breadcrumb.facets',\r\n        getName: facet => facet.name,\r\n        route: 'facets',\r\n    });\r\n}\r\n\r\nexport function collectionBreadcrumb(data: any, params: any) {\r\n    return detailBreadcrumb<Collection.Fragment>({\r\n        entity: data.entity,\r\n        id: params.id,\r\n        breadcrumbKey: 'breadcrumb.collections',\r\n        getName: collection => collection.name,\r\n        route: 'collections',\r\n    });\r\n}\r\n\r\nexport function assetBreadcrumb(data: any, params: any) {\r\n    return detailBreadcrumb<Asset.Fragment>({\r\n        entity: data.entity,\r\n        id: params.id,\r\n        breadcrumbKey: 'breadcrumb.assets',\r\n        getName: asset => asset.name,\r\n        route: 'assets',\r\n    });\r\n}\r\n","<div\r\n    cdkDropList\r\n    class=\"tree-node\"\r\n    #dropList\r\n    [cdkDropListData]=\"collectionTree\"\r\n    [cdkDropListDisabled]=\"!(hasUpdatePermission$ | async)\"\r\n    (cdkDropListDropped)=\"drop($event)\"\r\n>\r\n    <div\r\n        class=\"collection\"\r\n        [class.private]=\"collection.isPrivate\"\r\n        *ngFor=\"let collection of collectionTree.children; index as i; trackBy: trackByFn\"\r\n        cdkDrag\r\n        [cdkDragData]=\"collection\"\r\n    >\r\n        <div\r\n            class=\"collection-detail\"\r\n            [ngClass]=\"'depth-' + depth\"\r\n            [class.active]=\"collection.id === activeCollectionId\"\r\n        >\r\n            <div class=\"name\">\r\n                <button\r\n                    class=\"icon-button folder-button\"\r\n                    [disabled]=\"expandAll\"\r\n                    *ngIf=\"collection.children?.length; else folderSpacer\"\r\n                    (click)=\"collection.expanded = !collection.expanded\"\r\n                >\r\n                    <clr-icon shape=\"folder\" *ngIf=\"!collection.expanded && !expandAll\"></clr-icon>\r\n                    <clr-icon shape=\"folder-open\" *ngIf=\"collection.expanded || expandAll\"></clr-icon>\r\n                </button>\r\n                <ng-template #folderSpacer>\r\n                    <div class=\"folder-button-spacer\"></div>\r\n                </ng-template>\r\n                {{ collection.name }}\r\n            </div>\r\n            <div class=\"flex-spacer\"></div>\r\n            <vdr-chip *ngIf=\"collection.isPrivate\">{{ 'catalog.private' | translate }}</vdr-chip>\r\n            <a\r\n                class=\"btn btn-link btn-sm\"\r\n                [routerLink]=\"['./', { contents: collection.id }]\"\r\n                queryParamsHandling=\"preserve\"\r\n            >\r\n                <clr-icon shape=\"view-list\"></clr-icon>\r\n                {{ 'catalog.view-contents' | translate }}\r\n            </a>\r\n            <a class=\"btn btn-link btn-sm\" [routerLink]=\"['/catalog/collections/', collection.id]\">\r\n                <clr-icon shape=\"edit\"></clr-icon>\r\n                {{ 'common.edit' | translate }}\r\n            </a>\r\n            <div class=\"drag-handle\" cdkDragHandle *vdrIfPermissions=\"['UpdateCatalog', 'UpdateCollection']\">\r\n                <clr-icon shape=\"drag-handle\" size=\"24\"></clr-icon>\r\n            </div>\r\n            <vdr-dropdown>\r\n                <button class=\"icon-button\" vdrDropdownTrigger>\r\n                    <clr-icon shape=\"ellipsis-vertical\"></clr-icon>\r\n                </button>\r\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                    <a\r\n                        class=\"dropdown-item\"\r\n                        [routerLink]=\"['./', 'create', { parentId: collection.id }]\"\r\n                        *vdrIfPermissions=\"['CreateCatalog', 'CreateCollection']\"\r\n                    >\r\n                        <clr-icon shape=\"plus\"></clr-icon>\r\n                        {{ 'catalog.create-new-collection' | translate }}\r\n                    </a>\r\n                    <div class=\"dropdown-divider\"></div>\r\n                    <button\r\n                        type=\"button\"\r\n                        vdrDropdownItem\r\n                        [disabled]=\"i === 0 || !(hasUpdatePermission$ | async)\"\r\n                        (click)=\"moveUp(collection, i)\"\r\n                    >\r\n                        <clr-icon shape=\"caret up\"></clr-icon>\r\n                        {{ 'catalog.move-up' | translate }}\r\n                    </button>\r\n                    <button\r\n                        type=\"button\"\r\n                        vdrDropdownItem\r\n                        [disabled]=\"\r\n                            i === collectionTree.children.length - 1 || !(hasUpdatePermission$ | async)\r\n                        \"\r\n                        (click)=\"moveDown(collection, i)\"\r\n                    >\r\n                        <clr-icon shape=\"caret down\"></clr-icon>\r\n                        {{ 'catalog.move-down' | translate }}\r\n                    </button>\r\n                    <h4 class=\"dropdown-header\">{{ 'catalog.move-to' | translate }}</h4>\r\n                    <button\r\n                        type=\"button\"\r\n                        vdrDropdownItem\r\n                        *ngFor=\"let item of getMoveListItems(collection)\"\r\n                        (click)=\"move(collection, item.id)\"\r\n                        [disabled]=\"!(hasUpdatePermission$ | async)\"\r\n                    >\r\n                        <div class=\"move-to-item\">\r\n                            <div class=\"move-icon\">\r\n                                <clr-icon shape=\"child-arrow\"></clr-icon>\r\n                            </div>\r\n                            <div class=\"path\">\r\n                                {{ item.path }}\r\n                            </div>\r\n                        </div>\r\n                    </button>\r\n                    <div class=\"dropdown-divider\"></div>\r\n                    <button\r\n                        class=\"button\"\r\n                        vdrDropdownItem\r\n                        (click)=\"delete(collection.id)\"\r\n                        [disabled]=\"!(hasDeletePermission$ | async)\"\r\n                    >\r\n                        <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                        {{ 'common.delete' | translate }}\r\n                    </button>\r\n                </vdr-dropdown-menu>\r\n            </vdr-dropdown>\r\n        </div>\r\n        <vdr-collection-tree-node\r\n            *ngIf=\"collection.expanded || expandAll\"\r\n            [expandAll]=\"expandAll\"\r\n            [collectionTree]=\"collection\"\r\n            [activeCollectionId]=\"activeCollectionId\"\r\n        ></vdr-collection-tree-node>\r\n    </div>\r\n</div>\r\n","import { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';\nimport {\n    ChangeDetectionStrategy,\n    Component,\n    Input,\n    OnChanges,\n    OnInit,\n    Optional,\n    SimpleChanges,\n    SkipSelf,\n} from '@angular/core';\nimport { DataService, Permission } from '@vendure/admin-ui/core';\nimport { Observable } from 'rxjs';\nimport { map, shareReplay } from 'rxjs/operators';\n\nimport { RootNode, TreeNode } from './array-to-tree';\nimport { CollectionPartial, CollectionTreeComponent } from './collection-tree.component';\n\n@Component({\n    selector: 'vdr-collection-tree-node',\n    templateUrl: './collection-tree-node.component.html',\n    styleUrls: ['./collection-tree-node.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CollectionTreeNodeComponent implements OnInit, OnChanges {\n    depth = 0;\n    parentName: string;\n    @Input() collectionTree: TreeNode<CollectionPartial>;\n    @Input() activeCollectionId: string;\n    @Input() expandAll = false;\n    hasUpdatePermission$: Observable<boolean>;\n    hasDeletePermission$: Observable<boolean>;\n\n    constructor(\n        @SkipSelf() @Optional() private parent: CollectionTreeNodeComponent,\n        private root: CollectionTreeComponent,\n        private dataService: DataService,\n    ) {\n        if (parent) {\n            this.depth = parent.depth + 1;\n        }\n    }\n\n    ngOnInit() {\n        this.parentName = this.collectionTree.name || '<root>';\n        const permissions$ = this.dataService.client\n            .userStatus()\n            .mapStream(data => data.userStatus.permissions)\n            .pipe(shareReplay(1));\n        this.hasUpdatePermission$ = permissions$.pipe(\n            map(\n                perms =>\n                    perms.includes(Permission.UpdateCatalog) || perms.includes(Permission.UpdateCollection),\n            ),\n        );\n        this.hasDeletePermission$ = permissions$.pipe(\n            map(\n                perms =>\n                    perms.includes(Permission.DeleteCatalog) || perms.includes(Permission.DeleteCollection),\n            ),\n        );\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const expandAllChange = changes['expandAll'];\n        if (expandAllChange) {\n            if (expandAllChange.previousValue === true && expandAllChange.currentValue === false) {\n                this.collectionTree.children.forEach(c => (c.expanded = false));\n            }\n        }\n    }\n\n    trackByFn(index: number, item: CollectionPartial) {\n        return item.id;\n    }\n\n    getMoveListItems(collection: CollectionPartial): Array<{ path: string; id: string }> {\n        const visit = (\n            node: TreeNode<any>,\n            parentPath: string[],\n            output: Array<{ path: string; id: string }>,\n        ) => {\n            if (node.id !== collection.id) {\n                const path = parentPath.concat(node.name);\n                const parentId = collection.parent && collection.parent.id;\n                if (node.id !== parentId) {\n                    output.push({ path: path.slice(1).join(' / ') || 'root', id: node.id });\n                }\n                node.children.forEach(child => visit(child, path, output));\n            }\n            return output;\n        };\n        return visit(this.root.collectionTree, [], []);\n    }\n\n    move(collection: CollectionPartial, parentId: string) {\n        this.root.onMove({\n            index: 0,\n            parentId,\n            collectionId: collection.id,\n        });\n    }\n\n    moveUp(collection: CollectionPartial, currentIndex: number) {\n        if (!collection.parent) {\n            return;\n        }\n        this.root.onMove({\n            index: currentIndex - 1,\n            parentId: collection.parent.id,\n            collectionId: collection.id,\n        });\n    }\n\n    moveDown(collection: CollectionPartial, currentIndex: number) {\n        if (!collection.parent) {\n            return;\n        }\n        this.root.onMove({\n            index: currentIndex + 1,\n            parentId: collection.parent.id,\n            collectionId: collection.id,\n        });\n    }\n\n    drop(event: CdkDragDrop<CollectionPartial | RootNode<CollectionPartial>>) {\n        moveItemInArray(this.collectionTree.children, event.previousIndex, event.currentIndex);\n        this.root.onDrop(event);\n    }\n\n    delete(id: string) {\n        this.root.onDelete(id);\n    }\n}\n","<div *ngFor=\"let group of optionGroups\" class=\"option-groups\">\r\n    <div class=\"name\">\r\n        <label>{{ 'catalog.option' | translate }}</label>\r\n        <input\r\n            placeholder=\"e.g. Size\"\r\n            clrInput\r\n            [(ngModel)]=\"group.name\"\r\n            name=\"name\"\r\n            required\r\n            (keydown.enter)=\"handleEnter($event, optionValueInputComponent)\"\r\n        />\r\n    </div>\r\n    <div class=\"values\">\r\n        <label>{{ 'catalog.option-values' | translate }}</label>\r\n        <vdr-option-value-input\r\n            #optionValueInputComponent\r\n            [(ngModel)]=\"group.values\"\r\n            (ngModelChange)=\"generateVariants()\"\r\n            [groupName]=\"group.name\"\r\n            [disabled]=\"group.name === ''\"\r\n        ></vdr-option-value-input>\r\n    </div>\r\n    <div class=\"remove-group\">\r\n        <button\r\n            class=\"btn btn-icon btn-warning-outline\"\r\n            [title]=\"'catalog.remove-option' | translate\"\r\n            (click)=\"removeOption(group.name)\"\r\n        >\r\n            <clr-icon shape=\"trash\"></clr-icon>\r\n        </button>\r\n    </div>\r\n</div>\r\n<button class=\"btn btn-primary-outline btn-sm\" (click)=\"addOption()\">\r\n    <clr-icon shape=\"plus\"></clr-icon>\r\n    {{ 'catalog.add-option' | translate }}\r\n</button>\r\n\r\n<div class=\"variants-preview\">\r\n    <table class=\"table\">\r\n        <thead>\r\n            <tr>\r\n                <th *ngIf=\"1 < variants.length\">{{ 'common.create' | translate }}</th>\r\n                <th *ngIf=\"1 < variants.length\">{{ 'catalog.variant' | translate }}</th>\r\n                <th>{{ 'catalog.sku' | translate }}</th>\r\n                <th>{{ 'catalog.price' | translate }}</th>\r\n                <th>{{ 'catalog.stock-on-hand' | translate }}</th>\r\n            </tr>\r\n        </thead>\r\n        <tr\r\n            *ngFor=\"let variant of variants; trackBy: trackByFn\"\r\n            [class.disabled]=\"!variantFormValues[variant.id].enabled\"\r\n        >\r\n            <td *ngIf=\"1 < variants.length\">\r\n                <input\r\n                    type=\"checkbox\"\r\n                    (change)=\"onFormChange()\"\r\n                    [(ngModel)]=\"variantFormValues[variant.id].enabled\"\r\n                    clrCheckbox\r\n                />\r\n            </td>\r\n            <td *ngIf=\"1 < variants.length\">\r\n                {{ variant.values.join(' ') }}\r\n            </td>\r\n            <td>\r\n                <clr-input-container>\r\n                    <input\r\n                        clrInput\r\n                        type=\"text\"\r\n                        (change)=\"onFormChange()\"\r\n                        [(ngModel)]=\"variantFormValues[variant.id].sku\"\r\n                        [placeholder]=\"'catalog.sku' | translate\"\r\n                    />\r\n                </clr-input-container>\r\n            </td>\r\n            <td>\r\n                <clr-input-container>\r\n                    <vdr-currency-input\r\n                        clrInput\r\n                        [(ngModel)]=\"variantFormValues[variant.id].price\"\r\n                        (ngModelChange)=\"onFormChange()\"\r\n                        [currencyCode]=\"currencyCode\"\r\n                    ></vdr-currency-input>\r\n                </clr-input-container>\r\n            </td>\r\n            <td>\r\n                <clr-input-container>\r\n                    <input\r\n                        clrInput\r\n                        type=\"number\"\r\n                        [(ngModel)]=\"variantFormValues[variant.id].stock\"\r\n                        (change)=\"onFormChange()\"\r\n                        min=\"0\"\r\n                        step=\"1\"\r\n                    />\r\n                </clr-input-container>\r\n            </td>\r\n        </tr>\r\n    </table>\r\n</div>\r\n","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport { generateAllCombinations } from '@vendure/common/lib/shared-utils';\r\n\r\nimport { CurrencyCode } from '@vendure/admin-ui/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\nimport { OptionValueInputComponent } from '../option-value-input/option-value-input.component';\r\n\r\nconst DEFAULT_VARIANT_CODE = '__DEFAULT_VARIANT__';\r\nexport type CreateVariantValues = {\r\n    optionValues: string[];\r\n    enabled: boolean;\r\n    sku: string;\r\n    price: number;\r\n    stock: number;\r\n};\r\nexport type CreateProductVariantsConfig = {\r\n    groups: Array<{ name: string; values: string[] }>;\r\n    variants: CreateVariantValues[];\r\n};\r\n\r\n@Component({\r\n    selector: 'vdr-generate-product-variants',\r\n    templateUrl: './generate-product-variants.component.html',\r\n    styleUrls: ['./generate-product-variants.component.scss'],\r\n})\r\nexport class GenerateProductVariantsComponent implements OnInit {\r\n    @Output() variantsChange = new EventEmitter<CreateProductVariantsConfig>();\r\n    optionGroups: Array<{ name: string; values: Array<{ name: string; locked: boolean }> }> = [];\r\n    currencyCode: CurrencyCode;\r\n    variants: Array<{ id: string; values: string[] }>;\r\n    variantFormValues: { [id: string]: CreateVariantValues } = {};\r\n    constructor(private dataService: DataService) {}\r\n\r\n    ngOnInit() {\r\n        this.dataService.settings.getActiveChannel().single$.subscribe(data => {\r\n            this.currencyCode = data.activeChannel.currencyCode;\r\n        });\r\n\r\n        this.generateVariants();\r\n    }\r\n\r\n    addOption() {\r\n        this.optionGroups.push({ name: '', values: [] });\r\n    }\r\n\r\n    removeOption(name: string) {\r\n        this.optionGroups = this.optionGroups.filter(g => g.name !== name);\r\n        this.generateVariants();\r\n    }\r\n\r\n    generateVariants() {\r\n        const totalValuesCount = this.optionGroups.reduce((sum, group) => sum + group.values.length, 0);\r\n        const groups = totalValuesCount\r\n            ? this.optionGroups.map(g => g.values.map(v => v.name))\r\n            : [[DEFAULT_VARIANT_CODE]];\r\n        this.variants = generateAllCombinations(groups).map(values => ({ id: values.join('|'), values }));\r\n\r\n        this.variants.forEach(variant => {\r\n            if (!this.variantFormValues[variant.id]) {\r\n                this.variantFormValues[variant.id] = {\r\n                    optionValues: variant.values,\r\n                    enabled: true,\r\n                    price: this.copyFromDefault(variant.id, 'price', 0),\r\n                    sku: this.copyFromDefault(variant.id, 'sku', ''),\r\n                    stock: this.copyFromDefault(variant.id, 'stock', 0),\r\n                };\r\n            }\r\n        });\r\n        this.onFormChange();\r\n    }\r\n\r\n    trackByFn(index: number, variant: { name: string; values: string[] }) {\r\n        return variant.values.join('|');\r\n    }\r\n\r\n    handleEnter(event: KeyboardEvent, optionValueInputComponent: OptionValueInputComponent) {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        optionValueInputComponent.focus();\r\n    }\r\n\r\n    onFormChange() {\r\n        const variantsToCreate = this.variants.map(v => this.variantFormValues[v.id]).filter(v => v.enabled);\r\n        this.variantsChange.emit({\r\n            groups: this.optionGroups.map(og => ({ name: og.name, values: og.values.map(v => v.name) })),\r\n            variants: variantsToCreate,\r\n        });\r\n    }\r\n\r\n    private copyFromDefault<T extends keyof CreateVariantValues>(\r\n        variantId: string,\r\n        prop: T,\r\n        value: CreateVariantValues[T],\r\n    ): CreateVariantValues[T] {\r\n        return variantId !== DEFAULT_VARIANT_CODE\r\n            ? this.variantFormValues[DEFAULT_VARIANT_CODE][prop]\r\n            : value;\r\n    }\r\n}\r\n","<div class=\"card\" *ngIf=\"!compact; else compactView\">\r\n    <div class=\"card-img\">\r\n        <div class=\"featured-asset\">\r\n            <img\r\n                *ngIf=\"featuredAsset\"\r\n                [src]=\"featuredAsset | assetPreview:'small'\"\r\n                (click)=\"previewAsset(featuredAsset)\"\r\n            />\r\n            <div class=\"placeholder\" *ngIf=\"!featuredAsset\" (click)=\"selectAssets()\">\r\n                <clr-icon shape=\"image\" size=\"128\"></clr-icon>\r\n                <div>{{ 'catalog.no-featured-asset' | translate }}</div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"card-block\"><ng-container *ngTemplateOutlet=\"assetList\"></ng-container></div>\r\n    <div class=\"card-footer\" *vdrIfPermissions=\"updatePermissions\">\r\n        <button class=\"btn\" (click)=\"selectAssets()\">\r\n            <clr-icon shape=\"attachment\"></clr-icon>\r\n            {{ 'asset.add-asset' | translate }}\r\n        </button>\r\n    </div>\r\n</div>\r\n\r\n<ng-template #compactView>\r\n    <div class=\"featured-asset compact\">\r\n        <img\r\n            *ngIf=\"featuredAsset\"\r\n            [src]=\"featuredAsset | assetPreview:'thumb'\"\r\n            (click)=\"previewAsset(featuredAsset)\"\r\n        />\r\n\r\n        <div class=\"placeholder\" *ngIf=\"!featuredAsset\" (click)=\"selectAssets()\"><clr-icon shape=\"image\" size=\"150\"></clr-icon></div>\r\n    </div>\r\n    <ng-container *ngTemplateOutlet=\"assetList\"></ng-container>\r\n    <button\r\n        *vdrIfPermissions=\"updatePermissions\"\r\n        class=\"compact-select btn btn-icon btn-sm btn-block\"\r\n        [title]=\"'asset.add-asset' | translate\"\r\n        (click)=\"selectAssets()\"\r\n    >\r\n        <clr-icon shape=\"attachment\"></clr-icon>\r\n        {{ 'asset.add-asset' | translate }}\r\n    </button>\r\n</ng-template>\r\n\r\n<ng-template #assetList>\r\n    <div class=\"all-assets\" [class.compact]=\"compact\" cdkDropListGroup>\r\n        <div\r\n            *ngFor=\"let asset of assets; let index = index\"\r\n            class=\"drop-list\"\r\n            cdkDropList\r\n            cdkDropListOrientation=\"horizontal\"\r\n            [cdkDropListData]=\"index\"\r\n            [cdkDropListDisabled]=\"!(updatePermissions | hasPermission)\"\r\n            (cdkDropListDropped)=\"dropListDropped($event)\"\r\n        >\r\n            <vdr-dropdown cdkDrag>\r\n                <div\r\n                    class=\"asset-thumb\"\r\n                    vdrDropdownTrigger\r\n                    [class.featured]=\"isFeatured(asset)\"\r\n                    [title]=\"\"\r\n                    tabindex=\"0\"\r\n                >\r\n                    <img [src]=\"asset | assetPreview:'tiny'\" />\r\n                </div>\r\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                    <button type=\"button\" vdrDropdownItem (click)=\"previewAsset(asset)\">\r\n                        {{ 'asset.preview' | translate }}\r\n                    </button>\r\n                    <button\r\n                        type=\"button\"\r\n                        [disabled]=\"isFeatured(asset) || !(updatePermissions | hasPermission)\"\r\n                        vdrDropdownItem\r\n                        (click)=\"setAsFeatured(asset)\"\r\n                    >\r\n                        {{ 'asset.set-as-featured-asset' | translate }}\r\n                    </button>\r\n                    <div class=\"dropdown-divider\"></div>\r\n                    <button\r\n                        type=\"button\"\r\n                        class=\"remove-asset\"\r\n                        vdrDropdownItem\r\n                        [disabled]=\"!(updatePermissions | hasPermission)\"\r\n                        (click)=\"removeAsset(asset)\"\r\n                    >\r\n                        {{ 'asset.remove-asset' | translate }}\r\n                    </button>\r\n                </vdr-dropdown-menu>\r\n            </vdr-dropdown>\r\n        </div>\r\n    </div>\r\n</ng-template>\r\n","import { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';\r\nimport { ViewportRuler } from '@angular/cdk/overlay';\r\nimport {\r\n    ChangeDetectionStrategy,\r\n    ChangeDetectorRef,\r\n    Component,\r\n    EventEmitter,\r\n    HostBinding,\r\n    Input,\r\n    Optional,\r\n    Output,\r\n} from '@angular/core';\r\nimport {\r\n    Asset,\r\n    AssetPickerDialogComponent,\r\n    AssetPreviewDialogComponent,\r\n    ModalService,\r\n    Permission,\r\n} from '@vendure/admin-ui/core';\r\nimport { unique } from '@vendure/common/lib/unique';\r\n\r\nimport { CollectionDetailComponent } from '../collection-detail/collection-detail.component';\r\n\r\nexport interface AssetChange {\r\n    assets: Asset[];\r\n    featuredAsset: Asset | undefined;\r\n}\r\n\r\n/**\r\n * A component which displays the Assets associated with a product, and allows assets to be removed and\r\n * added, and for the featured asset to be set.\r\n *\r\n * Note: rather complex code for drag drop is due to a limitation of the default CDK implementation\r\n * which is addressed by a work-around from here: https://github.com/angular/components/issues/13372#issuecomment-483998378\r\n */\r\n@Component({\r\n    selector: 'vdr-product-assets',\r\n    templateUrl: './product-assets.component.html',\r\n    styleUrls: ['./product-assets.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ProductAssetsComponent {\r\n    @Input('assets') set assetsSetter(val: Asset[]) {\r\n        // create a new non-readonly array of assets\r\n        this.assets = val.slice();\r\n    }\r\n\r\n    @Input() featuredAsset: Asset | undefined;\r\n    @HostBinding('class.compact')\r\n    @Input()\r\n    compact = false;\r\n    @Output() change = new EventEmitter<AssetChange>();\r\n\r\n    public assets: Asset[] = [];\r\n\r\n    private readonly updateCollectionPermissions = [Permission.UpdateCatalog, Permission.UpdateCollection];\r\n    private readonly updateProductPermissions = [Permission.UpdateCatalog, Permission.UpdateProduct];\r\n\r\n    get updatePermissions(): Permission[] {\r\n        if (this.collectionDetailComponent) {\r\n            return this.updateCollectionPermissions;\r\n        } else {\r\n            return this.updateProductPermissions;\r\n        }\r\n    }\r\n\r\n    constructor(\r\n        private modalService: ModalService,\r\n        private changeDetector: ChangeDetectorRef,\r\n        private viewportRuler: ViewportRuler,\r\n        @Optional() private collectionDetailComponent?: CollectionDetailComponent,\r\n    ) {}\r\n\r\n    selectAssets() {\r\n        this.modalService\r\n            .fromComponent(AssetPickerDialogComponent, {\r\n                size: 'xl',\r\n            })\r\n            .subscribe(result => {\r\n                if (result && result.length) {\r\n                    this.assets = unique(this.assets.concat(result), 'id');\r\n                    if (!this.featuredAsset) {\r\n                        this.featuredAsset = result[0];\r\n                    }\r\n                    this.emitChangeEvent(this.assets, this.featuredAsset);\r\n                    this.changeDetector.markForCheck();\r\n                }\r\n            });\r\n    }\r\n\r\n    setAsFeatured(asset: Asset) {\r\n        this.featuredAsset = asset;\r\n        this.emitChangeEvent(this.assets, asset);\r\n    }\r\n\r\n    isFeatured(asset: Asset): boolean {\r\n        return !!this.featuredAsset && this.featuredAsset.id === asset.id;\r\n    }\r\n\r\n    previewAsset(asset: Asset) {\r\n        this.modalService\r\n            .fromComponent(AssetPreviewDialogComponent, {\r\n                size: 'xl',\r\n                closable: true,\r\n                locals: { asset },\r\n            })\r\n            .subscribe();\r\n    }\r\n\r\n    removeAsset(asset: Asset) {\r\n        this.assets = this.assets.filter(a => a.id !== asset.id);\r\n        if (this.featuredAsset && this.featuredAsset.id === asset.id) {\r\n            this.featuredAsset = this.assets.length > 0 ? this.assets[0] : undefined;\r\n        }\r\n        this.emitChangeEvent(this.assets, this.featuredAsset);\r\n    }\r\n\r\n    private emitChangeEvent(assets: Asset[], featuredAsset: Asset | undefined) {\r\n        this.change.emit({\r\n            assets,\r\n            featuredAsset,\r\n        });\r\n    }\r\n\r\n    dropListDropped(event: CdkDragDrop<number>) {\r\n        moveItemInArray(this.assets, event.previousContainer.data, event.container.data);\r\n        this.emitChangeEvent(this.assets, this.featuredAsset);\r\n    }\r\n}\r\n","<ng-template vdrDialogTitle>{{ 'catalog.update-product-option' | translate }}</ng-template>\r\n<vdr-form-field [label]=\"'catalog.option-name' | translate\" for=\"name\">\r\n    <input\r\n        id=\"name\"\r\n        type=\"text\"\r\n        #nameInput=\"ngModel\"\r\n        [(ngModel)]=\"name\"\r\n        required\r\n        (input)=\"updateCode($event.target.value)\"\r\n    />\r\n</vdr-form-field>\r\n<vdr-form-field [label]=\"'common.code' | translate\" for=\"code\">\r\n    <input id=\"code\" type=\"text\" #codeInput=\"ngModel\" required [(ngModel)]=\"code\" pattern=\"[a-z0-9_-]+\" />\r\n</vdr-form-field>\r\n<clr-checkbox-wrapper>\r\n    <input type=\"checkbox\" clrCheckbox [(ngModel)]=\"updateVariantName\" />\r\n    <label>{{ 'catalog.auto-update-option-variant-name' | translate }}</label>\r\n</clr-checkbox-wrapper>\r\n<section *ngIf=\"customFields.length\">\r\n    <label>{{ 'common.custom-fields' | translate }}</label>\r\n    <ng-container *ngFor=\"let customField of customFields\">\r\n        <vdr-custom-field-control\r\n            *ngIf=\"customFieldsForm.get(customField.name)\"\r\n            entityName=\"ProductOption\"\r\n            [customFieldsFormGroup]=\"customFieldsForm\"\r\n            [customField]=\"customField\"\r\n            [readonly]=\"!(['UpdateCatalog', 'UpdateProduct'] | hasPermission)\"\r\n        ></vdr-custom-field-control>\r\n    </ng-container>\r\n</section>\r\n\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button\r\n        type=\"submit\"\r\n        (click)=\"update()\"\r\n        [disabled]=\"\r\n            nameInput.invalid ||\r\n            codeInput.invalid ||\r\n            (nameInput.pristine && codeInput.pristine && customFieldsForm.pristine)\r\n        \"\r\n        class=\"btn btn-primary\"\r\n    >\r\n        {{ 'catalog.update-product-option' | translate }}\r\n    </button>\r\n</ng-template>\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup } from '@angular/forms';\r\nimport {\r\n    CustomFieldConfig,\r\n    LanguageCode,\r\n    ProductVariant,\r\n    UpdateProductOptionInput,\r\n} from '@vendure/admin-ui/core';\r\nimport { createUpdatedTranslatable } from '@vendure/admin-ui/core';\r\nimport { Dialog } from '@vendure/admin-ui/core';\r\nimport { normalizeString } from '@vendure/common/lib/normalize-string';\r\n\r\n@Component({\r\n    selector: 'vdr-update-product-option-dialog',\r\n    templateUrl: './update-product-option-dialog.component.html',\r\n    styleUrls: ['./update-product-option-dialog.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class UpdateProductOptionDialogComponent\r\n    implements Dialog<UpdateProductOptionInput & { autoUpdate: boolean }>, OnInit {\r\n    resolveWith: (result?: UpdateProductOptionInput & { autoUpdate: boolean }) => void;\r\n    updateVariantName = true;\r\n    // Provided by caller\r\n    productOption: ProductVariant.Options;\r\n    activeLanguage: LanguageCode;\r\n    name: string;\r\n    code: string;\r\n    customFields: CustomFieldConfig[];\r\n    codeInputTouched = false;\r\n    customFieldsForm: FormGroup;\r\n\r\n    ngOnInit(): void {\r\n        const currentTranslation = this.productOption.translations.find(\r\n            t => t.languageCode === this.activeLanguage,\r\n        );\r\n        this.name = currentTranslation?.name ?? '';\r\n        this.code = this.productOption.code;\r\n        this.customFieldsForm = new FormGroup({});\r\n        if (this.customFields) {\r\n            const cfCurrentTranslation =\r\n                (currentTranslation && (currentTranslation as any).customFields) || {};\r\n\r\n            for (const fieldDef of this.customFields) {\r\n                const key = fieldDef.name;\r\n                const value =\r\n                    fieldDef.type === 'localeString'\r\n                        ? cfCurrentTranslation[key]\r\n                        : (this.productOption as any).customFields[key];\r\n                this.customFieldsForm.addControl(fieldDef.name, new FormControl(value));\r\n            }\r\n        }\r\n    }\r\n\r\n    update() {\r\n        const result = createUpdatedTranslatable({\r\n            translatable: this.productOption,\r\n            languageCode: this.activeLanguage,\r\n            updatedFields: {\r\n                code: this.code,\r\n                name: this.name,\r\n                customFields: this.customFieldsForm.value,\r\n            },\r\n            customFieldConfig: this.customFields,\r\n            defaultTranslation: {\r\n                languageCode: this.activeLanguage,\r\n                name: '',\r\n            },\r\n        });\r\n        this.resolveWith({ ...result, autoUpdate: this.updateVariantName });\r\n    }\r\n\r\n    cancel() {\r\n        this.resolveWith();\r\n    }\r\n\r\n    updateCode(nameValue: string) {\r\n        if (!this.codeInputTouched && !this.productOption.code) {\r\n            this.code = normalizeString(nameValue, '-');\r\n        }\r\n    }\r\n}\r\n","<label class=\"clr-control-label\">{{ 'catalog.taxes' | translate }}</label>\r\n<div *ngIf=\"priceIncludesTax\" class=\"value\">\r\n    {{ 'catalog.price-includes-tax-at' | translate: { rate: taxRate$ | async } }}\r\n</div>\r\n<div *ngIf=\"!priceIncludesTax\" class=\"value\">\r\n    {{\r\n        'catalog.price-with-tax-in-default-zone'\r\n            | translate: { price: grossPrice$ | async | localeCurrency: currencyCode, rate: taxRate$ | async }\r\n    }}\r\n</div>\r\n","import { ChangeDetectionStrategy, Component, Input, OnChanges, OnInit, SimpleChanges } from '@angular/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\nimport { BehaviorSubject, combineLatest, Observable, Subject } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'vdr-variant-price-detail',\r\n    templateUrl: './variant-price-detail.component.html',\r\n    styleUrls: ['./variant-price-detail.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class VariantPriceDetailComponent implements OnInit, OnChanges {\r\n    @Input() priceIncludesTax: boolean;\r\n    @Input() price: number;\r\n    @Input() currencyCode: string;\r\n    @Input() taxCategoryId: string;\r\n\r\n    grossPrice$: Observable<number>;\r\n    taxRate$: Observable<number>;\r\n\r\n    private priceChange$ = new BehaviorSubject<number>(0);\r\n    private taxCategoryIdChange$ = new BehaviorSubject<string>('');\r\n\r\n    constructor(private dataService: DataService) {}\r\n\r\n    ngOnInit() {\r\n        const taxRates$ = this.dataService.settings\r\n            .getTaxRates(999, 0, 'cache-first')\r\n            .mapStream(data => data.taxRates.items);\r\n        const activeChannel$ = this.dataService.settings\r\n            .getActiveChannel('cache-first')\r\n            .refetchOnChannelChange()\r\n            .mapStream(data => data.activeChannel);\r\n\r\n        this.taxRate$ = combineLatest(activeChannel$, taxRates$, this.taxCategoryIdChange$).pipe(\r\n            map(([channel, taxRates, taxCategoryId]) => {\r\n                const defaultTaxZone = channel.defaultTaxZone;\r\n                if (!defaultTaxZone) {\r\n                    return 0;\r\n                }\r\n                const applicableRate = taxRates.find(\r\n                    taxRate => taxRate.zone.id === defaultTaxZone.id && taxRate.category.id === taxCategoryId,\r\n                );\r\n\r\n                if (!applicableRate) {\r\n                    return 0;\r\n                }\r\n                return applicableRate.value;\r\n            }),\r\n        );\r\n\r\n        this.grossPrice$ = combineLatest(this.taxRate$, this.priceChange$).pipe(\r\n            map(([taxRate, price]) => {\r\n                return Math.round(price * ((100 + taxRate) / 100));\r\n            }),\r\n        );\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        if ('price' in changes) {\r\n            this.priceChange$.next(changes.price.currentValue);\r\n        }\r\n        if ('taxCategoryId' in changes) {\r\n            this.taxCategoryIdChange$.next(changes.taxCategoryId.currentValue);\r\n        }\r\n    }\r\n}\r\n","<div class=\"variants-list\">\r\n    <div\r\n        class=\"variant-container card\"\r\n        *ngFor=\"let variant of variants | paginate: pagination; trackBy: trackById; let i = index\"\r\n        [class.disabled]=\"!formGroupMap.get(variant.id)?.get('enabled')?.value\"\r\n    >\r\n        <ng-container *ngIf=\"formGroupMap.get(variant.id) as formGroup\" [formGroup]=\"formGroup\">\r\n            <div class=\"card-block header-row\">\r\n                <div class=\"details\">\r\n                    <vdr-title-input class=\"sku\" [readonly]=\"!(updatePermission | hasPermission)\">\r\n                        <clr-input-container>\r\n                            <input\r\n                                clrInput\r\n                                type=\"text\"\r\n                                formControlName=\"sku\"\r\n                                [readonly]=\"!(updatePermission | hasPermission)\"\r\n                                [placeholder]=\"'catalog.sku' | translate\"\r\n                            />\r\n                        </clr-input-container>\r\n                    </vdr-title-input>\r\n                    <vdr-title-input class=\"name\" [readonly]=\"!(updatePermission | hasPermission)\">\r\n                        <clr-input-container>\r\n                            <input\r\n                                clrInput\r\n                                type=\"text\"\r\n                                formControlName=\"name\"\r\n                                [readonly]=\"!(updatePermission | hasPermission)\"\r\n                                [placeholder]=\"'common.name' | translate\"\r\n                            />\r\n                        </clr-input-container>\r\n                    </vdr-title-input>\r\n                </div>\r\n                <div class=\"right-controls\">\r\n                    <clr-toggle-wrapper *vdrIfPermissions=\"updatePermission\">\r\n                        <input type=\"checkbox\" clrToggle name=\"enabled\" formControlName=\"enabled\" />\r\n                        <label>{{ 'common.enabled' | translate }}</label>\r\n                    </clr-toggle-wrapper>\r\n                </div>\r\n            </div>\r\n            <div class=\"card-block\">\r\n                <div class=\"variant-body\">\r\n                    <div class=\"assets\">\r\n                        <vdr-product-assets\r\n                            [compact]=\"true\"\r\n                            [assets]=\"pendingAssetChanges[variant.id]?.assets || variant.assets\"\r\n                            [featuredAsset]=\"pendingAssetChanges[variant.id]?.featuredAsset || variant.featuredAsset\"\r\n                            (change)=\"onAssetChange(variant.id, $event)\"\r\n                        ></vdr-product-assets>\r\n                    </div>\r\n                    <div class=\"variant-form-inputs\">\r\n                        <div class=\"standard-fields\">\r\n                            <div class=\"variant-form-input-row\">\r\n                                <div class=\"tax-category\">\r\n                                    <clr-select-container\r\n                                        *vdrIfPermissions=\"updatePermission; else taxCategoryLabel\"\r\n                                    >\r\n                                        <label>{{ 'catalog.tax-category' | translate }}</label>\r\n                                        <select clrSelect name=\"options\" formControlName=\"taxCategoryId\">\r\n                                            <option\r\n                                                *ngFor=\"let taxCategory of taxCategories\"\r\n                                                [value]=\"taxCategory.id\"\r\n                                            >\r\n                                                {{ taxCategory.name }}\r\n                                            </option>\r\n                                        </select>\r\n                                    </clr-select-container>\r\n                                    <ng-template #taxCategoryLabel>\r\n                                        <label class=\"clr-control-label\">{{\r\n                                            'catalog.tax-category' | translate\r\n                                        }}</label>\r\n                                        <div class=\"tax-category-label\">\r\n                                            {{ getTaxCategoryName(formGroup) }}\r\n                                        </div>\r\n                                    </ng-template>\r\n                                </div>\r\n                                <div class=\"price\">\r\n                                    <clr-input-container>\r\n                                        <label>{{ 'catalog.price' | translate }}</label>\r\n                                        <vdr-currency-input\r\n                                            *ngIf=\"!channelPriceIncludesTax\"\r\n                                            clrInput\r\n                                            [currencyCode]=\"variant.currencyCode\"\r\n                                            [readonly]=\"!(updatePermission | hasPermission)\"\r\n                                            formControlName=\"price\"\r\n                                        ></vdr-currency-input>\r\n                                        <vdr-currency-input\r\n                                            *ngIf=\"channelPriceIncludesTax\"\r\n                                            clrInput\r\n                                            [currencyCode]=\"variant.currencyCode\"\r\n                                            [readonly]=\"!(updatePermission | hasPermission)\"\r\n                                            formControlName=\"priceWithTax\"\r\n                                        ></vdr-currency-input>\r\n                                    </clr-input-container>\r\n                                </div>\r\n                                <vdr-variant-price-detail\r\n                                    [price]=\"formGroup.get('price')!.value\"\r\n                                    [currencyCode]=\"variant.currencyCode\"\r\n                                    [priceIncludesTax]=\"channelPriceIncludesTax\"\r\n                                    [taxCategoryId]=\"formGroup.get('taxCategoryId')!.value\"\r\n                                ></vdr-variant-price-detail>\r\n                            </div>\r\n                            <div class=\"variant-form-input-row\">\r\n                                <clr-select-container *vdrIfPermissions=\"updatePermission\">\r\n                                    <label\r\n                                        >{{ 'catalog.track-inventory' | translate }}\r\n                                        <vdr-help-tooltip\r\n                                            [content]=\"'catalog.track-inventory-tooltip' | translate\"\r\n                                        ></vdr-help-tooltip>\r\n                                    </label>\r\n                                    <select clrSelect name=\"options\" formControlName=\"trackInventory\">\r\n                                        <option [value]=\"GlobalFlag.TRUE\">\r\n                                            {{ 'catalog.track-inventory-true' | translate }}\r\n                                        </option>\r\n                                        <option [value]=\"GlobalFlag.FALSE\">\r\n                                            {{ 'catalog.track-inventory-false' | translate }}\r\n                                        </option>\r\n                                        <option [value]=\"GlobalFlag.INHERIT\">\r\n                                            {{ 'catalog.track-inventory-inherit' | translate }}\r\n                                        </option>\r\n                                    </select>\r\n                                </clr-select-container>\r\n                                <clr-input-container>\r\n                                    <label\r\n                                        >{{ 'catalog.stock-on-hand' | translate }}\r\n                                        <vdr-help-tooltip\r\n                                            [content]=\"'catalog.stock-on-hand-tooltip' | translate\"\r\n                                        ></vdr-help-tooltip\r\n                                    ></label>\r\n                                    <input\r\n                                        [class.inventory-untracked]=\"inventoryIsNotTracked(formGroup)\"\r\n                                        clrInput\r\n                                        type=\"number\"\r\n                                        min=\"0\"\r\n                                        step=\"1\"\r\n                                        formControlName=\"stockOnHand\"\r\n                                        [readonly]=\"!(updatePermission | hasPermission)\"\r\n                                        [vdrDisabled]=\"inventoryIsNotTracked(formGroup)\"\r\n                                    />\r\n                                </clr-input-container>\r\n                                <div [class.inventory-untracked]=\"inventoryIsNotTracked(formGroup)\">\r\n                                    <label class=\"clr-control-label\"\r\n                                        >{{ 'catalog.stock-allocated' | translate }}\r\n                                        <vdr-help-tooltip\r\n                                            [content]=\"'catalog.stock-allocated-tooltip' | translate\"\r\n                                        ></vdr-help-tooltip\r\n                                    ></label>\r\n                                    <div class=\"value\">\r\n                                        {{ variant.stockAllocated }}\r\n                                    </div>\r\n                                </div>\r\n                                <div [class.inventory-untracked]=\"inventoryIsNotTracked(formGroup)\">\r\n                                    <label class=\"clr-control-label\"\r\n                                        >{{ 'catalog.stock-saleable' | translate }}\r\n                                        <vdr-help-tooltip\r\n                                            [content]=\"'catalog.stock-saleable-tooltip' | translate\"\r\n                                        ></vdr-help-tooltip\r\n                                    ></label>\r\n                                    <div class=\"value\">\r\n                                        {{ getSaleableStockLevel(variant) }}\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div class=\"variant-form-input-row\">\r\n                                <div\r\n                                    class=\"out-of-stock-threshold-wrapper\"\r\n                                    [class.inventory-untracked]=\"inventoryIsNotTracked(formGroup)\"\r\n                                >\r\n                                    <label class=\"clr-control-label\"\r\n                                        >{{ 'catalog.out-of-stock-threshold' | translate\r\n                                        }}<vdr-help-tooltip\r\n                                            [content]=\"'catalog.out-of-stock-threshold-tooltip' | translate\"\r\n                                        ></vdr-help-tooltip\r\n                                    ></label>\r\n                                    <div class=\"flex\">\r\n                                        <clr-input-container>\r\n                                            <input\r\n                                                clrInput\r\n                                                type=\"number\"\r\n                                                [formControl]=\"formGroup.get('outOfStockThreshold')\"\r\n                                                [readonly]=\"!(updatePermission | hasPermission)\"\r\n                                                [vdrDisabled]=\"\r\n                                                    formGroup.get('useGlobalOutOfStockThreshold')?.value !==\r\n                                                        false || inventoryIsNotTracked(formGroup)\r\n                                                \"\r\n                                            />\r\n                                        </clr-input-container>\r\n                                        <clr-toggle-wrapper>\r\n                                            <input\r\n                                                type=\"checkbox\"\r\n                                                clrToggle\r\n                                                name=\"useGlobalOutOfStockThreshold\"\r\n                                                formControlName=\"useGlobalOutOfStockThreshold\"\r\n                                                [vdrDisabled]=\"\r\n                                                    !(updatePermission | hasPermission) ||\r\n                                                    inventoryIsNotTracked(formGroup)\r\n                                                \"\r\n                                            />\r\n                                            <label\r\n                                                >{{ 'catalog.use-global-value' | translate }} ({{\r\n                                                    globalOutOfStockThreshold\r\n                                                }})</label\r\n                                            >\r\n                                        </clr-toggle-wrapper>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"custom-fields\">\r\n                            <div class=\"variant-form-input-row\">\r\n                                <section formGroupName=\"customFields\" *ngIf=\"customFields.length\">\r\n                                    <!--<label>{{ 'common.custom-fields' | translate }}</label>-->\r\n                                    <ng-container *ngFor=\"let customField of customFields\">\r\n                                        <vdr-custom-field-control\r\n                                            *ngIf=\"formGroup.get(['customFields', customField.name])\"\r\n                                            entityName=\"ProductVariant\"\r\n                                            [compact]=\"true\"\r\n                                            [customFieldsFormGroup]=\"formGroup.get('customFields')\"\r\n                                            [readonly]=\"!(updatePermission | hasPermission)\"\r\n                                            [customField]=\"customField\"\r\n                                        ></vdr-custom-field-control>\r\n                                    </ng-container>\r\n                                </section>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"card-block\">\r\n                <div class=\"options-facets\">\r\n                    <vdr-entity-info [entity]=\"variant\"></vdr-entity-info>\r\n                    <div *ngIf=\"variant.options.length\">\r\n                        <div class=\"options\">\r\n                            <vdr-chip\r\n                                *ngFor=\"let option of variant.options | sort: 'groupId'\"\r\n                                [colorFrom]=\"optionGroupName(option.groupId)\"\r\n                                [invert]=\"true\"\r\n                                (iconClick)=\"editOption(option)\"\r\n                                [icon]=\"(updatePermission | hasPermission) && 'pencil'\"\r\n                            >\r\n                                <span class=\"option-group-name\">{{ optionGroupName(option.groupId) }}</span>\r\n                                {{ optionName(option) }}\r\n                            </vdr-chip>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"flex-spacer\"></div>\r\n                    <div class=\"facets\">\r\n                        <vdr-facet-value-chip\r\n                            *ngFor=\"let facetValue of existingFacetValues(variant)\"\r\n                            [facetValue]=\"facetValue\"\r\n                            [removable]=\"updatePermission | hasPermission\"\r\n                            (remove)=\"removeFacetValue(variant, facetValue.id)\"\r\n                        ></vdr-facet-value-chip>\r\n                        <vdr-facet-value-chip\r\n                            *ngFor=\"let facetValue of pendingFacetValues(variant)\"\r\n                            [facetValue]=\"facetValue\"\r\n                            [removable]=\"updatePermission | hasPermission\"\r\n                            (remove)=\"removeFacetValue(variant, facetValue.id)\"\r\n                        ></vdr-facet-value-chip>\r\n                        <button\r\n                            *vdrIfPermissions=\"updatePermission\"\r\n                            class=\"btn btn-sm btn-secondary\"\r\n                            (click)=\"selectFacetValueClick.emit([variant.id])\"\r\n                        >\r\n                            <clr-icon shape=\"plus\"></clr-icon>\r\n                            {{ 'catalog.add-facets' | translate }}\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <ng-container *vdrIfMultichannel>\r\n                <div class=\"card-block\" *vdrIfDefaultChannelActive>\r\n                    <div class=\"flex channel-assignment\">\r\n                        <ng-container *ngFor=\"let channel of variant.channels\">\r\n                            <vdr-chip\r\n                                *ngIf=\"!isDefaultChannel(channel.code)\"\r\n                                icon=\"times-circle\"\r\n                                [title]=\"'catalog.remove-from-channel' | translate\"\r\n                                (iconClick)=\"\r\n                                    removeFromChannel.emit({ channelId: channel.id, variant: variant })\r\n                                \"\r\n                            >\r\n                                <vdr-channel-badge [channelCode]=\"channel.code\"></vdr-channel-badge>\r\n                                {{ channel.code | channelCodeToLabel }}\r\n                            </vdr-chip>\r\n                        </ng-container>\r\n                        <button class=\"btn btn-sm\" (click)=\"assignToChannel.emit(variant)\">\r\n                            <clr-icon shape=\"layers\"></clr-icon>\r\n                            {{ 'catalog.assign-to-channel' | translate }}\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </ng-container>\r\n        </ng-container>\r\n    </div>\r\n    <div class=\"table-footer\">\r\n        <vdr-items-per-page-controls [(itemsPerPage)]=\"pagination.itemsPerPage\"></vdr-items-per-page-controls>\r\n\r\n        <vdr-pagination-controls\r\n            [currentPage]=\"pagination.currentPage\"\r\n            [itemsPerPage]=\"pagination.itemsPerPage\"\r\n            (pageChange)=\"pagination.currentPage = $event\"\r\n        ></vdr-pagination-controls>\r\n    </div>\r\n</div>\r\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    Input,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Output,\n    SimpleChanges,\n} from '@angular/core';\nimport { FormArray, FormGroup } from '@angular/forms';\nimport {\n    CustomFieldConfig,\n    DataService,\n    FacetValue,\n    FacetWithValues,\n    flattenFacetValues,\n    GlobalFlag,\n    LanguageCode,\n    ModalService,\n    Permission,\n    ProductOptionFragment,\n    ProductVariant,\n    ProductWithVariants,\n    TaxCategory,\n    UpdateProductOptionInput,\n} from '@vendure/admin-ui/core';\nimport { DEFAULT_CHANNEL_CODE } from '@vendure/common/lib/shared-constants';\nimport { notNullOrUndefined } from '@vendure/common/lib/shared-utils';\nimport { PaginationInstance } from 'ngx-pagination';\nimport { Subscription } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, map } from 'rxjs/operators';\n\nimport { AssetChange } from '../product-assets/product-assets.component';\nimport { SelectedAssets, VariantFormValue } from '../product-detail/product-detail.component';\nimport { UpdateProductOptionDialogComponent } from '../update-product-option-dialog/update-product-option-dialog.component';\n\nexport interface VariantAssetChange extends AssetChange {\n    variantId: string;\n}\n\n@Component({\n    selector: 'vdr-product-variants-list',\n    templateUrl: './product-variants-list.component.html',\n    styleUrls: ['./product-variants-list.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductVariantsListComponent implements OnChanges, OnInit, OnDestroy {\n    @Input('productVariantsFormArray') formArray: FormArray;\n    @Input() variants: ProductWithVariants.Variants[];\n    @Input() channelPriceIncludesTax: boolean;\n    @Input() taxCategories: TaxCategory[];\n    @Input() facets: FacetWithValues.Fragment[];\n    @Input() optionGroups: ProductWithVariants.OptionGroups[];\n    @Input() customFields: CustomFieldConfig[];\n    @Input() customOptionFields: CustomFieldConfig[];\n    @Input() activeLanguage: LanguageCode;\n    @Input() pendingAssetChanges: { [variantId: string]: SelectedAssets };\n    @Output() assignToChannel = new EventEmitter<ProductWithVariants.Variants>();\n    @Output() removeFromChannel = new EventEmitter<{\n        channelId: string;\n        variant: ProductWithVariants.Variants;\n    }>();\n    @Output() assetChange = new EventEmitter<VariantAssetChange>();\n    @Output() selectionChange = new EventEmitter<string[]>();\n    @Output() selectFacetValueClick = new EventEmitter<string[]>();\n    @Output() updateProductOption = new EventEmitter<UpdateProductOptionInput & { autoUpdate: boolean }>();\n    selectedVariantIds: string[] = [];\n    pagination: PaginationInstance = {\n        currentPage: 1,\n        itemsPerPage: 10,\n    };\n    formGroupMap = new Map<string, FormGroup>();\n    GlobalFlag = GlobalFlag;\n    globalTrackInventory: boolean;\n    globalOutOfStockThreshold: number;\n    readonly updatePermission = [Permission.UpdateCatalog, Permission.UpdateProduct];\n    private facetValues: FacetValue.Fragment[];\n    private subscription: Subscription;\n\n    constructor(\n        private changeDetector: ChangeDetectorRef,\n        private modalService: ModalService,\n        private dataService: DataService,\n    ) {}\n\n    ngOnInit() {\n        this.dataService.settings.getGlobalSettings('cache-first').single$.subscribe(({ globalSettings }) => {\n            this.globalTrackInventory = globalSettings.trackInventory;\n            this.globalOutOfStockThreshold = globalSettings.outOfStockThreshold;\n            this.changeDetector.markForCheck();\n        });\n        this.subscription = this.formArray.valueChanges.subscribe(() => this.changeDetector.markForCheck());\n\n        this.subscription.add(\n            this.formArray.valueChanges\n                .pipe(\n                    map(value => value.length),\n                    debounceTime(1),\n                    distinctUntilChanged(),\n                )\n                .subscribe(() => {\n                    this.buildFormGroupMap();\n                }),\n        );\n\n        this.buildFormGroupMap();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if ('facets' in changes && !!changes['facets'].currentValue) {\n            this.facetValues = flattenFacetValues(this.facets);\n        }\n        if ('variants' in changes) {\n            if (changes['variants'].currentValue?.length !== changes['variants'].previousValue?.length) {\n                this.pagination.currentPage = 1;\n            }\n        }\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n\n    isDefaultChannel(channelCode: string): boolean {\n        return channelCode === DEFAULT_CHANNEL_CODE;\n    }\n\n    trackById(index: number, item: ProductWithVariants.Variants) {\n        return item.id;\n    }\n\n    inventoryIsNotTracked(formGroup: FormGroup): boolean {\n        const trackInventory = formGroup.get('trackInventory')?.value;\n        return (\n            trackInventory === GlobalFlag.FALSE ||\n            (trackInventory === GlobalFlag.INHERIT && this.globalTrackInventory === false)\n        );\n    }\n\n    getTaxCategoryName(group: FormGroup): string {\n        const control = group.get(['taxCategoryId']);\n        if (control && this.taxCategories) {\n            const match = this.taxCategories.find(t => t.id === control.value);\n            return match ? match.name : '';\n        }\n        return '';\n    }\n\n    getSaleableStockLevel(variant: ProductWithVariants.Variants) {\n        const effectiveOutOfStockThreshold = variant.useGlobalOutOfStockThreshold\n            ? this.globalOutOfStockThreshold\n            : variant.outOfStockThreshold;\n        return variant.stockOnHand - variant.stockAllocated - effectiveOutOfStockThreshold;\n    }\n\n    areAllSelected(): boolean {\n        return !!this.variants && this.selectedVariantIds.length === this.variants.length;\n    }\n\n    onAssetChange(variantId: string, event: AssetChange) {\n        this.assetChange.emit({\n            variantId,\n            ...event,\n        });\n        const index = this.variants.findIndex(v => v.id === variantId);\n        this.formArray.at(index).markAsDirty();\n    }\n\n    toggleSelectAll() {\n        if (this.areAllSelected()) {\n            this.selectedVariantIds = [];\n        } else {\n            this.selectedVariantIds = this.variants.map(v => v.id);\n        }\n        this.selectionChange.emit(this.selectedVariantIds);\n    }\n\n    toggleSelectVariant(variantId: string) {\n        const index = this.selectedVariantIds.indexOf(variantId);\n        if (-1 < index) {\n            this.selectedVariantIds.splice(index, 1);\n        } else {\n            this.selectedVariantIds.push(variantId);\n        }\n        this.selectionChange.emit(this.selectedVariantIds);\n    }\n\n    optionGroupName(optionGroupId: string): string | undefined {\n        const group = this.optionGroups.find(g => g.id === optionGroupId);\n        if (group) {\n            const translation =\n                group?.translations.find(t => t.languageCode === this.activeLanguage) ??\n                group.translations[0];\n            return translation.name;\n        }\n    }\n\n    optionName(option: ProductOptionFragment) {\n        const translation =\n            option.translations.find(t => t.languageCode === this.activeLanguage) ?? option.translations[0];\n        return translation.name;\n    }\n\n    pendingFacetValues(variant: ProductWithVariants.Variants) {\n        if (this.facets) {\n            const formFacetValueIds = this.getFacetValueIds(variant.id);\n            const variantFacetValueIds = variant.facetValues.map(fv => fv.id);\n            return formFacetValueIds\n                .filter(x => !variantFacetValueIds.includes(x))\n                .map(id => this.facetValues.find(fv => fv.id === id))\n                .filter(notNullOrUndefined);\n        } else {\n            return [];\n        }\n    }\n\n    existingFacetValues(variant: ProductWithVariants.Variants) {\n        const formFacetValueIds = this.getFacetValueIds(variant.id);\n        const intersection = [...formFacetValueIds].filter(x =>\n            variant.facetValues.map(fv => fv.id).includes(x),\n        );\n        return intersection\n            .map(id => variant.facetValues.find(fv => fv.id === id))\n            .filter(notNullOrUndefined);\n    }\n\n    removeFacetValue(variant: ProductWithVariants.Variants, facetValueId: string) {\n        const formGroup = this.formGroupMap.get(variant.id);\n        if (formGroup) {\n            const newValue = (formGroup.value as VariantFormValue).facetValueIds.filter(\n                id => id !== facetValueId,\n            );\n            formGroup.patchValue({\n                facetValueIds: newValue,\n            });\n            formGroup.markAsDirty();\n        }\n    }\n\n    isVariantSelected(variantId: string): boolean {\n        return -1 < this.selectedVariantIds.indexOf(variantId);\n    }\n\n    editOption(option: ProductVariant.Options) {\n        this.modalService\n            .fromComponent(UpdateProductOptionDialogComponent, {\n                size: 'md',\n                locals: {\n                    productOption: option,\n                    activeLanguage: this.activeLanguage,\n                    customFields: this.customOptionFields,\n                },\n            })\n            .subscribe(result => {\n                if (result) {\n                    this.updateProductOption.emit(result);\n                }\n            });\n    }\n\n    private buildFormGroupMap() {\n        this.formGroupMap.clear();\n        for (const controlGroup of this.formArray.controls) {\n            this.formGroupMap.set(controlGroup.value.id, controlGroup as FormGroup);\n        }\n        this.changeDetector.markForCheck();\n    }\n\n    private getFacetValueIds(id: string): string[] {\n        const formValue: VariantFormValue = this.formGroupMap.get(id)?.value;\n        return formValue.facetValueIds;\n    }\n}\n","<vdr-data-table [items]=\"variants\">\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <vdr-dt-column>{{ 'common.name' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'catalog.sku' | translate }}</vdr-dt-column>\r\n    <ng-container *ngFor=\"let optionGroup of optionGroups | sort: 'id'\">\r\n        <vdr-dt-column>{{ optionGroup.name }}</vdr-dt-column>\r\n    </ng-container>\r\n    <vdr-dt-column>{{ 'catalog.price' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'catalog.stock-on-hand' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'common.enabled' | translate }}</vdr-dt-column>\r\n    <ng-template let-variant=\"item\" let-i=\"index\">\r\n        <ng-container *ngIf=\"formGroupMap.get(variant.id) as formGroup\" [formGroup]=\"formGroup\">\r\n            <td class=\"left align-middle\" [class.disabled]=\"!formGroup.get('enabled')!.value\">\r\n                <div class=\"card-img\">\r\n                    <div class=\"featured-asset\">\r\n                        <img\r\n                            *ngIf=\"getFeaturedAsset(variant) as featuredAsset; else placeholder\"\r\n                            [src]=\"featuredAsset | assetPreview: 'tiny'\"\r\n                        />\r\n                        <ng-template #placeholder>\r\n                            <div class=\"placeholder\">\r\n                                <clr-icon shape=\"image\" size=\"48\"></clr-icon>\r\n                            </div>\r\n                        </ng-template>\r\n                    </div>\r\n                </div>\r\n            </td>\r\n            <td class=\"left align-middle\" [class.disabled]=\"!formGroup.get('enabled')!.value\">\r\n                <clr-input-container>\r\n                    <input\r\n                        clrInput\r\n                        type=\"text\"\r\n                        formControlName=\"name\"\r\n                        [readonly]=\"!(updatePermission | hasPermission)\"\r\n                        [placeholder]=\"'common.name' | translate\"\r\n                    />\r\n                </clr-input-container>\r\n            </td>\r\n            <td class=\"left align-middle\" [class.disabled]=\"!formGroup.get('enabled')!.value\">\r\n                <clr-input-container>\r\n                    <input\r\n                        clrInput\r\n                        type=\"text\"\r\n                        formControlName=\"sku\"\r\n                        [readonly]=\"!(updatePermission | hasPermission)\"\r\n                        [placeholder]=\"'catalog.sku' | translate\"\r\n                    />\r\n                </clr-input-container>\r\n            </td>\r\n            <ng-container *ngFor=\"let option of variant.options | sort: 'groupId'\">\r\n                <td\r\n                    class=\"left align-middle\"\r\n                    [class.disabled]=\"!formGroup.get('enabled')!.value\"\r\n                    [style.color]=\"optionGroupName(option.groupId) | stringToColor\"\r\n                >\r\n                    {{ option.name }}\r\n                </td>\r\n            </ng-container>\r\n            <td class=\"left align-middle price\" [class.disabled]=\"!formGroup.get('enabled')!.value\">\r\n                <clr-input-container>\r\n                    <vdr-currency-input\r\n                        *ngIf=\"!channelPriceIncludesTax\"\r\n                        clrInput\r\n                        [currencyCode]=\"variant.currencyCode\"\r\n                        [readonly]=\"!(updatePermission | hasPermission)\"\r\n                        formControlName=\"price\"\r\n                    ></vdr-currency-input>\r\n                    <vdr-currency-input\r\n                        *ngIf=\"channelPriceIncludesTax\"\r\n                        clrInput\r\n                        [currencyCode]=\"variant.currencyCode\"\r\n                        [readonly]=\"!(updatePermission | hasPermission)\"\r\n                        formControlName=\"priceWithTax\"\r\n                    ></vdr-currency-input>\r\n                </clr-input-container>\r\n            </td>\r\n            <td class=\"left align-middle stock\" [class.disabled]=\"!formGroup.get('enabled')!.value\">\r\n                <clr-input-container>\r\n                    <input\r\n                        clrInput\r\n                        type=\"number\"\r\n                        min=\"0\"\r\n                        step=\"1\"\r\n                        formControlName=\"stockOnHand\"\r\n                        [readonly]=\"!(updatePermission | hasPermission)\"\r\n                    />\r\n                </clr-input-container>\r\n            </td>\r\n            <td class=\"left align-middle stock\" [class.disabled]=\"!formGroup.get('enabled')!.value\">\r\n                <clr-toggle-wrapper>\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        clrToggle\r\n                        name=\"enabled\"\r\n                        formControlName=\"enabled\"\r\n                        [vdrDisabled]=\"!(updatePermission | hasPermission)\"\r\n                    />\r\n                </clr-toggle-wrapper>\r\n            </td>\r\n        </ng-container>\r\n    </ng-template>\r\n</vdr-data-table>\r\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    Input,\n    OnDestroy,\n    OnInit,\n} from '@angular/core';\nimport { FormArray, FormGroup } from '@angular/forms';\nimport { Permission, ProductWithVariants } from '@vendure/admin-ui/core';\nimport { Subscription } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, map } from 'rxjs/operators';\n\nimport { SelectedAssets } from '../product-detail/product-detail.component';\n\n@Component({\n    selector: 'vdr-product-variants-table',\n    templateUrl: './product-variants-table.component.html',\n    styleUrls: ['./product-variants-table.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductVariantsTableComponent implements OnInit, OnDestroy {\n    @Input('productVariantsFormArray') formArray: FormArray;\n    @Input() variants: ProductWithVariants.Variants[];\n    @Input() channelPriceIncludesTax: boolean;\n    @Input() optionGroups: ProductWithVariants.OptionGroups[];\n    @Input() pendingAssetChanges: { [variantId: string]: SelectedAssets };\n    formGroupMap = new Map<string, FormGroup>();\n    readonly updatePermission = [Permission.UpdateCatalog, Permission.UpdateProduct];\n    private subscription: Subscription;\n\n    constructor(private changeDetector: ChangeDetectorRef) {}\n\n    ngOnInit() {\n        this.subscription = this.formArray.valueChanges\n            .pipe(\n                map(value => value.length),\n                debounceTime(1),\n                distinctUntilChanged(),\n            )\n            .subscribe(() => {\n                this.buildFormGroupMap();\n            });\n\n        this.buildFormGroupMap();\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n\n    getFeaturedAsset(variant: ProductWithVariants.Variants) {\n        return this.pendingAssetChanges[variant.id]?.featuredAsset || variant.featuredAsset;\n    }\n\n    optionGroupName(optionGroupId: string): string | undefined {\n        const group = this.optionGroups.find(g => g.id === optionGroupId);\n        return group && group.name;\n    }\n\n    private buildFormGroupMap() {\n        this.formGroupMap.clear();\n        for (const controlGroup of this.formArray.controls) {\n            this.formGroupMap.set(controlGroup.value.id, controlGroup as FormGroup);\n        }\n        this.changeDetector.markForCheck();\n    }\n}\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { SharedModule } from '@vendure/admin-ui/core';\r\n\r\nimport { catalogRoutes } from './catalog.routes';\r\nimport { ApplyFacetDialogComponent } from './components/apply-facet-dialog/apply-facet-dialog.component';\r\nimport { AssetDetailComponent } from './components/asset-detail/asset-detail.component';\r\nimport { AssetListComponent } from './components/asset-list/asset-list.component';\r\nimport { AssignProductsToChannelDialogComponent } from './components/assign-products-to-channel-dialog/assign-products-to-channel-dialog.component';\r\nimport { CollectionContentsComponent } from './components/collection-contents/collection-contents.component';\r\nimport { CollectionDetailComponent } from './components/collection-detail/collection-detail.component';\r\nimport { CollectionListComponent } from './components/collection-list/collection-list.component';\r\nimport { CollectionTreeNodeComponent } from './components/collection-tree/collection-tree-node.component';\r\nimport { CollectionTreeComponent } from './components/collection-tree/collection-tree.component';\r\nimport { ConfirmVariantDeletionDialogComponent } from './components/confirm-variant-deletion-dialog/confirm-variant-deletion-dialog.component';\r\nimport { FacetDetailComponent } from './components/facet-detail/facet-detail.component';\r\nimport { FacetListComponent } from './components/facet-list/facet-list.component';\r\nimport { GenerateProductVariantsComponent } from './components/generate-product-variants/generate-product-variants.component';\r\nimport { OptionValueInputComponent } from './components/option-value-input/option-value-input.component';\r\nimport { ProductAssetsComponent } from './components/product-assets/product-assets.component';\r\nimport { ProductDetailComponent } from './components/product-detail/product-detail.component';\r\nimport { ProductListComponent } from './components/product-list/product-list.component';\r\nimport { ProductSearchInputComponent } from './components/product-search-input/product-search-input.component';\r\nimport { ProductVariantsEditorComponent } from './components/product-variants-editor/product-variants-editor.component';\r\nimport { ProductVariantsListComponent } from './components/product-variants-list/product-variants-list.component';\r\nimport { ProductVariantsTableComponent } from './components/product-variants-table/product-variants-table.component';\r\nimport { UpdateProductOptionDialogComponent } from './components/update-product-option-dialog/update-product-option-dialog.component';\r\nimport { VariantPriceDetailComponent } from './components/variant-price-detail/variant-price-detail.component';\r\n\r\n@NgModule({\r\n    imports: [SharedModule, RouterModule.forChild(catalogRoutes)],\r\n    exports: [],\r\n    declarations: [\r\n        ProductListComponent,\r\n        ProductDetailComponent,\r\n        FacetListComponent,\r\n        FacetDetailComponent,\r\n        GenerateProductVariantsComponent,\r\n        ProductVariantsListComponent,\r\n        ApplyFacetDialogComponent,\r\n        AssetListComponent,\r\n        ProductAssetsComponent,\r\n        VariantPriceDetailComponent,\r\n        CollectionListComponent,\r\n        CollectionDetailComponent,\r\n        CollectionTreeComponent,\r\n        CollectionTreeNodeComponent,\r\n        CollectionContentsComponent,\r\n        ProductVariantsTableComponent,\r\n        ProductSearchInputComponent,\r\n        OptionValueInputComponent,\r\n        UpdateProductOptionDialogComponent,\r\n        ProductVariantsEditorComponent,\r\n        AssignProductsToChannelDialogComponent,\r\n        AssetDetailComponent,\r\n        ConfirmVariantDeletionDialogComponent,\r\n    ],\r\n})\r\nexport class CatalogModule {}\r\n"]}