{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "accordion/accordion-content.element.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Web component accordion content to be used inside an accordion\n\n```typescript\nimport '@cds/core/accordion/register.js';\n```\n\n```html\n<cds-accordion>\n  <cds-accordion-panel expanded>\n    <cds-accordion-header>Item 1</cds-accordion-header>\n    <cds-accordion-content>Content 1</cds-accordion-content>\n  </cds-accordion-panel>\n  <cds-accordion-panel>\n    <cds-accordion-header>Item 2</cds-accordion-header>\n    <cds-accordion-content>Content 2</cds-accordion-content>\n  </cds-accordion-panel>\n  <cds-accordion-panel disabled>\n    <cds-accordion-header>Item 3</cds-accordion-header>\n    <cds-accordion-content>Content 3</cds-accordion-content>\n  </cds-accordion-panel>\n</cds-accordion>\n```",
          "name": "CdsAccordionContent",
          "cssProperties": [
            {
              "name": "--color"
            },
            {
              "name": "--font-size"
            },
            {
              "name": "--font-weight"
            },
            {
              "name": "--background"
            }
          ],
          "members": [],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-accordion-content",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CdsAccordionContent",
          "declaration": {
            "name": "CdsAccordionContent",
            "module": "accordion/accordion-content.element.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "accordion/accordion-header.element.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Web component accordion to be used inside an accordion\n\n```typescript\nimport '@cds/core/accordion/register.js';\n```\n\n```html\n<cds-accordion>\n  <cds-accordion-panel expanded>\n    <cds-accordion-header>Item 1</cds-accordion-header>\n    <cds-accordion-content>Content 1</cds-accordion-content>\n  </cds-accordion-panel>\n  <cds-accordion-panel>\n    <cds-accordion-header>Item 2</cds-accordion-header>\n    <cds-accordion-content>Content 2</cds-accordion-content>\n  </cds-accordion-panel>\n  <cds-accordion-panel disabled>\n    <cds-accordion-header>Item 3</cds-accordion-header>\n    <cds-accordion-content>Content 3</cds-accordion-content>\n  </cds-accordion-panel>\n</cds-accordion>\n```",
          "name": "CdsAccordionHeader",
          "cssProperties": [
            {
              "name": "--color"
            },
            {
              "name": "--font-size"
            },
            {
              "name": "--font-weight"
            },
            {
              "name": "--background"
            },
            {
              "name": "--icon-color"
            },
            {
              "name": "--icon-transform"
            }
          ],
          "members": [],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-accordion-header",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CdsAccordionHeader",
          "declaration": {
            "name": "CdsAccordionHeader",
            "module": "accordion/accordion-header.element.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "accordion/accordion-panel.element.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Web component accordion panel to be used inside an accordion\n\n```typescript\nimport '@cds/core/accordion/register.js';\n```\n\n```html\n<cds-accordion>\n  <cds-accordion-panel expanded>\n    <cds-accordion-header>Item 1</cds-accordion-header>\n    <cds-accordion-content>Content 1</cds-accordion-content>\n  </cds-accordion-panel>\n  <cds-accordion-panel>\n    <cds-accordion-header>Item 2</cds-accordion-header>\n    <cds-accordion-content>Content 2</cds-accordion-content>\n  </cds-accordion-panel>\n  <cds-accordion-panel disabled>\n    <cds-accordion-header>Item 3</cds-accordion-header>\n    <cds-accordion-content>Content 3</cds-accordion-content>\n  </cds-accordion-panel>\n</cds-accordion>\n```",
          "name": "CdsAccordionPanel",
          "cssProperties": [
            {
              "name": "--animation-duration"
            },
            {
              "name": "--animation-easing"
            }
          ],
          "slots": [
            {},
            {
              "name": "cds-accordion-header"
            },
            {
              "name": "cds-accordion-content"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "cdsMotion",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "cdsMotionChange",
              "type": {
                "text": "EventEmitter<string>"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "expanded",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "header",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "content",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "expandedChange",
              "type": {
                "text": "EventEmitter<boolean>"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "toggle",
              "privacy": "private"
            }
          ],
          "events": [
            {
              "description": "notify when the user has clicked the panel header",
              "name": "expandedChange"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-accordion-panel",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CdsAccordionPanel",
          "declaration": {
            "name": "CdsAccordionPanel",
            "module": "accordion/accordion-panel.element.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "accordion/accordion.element.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Web component accordion\n\n```typescript\nimport '@cds/core/accordion/register.js';\n```\n\n```html\n<cds-accordion>\n  <cds-accordion-panel expanded>\n    <cds-accordion-header>Item 1</cds-accordion-header>\n    <cds-accordion-content>Content 1</cds-accordion-content>\n  </cds-accordion-panel>\n  <cds-accordion-panel>\n    <cds-accordion-header>Item 2</cds-accordion-header>\n    <cds-accordion-content>Content 2</cds-accordion-content>\n  </cds-accordion-panel>\n  <cds-accordion-panel disabled>\n    <cds-accordion-header>Item 3</cds-accordion-header>\n    <cds-accordion-content>Content 3</cds-accordion-content>\n  </cds-accordion-panel>\n</cds-accordion>\n```",
          "name": "CdsAccordion",
          "cssProperties": [
            {
              "name": "--border-color"
            },
            {
              "name": "--border-width"
            },
            {
              "name": "--border-radius"
            }
          ],
          "slots": [
            {
              "description": "Content slot for inside the accordion",
              "name": ""
            }
          ],
          "members": [],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-accordion",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CdsAccordion",
          "declaration": {
            "name": "CdsAccordion",
            "module": "accordion/accordion.element.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "alert/alert-actions.element.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Web component alert actions to be used inside default and banner alerts.\n\n```typescript\nimport '@cds/core/alert/register.js';\n```\n\n```html\n<cds-alert>\n  Lorem ipsum dolor sit amet\n  <cds-alert-actions>\n    <cds-button>Fix</cds-button>\n  </cds-alert-actions>\n</cds-alert>\n```",
          "name": "CdsAlertActions",
          "cssProperties": [
            {
              "name": "--action-text-color"
            },
            {
              "name": "--action-hover-text-color"
            },
            {
              "name": "--action-font-size"
            }
          ],
          "slots": [
            {}
          ],
          "members": [
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "default | banner | light"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "buttons",
              "privacy": "private"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-alert-actions",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CdsAlertActions",
          "declaration": {
            "name": "CdsAlertActions",
            "module": "alert/alert-actions.element.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "alert/alert-group.element.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Alert groups are containers for a set of alerts. Alert groups can hold one or many alerts\ninside of them with the expectation that all alerts will be of the same type. The exception\nto this rule is the `loading` alert type, which will be displayed regardless of the type\nof alert group containing it.\n\n```typescript\nimport '@cds/core/alert/register.js';\n```\n\n```html\n  <cds-alert-group type=\"danger\">\n    <cds-alert closable=\"true\">\n      Single alert\n      <cds-alert-actions>\n        buttons, links\n      </cds-alert-actions>\n    </cds-alert>\n    <cds-alert type=\"loading\">\n      Single Alert\n    </cds-alert>\n    <cds-alert closable=\"true\">\n      Another alert\n      <cds-alert-actions>\n        buttons, links\n      </cds-alert-actions>\n    </cds-alert>\n  </cds-alert-group>\n```",
          "name": "CdsAlertGroup",
          "cssProperties": [
            {
              "name": "--color"
            },
            {
              "name": "--icon-color"
            },
            {
              "name": "--icon-size"
            },
            {
              "name": "--font-size"
            },
            {
              "name": "--font-weight"
            },
            {
              "name": "--letter-spacing"
            },
            {
              "name": "--padding"
            },
            {
              "name": "--background"
            },
            {
              "name": "--border-color"
            },
            {
              "name": "--border-width"
            },
            {
              "name": "--border-radius"
            }
          ],
          "slots": [
            {
              "description": "Content slot for the alerts",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "default | sm"
              },
              "description": "Sets the overall height and width of the alerts inside the alert group"
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "default | banner | light"
              },
              "description": "Passed down into the alerts inside the alert-group"
            },
            {
              "kind": "field",
              "name": "role",
              "type": {
                "text": "string"
              },
              "description": "Autosets the alert groups aria role to 'region'"
            },
            {
              "kind": "field",
              "name": "status",
              "type": {
                "text": "neutral | info | success | warning | danger | alt | loading"
              },
              "description": "Sets the status of the alerts inside the alert group"
            },
            {
              "kind": "field",
              "name": "alerts",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "pager",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "alertSlot",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "setupAlertsUpdate",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "syncAlerts",
              "privacy": "private"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-alert-group",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CdsAlertGroup",
          "declaration": {
            "name": "CdsAlertGroup",
            "module": "alert/alert-group.element.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "alert/alert.element.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "getIconStatusTuple",
          "return": {
            "type": {
              "text": "[string, string]"
            }
          },
          "parameters": [
            {
              "name": "status",
              "type": {
                "text": "string"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "iconShapeIsAlertStatusType",
          "return": {
            "type": {
              "text": "boolean"
            }
          },
          "parameters": [
            {
              "name": "shape",
              "type": {
                "text": "string"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "getIconStatusLabel",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "parameters": [
            {
              "name": "status",
              "type": {
                "text": "string"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "getIconStatusShape",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "parameters": [
            {
              "name": "status",
              "type": {
                "text": "string"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "getAlertContentLayout",
          "return": {
            "type": {
              "text": "\"\" | \"align:stretch\" | \"align:shrink\""
            }
          },
          "parameters": [
            {
              "name": "containerType",
              "type": {
                "text": "'wrapper' | 'content' | 'actions'"
              }
            },
            {
              "name": "alertGroupType",
              "type": {
                "text": "AlertGroupTypes"
              }
            },
            {
              "name": "alertGroupHasPager",
              "type": {
                "text": "boolean"
              }
            }
          ]
        },
        {
          "kind": "class",
          "description": "Alerts are banners that communicate a message with a severity attached to it.\nThey grab the user’s attention to provide critical information needed in context.\n\nAlerts outside of a cds-alert-group or cds-app-alert-group component will be\ndisplayed as a \"lightweight alert\". Lightweight alerts, by default, provide no\nclose button component and they inherit no status (a.k.a. success, danger, etc.).\n\nAlerts inside a cds-alert-group component inherit their status from the containing\nalert group.\n\nAlerts inside a cds-app-alert-group component inherit their status as a default from\nthe containing app-alert group, although it can be overridden on individual alerts.\n\n```typescript\nimport '@cds/core/alert/register.js';\n```\n\n```html\n  <cds-alert>\n    Single Alert\n    <cds-alert-actions>\n      buttons, links\n    </cds-alert-actions>\n  </cds-alert>\n```",
          "name": "CdsAlert",
          "cssProperties": [
            {
              "name": "--color"
            },
            {
              "name": "--background"
            },
            {
              "name": "--border-radius"
            },
            {
              "name": "--border-color"
            },
            {
              "name": "--icon-color"
            },
            {
              "name": "--close-icon-color"
            },
            {
              "name": "--close-icon-color-hover"
            }
          ],
          "slots": [
            {
              "description": "Content slot for inside the alert",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "closeChange",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "default | sm"
              },
              "description": "Sets the overall height and width of the alert and icon based on value"
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "AlertGroupTypes"
              },
              "description": "Sets up the buttons, layouts, close-button and other properties based on the alert group container\nInternal Use Only",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "idForAriaDescriber",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "closable",
              "type": {
                "text": "boolean"
              },
              "description": "If false, the alert will not render the close button.\n\nLightweight alerts do not display close buttons"
            },
            {
              "kind": "field",
              "name": "status",
              "type": {
                "text": "neutral | info | success | warning | danger | alt | loading"
              },
              "description": "Sets the color of the alert from a predefined list of statuses"
            },
            {
              "kind": "field",
              "name": "i18n",
              "type": {
                "text": "{\n        closeButtonAriaLabel: string;\n        loading: string;\n        info: string;\n        success: string;\n        warning: string;\n        danger: string;\n    }"
              }
            },
            {
              "kind": "field",
              "name": "alertActions",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "alertIcons",
              "type": {
                "text": "NodeListOf<CdsIcon>"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "closeButton",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "parentGroupHasPager",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "closeAlert",
              "privacy": "private"
            }
          ],
          "events": [
            {
              "description": "notify when the user has clicked the dismiss button",
              "name": "closeChange"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-alert",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "getIconStatusTuple",
          "declaration": {
            "name": "getIconStatusTuple",
            "module": "alert/alert.element.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "iconShapeIsAlertStatusType",
          "declaration": {
            "name": "iconShapeIsAlertStatusType",
            "module": "alert/alert.element.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "getIconStatusLabel",
          "declaration": {
            "name": "getIconStatusLabel",
            "module": "alert/alert.element.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "getIconStatusShape",
          "declaration": {
            "name": "getIconStatusShape",
            "module": "alert/alert.element.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "getAlertContentLayout",
          "declaration": {
            "name": "getAlertContentLayout",
            "module": "alert/alert.element.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "CdsAlert",
          "declaration": {
            "name": "CdsAlert",
            "module": "alert/alert.element.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "badge/badge.element.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Badges provide a method to highlight a count of an element either next to it\nor inside the element itself.\n\n```typescript\nimport '@cds/core/badge/register.js';\n```\n\n```html\n<cds-badge status=\"info\">2<span cds-layout=\"display:screen-reader-only\"> items. Item text for screen-readers should be added to badges in elements that will only be read in a screen-reader.</span></cds-badge>\n```",
          "name": "CdsBadge",
          "cssProperties": [
            {
              "name": "--background"
            },
            {
              "name": "--border-color"
            },
            {
              "name": "--border-radius"
            },
            {
              "name": "--border-width"
            },
            {
              "name": "--color"
            },
            {
              "name": "--font-size"
            },
            {
              "name": "--font-weight"
            },
            {
              "name": "--padding"
            },
            {
              "name": "--size"
            }
          ],
          "slots": [
            {
              "description": "Content slot for inside the badge",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "color",
              "type": {
                "text": "'default' | 'gray' | 'purple' | 'blue' | 'orange' | 'light-blue' | null"
              },
              "description": "Sets the color of the badge"
            },
            {
              "kind": "field",
              "name": "status",
              "type": {
                "text": "neutral | info | success | warning | danger"
              },
              "description": "Sets the color of the badge"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-badge",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CdsBadge",
          "declaration": {
            "name": "CdsBadge",
            "module": "badge/badge.element.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "breadcrumb/breadcrumb.element.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "```typescript\nimport '@cds/core/breadcrumb/register.js';\n```\n\n```html\n<cds-breadcrumb aria-label=\"breadcrumb\">\n  <a href=\"/home\" cds-text=\"link\">Home</a>\n  <a href=\"/parent\" cds-text=\"link\">Parent page</a>\n  <span aria-current=\"page\">Current page</span>\n</cds-breadcrumb>\n```",
          "name": "CdsBreadcrumb",
          "cssProperties": [
            {
              "name": "--font-size"
            },
            {
              "name": "--font-weight"
            },
            {
              "name": "--letter-spacing"
            },
            {
              "name": "--color"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "role",
              "type": {
                "text": "string"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "navItems",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "customSeparator",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "separator",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "assignSlots",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "slotNames",
              "privacy": "private"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-breadcrumb",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CdsBreadcrumb",
          "declaration": {
            "name": "CdsBreadcrumb",
            "module": "breadcrumb/breadcrumb.element.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "button/button.element.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Buttons allow an application to communicate action and direct user intent.\n\n```typescript\nimport '@cds/core/button/register.js';\n```\n\n```html\n<cds-button>submit</cds-button>\n```",
          "name": "CdsButton",
          "cssProperties": [
            {
              "name": "--background"
            },
            {
              "name": "--border-color"
            },
            {
              "name": "--border-radius"
            },
            {
              "name": "--border-width"
            },
            {
              "name": "--box-shadow-color"
            },
            {
              "name": "--color"
            },
            {
              "name": "--font-family"
            },
            {
              "name": "--font-size"
            },
            {
              "name": "--font-weight"
            },
            {
              "name": "--height"
            },
            {
              "name": "--letter-spacing"
            },
            {
              "name": "--min-width"
            },
            {
              "name": "--padding"
            },
            {
              "name": "--text-decoration"
            },
            {
              "name": "--text-transform"
            }
          ],
          "slots": [
            {
              "description": "Content slot for inside the button",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "action",
              "type": {
                "text": "'solid' | 'outline' | 'flat' | 'flat-inline'"
              },
              "description": "Define the type of action the button triggers\n\n- `solid`: buttons direct the user’s attention to the primary action the application is suggesting that the user take.\n- `outline`: buttons indicate secondary actions that compliments a primary action or reduces visual noise when there are many actions on the page.\n- `flat`: buttons are used as tertiary buttons. Can also be used inline because they are different from content in style and recognizable as buttons alongside content."
            },
            {
              "kind": "field",
              "name": "status",
              "type": {
                "text": "'primary' | 'success' | 'warning' | 'danger' | 'neutral' | 'inverse'"
              },
              "description": "Sets the color of the button to match the following string statuses"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'sm' | 'md'"
              },
              "description": "Sets the overall height and width of the button based on the following string values:"
            },
            {
              "kind": "field",
              "name": "block",
              "type": {
                "text": "boolean"
              },
              "description": "Sets if the button should be full width with display block"
            },
            {
              "kind": "field",
              "name": "loadingState",
              "type": {
                "text": "default | loading | success | error"
              },
              "description": "Changes the button content based on the value passed.\n\n- `default`: shows the content of the button\n- `loading`: disables the button and shows a spinner inside the button\n- `success`: disables the button and shows a check mark inside the button; auto-triggers to change back to DEFAULT state after 1000 ms\n- `error`: shows the content of the button (in the context of application, this state is usually entered from a LOADING state. the application should show appropriate error message)"
            },
            {
              "kind": "field",
              "name": "_loadingState",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_disabled",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "disableButton",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "enableButton",
              "privacy": "private"
            }
          ],
          "superclass": {
            "name": "CdsBaseButton",
            "package": "@cds/core/internal"
          },
          "tagName": "cds-button",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CdsButton",
          "declaration": {
            "name": "CdsButton",
            "module": "button/button.element.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "button/icon-button.element.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Icon buttons give applications a compact alternative to communicate action and direct user intent.\n\n```typescript\nimport '@cds/core/button/register.js';\n```\n\n```html\n<cds-icon-button><cds-icon shape=\"download\"></cds-icon></cds-icon-button>\n```",
          "name": "CdsIconButton",
          "cssProperties": [
            {
              "name": "--background"
            },
            {
              "name": "--border-color"
            },
            {
              "name": "--border-radius"
            },
            {
              "name": "--border-width"
            },
            {
              "name": "--box-shadow-color"
            },
            {
              "name": "--color"
            },
            {
              "name": "--font-size"
            },
            {
              "name": "--height"
            },
            {
              "name": "--padding"
            }
          ],
          "slots": [
            {
              "description": "Content slot for inside the button",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "ariaLabel",
              "type": {
                "text": "string"
              },
              "description": "The aria-label attribute is required for accessibility. The cds-icon-button\nwill warn if used without the aria-label being set.\n\nIdeally, the aria-label will be specific to the button's purpose. Avoid sharing\ngeneric labels across multiple icon buttons on a page."
            },
            {
              "kind": "field",
              "name": "action",
              "type": {
                "text": "'solid' | 'outline' | 'flat' | 'flat-inline'"
              },
              "description": "Define the type of action the button triggers\n\n- `solid`: buttons direct the user’s attention to the primary action the application is suggesting that the user take.\n- `outline`: buttons indicate secondary actions that compliments a primary action or reduces visual noise when there are many actions on the page.\n- `flat`: buttons are used as tertiary buttons. Can also be used inline because they are different from content in style and recognizable as buttons alongside content.",
              "inheritedFrom": {
                "name": "CdsButton",
                "module": "button/button.element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "status",
              "type": {
                "text": "'primary' | 'success' | 'warning' | 'danger' | 'neutral' | 'inverse'"
              },
              "description": "Sets the color of the button to match the following string statuses",
              "inheritedFrom": {
                "name": "CdsButton",
                "module": "button/button.element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'sm' | 'md'"
              },
              "description": "Sets the overall height and width of the button based on the following string values:",
              "inheritedFrom": {
                "name": "CdsButton",
                "module": "button/button.element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "block",
              "type": {
                "text": "boolean"
              },
              "description": "Sets if the button should be full width with display block",
              "inheritedFrom": {
                "name": "CdsButton",
                "module": "button/button.element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "loadingState",
              "type": {
                "text": "default | loading | success | error"
              },
              "description": "Changes the button content based on the value passed.\n\n- `default`: shows the content of the button\n- `loading`: disables the button and shows a spinner inside the button\n- `success`: disables the button and shows a check mark inside the button; auto-triggers to change back to DEFAULT state after 1000 ms\n- `error`: shows the content of the button (in the context of application, this state is usually entered from a LOADING state. the application should show appropriate error message)",
              "inheritedFrom": {
                "name": "CdsButton",
                "module": "button/button.element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_loadingState",
              "privacy": "private",
              "inheritedFrom": {
                "name": "CdsButton",
                "module": "button/button.element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "_disabled",
              "privacy": "private",
              "inheritedFrom": {
                "name": "CdsButton",
                "module": "button/button.element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "disableButton",
              "privacy": "private",
              "inheritedFrom": {
                "name": "CdsButton",
                "module": "button/button.element.d.ts"
              }
            },
            {
              "kind": "field",
              "name": "enableButton",
              "privacy": "private",
              "inheritedFrom": {
                "name": "CdsButton",
                "module": "button/button.element.d.ts"
              }
            }
          ],
          "superclass": {
            "name": "CdsButton",
            "module": "/button/button.element.js"
          },
          "tagName": "cds-icon-button",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CdsIconButton",
          "declaration": {
            "name": "CdsIconButton",
            "module": "button/icon-button.element.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "button/inline-button.element.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Inline buttons are used inside and alongside textual content within Clarity components.\nThey give action buttons a less prominent, yet familiar, visual presence.\n\n```typescript\nimport '@cds/core/button/register.js';\n```\n\n```html\n<cds-inline-button>Button text goes here</cds-inline-button>\n```",
          "name": "CdsInlineButton",
          "cssProperties": [
            {
              "name": "--text-decoration"
            },
            {
              "name": "--color"
            },
            {
              "name": "--font-size"
            },
            {
              "name": "--line-height"
            },
            {
              "name": "--letter-spacing"
            }
          ],
          "slots": [
            {
              "description": "Content slot for inside the button",
              "name": ""
            }
          ],
          "members": [],
          "superclass": {
            "name": "CdsBaseButton",
            "package": "@cds/core/internal"
          },
          "tagName": "cds-inline-button",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CdsInlineButton",
          "declaration": {
            "name": "CdsInlineButton",
            "module": "button/inline-button.element.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "card/card.element.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Web component card.\n\n```typescript\nimport '@cds/core/card/register.js';\n```\n\n```html\n<cds-card aria-labelledby=\"{label your card}\">\n <div cds-layout=\"vertical gap:md\">\n   <h2 id=\"{label your card}\" cds-text=\"section\" cds-layout=\"p-y:sm\">\n     <!-- Card title -->\n   </h2>\n\n   <cds-divider cds-card-remove-margin></cds-divider>\n\n   <div cds-text=\"body light\" cds-layout=\"p-y:md\">\n     <!-- Card content -->\n   </div>\n\n   <cds-divider cds-card-remove-margin></cds-divider>\n\n   <div cds-layout=\"horizontal gap:sm p-y:sm align:vertical-center\">\n     <cds-button action=\"flat-inline\">View</cds-button>\n   </div>\n </div>\n</cds-card>\n```",
          "name": "CdsCard",
          "cssProperties": [
            {
              "name": "--width"
            },
            {
              "name": "--height"
            },
            {
              "name": "--color"
            },
            {
              "name": "--overflow"
            },
            {
              "name": "--overflow-x"
            },
            {
              "name": "--overflow-y"
            },
            {
              "name": "--background"
            },
            {
              "name": "--border"
            },
            {
              "name": "--border-radius"
            },
            {
              "name": "--padding"
            },
            {
              "name": "--box-shadow"
            },
            {
              "name": "--cds-card-remove-margin"
            }
          ],
          "slots": [
            {
              "description": "For projecting card content",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "role",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "globalStyles",
              "type": {
                "text": "import(\"lit\").CSSResultGroup"
              }
            }
          ],
          "superclass": {
            "name": "CdsInternalPanel",
            "package": "@cds/core/internal-components/panel"
          },
          "tagName": "cds-card",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CdsCard",
          "declaration": {
            "name": "CdsCard",
            "module": "card/card.element.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "checkbox/checkbox-group.element.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Checkbox Group\n\n```typescript\nimport '@cds/core/checkbox';\n```\n\n```html\n<cds-checkbox-group>\n  <label>Select an item</label>\n  <cds-checkbox>\n    <label>Test</label>\n    <input type=\"checkbox\" />\n  </cds-checkbox>\n\n  <cds-checkbox>\n    <label>Test</label>\n    <input type=\"checkbox\" />\n  </cds-checkbox>\n</cds-checkbox-group>\n```",
          "name": "CdsCheckboxGroup",
          "slots": [
            {
              "description": "For projecting checkbox controls",
              "name": ""
            }
          ],
          "superclass": {
            "name": "CdsInternalControlGroup",
            "package": "@cds/core/forms"
          },
          "tagName": "cds-checkbox-group",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CdsCheckboxGroup",
          "declaration": {
            "name": "CdsCheckboxGroup",
            "module": "checkbox/checkbox-group.element.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "checkbox/checkbox.element.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Checkbox\n\n```typescript\nimport '@cds/core/checkbox/register.js';\n```\n\n```html\n<cds-checkbox>\n  <label>checkbox</label>\n  <input type=\"checkbox\" />\n  <cds-control-message>message text</cds-control-message>\n</cds-checkbox>\n```",
          "name": "CdsCheckbox",
          "cssProperties": [
            {
              "name": "--color"
            },
            {
              "name": "--check-color"
            },
            {
              "name": "--background"
            },
            {
              "name": "--border-radius"
            }
          ],
          "slots": [
            {
              "description": "For projecting checkbox",
              "name": ""
            }
          ],
          "members": [],
          "superclass": {
            "name": "CdsInternalControlInline",
            "package": "@cds/core/forms"
          },
          "tagName": "cds-checkbox",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CdsCheckbox",
          "declaration": {
            "name": "CdsCheckbox",
            "module": "checkbox/checkbox.element.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "datalist/datalist.element.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Datalist\n\n```typescript\nimport '@cds/core/datalist/register.js';\n```\n\n```html\n<cds-datalist>\n  <label>datalist</label>\n  <input type=\"text\" />\n  <datalist>\n    <option value=\"item 1\"></option>\n    <option value=\"item 2\"></option>\n    <option value=\"item 3\"></option>\n  </datalist>\n  <cds-control-message>message text</cds-control-message>\n</cds-datalist>\n```",
          "name": "CdsDatalist",
          "cssProperties": [
            {
              "name": "--background"
            },
            {
              "name": "--background-size"
            },
            {
              "name": "--border"
            },
            {
              "name": "--border-bottom"
            },
            {
              "name": "--outline"
            },
            {
              "name": "--padding"
            },
            {
              "name": "--font-size"
            },
            {
              "name": "--color"
            },
            {
              "name": "--line-height"
            },
            {
              "name": "--transition"
            }
          ],
          "slots": [
            {
              "description": "For projecting input, datalist and label",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "globalStyles",
              "type": {
                "text": "import(\"lit\").CSSResultGroup"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "datalistControl",
              "type": {
                "text": "HTMLDataListElement"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "suffixDefaultTemplate",
              "type": {
                "text": "import(\"lit-html\").TemplateResult<1>"
              },
              "privacy": "protected"
            }
          ],
          "superclass": {
            "name": "CdsControl",
            "package": "@cds/core/forms"
          },
          "tagName": "cds-datalist",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CdsDatalist",
          "declaration": {
            "name": "CdsDatalist",
            "module": "datalist/datalist.element.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "date/date.element.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Date\n\n```typescript\nimport '@cds/core/date/register.js';\n```\n\n```html\n<cds-date>\n  <label>Date</label>\n  <input type=\"date\" />\n  <cds-control-message>message text</cds-control-message>\n</cds-date>\n```",
          "name": "CdsDate",
          "slots": [
            {
              "description": "For projecting date input and label",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "globalStyles",
              "type": {
                "text": "import(\"lit\").CSSResultGroup"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "suffixDefaultTemplate",
              "type": {
                "text": "import(\"lit-html\").TemplateResult<1>"
              },
              "privacy": "protected"
            }
          ],
          "superclass": {
            "name": "CdsControl",
            "package": "@cds/core/forms"
          },
          "tagName": "cds-date",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CdsDate",
          "declaration": {
            "name": "CdsDate",
            "module": "date/date.element.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "divider/divider.element.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Dividers are a convenient way to place lined dividers or \"rules\"\nbetween blocks of content.\n\n```typescript\nimport '@cds/core/divider/register.js';\n```\n\n```html\n<cds-divider></cds-divider>\n```",
          "name": "CdsDivider",
          "cssProperties": [
            {
              "name": "--color"
            },
            {
              "name": "--padding"
            },
            {
              "name": "--size"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "orientation",
              "type": {
                "text": "'horizontal' | 'vertical'"
              }
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-divider",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CdsDivider",
          "declaration": {
            "name": "CdsDivider",
            "module": "divider/divider.element.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "file/file.element.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Time Input\n\n```typescript\nimport '@cds/core/file/register.js';\n```\n\n```html\n<cds-file>\n  <label>file</label>\n  <input type=\"file\" />\n</cds-file>\n```",
          "name": "CdsFile",
          "slots": [
            {
              "description": "For projecting file input and label",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "i18n",
              "type": {
                "text": "{\n        browse: string;\n        files: string;\n        removeFile: string;\n    }"
              }
            },
            {
              "kind": "field",
              "name": "buttonLabel",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "fixedControlWidth",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "supportsPrefixSuffixActions",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "inputTemplate",
              "type": {
                "text": "import(\"lit-html\").TemplateResult<1>"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "clearFilesControlTemplate",
              "type": {
                "text": "import(\"lit-html\").TemplateResult<1>"
              },
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "clearFiles",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "fireEvent",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "updateLabelAndFocus",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "files",
                  "optional": true,
                  "type": {
                    "text": "FileList"
                  }
                }
              ],
              "privacy": "private"
            }
          ],
          "superclass": {
            "name": "CdsControl",
            "package": "@cds/core/forms"
          },
          "tagName": "cds-file",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CdsFile",
          "declaration": {
            "name": "CdsFile",
            "module": "file/file.element.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "icon/icon.element.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Icon component that renders svg shapes that can be customized.\nTo load an icon, import the icon with the icon service.\n\n```typescript\nimport '@cds/core/icon/register.js';\nimport { ClarityIcons, userIcon } from '@cds/core/icon';\n\nClarityIcons.addIcons(userIcon);\n```\n\n```html\n<cds-icon shape=\"user\"></cds-icon>\n```",
          "name": "CdsIcon",
          "cssProperties": [
            {
              "name": "--color"
            },
            {
              "name": "--badge-color"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "_shape",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_size",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "shape",
              "type": {
                "text": "string"
              },
              "description": "Changes the svg glyph displayed in the icon component. Defaults to the 'unknown' icon if\nthe specified icon cannot be found in the icon registry."
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "string | xs | sm | md | lg | xl | xxl"
              },
              "description": "Apply numerical width-height or a t-shirt-sized CSS classname"
            },
            {
              "kind": "field",
              "name": "direction",
              "type": {
                "text": "up | down | left | right"
              },
              "description": "Takes a directional value that rotates the icon 90° with the\ntop of the icon pointing in the specified direction."
            },
            {
              "kind": "field",
              "name": "flip",
              "type": {
                "text": "horizontal | vertical"
              },
              "description": "Takes an orientation value that reverses the orientation of the icon vertically or horizontally'"
            },
            {
              "kind": "field",
              "name": "solid",
              "type": {
                "text": "boolean"
              },
              "description": "Displays most icons in their \"filled\" version if set to `true`."
            },
            {
              "kind": "field",
              "name": "status",
              "type": {
                "text": "info | success | warning | danger"
              },
              "description": "Changes color of icon fills and outlines"
            },
            {
              "kind": "field",
              "name": "inverse",
              "type": {
                "text": "boolean"
              },
              "description": "Inverts color of icon fills and outlines if `true`.\nUseful for displaying icons on a dark background."
            },
            {
              "kind": "field",
              "name": "badge",
              "type": {
                "text": "info | success | warning | danger | inherit | warning"
              },
              "description": "-triangle | inherit-triangle}\nSets the color of the icon decoration that appears in the top-right corner\nof the glyph. The icon decoration is derived from the following predefined types.\n\nThe color of the badge can change according to the following\nlist of statuses:\n'info'  -> blue dot\n'success' -> green dot\n'warning' -> yellow dot\n'danger' -> red dot\n'inherit' -> dot inherits color of full icon glyph\n'warning-triangle' -> yellow triangle\n'inherit-triangle' -> triangle inherits color of full icon glyph\nunrecognized value, empty string, or true -> red dot\n\nBy default, the badge displays a 'danger' dot (a red-colored dot).\n\nSetting the badge to 'false' or removing the attribute will remove the default icon badge."
            },
            {
              "kind": "field",
              "name": "innerOffset",
              "type": {
                "text": "number"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "svg",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "subscription",
              "privacy": "private"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-icon",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CdsIcon",
          "declaration": {
            "name": "CdsIcon",
            "module": "icon/icon.element.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "input/input-group.element.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Input Group\n\n```typescript\nimport '@cds/core/input/register.js';\n```\n\n```html\n<cds-input-group>\n  <label>Host URL</label>\n  <cds-select cds-layout=\"align:shrink\">\n    <label>URL Protocol</label>\n    <select>\n      <option>https://</option>\n      <option>http://</option>\n    </select>\n  </cds-select>\n  <cds-input>\n    <label>Host URL</label>\n    <input placeholder=\"example.com\" type=\"url\" />\n  </cds-input>\n  <cds-control-message>Host ID: 123456</cds-control-message>\n</cds-input-group>\n```",
          "name": "CdsInputGroup",
          "slots": [
            {
              "description": "For projecting inputs",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "controls",
              "type": {
                "text": "NodeListOf<CdsInput>"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "isInlineControlGroup",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected"
            }
          ],
          "superclass": {
            "name": "CdsInternalControlGroup",
            "package": "@cds/core/forms"
          },
          "tagName": "cds-input-group",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CdsInputGroup",
          "declaration": {
            "name": "CdsInputGroup",
            "module": "input/input-group.element.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "input/input.element.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Input\n\n```typescript\nimport '@cds/core/input/register.js';\n```\n\n```html\n<cds-input>\n  <label>input</label>\n  <input type=\"text\" />\n</cds-input>\n```",
          "name": "CdsInput",
          "cssProperties": [
            {
              "name": "--background"
            },
            {
              "name": "--background-size"
            },
            {
              "name": "--border"
            },
            {
              "name": "--border-color"
            },
            {
              "name": "--border-bottom"
            },
            {
              "name": "--outline"
            },
            {
              "name": "--padding"
            },
            {
              "name": "--font-size"
            },
            {
              "name": "--color"
            },
            {
              "name": "--line-height"
            },
            {
              "name": "--transition"
            }
          ],
          "slots": [
            {
              "description": "For projecting input and label",
              "name": ""
            }
          ],
          "members": [],
          "superclass": {
            "name": "CdsControl",
            "package": "@cds/core/forms"
          },
          "tagName": "cds-input",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CdsInput",
          "declaration": {
            "name": "CdsInput",
            "module": "input/input.element.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "modal/modal-actions.element.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Web component modal actions to be used inside modal.\n\n```typescript\nimport '@cds/core/modal/register.js';\n```\n\n```html\n<cds-modal>\n  <cds-modal-header>\n     <h3 cds-text=\"title\">My Modal</h3>\n  </cds-modal-header>\n  <cds-modal-content>\n    <p>Lorem Ipsum</p>\n  </cds-modal-content>\n  <cds-modal-actions>\n      <cds-button>Ok</cds-button>\n  </cds-modal-actions>\n</cds-modal>\n```",
          "name": "CdsModalActions",
          "members": [],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-modal-actions",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CdsModalActions",
          "declaration": {
            "name": "CdsModalActions",
            "module": "modal/modal-actions.element.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "modal/modal-content.element.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Web component modal content to be used inside modal.\n\n```typescript\nimport '@cds/core/modal/register.js';\n```\n\n```html\n<cds-modal size='lg'>\n  <cds-modal-header>\n     <h3 cds-text=\"title\">My Modal</h3>\n  </cds-modal-header>\n  <cds-modal-content>\n     <p>Lorem Ipsum</p>\n  </cds-modal-content>\n  <cds-modal-actions>\n      <cds-button>Ok</cds-button>\n  </cds-modal-actions>\n</cds-modal>\n```",
          "name": "CdsModalContent",
          "members": [
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "{\n        delegatesFocus: boolean;\n        mode: ShadowRootMode;\n    }"
              },
              "static": true
            },
            {
              "kind": "field",
              "name": "tabIndexAttr",
              "type": {
                "text": "number"
              },
              "privacy": "protected"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-modal-content",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CdsModalContent",
          "declaration": {
            "name": "CdsModalContent",
            "module": "modal/modal-content.element.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "modal/modal-header-actions.element.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Web component modal header actions to be used inside modal.\n\n```typescript\nimport '@cds/core/modal/register.js';\n```\n\n```html\n<cds-modal>\n  <cds-modal-header>\n     <h3 cds-text=\"title\">My Modal</h3>\n  </cds-modal-header>\n  <cds-modal-content>\n    <p>Lorem Ipsum</p>\n  </cds-modal-content>\n  <cds-modal-actions>\n      <cds-button>Ok</cds-button>\n  </cds-modal-actions>\n</cds-modal>\n```",
          "name": "CdsModalHeaderActions",
          "members": [],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-modal-header-actions",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CdsModalHeaderActions",
          "declaration": {
            "name": "CdsModalHeaderActions",
            "module": "modal/modal-header-actions.element.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "modal/modal-header.element.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Web component modal header to be used inside modal.\n\n```typescript\nimport '@cds/core/modal/register.js';\n```\n\n```html\n<cds-modal>\n  <cds-modal-header>\n     <h3 cds-text=\"title\">My Modal</h3>\n  </cds-modal-header>\n  <cds-modal-content>\n    <p>Lorem Ipsum</p>\n  </cds-modal-content>\n  <cds-modal-actions>\n      <cds-button>Ok</cds-button>\n  </cds-modal-actions>\n</cds-modal>\n```",
          "name": "CdsModalHeader",
          "members": [],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-modal-header",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CdsModalHeader",
          "declaration": {
            "name": "CdsModalHeader",
            "module": "modal/modal-header.element.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "modal/modal.element.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Web component modal.\n\n```typescript\nimport '@cds/core/modal/register.js';\n```\n\n```html\n<cds-modal>\n  <cds-modal-header>\n     <h3 cds-text=\"title\">My Modal</h3>\n  </cds-modal-header>\n  <cds-modal-content>\n    <p>Lorem Ipsum</p>\n  </cds-modal-content>\n  <cds-modal-actions>\n      <cds-button>Ok</cds-button>\n  </cds-modal-actions>\n</cds-modal>\n```",
          "name": "CdsModal",
          "cssProperties": [
            {
              "description": "inherited from the internal overlay component",
              "name": "--backdrop-background"
            },
            {
              "description": "inherited from the internal overlay component",
              "name": "--layered-backdrop-background"
            },
            {
              "name": "--border-color"
            },
            {
              "name": "--border-width"
            },
            {
              "name": "--border-radius"
            },
            {
              "name": "--background"
            },
            {
              "name": "--box-shadow"
            },
            {
              "name": "--width"
            },
            {
              "description": "set as { x, y }. take care when customizing because overflow settings can have unintended side effects.",
              "name": "--content-overflow"
            },
            {
              "description": "sets hard limit on height of modal",
              "name": "--max-height"
            },
            {
              "description": "sets hard limit on height of modal when on a tablet in landscape mode",
              "name": "--tablet-max-height"
            }
          ],
          "slots": [
            {},
            {
              "name": "cds-modal-content"
            },
            {
              "name": "cds-modal-header"
            },
            {
              "name": "cds-modal-actions"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "i18n",
              "type": {
                "text": "{\n        closeButtonAriaLabel: string;\n        contentStart: string;\n        contentBox: string;\n        contentEnd: string;\n    }"
              }
            },
            {
              "kind": "field",
              "name": "closable",
              "type": {
                "text": "boolean"
              },
              "description": "If false, the modal will not render the close button."
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'default' | 'sm' | 'lg' | 'xl'"
              },
              "description": "Sets the overall height and width of the modal and icon based on value"
            },
            {
              "kind": "method",
              "name": "toggleCloseButton",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "events": [
            {
              "description": "notify when the user has clicked the close button",
              "name": "closeChange"
            }
          ],
          "superclass": {
            "name": "CdsInternalOverlay",
            "package": "@cds/core/internal-components/overlay"
          },
          "tagName": "cds-modal",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CdsModal",
          "declaration": {
            "name": "CdsModal",
            "module": "modal/modal.element.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "navigation/navigation-group.element.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "CdsNavigationGroupTagName",
          "type": {
            "text": "string"
          },
          "default": "\"cds-navigation-group\""
        },
        {
          "kind": "class",
          "description": "\n```typescript\nimport '@cds/core/navigation/register.js';\n```\n\n```html\n<cds-navigation-group>\n  <cds-navigation-start></cds-navigation-start>\n   <cds-navigation-item><a href=\"/home\">Home</cds-navigation-item>\n   <cds-navigation-item><a href=\"/account\">Account</cds-navigation-item>\n</cds-navigation-group>\n```",
          "name": "CdsNavigationGroup",
          "cssProperties": [
            {
              "name": "--animation-duration"
            },
            {
              "name": "--animation-easing"
            },
            {
              "name": "--background"
            }
          ],
          "slots": [
            {}
          ],
          "members": [
            {
              "kind": "field",
              "name": "cdsMotion",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "expandedChange",
              "type": {
                "text": "EventEmitter<boolean>"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "cdsMotionChange",
              "type": {
                "text": "EventEmitter<string>"
              }
            },
            {
              "kind": "field",
              "name": "navigationGroupId",
              "type": {
                "text": "string"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "i18n",
              "type": {
                "text": "{\n        [key: string]: string | undefined;\n    }"
              }
            },
            {
              "kind": "field",
              "name": "isGroupStart",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "expanded",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "active",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "expandedGroup",
              "type": {
                "text": "boolean"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "hasFocus",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "groupStart",
              "type": {
                "text": "CdsNavigationStart"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "groupItems",
              "type": {
                "text": "NodeListOf<CdsNavigationItem>"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "nestedGroups",
              "type": {
                "text": "NodeListOf<CdsNavigationItem>"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "toggle",
              "privacy": "private"
            }
          ],
          "events": [
            {
              "description": "notify when the user has clicked the navigation expand/collapse button",
              "name": "expandedChange"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-navigation-group",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CdsNavigationGroupTagName",
          "declaration": {
            "name": "CdsNavigationGroupTagName",
            "module": "navigation/navigation-group.element.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "CdsNavigationGroup",
          "declaration": {
            "name": "CdsNavigationGroup",
            "module": "navigation/navigation-group.element.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "navigation/navigation-item.element.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "CdsNavigationItemTagName",
          "type": {
            "text": "string"
          },
          "default": "\"cds-navigation-item\""
        },
        {
          "kind": "class",
          "description": "```typescript\nimport '@cds/core/navigation/register.js';\n```\n\n```html\n <cds-navigation-item><a href=\"/home\">Home</cds-navigation-item>\n```",
          "name": "CdsNavigationItem",
          "cssProperties": [
            {
              "name": "--color"
            },
            {
              "name": "--font-size"
            },
            {
              "name": "--font-weight"
            },
            {
              "name": "--letter-spacing"
            },
            {
              "name": "--padding"
            }
          ],
          "slots": [
            {}
          ],
          "members": [
            {
              "kind": "field",
              "name": "i18n",
              "type": {
                "text": "{\n        [key: string]: string | undefined;\n    }"
              }
            },
            {
              "kind": "field",
              "name": "active",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "expanded",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "expandedGroup",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "groupItem",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "hasFocus",
              "type": {
                "text": "NavigationFocusState"
              }
            },
            {
              "kind": "field",
              "name": "focusElement",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "itemIcon",
              "type": {
                "text": "CdsIcon"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "itemText",
              "type": {
                "text": "NodeListOf<HTMLSpanElement>"
              }
            },
            {
              "kind": "field",
              "name": "handleItemAnchorText",
              "privacy": "private"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-navigation-item",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CdsNavigationItemTagName",
          "declaration": {
            "name": "CdsNavigationItemTagName",
            "module": "navigation/navigation-item.element.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "CdsNavigationItem",
          "declaration": {
            "name": "CdsNavigationItem",
            "module": "navigation/navigation-item.element.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "navigation/navigation-start.element.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "CdsNavigationStartTagName",
          "type": {
            "text": "string"
          },
          "default": "\"cds-navigation-start\""
        },
        {
          "kind": "class",
          "description": "Web component navigation.\n\n```typescript\nimport '@cds/core/navigation/register.js';\n```\n\n```html\n<cds-navigation-start>Start text</cds-navigation-start>\n```",
          "name": "CdsNavigationStart",
          "cssProperties": [
            {
              "description": "inherit",
              "name": "--color:"
            },
            {
              "description": "inherit",
              "name": "--line-height:"
            },
            {
              "description": "inherit",
              "name": "--font-size:"
            },
            {
              "description": "inherit",
              "name": "--font-weight:"
            }
          ],
          "slots": [
            {},
            {
              "description": "customize the default start toggle icon",
              "name": "cds-navigation-start-icon"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "i18n",
              "type": {
                "text": "{\n        [key: string]: string | undefined;\n    }"
              }
            },
            {
              "kind": "field",
              "name": "expandedRoot",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "hasFocus",
              "type": {
                "text": "NavigationFocusState"
              }
            },
            {
              "kind": "field",
              "name": "isGroupStart",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "navigationGroupId",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "expanded",
              "type": {
                "text": "boolean"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "focusElement",
              "type": {
                "text": "HTMLButtonElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "startIcon",
              "type": {
                "text": "CdsIcon"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "itemText",
              "type": {
                "text": "NodeListOf<HTMLSpanElement>"
              }
            },
            {
              "kind": "field",
              "name": "handleStartButtonText",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "toggleIconDirection",
              "type": {
                "text": "Directions"
              }
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-navigation-start",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CdsNavigationStartTagName",
          "declaration": {
            "name": "CdsNavigationStartTagName",
            "module": "navigation/navigation-start.element.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "CdsNavigationStart",
          "declaration": {
            "name": "CdsNavigationStart",
            "module": "navigation/navigation-start.element.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "navigation/navigation.element.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "CdsNavigationTagName",
          "type": {
            "text": "string"
          },
          "default": "\"cds-navigation\""
        },
        {
          "kind": "class",
          "description": "```typescript\nimport '@cds/core/navigation/register.js';\n```\n\n```html\n <cds-navigation>\n   <cds-navigation-item><a href=\"/home\">Home</cds-navigation-item>\n   <cds-navigation-item><a href=\"/account\">Account</cds-navigation-item>\n </cds-navigation>\n```",
          "name": "CdsNavigation",
          "cssProperties": [
            {
              "name": "--animation-duration"
            },
            {
              "name": "--animation-easing"
            },
            {
              "name": "--background"
            },
            {
              "name": "--collapsed-width"
            },
            {
              "name": "--expanded-width"
            },
            {
              "name": "--font-size"
            },
            {
              "name": "--font-weight"
            },
            {
              "name": "--letter-spacing"
            },
            {
              "name": "--line-height"
            },
            {
              "name": "--nested-padding"
            },
            {
              "name": "--padding"
            }
          ],
          "slots": [
            {},
            {
              "description": "cds-navigation-substart - project content below the navigation toggle button",
              "name": ""
            },
            {
              "description": "cds-navigation-end - project content below the scrollable section",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "expandedRoot",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "cdsMotion",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "expandedChange",
              "type": {
                "text": "EventEmitter<boolean>"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "cdsMotionChange",
              "type": {
                "text": "EventEmitter<string>"
              }
            },
            {
              "kind": "field",
              "name": "groupItem",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "description": "This is used to sync down the information to this.navigationGroupItems"
            },
            {
              "kind": "field",
              "name": "ariaActiveDescendant",
              "type": {
                "text": "any"
              },
              "description": "Set and update the aria-active descended value onto the navigation."
            },
            {
              "kind": "field",
              "name": "expanded",
              "type": {
                "text": "boolean"
              },
              "description": "\nVertical navigation elements can be either wide or narrow. Expanded indicates it should be wide.\nWhen navigation is wide cds-navigation-start button elements and cds-navigation-item a elements display\ntext. When it is narrow they do not (consumer should provide an icon that stays visible)."
            },
            {
              "kind": "field",
              "name": "i18n",
              "type": {
                "text": "{\n        [key: string]: string | undefined;\n    }"
              }
            },
            {
              "kind": "field",
              "name": "navigationEnd",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "protected",
              "description": "The end slot that items can be projected into with slot=\"cds-navigation-end\""
            },
            {
              "kind": "field",
              "name": "allNavigationElements",
              "type": {
                "text": "NodeListOf<FocusableElement>"
              },
              "privacy": "protected",
              "description": "This slot query is used to identify and manage all focusable elements needed for arrow key navigation\nTODO: How to add in forms selector attribute and other things that are not FocusableElements like I use here\ntbd - I don;'t have an answer yet."
            },
            {
              "kind": "field",
              "name": "navigationStartRefs",
              "type": {
                "text": "NodeListOf<CdsNavigationStart>"
              },
              "privacy": "protected",
              "description": "Get references to all of the start elements so they can be passed state when updates are made."
            },
            {
              "kind": "field",
              "name": "rootDividers",
              "type": {
                "text": "NodeListOf<CdsDivider>"
              },
              "privacy": "protected",
              "description": "make navigation-body default and eliminate extra assigns **?\n/**\nquery for cds-divider  and project into navigation-body slot."
            },
            {
              "kind": "field",
              "name": "rootNavigationGroups",
              "type": {
                "text": "NodeListOf<CdsNavigationGroup>"
              },
              "privacy": "protected",
              "description": "query for root level groups and project them into the navigation-body slot."
            },
            {
              "kind": "field",
              "name": "rootNavigationItems",
              "type": {
                "text": "NodeListOf<CdsNavigationItem>"
              },
              "privacy": "protected",
              "description": "query for root level items and project them into the navigation-body slot."
            },
            {
              "kind": "field",
              "name": "rootNavigationStart",
              "type": {
                "text": "CdsNavigationStart"
              },
              "privacy": "protected",
              "description": "query for the root level start items and project them into the navigation-start slot."
            },
            {
              "kind": "field",
              "name": "navigationGroupItems",
              "type": {
                "text": "NodeListOf<CdsNavigationGroup>"
              },
              "privacy": "protected",
              "description": "query for items inside a cds-navigation-group, used to pass state down"
            },
            {
              "kind": "field",
              "name": "navigationItemRefs",
              "type": {
                "text": "NodeListOf<CdsNavigationItem>"
              },
              "privacy": "protected",
              "description": "query for all cds-navigation elements, used to pass state down"
            },
            {
              "kind": "field",
              "name": "navigationGroupRefs",
              "type": {
                "text": "NodeListOf<CdsNavigationGroup>"
              },
              "privacy": "protected",
              "description": "query for all groups (including any nested groups), used ot pass state down"
            },
            {
              "kind": "field",
              "name": "initAriaActiveDescendant",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "keyboardNavigationHandler",
              "privacy": "private",
              "description": "Rules for keyboard handling logic:\n\n1. when cds-navigation element receives focus if there is already an active focus item,\n   set focus on it, else set focus on first focusable item\n2. arrow key down sets focus on the next focusable item, if last item it moves focus to first focusable item\n3. arrow key up sets focus on the previous focusable item, if first it moves focus to the last focusable item\n4. arrow key left on a cds-navigation-item inside cds-navigation-group will put focus on the cds-navigation-start\n   button for the group\n5. arrow key left on a cds-navigation-start element inside a cds-navigation-group will emit the groups\n   expandedChange event\n6. arrow key right on a non expanded cds-navigation-group will emit the groups expandedChange event\n7. arrow key left on a root cds-navigation-start element will fire the cds-navigation expandedChange event if\n   the cds-navigation element is expanded\n8. arrow key right on a root cds-navigation-start element will fire the cds-navigation expandedChange event if\n   the cds-navigation element is not expanded\n9. home key will move focus to the first focusable item\n10. end key will move focus to the last focusable item\n\nWe may need a way to let consumers mark elements and include them in the focusable elements, not sure how yet",
              "parameters": [
                {
                  "name": "event"
                }
              ]
            },
            {
              "kind": "field",
              "name": "toggle",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "currentActiveItem",
              "type": {
                "text": "FocusableElement | undefined"
              }
            },
            {
              "kind": "field",
              "name": "endTemplate",
              "type": {
                "text": "\"\" | import(\"lit-html\").TemplateResult<1>"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "startTemplate",
              "type": {
                "text": "string | import(\"lit-html\").TemplateResult<1>"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "visibleChildren",
              "type": {
                "text": "FocusableElement[]"
              },
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "addStartEventListener",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "setActiveItemFocus",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "updateChildrenProps",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "events": [
            {
              "description": "notify when the user has clicked the navigation expand/collapse button",
              "name": "expandedChange"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-navigation",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CdsNavigationTagName",
          "declaration": {
            "name": "CdsNavigationTagName",
            "module": "navigation/navigation.element.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "CdsNavigation",
          "declaration": {
            "name": "CdsNavigation",
            "module": "navigation/navigation.element.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "pagination/pagination-button.element.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Web component pagination button to be used inside pagination.\n\n```typescript\nimport '@cds/core/pagination/register.js';\n```\n\n```html\n<cds-pagination>\n  <cds-pagination-button action=\"first\" disabled></cds-pagination-button>\n  <cds-pagination-button action=\"prev\" disabled></cds-pagination-button>\n  <span aria-label=\"current page\">1 / 3</span>\n  <cds-pagination-button action=\"next\"></cds-pagination-button>\n  <cds-pagination-button action=\"last\"></cds-pagination-button>\n</cds-pagination>\n```",
          "name": "CdsPaginationButton",
          "cssProperties": [
            {
              "name": "--background"
            },
            {
              "name": "--padding"
            },
            {
              "name": "--border-color"
            },
            {
              "name": "--border-width"
            },
            {
              "name": "--border-radius"
            },
            {
              "name": "--box-shadow"
            },
            {
              "name": "--min-height"
            },
            {
              "name": "--min-width"
            }
          ],
          "slots": [
            {},
            {
              "name": "cds-icon"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "action",
              "type": {
                "text": "'first' | 'prev' | 'next' | 'last'"
              },
              "description": "Sets the action from a predefined list of actions"
            },
            {
              "kind": "field",
              "name": "cdsIcon",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "cdsIconDefault",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "customContent",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "validateAriaLabel",
              "privacy": "private"
            }
          ],
          "superclass": {
            "name": "CdsBaseButton",
            "package": "@cds/core/internal"
          },
          "tagName": "cds-pagination-button",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CdsPaginationButton",
          "declaration": {
            "name": "CdsPaginationButton",
            "module": "pagination/pagination-button.element.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "pagination/pagination.element.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Web component pagination.\n\n```typescript\nimport '@cds/core/pagination/register.js';\n```\n\n```html\n<cds-pagination>\n  <cds-pagination-button action=\"first\" disabled></cds-pagination-button>\n  <cds-pagination-button action=\"prev\" disabled></cds-pagination-button>\n  <span aria-label=\"current page\">1 / 3</span>\n  <cds-pagination-button action=\"next\"></cds-pagination-button>\n  <cds-pagination-button action=\"last\"></cds-pagination-button>\n</cds-pagination>\n```",
          "name": "CdsPagination",
          "cssProperties": [
            {
              "name": "--color"
            },
            {
              "name": "--font-size"
            }
          ],
          "slots": [
            {},
            {
              "name": "cds-pagination-button"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "globalStyles",
              "type": {
                "text": "import(\"lit\").CSSResultGroup"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "numberInput",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "setupNumberInput",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "validateAriaLabel",
              "privacy": "private"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-pagination",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CdsPagination",
          "declaration": {
            "name": "CdsPagination",
            "module": "pagination/pagination.element.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "password/password.element.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Password\n\n```typescript\nimport '@cds/core/password/register.js';\n```\n\n```html\n<cds-password>\n  <label>Password</label>\n  <input type=\"password\" />\n  <cds-control-message>message text</cds-control-message>\n</cds-password>\n```",
          "name": "CdsPassword",
          "cssProperties": [
            {
              "name": "--background"
            },
            {
              "name": "--background-size"
            },
            {
              "name": "--border"
            },
            {
              "name": "--border-bottom"
            },
            {
              "name": "--outline"
            },
            {
              "name": "--padding"
            },
            {
              "name": "--font-size"
            },
            {
              "name": "--color"
            },
            {
              "name": "--line-height"
            },
            {
              "name": "--transition"
            }
          ],
          "slots": [
            {
              "description": "For projecting password input and label",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "showPassword",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "i18n",
              "type": {
                "text": "{\n        showButtonAriaLabel: string;\n        hideButtonAriaLabel: string;\n    }"
              }
            },
            {
              "kind": "field",
              "name": "ariaLabel",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "suffixDefaultTemplate",
              "type": {
                "text": "import(\"lit-html\").TemplateResult<1>"
              },
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "togglePasswordVisibility",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "superclass": {
            "name": "CdsControl",
            "package": "@cds/core/forms"
          },
          "tagName": "cds-password",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CdsPassword",
          "declaration": {
            "name": "CdsPassword",
            "module": "password/password.element.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "progress-circle/progress-circle.element.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Circular progress indicators provide a method to track how close long-running tasks are to\ncompletion. Circular progress offer a compact way to track progress in a variety of situations.\n\n```typescript\nimport '@cds/core/progress-circle/register.js';\n```\n\n```html\n<cds-progress-circle status=\"info\" value=\"25\"></cds-progress-circle>\n```",
          "name": "CdsProgressCircle",
          "cssProperties": [
            {
              "name": "--ring-color"
            },
            {
              "name": "--ring-opacity"
            },
            {
              "name": "--fill-color"
            },
            {
              "name": "--fill-speed"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "_size",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "status",
              "type": {
                "text": "neutral | info | success | warning | danger"
              },
              "description": "Sets the color of the badge"
            },
            {
              "kind": "field",
              "name": "inverse",
              "type": {
                "text": "boolean"
              },
              "description": "Inverts color of circular progress bar if `true`.\nUseful for displaying icons on a dark background."
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "number"
              },
              "description": "Represents the percent completed from 0 to 100.\n\nIf undefined, the progress-circle will be represented as an indeterminate\nprogress indicator – a.k.a a \"spinner\"."
            },
            {
              "kind": "field",
              "name": "line",
              "type": {
                "text": "number"
              },
              "description": "Represents the thickness of the stroke of the circular progress.\n\nIf undefined, it defaults to 3."
            },
            {
              "kind": "field",
              "name": "radius",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "circumference",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "progress",
              "type": {
                "text": "number"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "progressOffset",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "string | sm | md | lg | xl | xxl"
              },
              "description": "Apply numerical width-height or a t-shirt-sized CSS classname"
            },
            {
              "kind": "field",
              "name": "setAriaAttributes",
              "privacy": "private"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-progress-circle",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CdsProgressCircle",
          "declaration": {
            "name": "CdsProgressCircle",
            "module": "progress-circle/progress-circle.element.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "radio/radio-group.element.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Radio Group\n\n```typescript\nimport '@cds/core/radio/register.js';\n```\n\n```html\n<cds-radio-group>\n  <label>radio group</label>\n  <cds-radio>\n    <label>item 1</label>\n    <input type=\"radio\" />\n  </cds-radio>\n\n  <cds-radio>\n    <label>item 2</label>\n    <input type=\"radio\" />\n  </cds-radio>\n</cds-radio-group>\n```",
          "name": "CdsRadioGroup",
          "slots": [
            {
              "description": "For projecting cds-radio controls",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "controls",
              "type": {
                "text": "NodeListOf<CdsRadio>"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "radioName",
              "type": {
                "text": "string"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "associateRadioControls",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "syncRadioControls",
              "privacy": "private"
            }
          ],
          "superclass": {
            "name": "CdsInternalControlGroup",
            "package": "@cds/core/forms"
          },
          "tagName": "cds-radio-group",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CdsRadioGroup",
          "declaration": {
            "name": "CdsRadioGroup",
            "module": "radio/radio-group.element.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "radio/radio.element.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Radio\n\n```typescript\nimport '@cds/core/radio/register.js';\n```\n\n```html\n<cds-radio>\n  <label>Test</label>\n  <input type=\"radio\" />\n</cds-radio>\n```",
          "name": "CdsRadio",
          "cssProperties": [
            {
              "name": "--width"
            },
            {
              "name": "--height"
            },
            {
              "name": "--border"
            },
            {
              "name": "--fill-box-shadow"
            }
          ],
          "slots": [
            {
              "description": "For projecting radio input",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "associateNonGroupRadios",
              "privacy": "private",
              "description": "Native radio inputs have no concept of an un-checked event. This means for\nour radios to update/rerender we need to listen for the other radios in the\ngroup when the are checked. If the Radio is within a cds-control-group or\ncds-radio-group then the group handles this. Radios can be used outside of\ngroups in cases of using aria-labelledby like a selectable grid row/cell."
            }
          ],
          "superclass": {
            "name": "CdsInternalControlInline",
            "package": "@cds/core/forms"
          },
          "tagName": "cds-radio",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CdsRadio",
          "declaration": {
            "name": "CdsRadio",
            "module": "radio/radio.element.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "range/range.element.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Range\n\n```typescript\nimport '@cds/core/range/register.js';\n```\n\n```html\n<cds-range>\n  <label>range</label>\n  <input type=\"range\" />\n  <cds-control-message>message text</cds-control-message>\n</cds-range>\n```",
          "name": "CdsRange",
          "cssProperties": [
            {
              "name": "--background"
            },
            {
              "name": "--border-radius"
            },
            {
              "name": "--track-background"
            },
            {
              "name": "--track-fill-background"
            },
            {
              "name": "--track-height"
            },
            {
              "name": "--thumb-background"
            },
            {
              "name": "--thumb-width"
            },
            {
              "name": "--thumb-height"
            }
          ],
          "slots": [
            {
              "description": "For projecting range input",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "globalStyles",
              "type": {
                "text": "import(\"lit\").CSSResultGroup"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "inputTemplate",
              "type": {
                "text": "import(\"lit-html\").TemplateResult<1>"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "setTrackWidth",
              "privacy": "private"
            }
          ],
          "superclass": {
            "name": "CdsControl",
            "package": "@cds/core/forms"
          },
          "tagName": "cds-range",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CdsRange",
          "declaration": {
            "name": "CdsRange",
            "module": "range/range.element.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "search/search.element.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Search\n\n```typescript\nimport '@cds/core/search/register.js';\n```\n\n```html\n<cds-search>\n  <label>Search</label>\n  <input type=\"search\" />\n  <cds-control-message>message text</cds-control-message>\n</cds-search>\n```",
          "name": "CdsSearch",
          "cssProperties": [
            {
              "name": "--background"
            },
            {
              "name": "--background-size"
            },
            {
              "name": "--border"
            },
            {
              "name": "--border-bottom"
            },
            {
              "name": "--outline"
            },
            {
              "name": "--padding"
            },
            {
              "name": "--font-size"
            },
            {
              "name": "--color"
            },
            {
              "name": "--line-height"
            },
            {
              "name": "--transition"
            }
          ],
          "slots": [
            {
              "description": "For projecting search input and label",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "globalStyles",
              "type": {
                "text": "import(\"lit\").CSSResultGroup"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "prefixDefaultTemplate",
              "type": {
                "text": "import(\"lit-html\").TemplateResult<1>"
              },
              "privacy": "protected"
            }
          ],
          "superclass": {
            "name": "CdsControl",
            "package": "@cds/core/forms"
          },
          "tagName": "cds-search",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CdsSearch",
          "declaration": {
            "name": "CdsSearch",
            "module": "search/search.element.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "select/select.element.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Select\n\n```typescript\nimport '@cds/core/select';\n```\n\n```html\n<cds-select>\n  <label>Test</label>\n  <select>\n   <option>Option One</option>\n   <option>Option Two</option>\n   <option>Option Three</option>\n  </select>\n</cds-select>\n```",
          "name": "CdsSelect",
          "cssProperties": [
            {
              "name": "--background"
            },
            {
              "name": "--background-size"
            },
            {
              "name": "--border"
            },
            {
              "name": "--border-bottom"
            },
            {
              "name": "--outline"
            },
            {
              "name": "--padding"
            },
            {
              "name": "--font-size"
            },
            {
              "name": "--color"
            },
            {
              "name": "--line-height"
            },
            {
              "name": "--transition"
            }
          ],
          "slots": [
            {
              "description": "For projecting select and label",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "suffixDefaultTemplate",
              "type": {
                "text": "import(\"lit-html\").TemplateResult<1>"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "globalStyles",
              "type": {
                "text": "import(\"lit\").CSSResultGroup"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "multiple",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected"
            }
          ],
          "superclass": {
            "name": "CdsControl",
            "package": "@cds/core/forms"
          },
          "tagName": "cds-select",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CdsSelect",
          "declaration": {
            "name": "CdsSelect",
            "module": "select/select.element.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "tag/tag.element.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Tags show concise metadata in a compact format.\nTags are visually styled to differentiate them from buttons.\n\n```typescript\nimport '@cds/core/tag/register.js';\n```\n\n```html\n<cds-tag status=\"info\">Info</cds-tag>\n```",
          "name": "CdsTag",
          "cssProperties": [
            {
              "name": "--background"
            },
            {
              "name": "--border-color"
            },
            {
              "name": "--border-radius"
            },
            {
              "name": "--border-width"
            },
            {
              "name": "--color"
            },
            {
              "name": "--font-size"
            },
            {
              "name": "--padding"
            },
            {
              "name": "--size"
            }
          ],
          "slots": [
            {
              "description": "Content slot for inside the tag",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "status",
              "type": {
                "text": "neutral | info | success | warning | danger"
              },
              "description": "Sets the color of the tag (and badge if present) from the following predefined list of statuses:"
            },
            {
              "kind": "field",
              "name": "color",
              "type": {
                "text": "'gray' | 'purple' | 'blue' | 'orange' | 'light-blue'"
              },
              "description": "Sets the color of the tag (and badge if present) from a predefined list of choices"
            },
            {
              "kind": "field",
              "name": "closable",
              "type": {
                "text": "boolean"
              },
              "description": "If present, shows a close icon to one side of the tag.\nNote that applications must wire up the action to remove the tag on click and also\nthat you cannot have a clickable AND closable tag. The closable attribute-property\nshows the close icon. What happens when the tag is clicked is for application developers\nto decide.\nIf closable is present, the tag will be considered \"clickable\"."
            },
            {
              "kind": "field",
              "name": "groupLabelId",
              "privacy": "private"
            }
          ],
          "superclass": {
            "name": "CdsBaseButton",
            "package": "@cds/core/internal"
          },
          "tagName": "cds-tag",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CdsTag",
          "declaration": {
            "name": "CdsTag",
            "module": "tag/tag.element.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "test-dropdown/test-dropdown.element.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Dropdown, example test component. Do not use in production.\n\n```typescript\nimport '@cds/core/test-dropdown';\n```\n\n```html\n<cds-test-dropdown title=\"click me!\">\n  Hello World\n</cds-test-dropdown>\n```",
          "name": "CdsTestDropdown",
          "cssProperties": [
            {
              "name": "--border-color"
            },
            {
              "name": "--background-color"
            },
            {
              "name": "--text-color"
            }
          ],
          "slots": [
            {
              "description": "Content slot for dropdown content",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "openChange",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_open",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "description": "Set open to open or close the dropdown"
            },
            {
              "kind": "field",
              "name": "title",
              "type": {
                "text": "string"
              },
              "description": "Set the dropdown button text"
            },
            {
              "kind": "method",
              "name": "toggle",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Toggle the current open state of the dropdown"
            }
          ],
          "events": [
            {
              "type": {
                "text": "boolean"
              },
              "description": "notify open state change of dropdown",
              "name": "openChange"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CdsTestDropdown",
          "declaration": {
            "name": "CdsTestDropdown",
            "module": "test-dropdown/test-dropdown.element.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "textarea/textarea.element.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Form\n\n```typescript\nimport '@cds/core/textarea/register.js';\n```\n\n```html\n<cds-textarea>\n  <label>textarea</label>\n  <textarea></textarea>\n  <cds-control-message>message text</cds-control-message>\n</cds-textarea>\n```",
          "name": "CdsTextarea",
          "cssProperties": [
            {
              "name": "--background"
            },
            {
              "name": "--border"
            },
            {
              "name": "--padding"
            },
            {
              "name": "--font-size"
            },
            {
              "name": "--color"
            },
            {
              "name": "--border-radius"
            }
          ],
          "slots": [
            {
              "description": "For projecting cds-inputs",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "supportsPrefixSuffixActions",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected"
            }
          ],
          "superclass": {
            "name": "CdsControl",
            "package": "@cds/core/forms"
          },
          "tagName": "cds-textarea",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CdsTextarea",
          "declaration": {
            "name": "CdsTextarea",
            "module": "textarea/textarea.element.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "time/time.element.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Time Input\n\n```typescript\nimport '@cds/core/time/register.js';\n```\n\n```html\n<cds-time>\n  <label>time</label>\n  <input type=\"time\" />\n  <cds-control-message>message text</cds-control-message>\n</cds-time>\n```",
          "name": "CdsTime",
          "cssProperties": [
            {
              "name": "--background"
            },
            {
              "name": "--background-size"
            },
            {
              "name": "--border"
            },
            {
              "name": "--border-bottom"
            },
            {
              "name": "--outline"
            },
            {
              "name": "--padding"
            },
            {
              "name": "--font-size"
            },
            {
              "name": "--color"
            },
            {
              "name": "--line-height"
            },
            {
              "name": "--transition"
            }
          ],
          "slots": [
            {
              "description": "For projecting time input and label",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "globalStyles",
              "type": {
                "text": "import(\"lit\").CSSResultGroup"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "suffixDefaultTemplate",
              "type": {
                "text": "import(\"lit-html\").TemplateResult<1>"
              },
              "privacy": "protected"
            }
          ],
          "superclass": {
            "name": "CdsControl",
            "package": "@cds/core/forms"
          },
          "tagName": "cds-time",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CdsTime",
          "declaration": {
            "name": "CdsTime",
            "module": "time/time.element.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "toggle/toggle-group.element.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Toggle Group\n\n```typescript\nimport '@cds/core/toggle/register.js';\n```\n\n```html\n<cds-toggle-group>\n  <label>Select an item</label>\n  <cds-toggle>\n    <label>toggle</label>\n    <input type=\"checkbox\" />\n  </cds-toggle>\n\n  <cds-toggle>\n    <label>toggle</label>\n    <input type=\"checkbox\" />\n  </cds-toggle>\n</cds-toggle-group>\n```",
          "name": "CdsToggleGroup",
          "slots": [
            {
              "description": "For projecting toggle controls",
              "name": ""
            }
          ],
          "superclass": {
            "name": "CdsInternalControlGroup",
            "package": "@cds/core/forms"
          },
          "tagName": "cds-toggle-group",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CdsToggleGroup",
          "declaration": {
            "name": "CdsToggleGroup",
            "module": "toggle/toggle-group.element.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "toggle/toggle.element.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Toggle\n\n```typescript\nimport '@cds/core/toggle/register.js';\n```\n\n```html\n<cds-toggle>\n  <label>Toggle</label>\n  <input type=\"checkbox\" />\n</cds-toggle>\n```",
          "name": "CdsToggle",
          "cssProperties": [
            {
              "name": "--background"
            },
            {
              "name": "--border"
            },
            {
              "name": "--border-radius"
            },
            {
              "name": "--height"
            },
            {
              "name": "--width"
            },
            {
              "name": "--anchor-background"
            },
            {
              "name": "--anchor-border-radius"
            },
            {
              "name": "--anchor-width"
            },
            {
              "name": "--anchor-height"
            },
            {
              "name": "--toggle-speed"
            }
          ],
          "slots": [
            {
              "description": "For projecting checkbox",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "cdsMotion",
              "type": {
                "text": "string"
              }
            }
          ],
          "superclass": {
            "name": "CdsInternalControlInline",
            "package": "@cds/core/forms"
          },
          "tagName": "cds-toggle",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CdsToggle",
          "declaration": {
            "name": "CdsToggle",
            "module": "toggle/toggle.element.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "tree-view/tree-item.element.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Tree view is a hierarchical component that gives users access to a hierarchical set of objects displayed in a the parent-child relationship.\n\n```typescript\nimport '@cds/core/tree-view/register.js';\n```\n\n```html\n <cds-tree>\n   <cds-tree-item>1</cds-tree-item>\n   <cds-tree-item>2</cds-tree-item>\n   <cds-tree-item>3</cds-tree-item>\n </cds-tree>\n```",
          "name": "CdsTreeItem",
          "cssProperties": [
            {
              "name": "--animation-duration"
            },
            {
              "name": "--animation-easing"
            },
            {
              "name": "--background"
            },
            {
              "name": "--color"
            },
            {
              "name": "--focus-width"
            },
            {
              "name": "--font-size"
            },
            {
              "name": "--font-weight"
            }
          ],
          "slots": [
            {
              "description": "Content slot for inside the tree item",
              "name": ""
            },
            {
              "name": "expand-collapse-icon"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "i18n",
              "type": {
                "text": "{\n        loading: string;\n    }"
              }
            },
            {
              "kind": "field",
              "name": "role",
              "type": {
                "text": "string"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "cdsMotion",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "cdsMotionChange",
              "type": {
                "text": "EventEmitter<string>"
              }
            },
            {
              "kind": "field",
              "name": "ariaDisabled",
              "type": {
                "text": "AriaBooleanAttributeValues | undefined"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "ariaExpanded",
              "type": {
                "text": "AriaBooleanAttributeValues | undefined"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "ariaSelected",
              "type": {
                "text": "AriaBooleanAttributeValues | undefined"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "multiSelect",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "expanded",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "expandable",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "indeterminate",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "loading",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "selected",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "treeItemChildren",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "anchorLink",
              "type": {
                "text": "HTMLAnchorElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "expandedChange",
              "type": {
                "text": "EventEmitter<boolean>"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "selectedChange",
              "type": {
                "text": "EventEmitter<boolean>"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "toggleExpanded",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "toggleSelected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "onSlotChange",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "treeItemLeftHandSideTemplate",
              "type": {
                "text": "import(\"lit-html\").TemplateResult<1>"
              },
              "description": "This container contains one of the following depending on the state of the tree item:\n  - caret if the tree item is expandable\n  - progress circle if the tree item is loading its children (via an async call, etc)\n  - nothing if the tree item is an end node\n\nThe container with a fixed width ensures the same alignment whether or not it contains\na child elemeent to render.",
              "privacy": "private"
            }
          ],
          "events": [
            {
              "description": "notify when the user has clicked the expand / collapse button",
              "name": "expandedChange"
            },
            {
              "description": "notify when the user has clicked the tree item",
              "name": "selectedChange"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-tree-item",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CdsTreeItem",
          "declaration": {
            "name": "CdsTreeItem",
            "module": "tree-view/tree-item.element.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "tree-view/tree.element.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Tree view is a hierarchical component that gives users access to a hierarchical set of objects displayed in a the parent-child relationship.\n\n```typescript\nimport '@cds/core/tree-view/register.js';\n```\n\n```html\n <cds-tree>\n   <cds-tree-item>1</cds-tree-item>\n   <cds-tree-item>2</cds-tree-item>\n   <cds-tree-item>3</cds-tree-item>\n </cds-tree>\n```",
          "name": "CdsTree",
          "slots": [
            {
              "description": "Content slot for inside the tree",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "role",
              "type": {
                "text": "string"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "multiSelect",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "ariaActiveDescendant",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "ariaMultiSelectable",
              "type": {
                "text": "AriaBooleanAttributeValues"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "firstChildItem",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "childrenItems",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "clickHandler",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "currentActiveItem",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "initAriaActiveDescendant",
              "privacy": "private",
              "description": "The reason why we wait till onfocus to initialize aria-activedescendant is to\naccount for lazy loaded children."
            },
            {
              "kind": "field",
              "name": "setAriaActiveDescendant",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "visibleChildren",
              "type": {
                "text": "CdsTreeItem[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "keyboardNavigationHandler",
              "privacy": "private"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-tree",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CdsTree",
          "declaration": {
            "name": "CdsTree",
            "module": "tree-view/tree.element.d.ts"
          }
        }
      ]
    }
  ]
}
